{"version":3,"file":"mod.js","sources":["../node_modules/@stdlib/utils-define-property/lib/define_property.js","../node_modules/@stdlib/utils-define-property/lib/builtin.js","../node_modules/@stdlib/utils-define-property/node_modules/@stdlib/string-base-format-interpolate/lib/is_number.js","../node_modules/@stdlib/utils-define-property/node_modules/@stdlib/string-base-format-interpolate/lib/zero_pad.js","../node_modules/@stdlib/utils-define-property/node_modules/@stdlib/string-base-format-interpolate/lib/format_integer.js","../node_modules/@stdlib/utils-define-property/node_modules/@stdlib/string-base-format-interpolate/lib/is_string.js","../node_modules/@stdlib/utils-define-property/node_modules/@stdlib/string-base-format-interpolate/lib/format_double.js","../node_modules/@stdlib/utils-define-property/node_modules/@stdlib/string-base-format-interpolate/lib/space_pad.js","../node_modules/@stdlib/utils-define-property/node_modules/@stdlib/string-base-format-interpolate/lib/main.js","../node_modules/@stdlib/utils-define-property/node_modules/@stdlib/string-base-format-tokenize/lib/main.js","../node_modules/@stdlib/utils-define-property/node_modules/@stdlib/string-format/lib/is_string.js","../node_modules/@stdlib/utils-define-property/node_modules/@stdlib/string-format/lib/main.js","../node_modules/@stdlib/utils-define-property/lib/polyfill.js","../node_modules/@stdlib/utils-define-property/lib/index.js","../node_modules/@stdlib/utils-define-property/lib/has_define_property_support.js","../node_modules/@stdlib/utils-define-read-only-property/lib/main.js","../node_modules/@stdlib/math-base-special-sqrt/lib/main.js","../node_modules/@stdlib/math-base-special-floor/lib/main.js","../node_modules/@stdlib/math-base-assert-is-prime/lib/main.js","../node_modules/@stdlib/constants-float64-max-safe-integer/lib/index.js","../node_modules/@stdlib/math-base-assert-is-integer/lib/main.js","../node_modules/@stdlib/constants-float64-pinf/lib/index.js","../node_modules/@stdlib/math-base-assert-is-nan/lib/main.js","../node_modules/@stdlib/number-ctor/lib/main.js","../node_modules/@stdlib/constants-float64-ninf/lib/index.js","../node_modules/@stdlib/math-base-special-gcd/lib/main.js","../node_modules/@stdlib/constants-int32-max/lib/index.js","../node_modules/@stdlib/math-base-special-gcd/lib/bitwise_binary_gcd.js","../node_modules/@stdlib/math-base-special-gcd/lib/binary_gcd.js","../node_modules/@stdlib/math-base-assert-is-even/lib/main.js","../node_modules/@stdlib/assert-has-tostringtag-support/lib/main.js","../node_modules/@stdlib/assert-has-symbol-support/lib/main.js","../node_modules/@stdlib/utils-native-class/lib/tostring.js","../node_modules/@stdlib/utils-native-class/node_modules/@stdlib/assert-has-own-property/lib/main.js","../node_modules/@stdlib/utils-native-class/node_modules/@stdlib/symbol-ctor/lib/main.js","../node_modules/@stdlib/utils-native-class/lib/index.js","../node_modules/@stdlib/utils-native-class/lib/tostringtag.js","../node_modules/@stdlib/utils-native-class/lib/polyfill.js","../node_modules/@stdlib/utils-native-class/lib/main.js","../node_modules/@stdlib/assert-is-float32array/lib/main.js","../node_modules/@stdlib/assert-has-float32array-support/lib/float32array.js","../node_modules/@stdlib/array-float32/lib/main.js","../node_modules/@stdlib/array-float32/lib/index.js","../node_modules/@stdlib/assert-has-float32array-support/lib/main.js","../node_modules/@stdlib/array-float32/lib/polyfill.js","../node_modules/@stdlib/assert-is-uint32array/lib/main.js","../node_modules/@stdlib/constants-uint32-max/lib/index.js","../node_modules/@stdlib/assert-has-uint32array-support/lib/uint32array.js","../node_modules/@stdlib/array-uint32/lib/main.js","../node_modules/@stdlib/array-uint32/lib/index.js","../node_modules/@stdlib/assert-has-uint32array-support/lib/main.js","../node_modules/@stdlib/array-uint32/lib/polyfill.js","../node_modules/@stdlib/constants-float32-pinf/lib/index.js","../node_modules/@stdlib/constants-float32-ninf/lib/index.js","../node_modules/@stdlib/math-base-assert-is-infinite/lib/main.js","../node_modules/@stdlib/math-base-assert-is-infinitef/lib/main.js","../node_modules/@stdlib/math-base-assert-is-nanf/lib/main.js","../node_modules/@stdlib/math-base-assert-is-negative-integer/lib/main.js","../node_modules/@stdlib/math-base-assert-is-negative-zero/lib/main.js","../node_modules/@stdlib/math-base-assert-is-negative-zerof/lib/main.js","../node_modules/@stdlib/math-base-assert-is-nonnegative-integer/lib/main.js","../node_modules/@stdlib/math-base-assert-is-odd/lib/main.js","../node_modules/@stdlib/math-base-assert-is-positive-zero/lib/main.js","../node_modules/@stdlib/math-base-assert-is-probability/lib/main.js","../node_modules/@stdlib/math-base-assert/lib/index.js","../node_modules/@stdlib/math-base-assert-int32-is-even/lib/main.js","../node_modules/@stdlib/math-base-assert-int32-is-odd/lib/main.js","../node_modules/@stdlib/math-base-assert-is-composite/lib/main.js","../node_modules/@stdlib/math-base-assert-is-coprime/lib/main.js","../node_modules/@stdlib/math-base-assert-is-finite/lib/main.js","../node_modules/@stdlib/math-base-assert-is-finitef/lib/main.js","../node_modules/@stdlib/math-base-assert-is-negative-finite/lib/main.js","../node_modules/@stdlib/math-base-assert-is-nonnegative-finite/lib/main.js","../node_modules/@stdlib/math-base-assert-is-nonpositive-finite/lib/main.js","../node_modules/@stdlib/math-base-assert-is-nonpositive-integer/lib/main.js","../node_modules/@stdlib/math-base-assert-is-positive-finite/lib/main.js","../node_modules/@stdlib/math-base-assert-is-positive-integer/lib/main.js","../node_modules/@stdlib/math-base-assert-is-positive-zerof/lib/main.js","../node_modules/@stdlib/math-base-assert-is-safe-integer/lib/main.js","../node_modules/@stdlib/constants-float64-min-safe-integer/lib/index.js","../node_modules/@stdlib/math-base-assert-uint32-is-pow2/lib/main.js","../node_modules/@stdlib/number-float64-base-to-float32/lib/main.js","../node_modules/@stdlib/number-float64-base-to-float32/lib/polyfill.js","../node_modules/@stdlib/number-float64-base-to-float32/lib/index.js","../node_modules/@stdlib/utils-define-nonenumerable-read-only-property/lib/main.js","../node_modules/@stdlib/assert-is-number/lib/primitive.js","../node_modules/@stdlib/assert-is-number/lib/tostring.js","../node_modules/@stdlib/assert-is-number/lib/object.js","../node_modules/@stdlib/assert-is-number/lib/try2serialize.js","../node_modules/@stdlib/assert-is-number/lib/main.js","../node_modules/@stdlib/complex-float64/node_modules/@stdlib/string-base-format-interpolate/lib/is_number.js","../node_modules/@stdlib/complex-float64/node_modules/@stdlib/string-base-format-interpolate/lib/zero_pad.js","../node_modules/@stdlib/assert-is-number/lib/index.js","../node_modules/@stdlib/complex-float64/node_modules/@stdlib/string-base-format-interpolate/lib/format_integer.js","../node_modules/@stdlib/complex-float64/node_modules/@stdlib/string-base-format-interpolate/lib/is_string.js","../node_modules/@stdlib/complex-float64/node_modules/@stdlib/string-base-format-interpolate/lib/format_double.js","../node_modules/@stdlib/complex-float64/node_modules/@stdlib/string-base-format-interpolate/lib/space_pad.js","../node_modules/@stdlib/complex-float64/node_modules/@stdlib/string-base-format-interpolate/lib/main.js","../node_modules/@stdlib/complex-float64/node_modules/@stdlib/string-base-format-tokenize/lib/main.js","../node_modules/@stdlib/complex-float64/node_modules/@stdlib/string-format/lib/is_string.js","../node_modules/@stdlib/complex-float64/node_modules/@stdlib/string-format/lib/main.js","../node_modules/@stdlib/complex-float64/lib/main.js","../node_modules/@stdlib/complex-real/lib/main.js","../node_modules/@stdlib/complex-imag/lib/main.js","../node_modules/@stdlib/complex-float32/node_modules/@stdlib/string-base-format-interpolate/lib/is_number.js","../node_modules/@stdlib/complex-float32/node_modules/@stdlib/string-base-format-interpolate/lib/zero_pad.js","../node_modules/@stdlib/complex-float64/lib/tostring.js","../node_modules/@stdlib/complex-float64/lib/tojson.js","../node_modules/@stdlib/complex-float32/node_modules/@stdlib/string-base-format-interpolate/lib/format_integer.js","../node_modules/@stdlib/complex-float32/node_modules/@stdlib/string-base-format-interpolate/lib/is_string.js","../node_modules/@stdlib/complex-float32/node_modules/@stdlib/string-base-format-interpolate/lib/format_double.js","../node_modules/@stdlib/complex-float32/node_modules/@stdlib/string-base-format-interpolate/lib/space_pad.js","../node_modules/@stdlib/complex-float32/node_modules/@stdlib/string-base-format-interpolate/lib/main.js","../node_modules/@stdlib/complex-float32/node_modules/@stdlib/string-base-format-tokenize/lib/main.js","../node_modules/@stdlib/complex-float32/node_modules/@stdlib/string-format/lib/is_string.js","../node_modules/@stdlib/complex-float32/node_modules/@stdlib/string-format/lib/main.js","../node_modules/@stdlib/complex-float32/lib/main.js","../node_modules/@stdlib/complex-realf/lib/main.js","../node_modules/@stdlib/complex-imagf/lib/main.js","../node_modules/@stdlib/math-base-special-abs/lib/main.js","../node_modules/@stdlib/math-base-special-max/lib/main.js","../node_modules/@stdlib/complex-float32/lib/tostring.js","../node_modules/@stdlib/complex-float32/lib/tojson.js","../node_modules/@stdlib/constants-float64-max/lib/index.js","../node_modules/@stdlib/constants-float64-eps/lib/index.js","../node_modules/@stdlib/math-base-ops-cdiv/lib/internal_compreal.js","../node_modules/@stdlib/math-base-ops-cdiv/lib/robust_internal.js","../node_modules/@stdlib/math-base-ops-cdiv/lib/main.js","../node_modules/@stdlib/math-base-ops-imul/lib/main.js","../node_modules/@stdlib/math-base-ops-imul/lib/index.js","../node_modules/@stdlib/math-base-ops-imul/lib/polyfill.js","../node_modules/@stdlib/math-base-ops-imuldw/lib/assign.js","../node_modules/@stdlib/math-base-ops-imuldw/lib/main.js","../node_modules/@stdlib/math-base-ops-imuldw/lib/index.js","../node_modules/@stdlib/math-base-ops-umuldw/lib/assign.js","../node_modules/@stdlib/math-base-ops-umuldw/lib/main.js","../node_modules/@stdlib/math-base-ops-umuldw/lib/index.js","../node_modules/@stdlib/math-base-ops/lib/index.js","../node_modules/@stdlib/math-base-ops-add/lib/main.js","../node_modules/@stdlib/math-base-ops-add3/lib/main.js","../node_modules/@stdlib/math-base-ops-add4/lib/main.js","../node_modules/@stdlib/math-base-ops-add5/lib/main.js","../node_modules/@stdlib/math-base-ops-addf/lib/main.js","../node_modules/@stdlib/math-base-ops-cadd/lib/main.js","../node_modules/@stdlib/math-base-ops-caddf/lib/main.js","../node_modules/@stdlib/math-base-ops-cmul/lib/main.js","../node_modules/@stdlib/math-base-ops-cmulf/lib/main.js","../node_modules/@stdlib/math-base-ops-cneg/lib/main.js","../node_modules/@stdlib/math-base-ops-cnegf/lib/main.js","../node_modules/@stdlib/math-base-ops-csub/lib/main.js","../node_modules/@stdlib/math-base-ops-csubf/lib/main.js","../node_modules/@stdlib/math-base-ops-div/lib/main.js","../node_modules/@stdlib/math-base-ops-divf/lib/main.js","../node_modules/@stdlib/math-base-ops-mul/lib/main.js","../node_modules/@stdlib/math-base-ops-mulf/lib/main.js","../node_modules/@stdlib/math-base-ops-sub/lib/main.js","../node_modules/@stdlib/math-base-ops-subf/lib/main.js","../node_modules/@stdlib/math-base-ops-umul/lib/main.js","../node_modules/@stdlib/constants-float64-fourth-pi/lib/index.js","../node_modules/@stdlib/math-base-special-asin/lib/main.js","../node_modules/@stdlib/math-base-special-asin/lib/rational_rs.js","../node_modules/@stdlib/math-base-special-asin/lib/rational_pq.js","../node_modules/@stdlib/math-base-special-acos/lib/main.js","../node_modules/@stdlib/assert-is-float64array/lib/main.js","../node_modules/@stdlib/assert-has-float64array-support/lib/float64array.js","../node_modules/@stdlib/array-float64/lib/main.js","../node_modules/@stdlib/array-float64/lib/index.js","../node_modules/@stdlib/assert-has-float64array-support/lib/main.js","../node_modules/@stdlib/array-float64/lib/polyfill.js","../node_modules/@stdlib/assert-is-little-endian/node_modules/@stdlib/assert-is-uint8array/lib/main.js","../node_modules/@stdlib/assert-is-little-endian/node_modules/@stdlib/constants-uint8-max/lib/index.js","../node_modules/@stdlib/assert-is-little-endian/node_modules/@stdlib/assert-has-uint8array-support/lib/uint8array.js","../node_modules/@stdlib/assert-is-little-endian/node_modules/@stdlib/array-uint8/lib/main.js","../node_modules/@stdlib/assert-is-little-endian/node_modules/@stdlib/array-uint8/lib/index.js","../node_modules/@stdlib/assert-is-little-endian/node_modules/@stdlib/assert-has-uint8array-support/lib/main.js","../node_modules/@stdlib/assert-is-little-endian/node_modules/@stdlib/array-uint8/lib/polyfill.js","../node_modules/@stdlib/assert-is-little-endian/node_modules/@stdlib/assert-is-uint16array/lib/main.js","../node_modules/@stdlib/assert-is-little-endian/node_modules/@stdlib/constants-uint16-max/lib/index.js","../node_modules/@stdlib/assert-is-little-endian/node_modules/@stdlib/assert-has-uint16array-support/lib/uint16array.js","../node_modules/@stdlib/assert-is-little-endian/node_modules/@stdlib/array-uint16/lib/main.js","../node_modules/@stdlib/assert-is-little-endian/node_modules/@stdlib/array-uint16/lib/index.js","../node_modules/@stdlib/assert-is-little-endian/node_modules/@stdlib/assert-has-uint16array-support/lib/main.js","../node_modules/@stdlib/assert-is-little-endian/node_modules/@stdlib/array-uint16/lib/polyfill.js","../node_modules/@stdlib/assert-is-little-endian/lib/main.js","../node_modules/@stdlib/assert-is-little-endian/lib/ctors.js","../node_modules/@stdlib/number-float64-base-get-high-word/lib/high.js","../node_modules/@stdlib/number-float64-base-get-high-word/lib/main.js","../node_modules/@stdlib/number-float64-base-set-high-word/lib/high.js","../node_modules/@stdlib/number-float64-base-set-high-word/lib/main.js","../node_modules/@stdlib/math-base-special-log1p/lib/main.js","../node_modules/@stdlib/constants-float64-exponent-bias/lib/index.js","../node_modules/@stdlib/math-base-special-log1p/lib/polyval_lp.js","../node_modules/@stdlib/constants-float64-ln-two/lib/index.js","../node_modules/@stdlib/math-base-special-ln/lib/main.js","../node_modules/@stdlib/math-base-special-ln/lib/polyval_p.js","../node_modules/@stdlib/math-base-special-ln/lib/polyval_q.js","../node_modules/@stdlib/math-base-special-acosh/lib/main.js","../node_modules/@stdlib/constants-float64-half-pi/lib/index.js","../node_modules/@stdlib/math-base-special-atan/lib/main.js","../node_modules/@stdlib/math-base-special-atan/lib/polyval_p.js","../node_modules/@stdlib/math-base-special-atan/lib/polyval_q.js","../node_modules/@stdlib/math-base-special-atanh/lib/main.js","../node_modules/@stdlib/math-base-special-asinh/lib/main.js","../node_modules/@stdlib/constants-float64-high-word-sign-mask/lib/index.js","../node_modules/@stdlib/number-float64-base-to-words/lib/indices.js","../node_modules/@stdlib/number-float64-base-from-words/lib/indices.js","../node_modules/@stdlib/number-float64-base-to-words/lib/assign.js","../node_modules/@stdlib/number-float64-base-to-words/lib/main.js","../node_modules/@stdlib/number-float64-base-to-words/lib/index.js","../node_modules/@stdlib/number-float64-base-from-words/lib/main.js","../node_modules/@stdlib/math-base-special-copysign/lib/main.js","../node_modules/@stdlib/constants-float64-high-word-abs-mask/lib/index.js","../node_modules/@stdlib/constants-float64-pi/lib/index.js","../node_modules/@stdlib/math-base-special-atan2/lib/main.js","../node_modules/@stdlib/number-float64-base-signbit/lib/main.js","../node_modules/@stdlib/math-base-special-bernoulli/lib/main.js","../node_modules/@stdlib/constants-float64-high-word-exponent-mask/lib/index.js","../node_modules/@stdlib/number-float64-base-get-low-word/lib/low.js","../node_modules/@stdlib/number-float64-base-get-low-word/lib/main.js","../node_modules/@stdlib/number-float64-base-normalize/lib/assign.js","../node_modules/@stdlib/constants-float64-smallest-normal/lib/index.js","../node_modules/@stdlib/number-float64-base-exponent/lib/main.js","../node_modules/@stdlib/number-float64-base-normalize/lib/index.js","../node_modules/@stdlib/number-float64-base-normalize/lib/main.js","../node_modules/@stdlib/math-base-special-ldexp/lib/main.js","../node_modules/@stdlib/constants-float64-min-base2-exponent-subnormal/lib/index.js","../node_modules/@stdlib/constants-float64-max-base2-exponent/lib/index.js","../node_modules/@stdlib/constants-float64-max-base2-exponent-subnormal/lib/index.js","../node_modules/@stdlib/array-base-zeros/lib/main.js","../node_modules/@stdlib/array-base-filled/lib/main.js","../node_modules/@stdlib/math-base-special-rempio2/lib/kernel_rempio2.js","../node_modules/@stdlib/math-base-special-round/lib/main.js","../node_modules/@stdlib/math-base-special-rempio2/lib/rempio2_medium.js","../node_modules/@stdlib/math-base-special-rempio2/lib/main.js","../node_modules/@stdlib/constants-float64-high-word-significand-mask/lib/index.js","../node_modules/@stdlib/math-base-special-sincos/lib/kernel_sincos.js","../node_modules/@stdlib/math-base-special-sincos/lib/assign.js","../node_modules/@stdlib/math-base-special-sincos/lib/main.js","../node_modules/@stdlib/math-base-special-sincos/lib/index.js","../node_modules/@stdlib/math-base-special-besselj0/lib/main.js","../node_modules/@stdlib/math-base-special-besselj0/lib/rational_p1q1.js","../node_modules/@stdlib/math-base-special-besselj0/lib/rational_p2q2.js","../node_modules/@stdlib/math-base-special-besselj0/lib/rational_pcqc.js","../node_modules/@stdlib/math-base-special-besselj0/lib/rational_psqs.js","../node_modules/@stdlib/constants-float64-sqrt-pi/lib/index.js","../node_modules/@stdlib/math-base-special-besselj1/lib/main.js","../node_modules/@stdlib/math-base-special-besselj1/lib/rational_p1q1.js","../node_modules/@stdlib/math-base-special-besselj1/lib/rational_p2q2.js","../node_modules/@stdlib/math-base-special-besselj1/lib/rational_pcqc.js","../node_modules/@stdlib/math-base-special-besselj1/lib/rational_psqs.js","../node_modules/@stdlib/math-base-special-bessely0/lib/main.js","../node_modules/@stdlib/math-base-special-bessely1/lib/main.js","../node_modules/@stdlib/math-base-special-ceil/lib/main.js","../node_modules/@stdlib/math-base-special-trunc/lib/main.js","../node_modules/@stdlib/math-base-special-exp/lib/main.js","../node_modules/@stdlib/math-base-special-exp/lib/expmulti.js","../node_modules/@stdlib/math-base-special-exp/lib/polyval_p.js","../node_modules/@stdlib/number-float64-base-set-low-word/lib/low.js","../node_modules/@stdlib/number-float64-base-set-low-word/lib/main.js","../node_modules/@stdlib/number-uint32-base-to-int32/lib/main.js","../node_modules/@stdlib/math-base-special-pow/lib/log2ax.js","../node_modules/@stdlib/math-base-special-pow/lib/main.js","../node_modules/@stdlib/math-base-special-pow/lib/y_is_infinite.js","../node_modules/@stdlib/math-base-special-pow/lib/x_is_zero.js","../node_modules/@stdlib/math-base-special-pow/lib/y_is_huge.js","../node_modules/@stdlib/math-base-special-pow/lib/logx.js","../node_modules/@stdlib/math-base-special-pow/lib/polyval_w.js","../node_modules/@stdlib/math-base-special-pow/lib/polyval_l.js","../node_modules/@stdlib/math-base-special-pow/lib/pow2.js","../node_modules/@stdlib/math-base-special-pow/lib/polyval_p.js","../node_modules/@stdlib/constants-float64-e/lib/index.js","../node_modules/@stdlib/math-base-special-beta/lib/lanczos_sum_expg_scaled.js","../node_modules/@stdlib/math-base-special-beta/lib/main.js","../node_modules/@stdlib/math-base-special-expm1/lib/main.js","../node_modules/@stdlib/constants-float64-half-ln-two/lib/index.js","../node_modules/@stdlib/math-base-special-expm1/lib/polyval_q.js","../node_modules/@stdlib/math-base-special-min/lib/main.js","../node_modules/@stdlib/math-base-special-kernel-cos/lib/main.js","../node_modules/@stdlib/math-base-special-kernel-cos/lib/polyval_c13.js","../node_modules/@stdlib/math-base-special-kernel-cos/lib/polyval_c46.js","../node_modules/@stdlib/math-base-special-kernel-sin/lib/main.js","../node_modules/@stdlib/math-base-special-sin/lib/main.js","../node_modules/@stdlib/math-base-special-gamma/lib/stirling_approximation.js","../node_modules/@stdlib/math-base-special-gamma/lib/polyval_s.js","../node_modules/@stdlib/constants-float64-sqrt-two-pi/lib/index.js","../node_modules/@stdlib/constants-float64-eulergamma/lib/index.js","../node_modules/@stdlib/math-base-special-gamma/lib/small_approximation.js","../node_modules/@stdlib/math-base-special-gamma/lib/main.js","../node_modules/@stdlib/math-base-special-gamma/lib/rational_pq.js","../node_modules/@stdlib/math-base-special-factorial/lib/main.js","../node_modules/@stdlib/math-base-special-gamma-lanczos-sum/lib/rational_pq.js","../node_modules/@stdlib/math-base-special-gamma-delta-ratio/lib/gamma_delta_ratio_lanczos.js","../node_modules/@stdlib/constants-float64-gamma-lanczos-g/lib/index.js","../node_modules/@stdlib/math-base-special-gamma-delta-ratio/lib/main.js","../node_modules/@stdlib/math-base-special-cos/lib/main.js","../node_modules/@stdlib/math-base-special-sinpi/lib/main.js","../node_modules/@stdlib/math-base-special-gammaln/lib/main.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_a1.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_a2.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_t1.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_t2.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_t3.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_u.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_v.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_s.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_r.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_w.js","../node_modules/@stdlib/constants-float64-sqrt-eps/lib/index.js","../node_modules/@stdlib/constants-float64-max-ln/lib/index.js","../node_modules/@stdlib/math-base-special-erfc/lib/main.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_pp.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_qq.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_pa.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_qa.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_ra.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_sa.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_rb.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_sb.js","../node_modules/@stdlib/constants-float64-min-ln/lib/index.js","../node_modules/@stdlib/math-base-special-gammainc/lib/full_igamma_prefix.js","../node_modules/@stdlib/math-base-tools-evalpoly/lib/main.js","../node_modules/@stdlib/function-ctor/lib/main.js","../node_modules/@stdlib/math-base-tools-evalpoly/lib/factory.js","../node_modules/@stdlib/math-base-tools-evalpoly/lib/index.js","../node_modules/@stdlib/utils-eval/lib/index.js","../node_modules/@stdlib/assert-has-generator-support/lib/main.js","../node_modules/@stdlib/math-base-tools-sum-series/lib/basic.js","../node_modules/@stdlib/math-base-tools-sum-series/lib/index.js","../node_modules/@stdlib/math-base-tools-sum-series/lib/generators.js","../node_modules/@stdlib/math-base-special-log1pmx/lib/main.js","../node_modules/@stdlib/math-base-special-log1pmx/lib/log1p_series.js","../node_modules/@stdlib/constants-float64-two-pi/lib/index.js","../node_modules/@stdlib/math-base-special-gammainc/lib/igamma_temme_large.js","../node_modules/@stdlib/math-base-special-gammainc/lib/lower_gamma_series.js","../node_modules/@stdlib/math-base-special-gammainc/lib/lower_incomplete_gamma_series.js","../node_modules/@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled/lib/rational_pq.js","../node_modules/@stdlib/math-base-special-gammainc/lib/regularised_gamma_prefix.js","../node_modules/@stdlib/math-base-special-powm1/lib/main.js","../node_modules/@stdlib/math-base-special-gamma1pm1/lib/lgamma_small_imp.js","../node_modules/@stdlib/math-base-special-gamma1pm1/lib/rational_p1q1.js","../node_modules/@stdlib/math-base-special-gamma1pm1/lib/rational_p2q2.js","../node_modules/@stdlib/math-base-special-gamma1pm1/lib/rational_p3q3.js","../node_modules/@stdlib/math-base-special-gamma1pm1/lib/main.js","../node_modules/@stdlib/math-base-tools-continued-fraction/lib/generators.js","../node_modules/@stdlib/constants-float32-smallest-normal/lib/index.js","../node_modules/@stdlib/math-base-tools-continued-fraction/lib/basic.js","../node_modules/@stdlib/math-base-tools-continued-fraction/lib/index.js","../node_modules/@stdlib/math-base-special-gammainc/lib/upper_gamma_fraction.js","../node_modules/@stdlib/math-base-special-gammainc/lib/upper_incomplete_gamma_fract.js","../node_modules/@stdlib/math-base-special-gammainc/lib/main.js","../node_modules/@stdlib/math-base-special-gammainc/lib/finite_gamma_q.js","../node_modules/@stdlib/math-base-special-gammainc/lib/finite_half_gamma_q.js","../node_modules/@stdlib/math-base-special-gammainc/lib/tgamma_small_upper_part.js","../node_modules/@stdlib/math-base-special-gammainc/lib/small_gamma2_series.js","../node_modules/@stdlib/math-base-special-gammainc/lib/polyval_c0.js","../node_modules/@stdlib/math-base-special-gammainc/lib/polyval_c1.js","../node_modules/@stdlib/math-base-special-gammainc/lib/polyval_c2.js","../node_modules/@stdlib/math-base-special-gammainc/lib/polyval_c3.js","../node_modules/@stdlib/math-base-special-gammainc/lib/polyval_c4.js","../node_modules/@stdlib/math-base-special-gammainc/lib/polyval_c5.js","../node_modules/@stdlib/math-base-special-gammainc/lib/polyval_c6.js","../node_modules/@stdlib/math-base-special-gammainc/lib/polyval_c7.js","../node_modules/@stdlib/math-base-special-gammainc/lib/polyval_c8.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/beta_small_b_large_a_series.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/regularized_gamma_prefix.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/full_igamma_prefix.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/rising_factorial_ratio.js","../node_modules/@stdlib/math-base-special-maxabs/lib/main.js","../node_modules/@stdlib/math-base-special-minabs/lib/main.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/ibeta_power_terms.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/ibeta_fraction2.js","../node_modules/@stdlib/math-base-special-binomcoef/lib/main.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/ibeta_a_step.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/ibeta_series.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/assign.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/binomial_ccdf.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/main.js","../node_modules/@stdlib/math-base-special-betainc/lib/main.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/index.js","../node_modules/@stdlib/math-base-special-erfcinv/lib/main.js","../node_modules/@stdlib/math-base-special-erfcinv/lib/rational_p1q1.js","../node_modules/@stdlib/math-base-special-erfcinv/lib/rational_p2q2.js","../node_modules/@stdlib/math-base-special-erfcinv/lib/rational_p3q3.js","../node_modules/@stdlib/math-base-special-erfcinv/lib/rational_p4q4.js","../node_modules/@stdlib/math-base-special-erfcinv/lib/rational_p5q5.js","../node_modules/@stdlib/constants-float64-sqrt-two/lib/index.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/inverse_students_t_body_series.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co14.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co15.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co16.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co17.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co18.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co19.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co20.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co21.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co22.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/inverse_students_t_tail_series.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/inverse_students_t_hill.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/find_ibeta_inv_from_t_dist.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/inverse_students_t.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/temme1.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/root_finder.js","../node_modules/@stdlib/math-base-special-signum/lib/main.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/newton_raphson.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/temme2.js","../node_modules/@stdlib/constants-float32-max/lib/index.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/higher_newton.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/lambdaeta.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/polyval_ak1.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/polyval_ak2.js","../node_modules/@stdlib/constants-float64-ln-sqrt-two-pi/lib/index.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/chepolsum.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/stirling.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/polyval_c.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/polyval_d.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/gamstar.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/compute.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/eps1.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/rational_ak0bk0.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/eps2.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/rational_ak1bk1.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/rational_ak2bk2.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/rational_ak3bk3.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/eps3.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/rational_ak4bk4.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/rational_ak5bk5.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/rational_ak6bk6.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/rational_ak7bk7.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/rational_ak8bk8.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/main.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/main.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co1.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co2.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co3.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co4.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co5.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co6.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co7.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co8.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co9.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co10.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co11.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co12.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co13.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/temme3.js","../node_modules/@stdlib/constants-float64-smallest-subnormal/lib/index.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/ibeta_roots.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/halley_iterate.js","../node_modules/@stdlib/math-base-special-betaln/lib/dceval.js","../node_modules/@stdlib/math-base-special-betaln/lib/gamma_correction.js","../node_modules/@stdlib/math-base-special-betaln/lib/main.js","../node_modules/@stdlib/math-base-special-cospi/lib/main.js","../node_modules/@stdlib/constants-float64-phi/lib/index.js","../node_modules/@stdlib/math-base-special-hypot/lib/main.js","../node_modules/@stdlib/math-base-special-cabs/lib/main.js","../node_modules/@stdlib/math-base-special-hypotf/lib/main.js","../node_modules/@stdlib/math-base-special-cbrt/lib/main.js","../node_modules/@stdlib/math-base-special-cbrt/lib/polyval_p.js","../node_modules/@stdlib/math-base-special-ceilf/lib/main.js","../node_modules/@stdlib/constants-float64-max-base10-exponent/lib/index.js","../node_modules/@stdlib/math-base-special-ceiln/lib/main.js","../node_modules/@stdlib/constants-float64-min-base10-exponent-subnormal/lib/index.js","../node_modules/@stdlib/constants-float64-min-base10-exponent/lib/index.js","../node_modules/@stdlib/math-base-special-ccis/lib/main.js","../node_modules/@stdlib/math-base-special-log2/lib/main.js","../node_modules/@stdlib/math-base-special-log2/lib/klog.js","../node_modules/@stdlib/math-base-special-log2/lib/polyval_p.js","../node_modules/@stdlib/math-base-special-log2/lib/polyval_q.js","../node_modules/@stdlib/math-base-special-log10/lib/main.js","../node_modules/@stdlib/math-base-special-log10/lib/klog.js","../node_modules/@stdlib/math-base-special-log10/lib/polyval_p.js","../node_modules/@stdlib/math-base-special-log10/lib/polyval_q.js","../node_modules/@stdlib/math-base-special-floorn/lib/main.js","../node_modules/@stdlib/math-base-special-cinv/lib/main.js","../node_modules/@stdlib/constants-float32-sign-mask/lib/index.js","../node_modules/@stdlib/number-float32-base-to-word/lib/main.js","../node_modules/@stdlib/number-float32-base-from-word/lib/main.js","../node_modules/@stdlib/math-base-special-cosh/lib/main.js","../node_modules/@stdlib/math-base-special-kernel-tan/lib/main.js","../node_modules/@stdlib/math-base-special-kernel-tan/lib/polyval_t_odd.js","../node_modules/@stdlib/math-base-special-kernel-tan/lib/polyval_t_even.js","../node_modules/@stdlib/math-base-special-tan/lib/main.js","../node_modules/@stdlib/math-base-special-tanh/lib/main.js","../node_modules/@stdlib/math-base-special-tanh/lib/rational_pq.js","../node_modules/@stdlib/math-base-special-cphase/lib/main.js","../node_modules/@stdlib/math-base-special-cpolar/lib/assign.js","../node_modules/@stdlib/math-base-special-cpolar/lib/main.js","../node_modules/@stdlib/math-base-special-cpolar/lib/index.js","../node_modules/@stdlib/math-base-special-roundn/lib/main.js","../node_modules/@stdlib/math-base-special-sinh/lib/main.js","../node_modules/@stdlib/math-base-special-sinh/lib/rational_pq.js","../node_modules/@stdlib/math-base-special-deg2radf/lib/main.js","../node_modules/@stdlib/math-base-special-digamma/lib/main.js","../node_modules/@stdlib/math-base-special-digamma/lib/asymptotic_expansion.js","../node_modules/@stdlib/math-base-special-digamma/lib/polyval_p.js","../node_modules/@stdlib/math-base-special-digamma/lib/rational_approximation.js","../node_modules/@stdlib/math-base-special-digamma/lib/rational_pq.js","../node_modules/@stdlib/math-base-special-riemann-zeta/lib/main.js","../node_modules/@stdlib/math-base-special-riemann-zeta/lib/rational_p1q1.js","../node_modules/@stdlib/math-base-special-riemann-zeta/lib/rational_p2q2.js","../node_modules/@stdlib/math-base-special-riemann-zeta/lib/rational_p3q3.js","../node_modules/@stdlib/math-base-special-riemann-zeta/lib/rational_p4q4.js","../node_modules/@stdlib/math-base-special-riemann-zeta/lib/rational_p5q5.js","../node_modules/@stdlib/math-base-special-riemann-zeta/lib/rational_p6q6.js","../node_modules/@stdlib/math-base-special-ellipk/lib/main.js","../node_modules/@stdlib/math-base-special-ellipk/lib/poly_p1.js","../node_modules/@stdlib/math-base-special-ellipk/lib/poly_p2.js","../node_modules/@stdlib/math-base-special-ellipk/lib/poly_p3.js","../node_modules/@stdlib/math-base-special-ellipk/lib/poly_p4.js","../node_modules/@stdlib/math-base-special-ellipk/lib/poly_p5.js","../node_modules/@stdlib/math-base-special-ellipk/lib/poly_p6.js","../node_modules/@stdlib/math-base-special-ellipk/lib/poly_p7.js","../node_modules/@stdlib/math-base-special-ellipk/lib/poly_p8.js","../node_modules/@stdlib/math-base-special-ellipk/lib/poly_p9.js","../node_modules/@stdlib/math-base-special-ellipk/lib/poly_p10.js","../node_modules/@stdlib/math-base-special-ellipk/lib/poly_p11.js","../node_modules/@stdlib/math-base-special-ellipk/lib/poly_p12.js","../node_modules/@stdlib/math-base-special-ellipj/lib/assign.js","../node_modules/@stdlib/math-base-special-ellipj/lib/main.js","../node_modules/@stdlib/math-base-special-ellipj/lib/sn.js","../node_modules/@stdlib/math-base-special-ellipj/lib/cn.js","../node_modules/@stdlib/math-base-special-ellipj/lib/dn.js","../node_modules/@stdlib/math-base-special-ellipj/lib/am.js","../node_modules/@stdlib/math-base-special-ellipj/lib/index.js","../node_modules/@stdlib/math-base-special-erf/lib/main.js","../node_modules/@stdlib/math-base-special-erfcx/lib/erfcx_y100.js","../node_modules/@stdlib/math-base-special-falling-factorial/lib/main.js","../node_modules/@stdlib/math-base-special-fast-abs/lib/main.js","../node_modules/@stdlib/math-base-special-fast-alpha-max-plus-beta-min/lib/main.js","../node_modules/@stdlib/math-base-special-fast-alpha-max-plus-beta-min/lib/hypot1a.js","../node_modules/@stdlib/math-base-special-labs/lib/main.js","../node_modules/@stdlib/math-base-special-fast-alpha-max-plus-beta-min/lib/hypot1b.js","../node_modules/@stdlib/math-base-special-fast-alpha-max-plus-beta-min/lib/hypot2a.js","../node_modules/@stdlib/math-base-special-fast-alpha-max-plus-beta-min/lib/hypot2b.js","../node_modules/@stdlib/math-base-special-fast-alpha-max-plus-beta-min/lib/index.js","../node_modules/@stdlib/math-base-special-fast-alpha-max-plus-beta-min/lib/factory.js","../node_modules/@stdlib/math-base-special-fast-alpha-max-plus-beta-min/lib/closure1a.js","../node_modules/@stdlib/math-base-special-fast-alpha-max-plus-beta-min/lib/closure1b.js","../node_modules/@stdlib/math-base-special-fast/lib/index.js","../node_modules/@stdlib/math-base-special-fast-acosh/lib/main.js","../node_modules/@stdlib/math-base-special-fast-asinh/lib/main.js","../node_modules/@stdlib/math-base-special-fast-atanh/lib/main.js","../node_modules/@stdlib/math-base-special-fast-hypot/lib/main.js","../node_modules/@stdlib/math-base-special-fast-max/lib/main.js","../node_modules/@stdlib/math-base-special-fast-min/lib/main.js","../node_modules/@stdlib/math-base-special-fast-pow-int/lib/main.js","../node_modules/@stdlib/math-base-special-fast-uint32-log2/lib/main.js","../node_modules/@stdlib/math-base-special-fast-uint32-sqrt/lib/main.js","../node_modules/@stdlib/constants-float64-max-safe-nth-fibonacci/lib/index.js","../node_modules/@stdlib/math-base-special-fibonacci-index/lib/main.js","../node_modules/@stdlib/math-base-special-flipsign/lib/main.js","../node_modules/@stdlib/math-base-special-floorf/lib/main.js","../node_modules/@stdlib/math-base-special-fresnel/lib/assign.js","../node_modules/@stdlib/math-base-special-fresnel/lib/rational_psqs.js","../node_modules/@stdlib/math-base-special-fresnel/lib/rational_pcqc.js","../node_modules/@stdlib/math-base-special-fresnel/lib/rational_pfqf.js","../node_modules/@stdlib/math-base-special-fresnel/lib/rational_pgqg.js","../node_modules/@stdlib/math-base-special-fresnel/lib/main.js","../node_modules/@stdlib/math-base-special-fresnel/lib/index.js","../node_modules/@stdlib/math-base-special-fresnelc/lib/main.js","../node_modules/@stdlib/math-base-special-fresnels/lib/main.js","../node_modules/@stdlib/math-base-special-frexp/lib/assign.js","../node_modules/@stdlib/math-base-special-frexp/lib/main.js","../node_modules/@stdlib/math-base-special-frexp/lib/index.js","../node_modules/@stdlib/constants-float64-max-safe-nth-lucas/lib/index.js","../node_modules/@stdlib/math-base-special-maxn/lib/main.js","../node_modules/@stdlib/math-base-special-minn/lib/main.js","../node_modules/@stdlib/math-base-special-minmax/lib/assign.js","../node_modules/@stdlib/math-base-special-minmax/lib/main.js","../node_modules/@stdlib/math-base-special-minmaxabs/lib/assign.js","../node_modules/@stdlib/math-base-special-minmaxabs/lib/main.js","../node_modules/@stdlib/math-base-special-minmaxabsn/lib/assign.js","../node_modules/@stdlib/math-base-special-minmaxabsn/lib/main.js","../node_modules/@stdlib/math-base-special-minmaxn/lib/assign.js","../node_modules/@stdlib/math-base-special-minmaxn/lib/main.js","../node_modules/@stdlib/math-base-special-minmax/lib/index.js","../node_modules/@stdlib/math-base-special-minmaxabs/lib/index.js","../node_modules/@stdlib/math-base-special-minmaxabsn/lib/index.js","../node_modules/@stdlib/math-base-special-minmaxn/lib/index.js","../node_modules/@stdlib/math-base-special-modf/lib/assign.js","../node_modules/@stdlib/math-base-special-modf/lib/main.js","../node_modules/@stdlib/math-base-special-modf/lib/index.js","../node_modules/@stdlib/math-base-special-nonfibonacci/lib/main.js","../node_modules/@stdlib/math-base-special-trigamma/lib/main.js","../node_modules/@stdlib/constants-float64-pi-squared/lib/index.js","../node_modules/@stdlib/math-base-special-trigamma/lib/rational_p12q12.js","../node_modules/@stdlib/math-base-special-trigamma/lib/rational_p24q24.js","../node_modules/@stdlib/math-base-special-trigamma/lib/rational_p48q48.js","../node_modules/@stdlib/math-base-special-trigamma/lib/rational_p816q816.js","../node_modules/@stdlib/math-base-special-trigamma/lib/rational_p16infq16inf.js","../node_modules/@stdlib/math-base-special-polygamma/lib/atinfinityplus.js","../node_modules/@stdlib/math-base-special-polygamma/lib/attransitionplus.js","../node_modules/@stdlib/math-base-special-polygamma/lib/polycotpi.js","../node_modules/@stdlib/math-base-special-polygamma/lib/polyval_p3.js","../node_modules/@stdlib/math-base-special-polygamma/lib/polyval_p4.js","../node_modules/@stdlib/math-base-special-polygamma/lib/polyval_p5.js","../node_modules/@stdlib/math-base-special-polygamma/lib/polyval_p6.js","../node_modules/@stdlib/math-base-special-polygamma/lib/polyval_p7.js","../node_modules/@stdlib/math-base-special-polygamma/lib/polyval_p8.js","../node_modules/@stdlib/math-base-special-polygamma/lib/polyval_p9.js","../node_modules/@stdlib/math-base-special-polygamma/lib/polyval_p10.js","../node_modules/@stdlib/math-base-special-polygamma/lib/polyval_p11.js","../node_modules/@stdlib/math-base-special-polygamma/lib/polyval_p12.js","../node_modules/@stdlib/constants-float64-ln-pi/lib/index.js","../node_modules/@stdlib/math-base-special-polygamma/lib/nearzero.js","../node_modules/@stdlib/math-base-special-polygamma/lib/main.js","../node_modules/@stdlib/math-base-special-round2/lib/main.js","../node_modules/@stdlib/math-base-special-sici/lib/assign.js","../node_modules/@stdlib/math-base-special-sici/lib/polyval_fn4.js","../node_modules/@stdlib/math-base-special-sici/lib/polyval_fd4.js","../node_modules/@stdlib/math-base-special-sici/lib/polyval_gn4.js","../node_modules/@stdlib/math-base-special-sici/lib/polyval_gd4.js","../node_modules/@stdlib/math-base-special-sici/lib/polyval_fn8.js","../node_modules/@stdlib/math-base-special-sici/lib/polyval_fd8.js","../node_modules/@stdlib/math-base-special-sici/lib/polyval_gn8.js","../node_modules/@stdlib/math-base-special-sici/lib/polyval_gd8.js","../node_modules/@stdlib/math-base-special-sici/lib/polyval_sn.js","../node_modules/@stdlib/math-base-special-sici/lib/polyval_sd.js","../node_modules/@stdlib/math-base-special-sici/lib/polyval_cn.js","../node_modules/@stdlib/math-base-special-sici/lib/polyval_cd.js","../node_modules/@stdlib/math-base-special-sici/lib/main.js","../node_modules/@stdlib/math-base-special-sincospi/lib/assign.js","../node_modules/@stdlib/math-base-special-sincospi/lib/main.js","../node_modules/@stdlib/math-base-special-sici/lib/index.js","../node_modules/@stdlib/math-base-special-sincospi/lib/index.js","../node_modules/@stdlib/math-base-special-truncn/lib/main.js","../node_modules/@stdlib/math-base-special/lib/index.js","../node_modules/@stdlib/math-base-tools-evalrational/lib/main.js","../node_modules/@stdlib/math-base-special-abs2/lib/main.js","../node_modules/@stdlib/math-base-special-abs2f/lib/main.js","../node_modules/@stdlib/math-base-special-absf/lib/main.js","../node_modules/@stdlib/math-base-special-acot/lib/main.js","../node_modules/@stdlib/math-base-special-acoth/lib/main.js","../node_modules/@stdlib/math-base-special-acovercos/lib/main.js","../node_modules/@stdlib/math-base-special-acoversin/lib/main.js","../node_modules/@stdlib/math-base-special-acsc/lib/main.js","../node_modules/@stdlib/math-base-special-acsch/lib/main.js","../node_modules/@stdlib/math-base-special-ahavercos/lib/main.js","../node_modules/@stdlib/math-base-special-ahaversin/lib/main.js","../node_modules/@stdlib/math-base-special-asec/lib/main.js","../node_modules/@stdlib/math-base-special-asech/lib/main.js","../node_modules/@stdlib/math-base-special-avercos/lib/main.js","../node_modules/@stdlib/math-base-special-aversin/lib/main.js","../node_modules/@stdlib/math-base-special-bessely0/lib/rational_p1q1.js","../node_modules/@stdlib/math-base-special-bessely0/lib/rational_p2q2.js","../node_modules/@stdlib/math-base-special-bessely0/lib/rational_p3q3.js","../node_modules/@stdlib/math-base-special-bessely0/lib/rational_pcqc.js","../node_modules/@stdlib/math-base-special-bessely0/lib/rational_psqs.js","../node_modules/@stdlib/math-base-special-bessely1/lib/rational_p1q1.js","../node_modules/@stdlib/math-base-special-bessely1/lib/rational_p2q2.js","../node_modules/@stdlib/math-base-special-bessely1/lib/rational_pcqc.js","../node_modules/@stdlib/math-base-special-bessely1/lib/rational_psqs.js","../node_modules/@stdlib/math-base-special-betaincinv/lib/main.js","../node_modules/@stdlib/math-base-special-binet/lib/main.js","../node_modules/@stdlib/math-base-special-binomcoefln/lib/main.js","../node_modules/@stdlib/math-base-special-boxcox/lib/main.js","../node_modules/@stdlib/math-base-special-boxcox1p/lib/main.js","../node_modules/@stdlib/math-base-special-boxcox1pinv/lib/main.js","../node_modules/@stdlib/math-base-special-boxcoxinv/lib/main.js","../node_modules/@stdlib/math-base-special-cabs2/lib/main.js","../node_modules/@stdlib/math-base-special-cabs2f/lib/main.js","../node_modules/@stdlib/math-base-special-cabsf/lib/main.js","../node_modules/@stdlib/math-base-special-cbrtf/lib/main.js","../node_modules/@stdlib/math-base-special-cceil/lib/main.js","../node_modules/@stdlib/math-base-special-cceilf/lib/main.js","../node_modules/@stdlib/math-base-special-cceiln/lib/main.js","../node_modules/@stdlib/math-base-special-ceil2/lib/main.js","../node_modules/@stdlib/math-base-special-ceil10/lib/main.js","../node_modules/@stdlib/math-base-special-ceilb/lib/main.js","../node_modules/@stdlib/math-base-special-ceilsd/lib/main.js","../node_modules/@stdlib/math-base-special-cexp/lib/main.js","../node_modules/@stdlib/math-base-special-cflipsign/lib/main.js","../node_modules/@stdlib/math-base-special-cflipsignf/lib/main.js","../node_modules/@stdlib/math-base-special-cfloor/lib/main.js","../node_modules/@stdlib/math-base-special-cfloorn/lib/main.js","../node_modules/@stdlib/math-base-special-cidentity/lib/main.js","../node_modules/@stdlib/math-base-special-cidentityf/lib/main.js","../node_modules/@stdlib/math-base-special-clamp/lib/main.js","../node_modules/@stdlib/math-base-special-clampf/lib/main.js","../node_modules/@stdlib/math-base-special-copysignf/lib/main.js","../node_modules/@stdlib/constants-float32-abs-mask/lib/index.js","../node_modules/@stdlib/math-base-special-cosm1/lib/main.js","../node_modules/@stdlib/math-base-special-cosm1/lib/polyval_p.js","../node_modules/@stdlib/math-base-special-cot/lib/main.js","../node_modules/@stdlib/math-base-special-coth/lib/main.js","../node_modules/@stdlib/math-base-special-covercos/lib/main.js","../node_modules/@stdlib/math-base-special-coversin/lib/main.js","../node_modules/@stdlib/math-base-special-cround/lib/main.js","../node_modules/@stdlib/math-base-special-croundn/lib/main.js","../node_modules/@stdlib/math-base-special-csch/lib/main.js","../node_modules/@stdlib/math-base-special-csignum/lib/main.js","../node_modules/@stdlib/math-base-special-deg2rad/lib/main.js","../node_modules/@stdlib/math-base-special-dirac-delta/lib/main.js","../node_modules/@stdlib/math-base-special-dirichlet-eta/lib/main.js","../node_modules/@stdlib/math-base-special-ellipe/lib/main.js","../node_modules/@stdlib/math-base-special-ellipe/lib/poly_p1.js","../node_modules/@stdlib/math-base-special-ellipe/lib/poly_p2.js","../node_modules/@stdlib/math-base-special-ellipe/lib/poly_p3.js","../node_modules/@stdlib/math-base-special-ellipe/lib/poly_p4.js","../node_modules/@stdlib/math-base-special-ellipe/lib/poly_p5.js","../node_modules/@stdlib/math-base-special-ellipe/lib/poly_p6.js","../node_modules/@stdlib/math-base-special-ellipe/lib/poly_p7.js","../node_modules/@stdlib/math-base-special-ellipe/lib/poly_p8.js","../node_modules/@stdlib/math-base-special-ellipe/lib/poly_p9.js","../node_modules/@stdlib/math-base-special-ellipe/lib/poly_p10.js","../node_modules/@stdlib/math-base-special-ellipe/lib/poly_p11.js","../node_modules/@stdlib/math-base-special-ellipe/lib/poly_p12.js","../node_modules/@stdlib/math-base-special-erf/lib/polyval_pp.js","../node_modules/@stdlib/math-base-special-erf/lib/polyval_qq.js","../node_modules/@stdlib/math-base-special-erf/lib/polyval_pa.js","../node_modules/@stdlib/math-base-special-erf/lib/polyval_qa.js","../node_modules/@stdlib/math-base-special-erf/lib/polyval_ra.js","../node_modules/@stdlib/math-base-special-erf/lib/polyval_sa.js","../node_modules/@stdlib/math-base-special-erf/lib/polyval_rb.js","../node_modules/@stdlib/math-base-special-erf/lib/polyval_sb.js","../node_modules/@stdlib/math-base-special-erfcx/lib/main.js","../node_modules/@stdlib/math-base-special-erfinv/lib/main.js","../node_modules/@stdlib/math-base-special-erfinv/lib/rational_p1q1.js","../node_modules/@stdlib/math-base-special-erfinv/lib/rational_p2q2.js","../node_modules/@stdlib/math-base-special-erfinv/lib/rational_p3q3.js","../node_modules/@stdlib/math-base-special-erfinv/lib/rational_p4q4.js","../node_modules/@stdlib/math-base-special-erfinv/lib/rational_p5q5.js","../node_modules/@stdlib/math-base-special-exp2/lib/main.js","../node_modules/@stdlib/constants-float64-min-base2-exponent/lib/index.js","../node_modules/@stdlib/math-base-special-exp2/lib/polyval_p.js","../node_modules/@stdlib/math-base-special-exp2/lib/polyval_q.js","../node_modules/@stdlib/math-base-special-exp10/lib/main.js","../node_modules/@stdlib/math-base-special-exp10/lib/polyval_p.js","../node_modules/@stdlib/math-base-special-exp10/lib/polyval_q.js","../node_modules/@stdlib/math-base-special-expit/lib/main.js","../node_modules/@stdlib/math-base-special-expm1rel/lib/main.js","../node_modules/@stdlib/math-base-special-factorial2/lib/main.js","../node_modules/@stdlib/math-base-special-factorialln/lib/main.js","../node_modules/@stdlib/math-base-special-fibonacci/lib/main.js","../node_modules/@stdlib/math-base-special-flipsignf/lib/main.js","../node_modules/@stdlib/math-base-special-floor2/lib/main.js","../node_modules/@stdlib/math-base-special-floor10/lib/main.js","../node_modules/@stdlib/math-base-special-floorb/lib/main.js","../node_modules/@stdlib/math-base-special-floorsd/lib/main.js","../node_modules/@stdlib/math-base-special-fresnelc/lib/rational_pcqc.js","../node_modules/@stdlib/math-base-special-fresnelc/lib/rational_pfqf.js","../node_modules/@stdlib/math-base-special-fresnelc/lib/rational_pgqg.js","../node_modules/@stdlib/math-base-special-fresnels/lib/rational_psqs.js","../node_modules/@stdlib/math-base-special-fresnels/lib/rational_pfqf.js","../node_modules/@stdlib/math-base-special-fresnels/lib/rational_pgqg.js","../node_modules/@stdlib/math-base-special-gammasgn/lib/main.js","../node_modules/@stdlib/math-base-special-hacovercos/lib/main.js","../node_modules/@stdlib/math-base-special-hacoversin/lib/main.js","../node_modules/@stdlib/math-base-special-havercos/lib/main.js","../node_modules/@stdlib/math-base-special-haversin/lib/main.js","../node_modules/@stdlib/math-base-special-heaviside/lib/main.js","../node_modules/@stdlib/math-base-special-identity/lib/main.js","../node_modules/@stdlib/math-base-special-identityf/lib/main.js","../node_modules/@stdlib/math-base-special-inv/lib/main.js","../node_modules/@stdlib/math-base-special-invf/lib/main.js","../node_modules/@stdlib/math-base-special-kronecker-delta/lib/main.js","../node_modules/@stdlib/math-base-special-kronecker-deltaf/lib/main.js","../node_modules/@stdlib/math-base-special-lcm/lib/main.js","../node_modules/@stdlib/math-base-special-log/lib/main.js","../node_modules/@stdlib/math-base-special-log1mexp/lib/main.js","../node_modules/@stdlib/math-base-special-log1pexp/lib/main.js","../node_modules/@stdlib/math-base-special-logaddexp/lib/main.js","../node_modules/@stdlib/math-base-special-logit/lib/main.js","../node_modules/@stdlib/math-base-special-lucas/lib/main.js","../node_modules/@stdlib/math-base-special-maxabsn/lib/main.js","../node_modules/@stdlib/math-base-special-minabsn/lib/main.js","../node_modules/@stdlib/math-base-special-negafibonacci/lib/main.js","../node_modules/@stdlib/math-base-special-negalucas/lib/main.js","../node_modules/@stdlib/math-base-special-pdiff/lib/main.js","../node_modules/@stdlib/math-base-special-pdifff/lib/main.js","../node_modules/@stdlib/math-base-special-rad2deg/lib/main.js","../node_modules/@stdlib/math-base-special-ramp/lib/main.js","../node_modules/@stdlib/math-base-special-rampf/lib/main.js","../node_modules/@stdlib/math-base-special-rcbrt/lib/main.js","../node_modules/@stdlib/math-base-special-rising-factorial/lib/main.js","../node_modules/@stdlib/math-base-special-round10/lib/main.js","../node_modules/@stdlib/math-base-special-roundb/lib/main.js","../node_modules/@stdlib/math-base-special-roundsd/lib/main.js","../node_modules/@stdlib/math-base-special-rsqrt/lib/main.js","../node_modules/@stdlib/math-base-special-rsqrtf/lib/main.js","../node_modules/@stdlib/math-base-special-signumf/lib/main.js","../node_modules/@stdlib/math-base-special-sinc/lib/main.js","../node_modules/@stdlib/math-base-special-spence/lib/main.js","../node_modules/@stdlib/math-base-special-spence/lib/polyval_a.js","../node_modules/@stdlib/math-base-special-spence/lib/polyval_b.js","../node_modules/@stdlib/math-base-special-sqrt1pm1/lib/main.js","../node_modules/@stdlib/math-base-special-sqrtf/lib/main.js","../node_modules/@stdlib/math-base-special-sqrtpi/lib/main.js","../node_modules/@stdlib/math-base-special-tribonacci/lib/main.js","../node_modules/@stdlib/math-base-special-trunc2/lib/main.js","../node_modules/@stdlib/math-base-special-trunc10/lib/main.js","../node_modules/@stdlib/math-base-special-truncb/lib/main.js","../node_modules/@stdlib/math-base-special-truncf/lib/main.js","../node_modules/@stdlib/math-base-special-truncsd/lib/main.js","../node_modules/@stdlib/math-base-special-vercos/lib/main.js","../node_modules/@stdlib/math-base-special-versin/lib/main.js","../node_modules/@stdlib/math-base-special-wrap/lib/main.js","../node_modules/@stdlib/math-base-special-xlog1py/lib/main.js","../node_modules/@stdlib/math-base-special-xlogy/lib/main.js","../node_modules/@stdlib/math-base-tools-evalrational/lib/index.js","../node_modules/@stdlib/math-base-tools-evalrational/lib/factory.js","../node_modules/@stdlib/math-base-tools-fibpoly/lib/cache.js","../node_modules/@stdlib/math-base-tools-fibpoly/lib/coefficients.js","../node_modules/@stdlib/math-base-tools-fibpoly/lib/main.js","../node_modules/@stdlib/math-base-tools-normhermitepoly/lib/main.js","../node_modules/@stdlib/utils-constant-function/lib/main.js","../node_modules/@stdlib/math-base-tools-hermitepoly/lib/main.js","../node_modules/@stdlib/math-base-tools-fibpoly/lib/index.js","../node_modules/@stdlib/math-base-tools-fibpoly/lib/factory.js","../node_modules/@stdlib/math-base-tools-normhermitepoly/lib/index.js","../node_modules/@stdlib/math-base-tools-normhermitepoly/lib/factory.js","../node_modules/@stdlib/math-base-tools-hermitepoly/lib/index.js","../node_modules/@stdlib/math-base-tools-hermitepoly/lib/factory.js","../node_modules/@stdlib/math-base-tools-lucaspoly/lib/cache.js","../node_modules/@stdlib/math-base-tools-lucaspoly/lib/coefficients.js","../node_modules/@stdlib/math-base-tools-lucaspoly/lib/main.js","../node_modules/@stdlib/math-base-tools-lucaspoly/lib/index.js","../node_modules/@stdlib/math-base-tools-lucaspoly/lib/factory.js","../node_modules/@stdlib/math-base-tools/lib/index.js","../node_modules/@stdlib/utils-type-of/lib/fixtures/re.js","../node_modules/@stdlib/assert-is-boolean/lib/primitive.js","../node_modules/@stdlib/boolean-ctor/lib/main.js","../node_modules/@stdlib/assert-is-boolean/lib/tostring.js","../node_modules/@stdlib/assert-is-boolean/lib/object.js","../node_modules/@stdlib/assert-is-boolean/lib/try2serialize.js","../node_modules/@stdlib/assert-is-boolean/lib/main.js","../node_modules/@stdlib/utils-global/node_modules/@stdlib/string-base-format-interpolate/lib/is_number.js","../node_modules/@stdlib/utils-global/node_modules/@stdlib/string-base-format-interpolate/lib/zero_pad.js","../node_modules/@stdlib/assert-is-boolean/lib/index.js","../node_modules/@stdlib/utils-global/node_modules/@stdlib/string-base-format-interpolate/lib/format_integer.js","../node_modules/@stdlib/utils-global/node_modules/@stdlib/string-base-format-interpolate/lib/is_string.js","../node_modules/@stdlib/utils-global/node_modules/@stdlib/string-base-format-interpolate/lib/format_double.js","../node_modules/@stdlib/utils-global/node_modules/@stdlib/string-base-format-interpolate/lib/space_pad.js","../node_modules/@stdlib/utils-global/node_modules/@stdlib/string-base-format-interpolate/lib/main.js","../node_modules/@stdlib/utils-global/node_modules/@stdlib/string-base-format-tokenize/lib/main.js","../node_modules/@stdlib/utils-global/node_modules/@stdlib/string-format/lib/is_string.js","../node_modules/@stdlib/utils-global/node_modules/@stdlib/string-format/lib/main.js","../node_modules/@stdlib/utils-global/lib/codegen.js","../node_modules/@stdlib/utils-global/lib/self.js","../node_modules/@stdlib/utils-global/lib/window.js","../node_modules/@stdlib/utils-global/lib/global.js","../node_modules/@stdlib/utils-global/lib/global_this.js","../node_modules/@stdlib/utils-type-of/lib/fixtures/nodelist.js","../node_modules/@stdlib/utils-global/lib/main.js","../node_modules/@stdlib/utils-type-of/lib/fixtures/typedarray.js","../node_modules/@stdlib/utils-type-of/node_modules/@stdlib/regexp-function-name/lib/main.js","../node_modules/@stdlib/utils-type-of/node_modules/@stdlib/regexp-function-name/lib/regexp.js","../node_modules/@stdlib/utils-type-of/node_modules/@stdlib/regexp-function-name/lib/index.js","../node_modules/@stdlib/assert-is-array/lib/main.js","../node_modules/@stdlib/utils-type-of/node_modules/@stdlib/string-base-format-interpolate/lib/is_number.js","../node_modules/@stdlib/utils-type-of/node_modules/@stdlib/string-base-format-interpolate/lib/zero_pad.js","../node_modules/@stdlib/utils-type-of/node_modules/@stdlib/string-base-format-interpolate/lib/format_integer.js","../node_modules/@stdlib/utils-type-of/node_modules/@stdlib/string-base-format-interpolate/lib/is_string.js","../node_modules/@stdlib/utils-type-of/node_modules/@stdlib/string-base-format-interpolate/lib/format_double.js","../node_modules/@stdlib/utils-type-of/node_modules/@stdlib/string-base-format-interpolate/lib/space_pad.js","../node_modules/@stdlib/utils-type-of/node_modules/@stdlib/string-base-format-interpolate/lib/main.js","../node_modules/@stdlib/utils-type-of/node_modules/@stdlib/string-base-format-tokenize/lib/main.js","../node_modules/@stdlib/utils-type-of/node_modules/@stdlib/string-format/lib/is_string.js","../node_modules/@stdlib/utils-type-of/node_modules/@stdlib/string-format/lib/main.js","../node_modules/@stdlib/utils-type-of/node_modules/@stdlib/assert-is-object-like/lib/main.js","../node_modules/@stdlib/utils-type-of/node_modules/@stdlib/utils-constructor-name/lib/main.js","../node_modules/@stdlib/utils-type-of/node_modules/@stdlib/assert-is-buffer/lib/main.js","../node_modules/@stdlib/utils-type-of/node_modules/@stdlib/assert-is-object-like/lib/index.js","../node_modules/@stdlib/utils-type-of/node_modules/@stdlib/assert-tools-array-function/lib/main.js","../node_modules/@stdlib/utils-type-of/lib/index.js","../node_modules/@stdlib/utils-type-of/lib/check.js","../node_modules/@stdlib/utils-type-of/lib/polyfill.js","../node_modules/@stdlib/utils-type-of/lib/main.js","../node_modules/@stdlib/math-base-utils-relative-difference/node_modules/@stdlib/string-base-format-interpolate/lib/is_number.js","../node_modules/@stdlib/math-base-utils-relative-difference/node_modules/@stdlib/string-base-format-interpolate/lib/zero_pad.js","../node_modules/@stdlib/math-base-utils-relative-difference/node_modules/@stdlib/string-base-format-interpolate/lib/format_integer.js","../node_modules/@stdlib/math-base-utils-relative-difference/node_modules/@stdlib/string-base-format-interpolate/lib/is_string.js","../node_modules/@stdlib/math-base-utils-relative-difference/node_modules/@stdlib/string-base-format-interpolate/lib/format_double.js","../node_modules/@stdlib/math-base-utils-relative-difference/node_modules/@stdlib/string-base-format-interpolate/lib/space_pad.js","../node_modules/@stdlib/math-base-utils-relative-difference/node_modules/@stdlib/string-base-format-interpolate/lib/main.js","../node_modules/@stdlib/math-base-utils-relative-difference/node_modules/@stdlib/string-base-format-tokenize/lib/main.js","../node_modules/@stdlib/math-base-utils-relative-difference/node_modules/@stdlib/string-format/lib/is_string.js","../node_modules/@stdlib/math-base-utils-relative-difference/node_modules/@stdlib/string-format/lib/main.js","../node_modules/@stdlib/math-base-utils-relative-difference/lib/scale.js","../node_modules/@stdlib/math-base-utils-relative-difference/lib/maxabs.js","../node_modules/@stdlib/math-base-utils-relative-difference/lib/max.js","../node_modules/@stdlib/math-base-utils-relative-difference/lib/minabs.js","../node_modules/@stdlib/math-base-utils-relative-difference/lib/min.js","../node_modules/@stdlib/math-base-utils-relative-difference/lib/meanabs.js","../node_modules/@stdlib/math-base-utils-relative-difference/lib/mean.js","../node_modules/@stdlib/math-base-utils-relative-difference/lib/x.js","../node_modules/@stdlib/math-base-utils-relative-difference/lib/y.js","../node_modules/@stdlib/math-base-utils-relative-difference/lib/main.js","../node_modules/@stdlib/assert-is-function/lib/main.js","../node_modules/@stdlib/math-base-utils/lib/index.js","../node_modules/@stdlib/math-base-utils-absolute-difference/lib/main.js","../node_modules/@stdlib/math-base-utils-float64-epsilon-difference/lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Object.defineProperty === 'function' ) ? Object.defineProperty : null;\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Defines (or modifies) an object property.\n*\n* ## Notes\n*\n* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.\n*\n* @name defineProperty\n* @type {Function}\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {Object} descriptor - property descriptor\n* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object\n* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties\n* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator\n* @param {*} [descriptor.value] - property value\n* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.\n* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} third argument must be an object\n* @throws {Error} property descriptor cannot have both a value and a setter and/or getter\n* @returns {Object} object with added property\n*\n* @example\n* var obj = {};\n*\n* defineProperty( obj, 'foo', {\n*     'value': 'bar'\n* });\n*\n* var str = obj.foo;\n* // returns 'bar'\n*/\nvar defineProperty = Object.defineProperty;\n\n\n// EXPORTS //\n\nexport default defineProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a number primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( typeof value === 'number' );  // NOTE: we inline the `isNumber.isPrimitive` function from `@stdlib/assert/is-number` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Tests if a string starts with a minus sign (`-`).\n*\n* @private\n* @param {string} str - input string\n* @returns {boolean} boolean indicating if a string starts with a minus sign (`-`)\n*/\nfunction startsWithMinus( str ) {\n\treturn str[ 0 ] === '-';\n}\n\n/**\n* Returns a string of `n` zeros.\n*\n* @private\n* @param {number} n - number of zeros\n* @returns {string} string of zeros\n*/\nfunction zeros( n ) {\n\tvar out = '';\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tout += '0';\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Pads a token with zeros to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction zeroPad( str, width, right ) {\n\tvar negative = false;\n\tvar pad = width - str.length;\n\tif ( pad < 0 ) {\n\t\treturn str;\n\t}\n\tif ( startsWithMinus( str ) ) {\n\t\tnegative = true;\n\t\tstr = str.substr( 1 );\n\t}\n\tstr = ( right ) ?\n\t\tstr + zeros( pad ) :\n\t\tzeros( pad ) + str;\n\tif ( negative ) {\n\t\tstr = '-' + str;\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default zeroPad;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNumber from './is_number.js';\nimport zeroPad from './zero_pad.js';\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\n\n\n// MAIN //\n\n/**\n* Formats a token object argument as an integer.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid integer\n* @returns {string} formatted token argument\n*/\nfunction formatInteger( token ) {\n\tvar base;\n\tvar out;\n\tvar i;\n\n\tswitch ( token.specifier ) {\n\tcase 'b':\n\t\t// Case: %b (binary)\n\t\tbase = 2;\n\t\tbreak;\n\tcase 'o':\n\t\t// Case: %o (octal)\n\t\tbase = 8;\n\t\tbreak;\n\tcase 'x':\n\tcase 'X':\n\t\t// Case: %x, %X (hexadecimal)\n\t\tbase = 16;\n\t\tbreak;\n\tcase 'd':\n\tcase 'i':\n\tcase 'u':\n\tdefault:\n\t\t// Case: %d, %i, %u (decimal)\n\t\tbase = 10;\n\t\tbreak;\n\t}\n\tout = token.arg;\n\ti = parseInt( out, 10 );\n\tif ( !isFinite( i ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n\t\tif ( !isNumber( out ) ) {\n\t\t\tthrow new Error( 'invalid integer. Value: ' + out );\n\t\t}\n\t\ti = 0;\n\t}\n\tif ( i < 0 && ( token.specifier === 'u' || base !== 10 ) ) {\n\t\ti = 0xffffffff + i + 1;\n\t}\n\tif ( i < 0 ) {\n\t\tout = ( -i ).toString( base );\n\t\tif ( token.precision ) {\n\t\t\tout = zeroPad( out, token.precision, token.padRight );\n\t\t}\n\t\tout = '-' + out;\n\t} else {\n\t\tout = i.toString( base );\n\t\tif ( !i && !token.precision ) {\n\t\t\tout = '';\n\t\t} else if ( token.precision ) {\n\t\t\tout = zeroPad( out, token.precision, token.padRight );\n\t\t}\n\t\tif ( token.sign ) {\n\t\t\tout = token.sign + out;\n\t\t}\n\t}\n\tif ( base === 16 ) {\n\t\tif ( token.alternate ) {\n\t\t\tout = '0x' + out;\n\t\t}\n\t\tout = ( token.specifier === uppercase.call( token.specifier ) ) ?\n\t\t\tuppercase.call( out ) :\n\t\t\tlowercase.call( out );\n\t}\n\tif ( base === 8 ) {\n\t\tif ( token.alternate && out.charAt( 0 ) !== '0' ) {\n\t\t\tout = '0' + out;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a string primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string primitive\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns false\n*/\nfunction isString( value ) {\n\treturn ( typeof value === 'string' ); // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNumber from './is_number.js';\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar abs = Math.abs; // eslint-disable-line stdlib/no-builtin-math\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\nvar replace = String.prototype.replace;\n\n\n// VARIABLES //\n\nvar RE_EXP_POS_DIGITS = /e\\+(\\d)$/;\nvar RE_EXP_NEG_DIGITS = /e-(\\d)$/;\nvar RE_ONLY_DIGITS = /^(\\d+)$/;\nvar RE_DIGITS_BEFORE_EXP = /^(\\d+)e/;\nvar RE_TRAILING_PERIOD_ZERO = /\\.0$/;\nvar RE_PERIOD_ZERO_EXP = /\\.0*e/;\nvar RE_ZERO_BEFORE_EXP = /(\\..*[^0])0*e/;\n\n\n// MAIN //\n\n/**\n* Formats a token object argument as a floating-point number.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid floating-point number\n* @returns {string} formatted token argument\n*/\nfunction formatDouble( token ) {\n\tvar digits;\n\tvar out;\n\tvar f = parseFloat( token.arg );\n\tif ( !isFinite( f ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n\t\tif ( !isNumber( token.arg ) ) {\n\t\t\tthrow new Error( 'invalid floating-point number. Value: ' + out );\n\t\t}\n\t\t// Case: NaN, Infinity, or -Infinity\n\t\tf = token.arg;\n\t}\n\tswitch ( token.specifier ) {\n\tcase 'e':\n\tcase 'E':\n\t\tout = f.toExponential( token.precision );\n\t\tbreak;\n\tcase 'f':\n\tcase 'F':\n\t\tout = f.toFixed( token.precision );\n\t\tbreak;\n\tcase 'g':\n\tcase 'G':\n\t\tif ( abs( f ) < 0.0001 ) {\n\t\t\tdigits = token.precision;\n\t\t\tif ( digits > 0 ) {\n\t\t\t\tdigits -= 1;\n\t\t\t}\n\t\t\tout = f.toExponential( digits );\n\t\t} else {\n\t\t\tout = f.toPrecision( token.precision );\n\t\t}\n\t\tif ( !token.alternate ) {\n\t\t\tout = replace.call( out, RE_ZERO_BEFORE_EXP, '$1e' );\n\t\t\tout = replace.call( out, RE_PERIOD_ZERO_EXP, 'e');\n\t\t\tout = replace.call( out, RE_TRAILING_PERIOD_ZERO, '' );\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( 'invalid double notation. Value: ' + token.specifier );\n\t}\n\tout = replace.call( out, RE_EXP_POS_DIGITS, 'e+0$1' );\n\tout = replace.call( out, RE_EXP_NEG_DIGITS, 'e-0$1' );\n\tif ( token.alternate ) {\n\t\tout = replace.call( out, RE_ONLY_DIGITS, '$1.' );\n\t\tout = replace.call( out, RE_DIGITS_BEFORE_EXP, '$1.e' );\n\t}\n\tif ( f >= 0 && token.sign ) {\n\t\tout = token.sign + out;\n\t}\n\tout = ( token.specifier === uppercase.call( token.specifier ) ) ?\n\t\tuppercase.call( out ) :\n\t\tlowercase.call( out );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatDouble;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Returns `n` spaces.\n*\n* @private\n* @param {number} n - number of spaces\n* @returns {string} string of spaces\n*/\nfunction spaces( n ) {\n\tvar out = '';\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tout += ' ';\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Pads a token with spaces to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction spacePad( str, width, right ) {\n\tvar pad = width - str.length;\n\tif ( pad < 0 ) {\n\t\treturn str;\n\t}\n\tstr = ( right ) ?\n\t\tstr + spaces( pad ) :\n\t\tspaces( pad ) + str;\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default spacePad;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport formatInteger from './format_integer.js';\nimport isString from './is_string.js';\nimport formatDouble from './format_double.js';\nimport spacePad from './space_pad.js';\nimport zeroPad from './zero_pad.js';\n\n\n// VARIABLES //\n\nvar fromCharCode = String.fromCharCode;\nvar isnan = isNaN; // NOTE: We use the global `isNaN` function here instead of `@stdlib/math/base/assert/is-nan` to avoid circular dependencies.\nvar isArray = Array.isArray; // NOTE: We use the global `Array.isArray` function here instead of `@stdlib/assert/is-array` to avoid circular dependencies.\n\n\n// FUNCTIONS //\n\n/**\n* Initializes token object with properties of supplied format identifier object or default values if not present.\n*\n* @private\n* @param {Object} token - format identifier object\n* @returns {Object} token object\n*/\nfunction initialize( token ) {\n\tvar out = {};\n\tout.specifier = token.specifier;\n\tout.precision = ( token.precision === void 0 ) ? 1 : token.precision;\n\tout.width = token.width;\n\tout.flags = token.flags || '';\n\tout.mapping = token.mapping;\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Generates string from a token array by interpolating values.\n*\n* @param {Array} tokens - string parts and format identifier objects\n* @param {Array} ...args - variable values\n* @throws {TypeError} first argument must be an array\n* @throws {Error} invalid flags\n* @returns {string} formatted string\n*\n* @example\n* var tokens = [ 'beep ', { 'specifier': 's' } ];\n* var out = formatInterpolate( tokens, 'boop' );\n* // returns 'beep boop'\n*/\nfunction formatInterpolate( tokens ) {\n\tvar hasPeriod;\n\tvar flags;\n\tvar token;\n\tvar flag;\n\tvar num;\n\tvar out;\n\tvar pos;\n\tvar i;\n\tvar j;\n\n\tif ( !isArray( tokens ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an array. Value: `' + tokens + '`.' );\n\t}\n\tout = '';\n\tpos = 1;\n\tfor ( i = 0; i < tokens.length; i++ ) {\n\t\ttoken = tokens[ i ];\n\t\tif ( isString( token ) ) {\n\t\t\tout += token;\n\t\t} else {\n\t\t\thasPeriod = token.precision !== void 0;\n\t\t\ttoken = initialize( token );\n\t\t\tif ( !token.specifier ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Token is missing `specifier` property. Index: `'+ i +'`. Value: `' + token + '`.' );\n\t\t\t}\n\t\t\tif ( token.mapping ) {\n\t\t\t\tpos = token.mapping;\n\t\t\t}\n\t\t\tflags = token.flags;\n\t\t\tfor ( j = 0; j < flags.length; j++ ) {\n\t\t\t\tflag = flags.charAt( j );\n\t\t\t\tswitch ( flag ) {\n\t\t\t\tcase ' ':\n\t\t\t\t\ttoken.sign = ' ';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '+':\n\t\t\t\t\ttoken.sign = '+';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '-':\n\t\t\t\t\ttoken.padRight = true;\n\t\t\t\t\ttoken.padZeros = false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '0':\n\t\t\t\t\ttoken.padZeros = flags.indexOf( '-' ) < 0; // NOTE: We use built-in `Array.prototype.indexOf` here instead of `@stdlib/assert/contains` in order to avoid circular dependencies.\n\t\t\t\t\tbreak;\n\t\t\t\tcase '#':\n\t\t\t\t\ttoken.alternate = true;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'invalid flag: ' + flag );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( token.width === '*' ) {\n\t\t\t\ttoken.width = parseInt( arguments[ pos ], 10 );\n\t\t\t\tpos += 1;\n\t\t\t\tif ( isnan( token.width ) ) {\n\t\t\t\t\tthrow new TypeError( 'the argument for * width at position ' + pos + ' is not a number. Value: `' + token.width + '`.' );\n\t\t\t\t}\n\t\t\t\tif ( token.width < 0 ) {\n\t\t\t\t\ttoken.padRight = true;\n\t\t\t\t\ttoken.width = -token.width;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( hasPeriod ) {\n\t\t\t\tif ( token.precision === '*' ) {\n\t\t\t\t\ttoken.precision = parseInt( arguments[ pos ], 10 );\n\t\t\t\t\tpos += 1;\n\t\t\t\t\tif ( isnan( token.precision ) ) {\n\t\t\t\t\t\tthrow new TypeError( 'the argument for * precision at position ' + pos + ' is not a number. Value: `' + token.precision + '`.' );\n\t\t\t\t\t}\n\t\t\t\t\tif ( token.precision < 0 ) {\n\t\t\t\t\t\ttoken.precision = 1;\n\t\t\t\t\t\thasPeriod = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttoken.arg = arguments[ pos ];\n\t\t\tswitch ( token.specifier ) {\n\t\t\tcase 'b':\n\t\t\tcase 'o':\n\t\t\tcase 'x':\n\t\t\tcase 'X':\n\t\t\tcase 'd':\n\t\t\tcase 'i':\n\t\t\tcase 'u':\n\t\t\t\t// Case: %b (binary), %o (octal), %x, %X (hexadecimal), %d, %i (decimal), %u (unsigned decimal)\n\t\t\t\tif ( hasPeriod ) {\n\t\t\t\t\ttoken.padZeros = false;\n\t\t\t\t}\n\t\t\t\ttoken.arg = formatInteger( token );\n\t\t\t\tbreak;\n\t\t\tcase 's':\n\t\t\t\t// Case: %s (string)\n\t\t\t\ttoken.maxWidth = ( hasPeriod ) ? token.precision : -1;\n\t\t\t\tbreak;\n\t\t\tcase 'c':\n\t\t\t\t// Case: %c (character)\n\t\t\t\tif ( !isnan( token.arg ) ) {\n\t\t\t\t\tnum = parseInt( token.arg, 10 );\n\t\t\t\t\tif ( num < 0 || num > 127 ) {\n\t\t\t\t\t\tthrow new Error( 'invalid character code. Value: ' + token.arg );\n\t\t\t\t\t}\n\t\t\t\t\ttoken.arg = ( isnan( num ) ) ?\n\t\t\t\t\t\tString( token.arg ) :\n\t\t\t\t\t\tfromCharCode( num );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'e':\n\t\t\tcase 'E':\n\t\t\tcase 'f':\n\t\t\tcase 'F':\n\t\t\tcase 'g':\n\t\t\tcase 'G':\n\t\t\t\t// Case: %e, %E (scientific notation), %f, %F (decimal floating point), %g, %G (uses the shorter of %e/E or %f/F)\n\t\t\t\tif ( !hasPeriod ) {\n\t\t\t\t\ttoken.precision = 6;\n\t\t\t\t}\n\t\t\t\ttoken.arg = formatDouble( token );\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'invalid specifier: ' + token.specifier );\n\t\t\t}\n\t\t\t// Fit argument into field width...\n\t\t\tif ( token.maxWidth >= 0 && token.arg.length > token.maxWidth ) {\n\t\t\t\ttoken.arg = token.arg.substring( 0, token.maxWidth );\n\t\t\t}\n\t\t\tif ( token.padZeros ) {\n\t\t\t\ttoken.arg = zeroPad( token.arg, token.width || token.precision, token.padRight ); // eslint-disable-line max-len\n\t\t\t} else if ( token.width ) {\n\t\t\t\ttoken.arg = spacePad( token.arg, token.width, token.padRight );\n\t\t\t}\n\t\t\tout += token.arg || '';\n\t\t\tpos += 1;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatInterpolate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar RE = /%(?:([1-9]\\d*)\\$)?([0 +\\-#]*)(\\*|\\d+)?(?:(\\.)(\\*|\\d+)?)?[hlL]?([%A-Za-z])/g;\n\n\n// FUNCTIONS //\n\n/**\n* Parses a delimiter.\n*\n* @private\n* @param {Array} match - regular expression match\n* @returns {Object} delimiter token object\n*/\nfunction parse( match ) {\n\tvar token = {\n\t\t'mapping': ( match[ 1 ] ) ? parseInt( match[ 1 ], 10 ) : void 0,\n\t\t'flags': match[ 2 ],\n\t\t'width': match[ 3 ],\n\t\t'precision': match[ 5 ],\n\t\t'specifier': match[ 6 ]\n\t};\n\tif ( match[ 4 ] === '.' && match[ 5 ] === void 0 ) {\n\t\ttoken.precision = '1';\n\t}\n\treturn token;\n}\n\n\n// MAIN //\n\n/**\n* Tokenizes a string into an array of string parts and format identifier objects.\n*\n* @param {string} str - input string\n* @returns {Array} tokens\n*\n* @example\n* var tokens = formatTokenize( 'Hello %s!' );\n* // returns [ 'Hello ', {...}, '!' ]\n*/\nfunction formatTokenize( str ) {\n\tvar content;\n\tvar tokens;\n\tvar match;\n\tvar prev;\n\n\ttokens = [];\n\tprev = 0;\n\tmatch = RE.exec( str );\n\twhile ( match ) {\n\t\tcontent = str.slice( prev, RE.lastIndex - match[ 0 ].length );\n\t\tif ( content.length ) {\n\t\t\ttokens.push( content );\n\t\t}\n\t\ttokens.push( parse( match ) );\n\t\tprev = RE.lastIndex;\n\t\tmatch = RE.exec( str );\n\t}\n\tcontent = str.slice( prev );\n\tif ( content.length ) {\n\t\ttokens.push( content );\n\t}\n\treturn tokens;\n}\n\n\n// EXPORTS //\n\nexport default formatTokenize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a string primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string primitive\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns false\n*/\nfunction isString( value ) {\n\treturn ( typeof value === 'string' ); // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport interpolate from '@stdlib/string-base-format-interpolate';\nimport tokenize from '@stdlib/string-base-format-tokenize';\nimport isString from './is_string.js';\n\n\n// MAIN //\n\n/**\n* Inserts supplied variable values into a format string.\n*\n* @param {string} str - input string\n* @param {Array} ...args - variable values\n* @throws {TypeError} first argument must be a string\n* @throws {Error} invalid flags\n* @returns {string} formatted string\n*\n* @example\n* var str = format( 'Hello %s!', 'world' );\n* // returns 'Hello world!'\n*\n* @example\n* var str = format( 'Pi: ~%.2f', 3.141592653589793 );\n* // returns 'Pi: ~3.14'\n*/\nfunction format( str ) {\n\tvar args;\n\tvar i;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\targs = [ tokenize( str ) ];\n\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\treturn interpolate.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default format;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle, no-proto */\n\n'use strict';\n\n// MODULES //\n\nimport format from '@stdlib/string-format';\n\n\n// VARIABLES //\n\nvar objectProtoype = Object.prototype;\nvar toStr = objectProtoype.toString;\nvar defineGetter = objectProtoype.__defineGetter__;\nvar defineSetter = objectProtoype.__defineSetter__;\nvar lookupGetter = objectProtoype.__lookupGetter__;\nvar lookupSetter = objectProtoype.__lookupSetter__;\n\n\n// MAIN //\n\n/**\n* Defines (or modifies) an object property.\n*\n* ## Notes\n*\n* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.\n*\n* @param {Object} obj - object on which to define the property\n* @param {string} prop - property name\n* @param {Object} descriptor - property descriptor\n* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object\n* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties\n* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator\n* @param {*} [descriptor.value] - property value\n* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.\n* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} third argument must be an object\n* @throws {Error} property descriptor cannot have both a value and a setter and/or getter\n* @returns {Object} object with added property\n*\n* @example\n* var obj = {};\n*\n* defineProperty( obj, 'foo', {\n*     'value': 'bar'\n* });\n*\n* var str = obj.foo;\n* // returns 'bar'\n*/\nfunction defineProperty( obj, prop, descriptor ) {\n\tvar prototype;\n\tvar hasValue;\n\tvar hasGet;\n\tvar hasSet;\n\n\tif ( typeof obj !== 'object' || obj === null || toStr.call( obj ) === '[object Array]' ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', obj ) );\n\t}\n\tif ( typeof descriptor !== 'object' || descriptor === null || toStr.call( descriptor ) === '[object Array]' ) {\n\t\tthrow new TypeError( format( 'invalid argument. Property descriptor must be an object. Value: `%s`.', descriptor ) );\n\t}\n\thasValue = ( 'value' in descriptor );\n\tif ( hasValue ) {\n\t\tif (\n\t\t\tlookupGetter.call( obj, prop ) ||\n\t\t\tlookupSetter.call( obj, prop )\n\t\t) {\n\t\t\t// Override `__proto__` to avoid touching inherited accessors:\n\t\t\tprototype = obj.__proto__;\n\t\t\tobj.__proto__ = objectProtoype;\n\n\t\t\t// Delete property as existing getters/setters prevent assigning value to specified property:\n\t\t\tdelete obj[ prop ];\n\t\t\tobj[ prop ] = descriptor.value;\n\n\t\t\t// Restore original prototype:\n\t\t\tobj.__proto__ = prototype;\n\t\t} else {\n\t\t\tobj[ prop ] = descriptor.value;\n\t\t}\n\t}\n\thasGet = ( 'get' in descriptor );\n\thasSet = ( 'set' in descriptor );\n\n\tif ( hasValue && ( hasGet || hasSet ) ) {\n\t\tthrow new Error( 'invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.' );\n\t}\n\n\tif ( hasGet && defineGetter ) {\n\t\tdefineGetter.call( obj, prop, descriptor.get );\n\t}\n\tif ( hasSet && defineSetter ) {\n\t\tdefineSetter.call( obj, prop, descriptor.set );\n\t}\n\treturn obj;\n}\n\n\n// EXPORTS //\n\nexport default defineProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Define (or modify) an object property.\n*\n* @module @stdlib/utils-define-property\n*\n* @example\n* import defineProperty from '@stdlib/utils-define-property';\n*\n* var obj = {};\n* defineProperty( obj, 'foo', {\n*     'value': 'bar',\n*     'writable': false,\n*     'configurable': false,\n*     'enumerable': false\n* });\n* obj.foo = 'boop'; // => throws\n*/\n\n// MODULES //\n\nimport hasDefinePropertySupport from './has_define_property_support.js';\nimport builtin from './builtin.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar defineProperty;\nif ( hasDefinePropertySupport() ) {\n\tdefineProperty = builtin;\n} else {\n\tdefineProperty = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default defineProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from './define_property.js';\n\n\n// MAIN //\n\n/**\n* Tests for `Object.defineProperty` support.\n*\n* @private\n* @returns {boolean} boolean indicating if an environment has `Object.defineProperty` support\n*\n* @example\n* var bool = hasDefinePropertySupport();\n* // returns <boolean>\n*/\nfunction hasDefinePropertySupport() {\n\t// Test basic support...\n\ttry {\n\t\tdefineProperty( {}, 'x', {} );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default hasDefinePropertySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\n\n\n// MAIN //\n\n/**\n* Defines a read-only property.\n*\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {*} value - value to set\n*\n* @example\n* var obj = {};\n*\n* setReadOnly( obj, 'foo', 'bar' );\n*\n* try {\n*     obj.foo = 'boop';\n* } catch ( err ) {\n*     console.error( err.message );\n* }\n*/\nfunction setReadOnly( obj, prop, value ) {\n\tdefineProperty( obj, prop, {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': value\n\t});\n}\n\n\n// EXPORTS //\n\nexport default setReadOnly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Compute the principal square root of a double-precision floating-point number.\n*\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} principal square root\n*\n* @example\n* var v = sqrt( 4.0 );\n* // returns 2.0\n*\n* v = sqrt( 9.0 );\n* // returns 3.0\n*\n* v = sqrt( 0.0 );\n* // returns 0.0\n*\n* v = sqrt( -4.0 );\n* // returns NaN\n*\n* v = sqrt( NaN );\n* // returns NaN\n*/\nvar sqrt = Math.sqrt; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default sqrt;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: implementation (?)\n\n/**\n* Rounds a double-precision floating-point number toward negative infinity.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = floor( -4.2 );\n* // returns -5.0\n*\n* @example\n* var v = floor( 9.99999 );\n* // returns 9.0\n*\n* @example\n* var v = floor( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = floor( NaN );\n* // returns NaN\n*/\nvar floor = Math.floor; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default floor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport floor from '@stdlib/math-base-special-floor';\nimport FLOAT64_MAX_SAFE_INTEGER from '@stdlib/constants-float64-max-safe-integer';\nimport WHEEL_PRIMES from './wheel_primes.json';\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating whether a number is a prime.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether a value is a prime number\n*\n* @example\n* var bool = isPrime( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isPrime( 4.0 );\n* // returns false\n*/\nfunction isPrime( x ) {\n\tvar N;\n\tvar i;\n\n\t// Check whether the number is an integer...\n\tif ( floor( x ) !== x ) {\n\t\treturn false;\n\t}\n\t// Check whether the number is positive...\n\tif ( x <= 3 ) {\n\t\treturn (x > 1); // primes: 2, 3\n\t}\n\t// Check whether the number is even...\n\tif ( x > FLOAT64_MAX_SAFE_INTEGER || x%2 === 0 ) {\n\t\treturn false;\n\t}\n\t// Check for small primes...\n\tif ( x < 9 ) {\n\t\treturn true; // primes: 5, 7\n\t}\n\t// Check whether the number is evenly divisible by `3`...\n\tif ( x%3 === 0 ) {\n\t\treturn false;\n\t}\n\t// Check whether the number is evenly divisible by `5`...\n\tif ( x%5 === 0 ) {\n\t\treturn false;\n\t}\n\t// Check whether the number is evenly divisible by `7`...\n\tif ( x%7 === 0 ) {\n\t\treturn false;\n\t}\n\t// Check whether the number is a prime number in the wheel...\n\tif ( WHEEL_PRIMES[ x ] ) {\n\t\treturn true;\n\t}\n\t// Use trial division (with wheel factorization; see https://en.wikipedia.org/wiki/Wheel_factorization) to detect composite numbers, leveraging the fact that all primes greater than `210` are of the form `210k±1`...\n\tN = floor( sqrt( x ) );\n\tfor ( i = 11; i <= N; i += 210 ) {\n\t\tif (\n\t\t\tx%i === 0 ||       // 11\n\t\t\tx%(i+2) === 0 ||   // 13\n\t\t\tx%(i+6) === 0 ||   // 17\n\t\t\tx%(i+8) === 0 ||   // 19\n\t\t\tx%(i+12) === 0 ||  // 23\n\t\t\tx%(i+18) === 0 ||  // 29\n\t\t\tx%(i+20) === 0 ||  // 31\n\t\t\tx%(i+26) === 0 ||  // 37\n\t\t\tx%(i+30) === 0 ||  // 41\n\t\t\tx%(i+32) === 0 ||  // 43\n\t\t\tx%(i+36) === 0 ||  // 47\n\t\t\tx%(i+42) === 0 ||  // 53\n\t\t\tx%(i+48) === 0 ||  // 59\n\t\t\tx%(i+50) === 0 ||  // 61\n\t\t\tx%(i+56) === 0 ||  // 67\n\t\t\tx%(i+60) === 0 ||  // 71\n\t\t\tx%(i+62) === 0 ||  // 73\n\t\t\tx%(i+68) === 0 ||  // 79\n\t\t\tx%(i+72) === 0 ||  // 83\n\t\t\tx%(i+78) === 0 ||  // 89\n\t\t\tx%(i+86) === 0 ||  // 97\n\t\t\tx%(i+90) === 0 ||  // 101\n\t\t\tx%(i+92) === 0 ||  // 103\n\t\t\tx%(i+96) === 0 ||  // 107\n\t\t\tx%(i+98) === 0 ||  // 109\n\t\t\tx%(i+102) === 0 || // 113\n\t\t\tx%(i+110) === 0 || // 121 (relatively prime)\n\t\t\tx%(i+116) === 0 || // 127\n\t\t\tx%(i+120) === 0 || // 131\n\t\t\tx%(i+126) === 0 || // 137\n\t\t\tx%(i+128) === 0 || // 139\n\t\t\tx%(i+132) === 0 || // 143 (relatively prime)\n\t\t\tx%(i+138) === 0 || // 149\n\t\t\tx%(i+140) === 0 || // 151\n\t\t\tx%(i+146) === 0 || // 157\n\t\t\tx%(i+152) === 0 || // 163\n\t\t\tx%(i+156) === 0 || // 167\n\t\t\tx%(i+158) === 0 || // 169 (relatively prime)\n\t\t\tx%(i+162) === 0 || // 173\n\t\t\tx%(i+168) === 0 || // 179\n\t\t\tx%(i+170) === 0 || // 181\n\t\t\tx%(i+176) === 0 || // 187 (relatively prime)\n\t\t\tx%(i+180) === 0 || // 191\n\t\t\tx%(i+182) === 0 || // 193\n\t\t\tx%(i+186) === 0 || // 197\n\t\t\tx%(i+188) === 0 || // 199\n\t\t\tx%(i+198) === 0 || // 209 (relatively prime)\n\t\t\tx%(i+200) === 0    // 211\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\n// EXPORTS //\n\nexport default isPrime;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum safe double-precision floating-point integer.\n*\n* @module @stdlib/constants-float64-max-safe-integer\n* @type {number}\n*\n* @example\n* import FLOAT64_MAX_SAFE_INTEGER from '@stdlib/constants-float64-max-safe-integer';\n* // returns 9007199254740991\n*/\n\n\n// MAIN //\n\n/**\n* Maximum safe double-precision floating-point integer.\n*\n* ## Notes\n*\n* The integer has the value\n*\n* ```tex\n* 2^{53} - 1\n* ```\n*\n* @constant\n* @type {number}\n* @default 9007199254740991\n* @see [Safe Integers]{@link http://www.2ality.com/2013/10/safe-integers.html}\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_SAFE_INTEGER = 9007199254740991;\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_SAFE_INTEGER;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Tests if a finite double-precision floating-point number is an integer.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is an integer\n*\n* @example\n* var bool = isInteger( 1.0 );\n* // returns true\n*\n* @example\n* var bool = isInteger( 3.14 );\n* // returns false\n*/\nfunction isInteger( x ) {\n\treturn (floor(x) === x);\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* @module @stdlib/constants-float64-pinf\n* @type {number}\n*\n* @example\n* import FLOAT64_PINF from '@stdlib/constants-float64-pinf';\n* // returns Infinity\n*/\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point positive infinity has the bit sequence\n*\n* ```binarystring\n* 0 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.POSITIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default FLOAT64_PINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is `NaN`.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is `NaN`\n*\n* @example\n* var bool = isnan( NaN );\n* // returns true\n*\n* @example\n* var bool = isnan( 7.0 );\n* // returns false\n*/\nfunction isnan( x ) {\n\treturn ( x !== x );\n}\n\n\n// EXPORTS //\n\nexport default isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// EXPORTS //\n\nexport default Number; // eslint-disable-line stdlib/require-globals\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* @module @stdlib/constants-float64-ninf\n* @type {number}\n*\n* @example\n* import FLOAT64_NINF from '@stdlib/constants-float64-ninf';\n* // returns -Infinity\n*/\n\n// MODULES //\n\nimport Number from '@stdlib/number-ctor';\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point negative infinity has the bit sequence\n*\n* ```binarystring\n* 1 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.NEGATIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_NINF = Number.NEGATIVE_INFINITY;\n\n\n// EXPORTS //\n\nexport default FLOAT64_NINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport INT32_MAX from '@stdlib/constants-int32-max';\nimport bitwise from './bitwise_binary_gcd.js';\nimport largeIntegers from './binary_gcd.js';\n\n\n// MAIN //\n\n/**\n* Computes the greatest common divisor (gcd).\n*\n* @param {integer} a - integer\n* @param {integer} b - integer\n* @returns {integer} greatest common divisor\n*\n* @example\n* var v = gcd( 48, 18 );\n* // returns 6\n*\n* @example\n* var v = gcd( 3.14, 18 );\n* // returns NaN\n*\n* @example\n* var v = gcd( NaN, 18 );\n* // returns NaN\n*/\nfunction gcd( a, b ) {\n\tif ( isnan( a ) || isnan( b ) ) {\n\t\treturn NaN;\n\t}\n\tif (\n\t\ta === PINF ||\n\t\tb === PINF ||\n\t\ta === NINF ||\n\t\tb === NINF\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( !( isInteger( a ) && isInteger( b ) ) ) {\n\t\treturn NaN;\n\t}\n\tif ( a < 0 ) {\n\t\ta = -a;\n\t}\n\tif ( b < 0 ) {\n\t\tb = -b;\n\t}\n\tif ( a <= INT32_MAX && b <= INT32_MAX ) {\n\t\treturn bitwise( a, b );\n\t}\n\treturn largeIntegers( a, b );\n}\n\n\n// EXPORTS //\n\nexport default gcd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum signed 32-bit integer.\n*\n* @module @stdlib/constants-int32-max\n* @type {integer32}\n*\n* @example\n* import INT32_MAX from '@stdlib/constants-int32-max';\n* // returns 2147483647\n*/\n\n\n// MAIN //\n\n/**\n* Maximum signed 32-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{31} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 01111111111111111111111111111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 2147483647\n*/\nvar INT32_MAX = 2147483647|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default INT32_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Computes the greatest common divisor (gcd) using the binary GCD algorithm and bitwise operations.\n*\n* ## References\n*\n* -   Stein, Josef. 1967. \"Computational problems associated with Racah algebra.\" _Journal of Computational Physics_ 1 (3): 397–405. doi:[10.1016/0021-9991(67)90047-2][@stein:1967].\n*\n* [@stein:1967]: https://doi.org/10.1016/0021-9991(67)90047-2\n*\n* @private\n* @param {integer32} a - integer\n* @param {integer32} b - integer\n* @returns {integer32} greatest common divisor\n*\n* @example\n* var v = gcd( 48, 18 );\n* // returns 6\n*/\nfunction gcd( a, b ) {\n\tvar k = 0;\n\tvar t;\n\n\t// Simple cases:\n\tif ( a === 0 ) {\n\t\treturn b;\n\t}\n\tif ( b === 0 ) {\n\t\treturn a;\n\t}\n\t// Reduce `a` and/or `b` to odd numbers and keep track of the greatest power of 2 dividing both `a` and `b`...\n\twhile ( (a & 1) === 0 && (b & 1) === 0 ) {\n\t\ta >>>= 1; // right shift\n\t\tb >>>= 1; // right shift\n\t\tk += 1;\n\t}\n\t// Reduce `a` to an odd number...\n\twhile ( (a & 1) === 0 ) {\n\t\ta >>>= 1; // right shift\n\t}\n\t// Henceforth, `a` is always odd...\n\twhile ( b ) {\n\t\t// Remove all factors of 2 in `b`, as they are not common...\n\t\twhile ( (b & 1) === 0 ) {\n\t\t\tb >>>= 1; // right shift\n\t\t}\n\t\t// `a` and `b` are both odd. Swap values such that `b` is the larger of the two values, and then set `b` to the difference (which is even)...\n\t\tif ( a > b ) {\n\t\t\tt = b;\n\t\t\tb = a;\n\t\t\ta = t;\n\t\t}\n\t\tb -= a; // b=0 iff b=a\n\t}\n\t// Restore common factors of 2...\n\treturn a << k;\n}\n\n\n// EXPORTS //\n\nexport default gcd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Computes the greatest common divisor (gcd) using the binary GCD algorithm.\n*\n* ## References\n*\n* -   Stein, Josef. 1967. \"Computational problems associated with Racah algebra.\" _Journal of Computational Physics_ 1 (3): 397–405. doi:[10.1016/0021-9991(67)90047-2][@stein:1967].\n*\n* [@stein:1967]: https://doi.org/10.1016/0021-9991(67)90047-2\n*\n* @private\n* @param {integer} a - integer\n* @param {integer} b - integer\n* @returns {integer} greatest common divisor\n*\n* @example\n* var v = gcd( 1.2676506002282294e+30, 9007199254740992 );\n* // returns 9007199254740992\n*/\nfunction gcd( a, b ) {\n\tvar k = 1;\n\tvar t;\n\n\t// Simple cases:\n\tif ( a === 0 ) {\n\t\treturn b;\n\t}\n\tif ( b === 0 ) {\n\t\treturn a;\n\t}\n\t// Reduce `a` and/or `b` to odd numbers and keep track of the greatest power of 2 dividing both `a` and `b`...\n\twhile ( a%2 === 0 && b%2 === 0 ) {\n\t\ta /= 2; // right shift\n\t\tb /= 2; // right shift\n\t\tk *= 2; // left shift\n\t}\n\t// Reduce `a` to an odd number...\n\twhile ( a%2 === 0 ) {\n\t\ta /= 2; // right shift\n\t}\n\t// Henceforth, `a` is always odd...\n\twhile ( b ) {\n\t\t// Remove all factors of 2 in `b`, as they are not common...\n\t\twhile ( b%2 === 0 ) {\n\t\t\tb /= 2; // right shift\n\t\t}\n\t\t// `a` and `b` are both odd. Swap values such that `b` is the larger of the two values, and then set `b` to the difference (which is even)...\n\t\tif ( a > b ) {\n\t\t\tt = b;\n\t\t\tb = a;\n\t\t\ta = t;\n\t\t}\n\t\tb -= a; // b=0 iff b=a\n\t}\n\t// Restore common factors of 2...\n\treturn k * a;\n}\n\n\n// EXPORTS //\n\nexport default gcd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/math-base-assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests if a finite numeric value is an even number.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is an even number\n*\n* @example\n* var bool = isEven( 5.0 );\n* // returns false\n*\n* @example\n* var bool = isEven( -2.0 );\n* // returns true\n*\n* @example\n* var bool = isEven( 0.0 );\n* // returns true\n*\n* @example\n* var bool = isEven( NaN );\n* // returns false\n*/\nfunction isEven( x ) {\n\treturn isInteger( x/2.0 );\n}\n\n\n// EXPORTS //\n\nexport default isEven;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasSymbols from '@stdlib/assert-has-symbol-support';\n\n\n// VARIABLES //\n\nvar FLG = hasSymbols();\n\n\n// MAIN //\n\n/**\n* Tests for native `toStringTag` support.\n*\n* @returns {boolean} boolean indicating if an environment has `toStringTag` support\n*\n* @example\n* var bool = hasToStringTagSupport();\n* // returns <boolean>\n*/\nfunction hasToStringTagSupport() {\n\treturn ( FLG && typeof Symbol.toStringTag === 'symbol' );\n}\n\n\n// EXPORTS //\n\nexport default hasToStringTagSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests for native `Symbol` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Symbol` support\n*\n* @example\n* var bool = hasSymbolSupport();\n* // returns <boolean>\n*/\nfunction hasSymbolSupport() {\n\treturn (\n\t\ttypeof Symbol === 'function' &&\n\t\ttypeof Symbol( 'foo' ) === 'symbol'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default hasSymbolSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar toStr = Object.prototype.toString;\n\n\n// EXPORTS //\n\nexport default toStr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\nvar has = Object.prototype.hasOwnProperty;\n\n\n// MAIN //\n\n/**\n* Tests if an object has a specified property.\n*\n* @param {*} value - value to test\n* @param {*} property - property to test\n* @returns {boolean} boolean indicating if an object has a specified property\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = hasOwnProp( beep, 'boop' );\n* // returns true\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = hasOwnProp( beep, 'bap' );\n* // returns false\n*/\nfunction hasOwnProp( value, property ) {\n\tif (\n\t\tvalue === void 0 ||\n\t\tvalue === null\n\t) {\n\t\treturn false;\n\t}\n\treturn has.call( value, property );\n}\n\n\n// EXPORTS //\n\nexport default hasOwnProp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar Sym = ( typeof Symbol === 'function' ) ? Symbol : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default Sym;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a string value indicating a specification defined classification of an object.\n*\n* @module @stdlib/utils-native-class\n*\n* @example\n* import nativeClass from '@stdlib/utils-native-class';\n*\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* function Beep() {\n*     return this;\n* }\n* str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\n\n// MODULES //\n\nimport hasToStringTag from '@stdlib/assert-has-tostringtag-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar main;\nif ( hasToStringTag() ) {\n\tmain = polyfill;\n} else {\n\tmain = builtin;\n}\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Symbol from '@stdlib/symbol-ctor';\n\n\n// MAIN //\n\nvar toStrTag = ( typeof Symbol === 'function' ) ? Symbol.toStringTag : '';\n\n\n// EXPORTS //\n\nexport default toStrTag;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport toStringTag from './tostringtag.js';\nimport toStr from './tostring.js';\n\n\n// MAIN //\n\n/**\n* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.\n*\n* @param {*} v - input value\n* @returns {string} string value indicating a specification defined classification of the input value\n*\n* @example\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* @example\n* var str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* @example\n* function Beep() {\n*     return this;\n* }\n* var str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\nfunction nativeClass( v ) {\n\tvar isOwn;\n\tvar tag;\n\tvar out;\n\n\tif ( v === null || v === void 0 ) {\n\t\treturn toStr.call( v );\n\t}\n\ttag = v[ toStringTag ];\n\tisOwn = hasOwnProp( v, toStringTag );\n\n\t// Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.\n\ttry {\n\t\tv[ toStringTag ] = void 0;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn toStr.call( v );\n\t}\n\tout = toStr.call( v );\n\n\tif ( isOwn ) {\n\t\tv[ toStringTag ] = tag;\n\t} else {\n\t\tdelete v[ toStringTag ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default nativeClass;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport toStr from './tostring.js';\n\n\n// MAIN //\n\n/**\n* Returns a string value indicating a specification defined classification (via the internal property `[[Class]]`) of an object.\n*\n* @param {*} v - input value\n* @returns {string} string value indicating a specification defined classification of the input value\n*\n* @example\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* @example\n* var str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* @example\n* function Beep() {\n*     return this;\n* }\n* var str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\nfunction nativeClass( v ) {\n\treturn toStr.call( v );\n}\n\n\n// EXPORTS //\n\nexport default nativeClass;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasFloat32Array = ( typeof Float32Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Float32Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Float32Array\n*\n* @example\n* var bool = isFloat32Array( new Float32Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isFloat32Array( [] );\n* // returns false\n*/\nfunction isFloat32Array( value ) {\n\treturn (\n\t\t( hasFloat32Array && value instanceof Float32Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Float32Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isFloat32Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Float32Array === 'function' ) ? Float32Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Float32Array === 'function' ) ? Float32Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of single-precision floating-point numbers in the platform byte order.\n*\n* @module @stdlib/array-float32\n*\n* @example\n* import ctor from '@stdlib/array-float32';\n*\n* var arr = new ctor( 10 );\n* // returns <Float32Array>\n*/\n\n// MODULES //\n\nimport hasFloat32ArraySupport from '@stdlib/assert-has-float32array-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasFloat32ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFloat32Array from '@stdlib/assert-is-float32array';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport GlobalFloat32Array from './float32array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Float32Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Float32Array` support\n*\n* @example\n* var bool = hasFloat32ArraySupport();\n* // returns <boolean>\n*/\nfunction hasFloat32ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalFloat32Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = new GlobalFloat32Array( [ 1.0, 3.14, -3.14, 5.0e40 ] );\n\t\tbool = (\n\t\t\tisFloat32Array( arr ) &&\n\t\t\tarr[ 0 ] === 1.0 &&\n\t\t\tarr[ 1 ] === 3.140000104904175 &&\n\t\t\tarr[ 2 ] === -3.140000104904175 &&\n\t\t\tarr[ 3 ] === PINF\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasFloat32ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of single-precision floating-point numbers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasUint32Array = ( typeof Uint32Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint32Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint32Array\n*\n* @example\n* var bool = isUint32Array( new Uint32Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint32Array( [] );\n* // returns false\n*/\nfunction isUint32Array( value ) {\n\treturn (\n\t\t( hasUint32Array && value instanceof Uint32Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint32Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isUint32Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 32-bit integer.\n*\n* @module @stdlib/constants-uint32-max\n* @type {uinteger32}\n*\n* @example\n* import UINT32_MAX from '@stdlib/constants-uint32-max';\n* // returns 4294967295\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 32-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{32} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 11111111111111111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 4294967295\n*/\nvar UINT32_MAX = 4294967295;\n\n\n// EXPORTS //\n\nexport default UINT32_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint32Array === 'function' ) ? Uint32Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint32Array === 'function' ) ? Uint32Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 32-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint32\n*\n* @example\n* import ctor from '@stdlib/array-uint32';\n*\n* var arr = new ctor( 10 );\n* // returns <Uint32Array>\n*/\n\n// MODULES //\n\nimport hasUint32ArraySupport from '@stdlib/assert-has-uint32array-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint32ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isUint32Array from '@stdlib/assert-is-uint32array';\nimport UINT32_MAX from '@stdlib/constants-uint32-max';\nimport GlobalUint32Array from './uint32array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint32Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint32Array` support\n*\n* @example\n* var bool = hasUint32ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint32ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint32Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT32_MAX+1, UINT32_MAX+2 ];\n\t\tarr = new GlobalUint32Array( arr );\n\t\tbool = (\n\t\t\tisUint32Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&            // truncation\n\t\t\tarr[ 2 ] === UINT32_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&            // wrap around\n\t\t\tarr[ 4 ] === 1               // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasUint32ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 32-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Single-precision floating-point positive infinity.\n*\n* @module @stdlib/constants-float32-pinf\n* @type {number}\n*\n* @example\n* import FLOAT32_PINF from '@stdlib/constants-float32-pinf';\n* // returns +infinity\n*/\n\n// MODULES //\n\nimport Float32Array from '@stdlib/array-float32';\nimport Uint32Array from '@stdlib/array-uint32';\n\n\n// VARIABLES //\n\nvar FLOAT32_VIEW = new Float32Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT32_VIEW.buffer );\nvar v;\n\n\n// MAIN //\n\n/**\n* Single-precision floating-point positive infinity.\n*\n* ## Notes\n*\n* Single-precision floating-point positive infinity has the bit sequence\n*\n* ```binarystring\n* 0 11111111 00000000000000000000000\n* ```\n*\n* This bit sequence corresponds to the unsigned 32-bit integer `2139095040` and to the HEX value `0x7f800000`.\n*\n* @constant\n* @type {number}\n* @default 0x7f800000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_PINF = 0x7f800000;\n\n// Set the ArrayBuffer bit sequence:\nUINT32_VIEW[ 0 ] = FLOAT32_PINF;\n\nv = FLOAT32_VIEW[ 0 ];\n\n\n// EXPORTS //\n\nexport default v;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Single-precision floating-point negative infinity.\n*\n* @module @stdlib/constants-float32-ninf\n* @type {number}\n*\n* @example\n* import FLOAT32_NINF from '@stdlib/constants-float32-ninf';\n* // returns -infinity\n*/\n\n// MODULES //\n\nimport Float32Array from '@stdlib/array-float32';\nimport Uint32Array from '@stdlib/array-uint32';\n\n\n// VARIABLES //\n\nvar FLOAT32_VIEW = new Float32Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT32_VIEW.buffer );\nvar v;\n\n\n// MAIN //\n\n/**\n* Single-precision floating-point negative infinity.\n*\n* ## Notes\n*\n* Single-precision floating-point negative infinity has the bit sequence\n*\n* ```binarystring\n* 1 11111111 00000000000000000000000\n* ```\n*\n* This bit sequence corresponds to the unsigned 32-bit integer `4286578688` and to the HEX value `0xff800000`.\n*\n* @constant\n* @type {number}\n* @default 0xff800000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_NINF = 0xff800000;\n\n// Set the ArrayBuffer bit sequence:\nUINT32_VIEW[ 0 ] = FLOAT32_NINF;\n\nv = FLOAT32_VIEW[ 0 ];\n\n\n// EXPORTS //\n\nexport default v;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is infinite.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is infinite\n*\n* @example\n* var bool = isInfinite( Infinity );\n* // returns true\n*\n* @example\n* var bool = isInfinite( -Infinity );\n* // returns true\n*\n* @example\n* var bool = isInfinite( 5.0 );\n* // returns false\n*\n* @example\n* var bool = isInfinite( NaN );\n* // returns false\n*/\nfunction isInfinite( x ) {\n\treturn (x === PINF || x === NINF);\n}\n\n\n// EXPORTS //\n\nexport default isInfinite;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float32-pinf';\nimport NINF from '@stdlib/constants-float32-ninf';\n\n\n// MAIN //\n\n/**\n* Tests if a single-precision floating-point numeric value is infinite.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is infinite\n*\n* @example\n* var bool = isInfinitef( Infinity );\n* // returns true\n*\n* @example\n* var bool = isInfinitef( -Infinity );\n* // returns true\n*\n* @example\n* var bool = isInfinitef( 5.0 );\n* // returns false\n*\n* @example\n* var bool = isInfinitef( NaN );\n* // returns false\n*/\nfunction isInfinitef( x ) {\n\treturn (x === PINF || x === NINF);\n}\n\n\n// EXPORTS //\n\nexport default isInfinitef;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if a single-precision floating-point numeric value is `NaN`.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is `NaN`\n*\n* @example\n* var bool = isnanf( NaN );\n* // returns true\n*\n* @example\n* var bool = isnanf( 7.0 );\n* // returns false\n*/\nfunction isnanf( x ) {\n\treturn ( x !== x );\n}\n\n\n// EXPORTS //\n\nexport default isnanf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Tests if a finite double-precision floating-point number is a negative integer.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is a negative integer\n*\n* @example\n* var bool = isNegativeInteger( -1.0 );\n* // returns true\n*\n* @example\n* var bool = isNegativeInteger( 0.0 );\n* // returns false\n*\n* @example\n* var bool = isNegativeInteger( 10.0 );\n* // returns false\n*/\nfunction isNegativeInteger( x ) {\n\treturn (floor(x) === x && x < 0.0);\n}\n\n\n// EXPORTS //\n\nexport default isNegativeInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is negative zero.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is negative zero\n*\n* @example\n* var bool = isNegativeZero( -0.0 );\n* // returns true\n*\n* @example\n* var bool = isNegativeZero( 0.0 );\n* // returns false\n*/\nfunction isNegativeZero( x ) {\n\treturn (x === 0.0 && 1.0/x === NINF);\n}\n\n\n// EXPORTS //\n\nexport default isNegativeZero;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport NINF from '@stdlib/constants-float32-ninf';\n\n\n// MAIN //\n\n/**\n* Tests if a single-precision floating-point numeric value is negative zero.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is negative zero\n*\n* @example\n* var bool = isNegativeZerof( -0.0 );\n* // returns true\n*\n* @example\n* var bool = isNegativeZerof( 0.0 );\n* // returns false\n*/\nfunction isNegativeZerof( x ) {\n\treturn (x === 0.0 && 1.0/x === NINF);\n}\n\n\n// EXPORTS //\n\nexport default isNegativeZerof;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Tests if a finite double-precision floating-point number is a nonnegative integer.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is a nonnegative integer\n*\n* @example\n* var bool = isNonNegativeInteger( 1.0 );\n* // returns true\n*\n* @example\n* var bool = isNonNegativeInteger( 0.0 );\n* // returns true\n*\n* @example\n* var bool = isNonNegativeInteger( -10.0 );\n* // returns false\n*/\nfunction isNonNegativeInteger( x ) {\n\treturn (floor(x) === x && x >= 0);\n}\n\n\n// EXPORTS //\n\nexport default isNonNegativeInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isEven from '@stdlib/math-base-assert-is-even';\n\n\n// MAIN //\n\n/**\n* Tests if a finite numeric value is an odd number.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is an odd number\n*\n* @example\n* var bool = isOdd( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isOdd( -2.0 );\n* // returns false\n*\n* @example\n* var bool = isOdd( 0.0 );\n* // returns false\n*\n* @example\n* var bool = isOdd( NaN );\n* // returns false\n*/\nfunction isOdd( x ) {\n\t// Check sign to prevent overflow...\n\tif ( x > 0.0 ) {\n\t\treturn isEven( x-1.0 );\n\t}\n\treturn isEven( x+1.0 );\n}\n\n\n// EXPORTS //\n\nexport default isOdd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is positive zero.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is positive zero\n*\n* @example\n* var bool = isPositiveZero( 0.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveZero( -0.0 );\n* // returns false\n*/\nfunction isPositiveZero( x ) {\n\treturn (x === 0.0 && 1.0/x === PINF);\n}\n\n\n// EXPORTS //\n\nexport default isPositiveZero;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a double-precision floating-point number is a probability.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is a probability\n*\n* @example\n* var bool = isProbability( 0.5 );\n* // returns true\n*\n* @example\n* var bool = isProbability( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isProbability( NaN );\n* // returns false\n*/\nfunction isProbability( x ) {\n\treturn ( x >= 0.0 && x <= 1.0 );\n}\n\n\n// EXPORTS //\n\nexport default isProbability;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name isEvenInt32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/int32-is-even}\n*/\nimport isEvenInt32 from '@stdlib/math-base-assert-int32-is-even';\nsetReadOnly( ns, 'isEvenInt32', isEvenInt32 );\n\n/**\n* @name isOddInt32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/int32-is-odd}\n*/\nimport isOddInt32 from '@stdlib/math-base-assert-int32-is-odd';\nsetReadOnly( ns, 'isOddInt32', isOddInt32 );\n\n/**\n* @name isComposite\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-composite}\n*/\nimport isComposite from '@stdlib/math-base-assert-is-composite';\nsetReadOnly( ns, 'isComposite', isComposite );\n\n/**\n* @name isCoprime\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-coprime}\n*/\nimport isCoprime from '@stdlib/math-base-assert-is-coprime';\nsetReadOnly( ns, 'isCoprime', isCoprime );\n\n/**\n* @name isEven\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-even}\n*/\nimport isEven from '@stdlib/math-base-assert-is-even';\nsetReadOnly( ns, 'isEven', isEven );\n\n/**\n* @name isFinite\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-finite}\n*/\nimport isFinite from '@stdlib/math-base-assert-is-finite';\nsetReadOnly( ns, 'isFinite', isFinite );\n\n/**\n* @name isFinitef\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-finitef}\n*/\nimport isFinitef from '@stdlib/math-base-assert-is-finitef';\nsetReadOnly( ns, 'isFinitef', isFinitef );\n\n/**\n* @name isInfinite\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-infinite}\n*/\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nsetReadOnly( ns, 'isInfinite', isInfinite );\n\n/**\n* @name isInfinitef\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-infinitef}\n*/\nimport isInfinitef from '@stdlib/math-base-assert-is-infinitef';\nsetReadOnly( ns, 'isInfinitef', isInfinitef );\n\n/**\n* @name isInteger\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-integer}\n*/\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nsetReadOnly( ns, 'isInteger', isInteger );\n\n/**\n* @name isnan\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-nan}\n*/\nimport isnan from '@stdlib/math-base-assert-is-nan';\nsetReadOnly( ns, 'isnan', isnan );\n\n/**\n* @name isnanf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-nanf}\n*/\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\nsetReadOnly( ns, 'isnanf', isnanf );\n\n/**\n* @name isNegativeFinite\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-negative-finite}\n*/\nimport isNegativeFinite from '@stdlib/math-base-assert-is-negative-finite';\nsetReadOnly( ns, 'isNegativeFinite', isNegativeFinite );\n\n/**\n* @name isNegativeInteger\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-negative-integer}\n*/\nimport isNegativeInteger from '@stdlib/math-base-assert-is-negative-integer';\nsetReadOnly( ns, 'isNegativeInteger', isNegativeInteger );\n\n/**\n* @name isNegativeZero\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-negative-zero}\n*/\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\nsetReadOnly( ns, 'isNegativeZero', isNegativeZero );\n\n/**\n* @name isNegativeZerof\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-negative-zerof}\n*/\nimport isNegativeZerof from '@stdlib/math-base-assert-is-negative-zerof';\nsetReadOnly( ns, 'isNegativeZerof', isNegativeZerof );\n\n/**\n* @name isNonNegativeFinite\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-nonnegative-finite}\n*/\nimport isNonNegativeFinite from '@stdlib/math-base-assert-is-nonnegative-finite';\nsetReadOnly( ns, 'isNonNegativeFinite', isNonNegativeFinite );\n\n/**\n* @name isNonNegativeInteger\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-nonnegative-integer}\n*/\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nsetReadOnly( ns, 'isNonNegativeInteger', isNonNegativeInteger );\n\n/**\n* @name isNonPositiveFinite\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-nonpositive-finite}\n*/\nimport isNonPositiveFinite from '@stdlib/math-base-assert-is-nonpositive-finite';\nsetReadOnly( ns, 'isNonPositiveFinite', isNonPositiveFinite );\n\n/**\n* @name isNonPositiveInteger\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-nonpositive-integer}\n*/\nimport isNonPositiveInteger from '@stdlib/math-base-assert-is-nonpositive-integer';\nsetReadOnly( ns, 'isNonPositiveInteger', isNonPositiveInteger );\n\n/**\n* @name isOdd\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-odd}\n*/\nimport isOdd from '@stdlib/math-base-assert-is-odd';\nsetReadOnly( ns, 'isOdd', isOdd );\n\n/**\n* @name isPositiveFinite\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-positive-finite}\n*/\nimport isPositiveFinite from '@stdlib/math-base-assert-is-positive-finite';\nsetReadOnly( ns, 'isPositiveFinite', isPositiveFinite );\n\n/**\n* @name isPositiveInteger\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-positive-integer}\n*/\nimport isPositiveInteger from '@stdlib/math-base-assert-is-positive-integer';\nsetReadOnly( ns, 'isPositiveInteger', isPositiveInteger );\n\n/**\n* @name isPositiveZero\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-positive-zero}\n*/\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\nsetReadOnly( ns, 'isPositiveZero', isPositiveZero );\n\n/**\n* @name isPositiveZerof\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-positive-zerof}\n*/\nimport isPositiveZerof from '@stdlib/math-base-assert-is-positive-zerof';\nsetReadOnly( ns, 'isPositiveZerof', isPositiveZerof );\n\n/**\n* @name isPrime\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-prime}\n*/\nimport isPrime from '@stdlib/math-base-assert-is-prime';\nsetReadOnly( ns, 'isPrime', isPrime );\n\n/**\n* @name isProbability\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-probability}\n*/\nimport isProbability from '@stdlib/math-base-assert-is-probability';\nsetReadOnly( ns, 'isProbability', isProbability );\n\n/**\n* @name isSafeInteger\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-safe-integer}\n*/\nimport isSafeInteger from '@stdlib/math-base-assert-is-safe-integer';\nsetReadOnly( ns, 'isSafeInteger', isSafeInteger );\n\n/**\n* @name isPow2Uint32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/uint32-is-pow2}\n*/\nimport isPow2Uint32 from '@stdlib/math-base-assert-uint32-is-pow2';\nsetReadOnly( ns, 'isPow2Uint32', isPow2Uint32 );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if a 32-bit integer is even.\n*\n* @param {integer32} x - value to test\n* @returns {boolean} boolean indicating whether the value is even\n*\n* @example\n* var bool = isEven( 5 );\n* // returns false\n*\n* @example\n* var bool = isEven( -2 );\n* // returns true\n*\n* @example\n* var bool = isEven( 0 );\n* // returns true\n*/\nfunction isEven( x ) {\n\treturn (x & 1) === 0;\n}\n\n\n// EXPORTS //\n\nexport default isEven;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if a 32-bit integer is odd.\n*\n* @param {integer32} x - value to test\n* @returns {boolean} boolean indicating whether the value is odd\n*\n* @example\n* var bool = isOdd( 5 );\n* // returns true\n*\n* @example\n* var bool = isOdd( -2 );\n* // returns false\n*\n* @example\n* var bool = isOdd( 0 );\n* // returns false\n*/\nfunction isOdd( x ) {\n\treturn (x & 1) === 1;\n}\n\n\n// EXPORTS //\n\nexport default isOdd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrime from '@stdlib/math-base-assert-is-prime';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating whether a number is a composite.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether a value is a composite number\n*\n* @example\n* var bool = isComposite( 4.0 );\n* // returns true\n*\n* @example\n* var bool = isComposite( 5.0 );\n* // returns false\n*/\nfunction isComposite( x ) {\n\treturn isInteger( x ) && ( x > 1 ) && x !== PINF && isPrime( x ) === false;\n}\n\n\n// EXPORTS //\n\nexport default isComposite;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gcd from '@stdlib/math-base-special-gcd';\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating whether two numbers are coprime.\n*\n* @param {number} a - first value\n* @param {number} b - second value\n* @returns {boolean} boolean indicating whether the values are coprime\n*\n* @example\n* var bool = isCoprime( 14.0, 15.0 );\n* // returns true\n*\n* @example\n* var bool = isCoprime( 14.0, 21.0 );\n* // returns false\n*/\nfunction isCoprime( a, b ) {\n\tvar v = gcd( a, b );\n\tif ( v !== v ) {\n\t\treturn false;\n\t}\n\treturn ( v === 1 );\n}\n\n\n// EXPORTS //\n\nexport default isCoprime;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is finite.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is finite\n*\n* @example\n* var bool = isfinite( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isfinite( -2.0e64 );\n* // returns true\n*\n* @example\n* var bool = isfinite( Infinity );\n* // returns false\n*\n* @example\n* var bool = isfinite( -Infinity );\n* // returns false\n*/\nfunction isfinite( x ) {\n\treturn (\n\t\t// NaN check (x !== x ):\n\t\tx === x &&\n\n\t\t// +-infinity check:\n\t\tx > NINF &&\n\t\tx < PINF\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isfinite;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float32-pinf';\nimport NINF from '@stdlib/constants-float32-ninf';\n\n\n// MAIN //\n\n/**\n* Tests if a single-precision floating-point numeric value is finite.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is finite\n*\n* @example\n* var bool = isfinitef( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isfinitef( -2.0e24 );\n* // returns true\n*\n* @example\n* var bool = isfinitef( Infinity );\n* // returns false\n*\n* @example\n* var bool = isfinitef( -Infinity );\n* // returns false\n*/\nfunction isfinitef( x ) {\n\treturn (\n\t\t// NaN check (x !== x ):\n\t\tx === x &&\n\n\t\t// +-infinity check:\n\t\tx > NINF &&\n\t\tx < PINF\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isfinitef;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is a negative finite number.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is a negative finite number\n*\n* @example\n* var bool = isNegativeFinite( -3.14 );\n* // returns true\n*\n* @example\n* var bool = isNegativeFinite( -Infinity );\n* // returns false\n*\n* @example\n* var bool = isNegativeFinite( 2.0 );\n* // returns false\n*\n* @example\n* var bool = isNegativeFinite( NaN );\n* // returns false\n*\n* @example\n* var bool = isNegativeFinite( -0.0 );\n* // returns false\n*/\nfunction isNegativeFinite( x ) {\n\treturn ( x < 0.0 && x > NINF );\n}\n\n\n// EXPORTS //\n\nexport default isNegativeFinite;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is a nonnegative finite number.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is a nonnegative finite number\n*\n* @example\n* var bool = isNonNegativeFinite( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isNonNegativeFinite( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNonNegativeFinite( 0.0 );\n* // returns true\n*\n* @example\n* var bool = isNonNegativeFinite( Infinity );\n* // returns false\n*\n* @example\n* var bool = isNonNegativeFinite( -3.14 );\n* // returns false\n*\n* @example\n* var bool = isNonNegativeFinite( NaN );\n* // returns false\n*/\nfunction isNonNegativeFinite( x ) {\n\treturn ( x >= 0.0 && x < PINF );\n}\n\n\n// EXPORTS //\n\nexport default isNonNegativeFinite;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is a nonpositive finite number.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is a nonpositive finite number\n*\n* @example\n* var bool = isNonPositiveFinite( -3.14 );\n* // returns true\n*\n* @example\n* var bool = isNonPositiveFinite( 0.0 );\n* // returns true\n*\n* @example\n* var bool = isNonPositiveFinite( -Infinity );\n* // returns false\n*\n* @example\n* var bool = isNonPositiveFinite( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isNonPositiveFinite( NaN );\n* // returns false\n*/\nfunction isNonPositiveFinite( x ) {\n\treturn ( x <= 0.0 && x > NINF );\n}\n\n\n// EXPORTS //\n\nexport default isNonPositiveFinite;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Tests if a finite double-precision floating-point number is a nonpositive integer.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is a nonpositive integer\n*\n* @example\n* var bool = isNonPositiveInteger( -1.0 );\n* // returns true\n*\n* @example\n* var bool = isNonPositiveInteger( 0.0 );\n* // returns true\n*\n* @example\n* var bool = isNonPositiveInteger( 10.0 );\n* // returns false\n*/\nfunction isNonPositiveInteger( x ) {\n\treturn (floor(x) === x && x <= 0);\n}\n\n\n// EXPORTS //\n\nexport default isNonPositiveInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is a positive finite number.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is a positive finite number\n*\n* @example\n* var bool = isPositiveFinite( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveFinite( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isPositiveFinite( 0.0 );\n* // returns false\n*\n* @example\n* var bool = isPositiveFinite( Infinity );\n* // returns false\n*\n* @example\n* var bool = isPositiveFinite( -3.14 );\n* // returns false\n*\n* @example\n* var bool = isPositiveFinite( NaN );\n* // returns false\n*/\nfunction isPositiveFinite( x ) {\n\treturn ( x > 0.0 && x < PINF );\n}\n\n\n// EXPORTS //\n\nexport default isPositiveFinite;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Tests if a finite double-precision floating-point number is a positive integer.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is a positive integer\n*\n* @example\n* var bool = isPositiveInteger( 1.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveInteger( 0.0 );\n* // returns false\n*\n* @example\n* var bool = isPositiveInteger( -10.0 );\n* // returns false\n*/\nfunction isPositiveInteger( x ) {\n\treturn (floor(x) === x && x > 0);\n}\n\n\n// EXPORTS //\n\nexport default isPositiveInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float32-pinf';\n\n\n// MAIN //\n\n/**\n* Tests if a single-precision floating-point numeric value is positive zero.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is positive zero\n*\n* @example\n* var bool = isPositiveZerof( 0.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveZerof( -0.0 );\n* // returns false\n*/\nfunction isPositiveZerof( x ) {\n\treturn (x === 0.0 && 1.0/x === PINF);\n}\n\n\n// EXPORTS //\n\nexport default isPositiveZerof;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport MAX_SAFE_INTEGER from '@stdlib/constants-float64-max-safe-integer';\nimport MIN_SAFE_INTEGER from '@stdlib/constants-float64-min-safe-integer';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests if a finite double-precision floating-point number is a safe integer.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is a safe integer\n*\n* @example\n* var bool = isSafeInteger( 1.0 );\n* // returns true\n*\n* @example\n* var bool = isSafeInteger( 2.0e200 );\n* // returns false\n*\n* @example\n* var bool = isSafeInteger( 3.14 );\n* // returns false\n*/\nfunction isSafeInteger( x ) {\n\treturn (\n\t\tx >= MIN_SAFE_INTEGER &&\n\t\tx <= MAX_SAFE_INTEGER &&\n\t\tisInteger( x )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isSafeInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Minimum safe double-precision floating-point integer.\n*\n* @module @stdlib/constants-float64-min-safe-integer\n* @type {number}\n*\n* @example\n* import FLOAT64_MIN_SAFE_INTEGER from '@stdlib/constants-float64-min-safe-integer';\n* // returns -9007199254740991\n*/\n\n\n// MAIN //\n\n/**\n* Minimum safe double-precision floating-point integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* -(2^{53} - 1)\n* ```\n*\n* @constant\n* @type {number}\n* @default -9007199254740991\n* @see [Safe Integers]{@link http://www.2ality.com/2013/10/safe-integers.html}\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_SAFE_INTEGER = -9007199254740991;\n\n\n// EXPORTS //\n\nexport default FLOAT64_MIN_SAFE_INTEGER;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests whether an unsigned integer is a power of 2.\n*\n* @param {uinteger32} x - value to test\n* @returns {boolean} boolean indicating whether a value is a power of 2\n*\n* @example\n* var bool = isPow2Uint32( 2 );\n* // returns true\n*\n* @example\n* var bool = isPow2Uint32( 5 );\n* // returns false\n*/\nfunction isPow2Uint32( x ) {\n\tx >>>= 0;\n\treturn ( !!x && !(x & (x-1)));\n}\n\n\n// EXPORTS //\n\nexport default isPow2Uint32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar fround = ( typeof Math.fround === 'function' ) ? Math.fround : null; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default fround;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Float32Array from '@stdlib/array-float32';\n\n\n// VARIABLES //\n\nvar FLOAT32_VIEW = new Float32Array( 1 );\n\n\n// MAIN //\n\n/**\n* Converts a double-precision floating-point number to the nearest single-precision floating-point number.\n*\n* @param {number} x - double-precision floating-point number\n* @returns {number} nearest single-precision floating-point number\n*\n* @example\n* var y = float64ToFloat32( 1.337 );\n* // returns 1.3370000123977661\n*/\nfunction float64ToFloat32( x ) {\n\tFLOAT32_VIEW[ 0 ] = x;\n\treturn FLOAT32_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default float64ToFloat32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a double-precision floating-point number to the nearest single-precision floating-point number.\n*\n* @module @stdlib/number-float64-base-to-float32\n*\n* @example\n* import float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\n*\n* var y = float64ToFloat32( 1.337 );\n* // returns 1.3370000123977661\n*/\n\n// MODULES //\n\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar float64ToFloat32;\nif ( typeof builtin === 'function' ) {\n\tfloat64ToFloat32 = builtin;\n} else {\n\tfloat64ToFloat32 = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default float64ToFloat32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\n\n\n// MAIN //\n\n/**\n* Defines a non-enumerable read-only property.\n*\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {*} value - value to set\n*\n* @example\n* var obj = {};\n*\n* setNonEnumerableReadOnly( obj, 'foo', 'bar' );\n*\n* try {\n*     obj.foo = 'boop';\n* } catch ( err ) {\n*     console.error( err.message );\n* }\n*/\nfunction setNonEnumerableReadOnly( obj, prop, value ) {\n\tdefineProperty( obj, prop, {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': false,\n\t\t'value': value\n\t});\n}\n\n\n// EXPORTS //\n\nexport default setNonEnumerableReadOnly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a number primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( typeof value === 'number' );\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Number from '@stdlib/number-ctor';\n\n\n// MAIN //\n\n// eslint-disable-next-line stdlib/no-redeclare\nvar toString = Number.prototype.toString; // non-generic\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasToStringTag from '@stdlib/assert-has-tostringtag-support';\nimport nativeClass from '@stdlib/utils-native-class';\nimport Number from '@stdlib/number-ctor';\nimport test from './try2serialize.js';\n\n\n// VARIABLES //\n\nvar FLG = hasToStringTag();\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*/\nfunction isNumber( value ) {\n\tif ( typeof value === 'object' ) {\n\t\tif ( value instanceof Number ) {\n\t\t\treturn true;\n\t\t}\n\t\tif ( FLG ) {\n\t\t\treturn test( value );\n\t\t}\n\t\treturn ( nativeClass( value ) === '[object Number]' );\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport toString from './tostring.js'; // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Attempts to serialize a value to a string.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value can be serialized\n*/\nfunction test( value ) {\n\ttry {\n\t\ttoString.call( value );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default test;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a number\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( null );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a number primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( typeof value === 'number' );  // NOTE: we inline the `isNumber.isPrimitive` function from `@stdlib/assert/is-number` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Tests if a string starts with a minus sign (`-`).\n*\n* @private\n* @param {string} str - input string\n* @returns {boolean} boolean indicating if a string starts with a minus sign (`-`)\n*/\nfunction startsWithMinus( str ) {\n\treturn str[ 0 ] === '-';\n}\n\n/**\n* Returns a string of `n` zeros.\n*\n* @private\n* @param {number} n - number of zeros\n* @returns {string} string of zeros\n*/\nfunction zeros( n ) {\n\tvar out = '';\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tout += '0';\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Pads a token with zeros to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction zeroPad( str, width, right ) {\n\tvar negative = false;\n\tvar pad = width - str.length;\n\tif ( pad < 0 ) {\n\t\treturn str;\n\t}\n\tif ( startsWithMinus( str ) ) {\n\t\tnegative = true;\n\t\tstr = str.substr( 1 );\n\t}\n\tstr = ( right ) ?\n\t\tstr + zeros( pad ) :\n\t\tzeros( pad ) + str;\n\tif ( negative ) {\n\t\tstr = '-' + str;\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default zeroPad;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a number.\n*\n* @module @stdlib/assert-is-number\n*\n* @example\n* import isNumber from '@stdlib/assert-is-number';\n*\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*\n* bool = isNumber( NaN );\n* // returns true\n*\n* bool = isNumber( null );\n* // returns false\n*\n* @example\n* import { isPrimitive as isNumber } from '@stdlib/assert-is-number';\n*\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* bool = isNumber( NaN );\n* // returns true\n*\n* bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*\n* @example\n* import { isObject as isNumber } from '@stdlib/assert-is-number';\n*\n* var bool = isNumber( 3.14 );\n* // returns false\n*\n* bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNumber from './is_number.js';\nimport zeroPad from './zero_pad.js';\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\n\n\n// MAIN //\n\n/**\n* Formats a token object argument as an integer.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid integer\n* @returns {string} formatted token argument\n*/\nfunction formatInteger( token ) {\n\tvar base;\n\tvar out;\n\tvar i;\n\n\tswitch ( token.specifier ) {\n\tcase 'b':\n\t\t// Case: %b (binary)\n\t\tbase = 2;\n\t\tbreak;\n\tcase 'o':\n\t\t// Case: %o (octal)\n\t\tbase = 8;\n\t\tbreak;\n\tcase 'x':\n\tcase 'X':\n\t\t// Case: %x, %X (hexadecimal)\n\t\tbase = 16;\n\t\tbreak;\n\tcase 'd':\n\tcase 'i':\n\tcase 'u':\n\tdefault:\n\t\t// Case: %d, %i, %u (decimal)\n\t\tbase = 10;\n\t\tbreak;\n\t}\n\tout = token.arg;\n\ti = parseInt( out, 10 );\n\tif ( !isFinite( i ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n\t\tif ( !isNumber( out ) ) {\n\t\t\tthrow new Error( 'invalid integer. Value: ' + out );\n\t\t}\n\t\ti = 0;\n\t}\n\tif ( i < 0 && ( token.specifier === 'u' || base !== 10 ) ) {\n\t\ti = 0xffffffff + i + 1;\n\t}\n\tif ( i < 0 ) {\n\t\tout = ( -i ).toString( base );\n\t\tif ( token.precision ) {\n\t\t\tout = zeroPad( out, token.precision, token.padRight );\n\t\t}\n\t\tout = '-' + out;\n\t} else {\n\t\tout = i.toString( base );\n\t\tif ( !i && !token.precision ) {\n\t\t\tout = '';\n\t\t} else if ( token.precision ) {\n\t\t\tout = zeroPad( out, token.precision, token.padRight );\n\t\t}\n\t\tif ( token.sign ) {\n\t\t\tout = token.sign + out;\n\t\t}\n\t}\n\tif ( base === 16 ) {\n\t\tif ( token.alternate ) {\n\t\t\tout = '0x' + out;\n\t\t}\n\t\tout = ( token.specifier === uppercase.call( token.specifier ) ) ?\n\t\t\tuppercase.call( out ) :\n\t\t\tlowercase.call( out );\n\t}\n\tif ( base === 8 ) {\n\t\tif ( token.alternate && out.charAt( 0 ) !== '0' ) {\n\t\t\tout = '0' + out;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a string primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string primitive\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns false\n*/\nfunction isString( value ) {\n\treturn ( typeof value === 'string' ); // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNumber from './is_number.js';\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar abs = Math.abs; // eslint-disable-line stdlib/no-builtin-math\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\nvar replace = String.prototype.replace;\n\n\n// VARIABLES //\n\nvar RE_EXP_POS_DIGITS = /e\\+(\\d)$/;\nvar RE_EXP_NEG_DIGITS = /e-(\\d)$/;\nvar RE_ONLY_DIGITS = /^(\\d+)$/;\nvar RE_DIGITS_BEFORE_EXP = /^(\\d+)e/;\nvar RE_TRAILING_PERIOD_ZERO = /\\.0$/;\nvar RE_PERIOD_ZERO_EXP = /\\.0*e/;\nvar RE_ZERO_BEFORE_EXP = /(\\..*[^0])0*e/;\n\n\n// MAIN //\n\n/**\n* Formats a token object argument as a floating-point number.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid floating-point number\n* @returns {string} formatted token argument\n*/\nfunction formatDouble( token ) {\n\tvar digits;\n\tvar out;\n\tvar f = parseFloat( token.arg );\n\tif ( !isFinite( f ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n\t\tif ( !isNumber( token.arg ) ) {\n\t\t\tthrow new Error( 'invalid floating-point number. Value: ' + out );\n\t\t}\n\t\t// Case: NaN, Infinity, or -Infinity\n\t\tf = token.arg;\n\t}\n\tswitch ( token.specifier ) {\n\tcase 'e':\n\tcase 'E':\n\t\tout = f.toExponential( token.precision );\n\t\tbreak;\n\tcase 'f':\n\tcase 'F':\n\t\tout = f.toFixed( token.precision );\n\t\tbreak;\n\tcase 'g':\n\tcase 'G':\n\t\tif ( abs( f ) < 0.0001 ) {\n\t\t\tdigits = token.precision;\n\t\t\tif ( digits > 0 ) {\n\t\t\t\tdigits -= 1;\n\t\t\t}\n\t\t\tout = f.toExponential( digits );\n\t\t} else {\n\t\t\tout = f.toPrecision( token.precision );\n\t\t}\n\t\tif ( !token.alternate ) {\n\t\t\tout = replace.call( out, RE_ZERO_BEFORE_EXP, '$1e' );\n\t\t\tout = replace.call( out, RE_PERIOD_ZERO_EXP, 'e');\n\t\t\tout = replace.call( out, RE_TRAILING_PERIOD_ZERO, '' );\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( 'invalid double notation. Value: ' + token.specifier );\n\t}\n\tout = replace.call( out, RE_EXP_POS_DIGITS, 'e+0$1' );\n\tout = replace.call( out, RE_EXP_NEG_DIGITS, 'e-0$1' );\n\tif ( token.alternate ) {\n\t\tout = replace.call( out, RE_ONLY_DIGITS, '$1.' );\n\t\tout = replace.call( out, RE_DIGITS_BEFORE_EXP, '$1.e' );\n\t}\n\tif ( f >= 0 && token.sign ) {\n\t\tout = token.sign + out;\n\t}\n\tout = ( token.specifier === uppercase.call( token.specifier ) ) ?\n\t\tuppercase.call( out ) :\n\t\tlowercase.call( out );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatDouble;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Returns `n` spaces.\n*\n* @private\n* @param {number} n - number of spaces\n* @returns {string} string of spaces\n*/\nfunction spaces( n ) {\n\tvar out = '';\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tout += ' ';\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Pads a token with spaces to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction spacePad( str, width, right ) {\n\tvar pad = width - str.length;\n\tif ( pad < 0 ) {\n\t\treturn str;\n\t}\n\tstr = ( right ) ?\n\t\tstr + spaces( pad ) :\n\t\tspaces( pad ) + str;\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default spacePad;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport formatInteger from './format_integer.js';\nimport isString from './is_string.js';\nimport formatDouble from './format_double.js';\nimport spacePad from './space_pad.js';\nimport zeroPad from './zero_pad.js';\n\n\n// VARIABLES //\n\nvar fromCharCode = String.fromCharCode;\nvar isnan = isNaN; // NOTE: We use the global `isNaN` function here instead of `@stdlib/math/base/assert/is-nan` to avoid circular dependencies.\nvar isArray = Array.isArray; // NOTE: We use the global `Array.isArray` function here instead of `@stdlib/assert/is-array` to avoid circular dependencies.\n\n\n// FUNCTIONS //\n\n/**\n* Initializes token object with properties of supplied format identifier object or default values if not present.\n*\n* @private\n* @param {Object} token - format identifier object\n* @returns {Object} token object\n*/\nfunction initialize( token ) {\n\tvar out = {};\n\tout.specifier = token.specifier;\n\tout.precision = ( token.precision === void 0 ) ? 1 : token.precision;\n\tout.width = token.width;\n\tout.flags = token.flags || '';\n\tout.mapping = token.mapping;\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Generates string from a token array by interpolating values.\n*\n* @param {Array} tokens - string parts and format identifier objects\n* @param {Array} ...args - variable values\n* @throws {TypeError} first argument must be an array\n* @throws {Error} invalid flags\n* @returns {string} formatted string\n*\n* @example\n* var tokens = [ 'beep ', { 'specifier': 's' } ];\n* var out = formatInterpolate( tokens, 'boop' );\n* // returns 'beep boop'\n*/\nfunction formatInterpolate( tokens ) {\n\tvar hasPeriod;\n\tvar flags;\n\tvar token;\n\tvar flag;\n\tvar num;\n\tvar out;\n\tvar pos;\n\tvar i;\n\tvar j;\n\n\tif ( !isArray( tokens ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an array. Value: `' + tokens + '`.' );\n\t}\n\tout = '';\n\tpos = 1;\n\tfor ( i = 0; i < tokens.length; i++ ) {\n\t\ttoken = tokens[ i ];\n\t\tif ( isString( token ) ) {\n\t\t\tout += token;\n\t\t} else {\n\t\t\thasPeriod = token.precision !== void 0;\n\t\t\ttoken = initialize( token );\n\t\t\tif ( !token.specifier ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Token is missing `specifier` property. Index: `'+ i +'`. Value: `' + token + '`.' );\n\t\t\t}\n\t\t\tif ( token.mapping ) {\n\t\t\t\tpos = token.mapping;\n\t\t\t}\n\t\t\tflags = token.flags;\n\t\t\tfor ( j = 0; j < flags.length; j++ ) {\n\t\t\t\tflag = flags.charAt( j );\n\t\t\t\tswitch ( flag ) {\n\t\t\t\tcase ' ':\n\t\t\t\t\ttoken.sign = ' ';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '+':\n\t\t\t\t\ttoken.sign = '+';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '-':\n\t\t\t\t\ttoken.padRight = true;\n\t\t\t\t\ttoken.padZeros = false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '0':\n\t\t\t\t\ttoken.padZeros = flags.indexOf( '-' ) < 0; // NOTE: We use built-in `Array.prototype.indexOf` here instead of `@stdlib/assert/contains` in order to avoid circular dependencies.\n\t\t\t\t\tbreak;\n\t\t\t\tcase '#':\n\t\t\t\t\ttoken.alternate = true;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'invalid flag: ' + flag );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( token.width === '*' ) {\n\t\t\t\ttoken.width = parseInt( arguments[ pos ], 10 );\n\t\t\t\tpos += 1;\n\t\t\t\tif ( isnan( token.width ) ) {\n\t\t\t\t\tthrow new TypeError( 'the argument for * width at position ' + pos + ' is not a number. Value: `' + token.width + '`.' );\n\t\t\t\t}\n\t\t\t\tif ( token.width < 0 ) {\n\t\t\t\t\ttoken.padRight = true;\n\t\t\t\t\ttoken.width = -token.width;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( hasPeriod ) {\n\t\t\t\tif ( token.precision === '*' ) {\n\t\t\t\t\ttoken.precision = parseInt( arguments[ pos ], 10 );\n\t\t\t\t\tpos += 1;\n\t\t\t\t\tif ( isnan( token.precision ) ) {\n\t\t\t\t\t\tthrow new TypeError( 'the argument for * precision at position ' + pos + ' is not a number. Value: `' + token.precision + '`.' );\n\t\t\t\t\t}\n\t\t\t\t\tif ( token.precision < 0 ) {\n\t\t\t\t\t\ttoken.precision = 1;\n\t\t\t\t\t\thasPeriod = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttoken.arg = arguments[ pos ];\n\t\t\tswitch ( token.specifier ) {\n\t\t\tcase 'b':\n\t\t\tcase 'o':\n\t\t\tcase 'x':\n\t\t\tcase 'X':\n\t\t\tcase 'd':\n\t\t\tcase 'i':\n\t\t\tcase 'u':\n\t\t\t\t// Case: %b (binary), %o (octal), %x, %X (hexadecimal), %d, %i (decimal), %u (unsigned decimal)\n\t\t\t\tif ( hasPeriod ) {\n\t\t\t\t\ttoken.padZeros = false;\n\t\t\t\t}\n\t\t\t\ttoken.arg = formatInteger( token );\n\t\t\t\tbreak;\n\t\t\tcase 's':\n\t\t\t\t// Case: %s (string)\n\t\t\t\ttoken.maxWidth = ( hasPeriod ) ? token.precision : -1;\n\t\t\t\tbreak;\n\t\t\tcase 'c':\n\t\t\t\t// Case: %c (character)\n\t\t\t\tif ( !isnan( token.arg ) ) {\n\t\t\t\t\tnum = parseInt( token.arg, 10 );\n\t\t\t\t\tif ( num < 0 || num > 127 ) {\n\t\t\t\t\t\tthrow new Error( 'invalid character code. Value: ' + token.arg );\n\t\t\t\t\t}\n\t\t\t\t\ttoken.arg = ( isnan( num ) ) ?\n\t\t\t\t\t\tString( token.arg ) :\n\t\t\t\t\t\tfromCharCode( num );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'e':\n\t\t\tcase 'E':\n\t\t\tcase 'f':\n\t\t\tcase 'F':\n\t\t\tcase 'g':\n\t\t\tcase 'G':\n\t\t\t\t// Case: %e, %E (scientific notation), %f, %F (decimal floating point), %g, %G (uses the shorter of %e/E or %f/F)\n\t\t\t\tif ( !hasPeriod ) {\n\t\t\t\t\ttoken.precision = 6;\n\t\t\t\t}\n\t\t\t\ttoken.arg = formatDouble( token );\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'invalid specifier: ' + token.specifier );\n\t\t\t}\n\t\t\t// Fit argument into field width...\n\t\t\tif ( token.maxWidth >= 0 && token.arg.length > token.maxWidth ) {\n\t\t\t\ttoken.arg = token.arg.substring( 0, token.maxWidth );\n\t\t\t}\n\t\t\tif ( token.padZeros ) {\n\t\t\t\ttoken.arg = zeroPad( token.arg, token.width || token.precision, token.padRight ); // eslint-disable-line max-len\n\t\t\t} else if ( token.width ) {\n\t\t\t\ttoken.arg = spacePad( token.arg, token.width, token.padRight );\n\t\t\t}\n\t\t\tout += token.arg || '';\n\t\t\tpos += 1;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatInterpolate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar RE = /%(?:([1-9]\\d*)\\$)?([0 +\\-#]*)(\\*|\\d+)?(?:(\\.)(\\*|\\d+)?)?[hlL]?([%A-Za-z])/g;\n\n\n// FUNCTIONS //\n\n/**\n* Parses a delimiter.\n*\n* @private\n* @param {Array} match - regular expression match\n* @returns {Object} delimiter token object\n*/\nfunction parse( match ) {\n\tvar token = {\n\t\t'mapping': ( match[ 1 ] ) ? parseInt( match[ 1 ], 10 ) : void 0,\n\t\t'flags': match[ 2 ],\n\t\t'width': match[ 3 ],\n\t\t'precision': match[ 5 ],\n\t\t'specifier': match[ 6 ]\n\t};\n\tif ( match[ 4 ] === '.' && match[ 5 ] === void 0 ) {\n\t\ttoken.precision = '1';\n\t}\n\treturn token;\n}\n\n\n// MAIN //\n\n/**\n* Tokenizes a string into an array of string parts and format identifier objects.\n*\n* @param {string} str - input string\n* @returns {Array} tokens\n*\n* @example\n* var tokens = formatTokenize( 'Hello %s!' );\n* // returns [ 'Hello ', {...}, '!' ]\n*/\nfunction formatTokenize( str ) {\n\tvar content;\n\tvar tokens;\n\tvar match;\n\tvar prev;\n\n\ttokens = [];\n\tprev = 0;\n\tmatch = RE.exec( str );\n\twhile ( match ) {\n\t\tcontent = str.slice( prev, RE.lastIndex - match[ 0 ].length );\n\t\tif ( content.length ) {\n\t\t\ttokens.push( content );\n\t\t}\n\t\ttokens.push( parse( match ) );\n\t\tprev = RE.lastIndex;\n\t\tmatch = RE.exec( str );\n\t}\n\tcontent = str.slice( prev );\n\tif ( content.length ) {\n\t\ttokens.push( content );\n\t}\n\treturn tokens;\n}\n\n\n// EXPORTS //\n\nexport default formatTokenize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a string primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string primitive\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns false\n*/\nfunction isString( value ) {\n\treturn ( typeof value === 'string' ); // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport interpolate from '@stdlib/string-base-format-interpolate';\nimport tokenize from '@stdlib/string-base-format-tokenize';\nimport isString from './is_string.js';\n\n\n// MAIN //\n\n/**\n* Inserts supplied variable values into a format string.\n*\n* @param {string} str - input string\n* @param {Array} ...args - variable values\n* @throws {TypeError} first argument must be a string\n* @throws {Error} invalid flags\n* @returns {string} formatted string\n*\n* @example\n* var str = format( 'Hello %s!', 'world' );\n* // returns 'Hello world!'\n*\n* @example\n* var str = format( 'Pi: ~%.2f', 3.141592653589793 );\n* // returns 'Pi: ~3.14'\n*/\nfunction format( str ) {\n\tvar args;\n\tvar i;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\targs = [ tokenize( str ) ];\n\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\treturn interpolate.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default format;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport format from '@stdlib/string-format';\nimport toStr from './tostring.js';\nimport toJSON from './tojson.js';\n\n\n// MAIN //\n\n/**\n* 128-bit complex number constructor.\n*\n* @constructor\n* @param {number} real - real component\n* @param {number} imag - imaginary component\n* @throws {TypeError} must invoke using the `new` keyword\n* @throws {TypeError} real component must be a number\n* @throws {TypeError} imaginary component must be a number\n* @returns {Complex128} 128-bit complex number\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n* // returns <Complex128>\n*/\nfunction Complex128( real, imag ) {\n\tif ( !( this instanceof Complex128 ) ) {\n\t\tthrow new TypeError( 'invalid invocation. Constructor must be called with the `new` keyword.' );\n\t}\n\tif ( !isNumber( real ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Real component must be a number. Value: `%s`.', real ) );\n\t}\n\tif ( !isNumber( imag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Imaginary component must be a number. Value: `%s`.', imag ) );\n\t}\n\tdefineProperty( this, 're', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': real\n\t});\n\tdefineProperty( this, 'im', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': imag\n\t});\n\treturn this;\n}\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex128\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var nbytes = Complex128.BYTES_PER_ELEMENT;\n* // returns 8\n*/\nsetReadOnly( Complex128, 'BYTES_PER_ELEMENT', 8 );\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex128.prototype\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var nbytes = z.BYTES_PER_ELEMENT;\n* // returns 8\n*/\nsetReadOnly( Complex128.prototype, 'BYTES_PER_ELEMENT', 8 );\n\n/**\n* Length (in bytes) of a complex number.\n*\n* @name byteLength\n* @memberof Complex128.prototype\n* @type {integer}\n* @returns {integer} byte length\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var nbytes = z.byteLength;\n* // returns 16\n*/\nsetReadOnly( Complex128.prototype, 'byteLength', 16 );\n\n/**\n* Serializes a complex number as a string.\n*\n* @name toString\n* @memberof Complex128.prototype\n* @type {Function}\n* @returns {string} serialized complex number\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var str = z.toString();\n* // returns '5 + 3i'\n*/\nsetReadOnly( Complex128.prototype, 'toString', toStr );\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `Complex128` instance.\n*\n* @name toJSON\n* @memberof Complex128.prototype\n* @type {Function}\n* @returns {Object} serialized complex number\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var obj = z.toJSON();\n* // returns { 'type': 'Complex128', 're': 5.0, 'im': 3.0 }\n*/\nsetReadOnly( Complex128.prototype, 'toJSON', toJSON );\n\n\n// EXPORTS //\n\nexport default Complex128;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the real component of a double-precision complex floating-point number.\n*\n* @param {Complex} z - complex number\n* @returns {number} real component\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n*\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var re = real( z );\n* // returns 5.0\n*/\nfunction real( z ) {\n\treturn z.re;\n}\n\n\n// EXPORTS //\n\nexport default real;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the imaginary component of a double-precision complex floating-point number.\n*\n* @param {Complex} z - complex number\n* @returns {number} imaginary component\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n*\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var im = imag( z );\n* // returns 3.0\n*/\nfunction imag( z ) {\n\treturn z.im;\n}\n\n\n// EXPORTS //\n\nexport default imag;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a number primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( typeof value === 'number' );  // NOTE: we inline the `isNumber.isPrimitive` function from `@stdlib/assert/is-number` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Tests if a string starts with a minus sign (`-`).\n*\n* @private\n* @param {string} str - input string\n* @returns {boolean} boolean indicating if a string starts with a minus sign (`-`)\n*/\nfunction startsWithMinus( str ) {\n\treturn str[ 0 ] === '-';\n}\n\n/**\n* Returns a string of `n` zeros.\n*\n* @private\n* @param {number} n - number of zeros\n* @returns {string} string of zeros\n*/\nfunction zeros( n ) {\n\tvar out = '';\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tout += '0';\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Pads a token with zeros to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction zeroPad( str, width, right ) {\n\tvar negative = false;\n\tvar pad = width - str.length;\n\tif ( pad < 0 ) {\n\t\treturn str;\n\t}\n\tif ( startsWithMinus( str ) ) {\n\t\tnegative = true;\n\t\tstr = str.substr( 1 );\n\t}\n\tstr = ( right ) ?\n\t\tstr + zeros( pad ) :\n\t\tzeros( pad ) + str;\n\tif ( negative ) {\n\t\tstr = '-' + str;\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default zeroPad;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a string.\n*\n* @private\n* @returns {string} serialized complex number\n*/\nfunction toString() { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar str = '' + this.re;\n\tif ( this.im < 0 ) {\n\t\tstr += ' - ' + (-this.im);\n\t} else {\n\t\tstr += ' + ' + this.im;\n\t}\n\tstr += 'i';\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* @private\n* @returns {Object} JSON representation\n*/\nfunction toJSON() {\n\t/* eslint-disable no-invalid-this */\n\tvar out = {};\n\tout.type = 'Complex128';\n\tout.re = this.re;\n\tout.im = this.im;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default toJSON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNumber from './is_number.js';\nimport zeroPad from './zero_pad.js';\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\n\n\n// MAIN //\n\n/**\n* Formats a token object argument as an integer.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid integer\n* @returns {string} formatted token argument\n*/\nfunction formatInteger( token ) {\n\tvar base;\n\tvar out;\n\tvar i;\n\n\tswitch ( token.specifier ) {\n\tcase 'b':\n\t\t// Case: %b (binary)\n\t\tbase = 2;\n\t\tbreak;\n\tcase 'o':\n\t\t// Case: %o (octal)\n\t\tbase = 8;\n\t\tbreak;\n\tcase 'x':\n\tcase 'X':\n\t\t// Case: %x, %X (hexadecimal)\n\t\tbase = 16;\n\t\tbreak;\n\tcase 'd':\n\tcase 'i':\n\tcase 'u':\n\tdefault:\n\t\t// Case: %d, %i, %u (decimal)\n\t\tbase = 10;\n\t\tbreak;\n\t}\n\tout = token.arg;\n\ti = parseInt( out, 10 );\n\tif ( !isFinite( i ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n\t\tif ( !isNumber( out ) ) {\n\t\t\tthrow new Error( 'invalid integer. Value: ' + out );\n\t\t}\n\t\ti = 0;\n\t}\n\tif ( i < 0 && ( token.specifier === 'u' || base !== 10 ) ) {\n\t\ti = 0xffffffff + i + 1;\n\t}\n\tif ( i < 0 ) {\n\t\tout = ( -i ).toString( base );\n\t\tif ( token.precision ) {\n\t\t\tout = zeroPad( out, token.precision, token.padRight );\n\t\t}\n\t\tout = '-' + out;\n\t} else {\n\t\tout = i.toString( base );\n\t\tif ( !i && !token.precision ) {\n\t\t\tout = '';\n\t\t} else if ( token.precision ) {\n\t\t\tout = zeroPad( out, token.precision, token.padRight );\n\t\t}\n\t\tif ( token.sign ) {\n\t\t\tout = token.sign + out;\n\t\t}\n\t}\n\tif ( base === 16 ) {\n\t\tif ( token.alternate ) {\n\t\t\tout = '0x' + out;\n\t\t}\n\t\tout = ( token.specifier === uppercase.call( token.specifier ) ) ?\n\t\t\tuppercase.call( out ) :\n\t\t\tlowercase.call( out );\n\t}\n\tif ( base === 8 ) {\n\t\tif ( token.alternate && out.charAt( 0 ) !== '0' ) {\n\t\t\tout = '0' + out;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a string primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string primitive\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns false\n*/\nfunction isString( value ) {\n\treturn ( typeof value === 'string' ); // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNumber from './is_number.js';\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar abs = Math.abs; // eslint-disable-line stdlib/no-builtin-math\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\nvar replace = String.prototype.replace;\n\n\n// VARIABLES //\n\nvar RE_EXP_POS_DIGITS = /e\\+(\\d)$/;\nvar RE_EXP_NEG_DIGITS = /e-(\\d)$/;\nvar RE_ONLY_DIGITS = /^(\\d+)$/;\nvar RE_DIGITS_BEFORE_EXP = /^(\\d+)e/;\nvar RE_TRAILING_PERIOD_ZERO = /\\.0$/;\nvar RE_PERIOD_ZERO_EXP = /\\.0*e/;\nvar RE_ZERO_BEFORE_EXP = /(\\..*[^0])0*e/;\n\n\n// MAIN //\n\n/**\n* Formats a token object argument as a floating-point number.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid floating-point number\n* @returns {string} formatted token argument\n*/\nfunction formatDouble( token ) {\n\tvar digits;\n\tvar out;\n\tvar f = parseFloat( token.arg );\n\tif ( !isFinite( f ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n\t\tif ( !isNumber( token.arg ) ) {\n\t\t\tthrow new Error( 'invalid floating-point number. Value: ' + out );\n\t\t}\n\t\t// Case: NaN, Infinity, or -Infinity\n\t\tf = token.arg;\n\t}\n\tswitch ( token.specifier ) {\n\tcase 'e':\n\tcase 'E':\n\t\tout = f.toExponential( token.precision );\n\t\tbreak;\n\tcase 'f':\n\tcase 'F':\n\t\tout = f.toFixed( token.precision );\n\t\tbreak;\n\tcase 'g':\n\tcase 'G':\n\t\tif ( abs( f ) < 0.0001 ) {\n\t\t\tdigits = token.precision;\n\t\t\tif ( digits > 0 ) {\n\t\t\t\tdigits -= 1;\n\t\t\t}\n\t\t\tout = f.toExponential( digits );\n\t\t} else {\n\t\t\tout = f.toPrecision( token.precision );\n\t\t}\n\t\tif ( !token.alternate ) {\n\t\t\tout = replace.call( out, RE_ZERO_BEFORE_EXP, '$1e' );\n\t\t\tout = replace.call( out, RE_PERIOD_ZERO_EXP, 'e');\n\t\t\tout = replace.call( out, RE_TRAILING_PERIOD_ZERO, '' );\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( 'invalid double notation. Value: ' + token.specifier );\n\t}\n\tout = replace.call( out, RE_EXP_POS_DIGITS, 'e+0$1' );\n\tout = replace.call( out, RE_EXP_NEG_DIGITS, 'e-0$1' );\n\tif ( token.alternate ) {\n\t\tout = replace.call( out, RE_ONLY_DIGITS, '$1.' );\n\t\tout = replace.call( out, RE_DIGITS_BEFORE_EXP, '$1.e' );\n\t}\n\tif ( f >= 0 && token.sign ) {\n\t\tout = token.sign + out;\n\t}\n\tout = ( token.specifier === uppercase.call( token.specifier ) ) ?\n\t\tuppercase.call( out ) :\n\t\tlowercase.call( out );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatDouble;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Returns `n` spaces.\n*\n* @private\n* @param {number} n - number of spaces\n* @returns {string} string of spaces\n*/\nfunction spaces( n ) {\n\tvar out = '';\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tout += ' ';\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Pads a token with spaces to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction spacePad( str, width, right ) {\n\tvar pad = width - str.length;\n\tif ( pad < 0 ) {\n\t\treturn str;\n\t}\n\tstr = ( right ) ?\n\t\tstr + spaces( pad ) :\n\t\tspaces( pad ) + str;\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default spacePad;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport formatInteger from './format_integer.js';\nimport isString from './is_string.js';\nimport formatDouble from './format_double.js';\nimport spacePad from './space_pad.js';\nimport zeroPad from './zero_pad.js';\n\n\n// VARIABLES //\n\nvar fromCharCode = String.fromCharCode;\nvar isnan = isNaN; // NOTE: We use the global `isNaN` function here instead of `@stdlib/math/base/assert/is-nan` to avoid circular dependencies.\nvar isArray = Array.isArray; // NOTE: We use the global `Array.isArray` function here instead of `@stdlib/assert/is-array` to avoid circular dependencies.\n\n\n// FUNCTIONS //\n\n/**\n* Initializes token object with properties of supplied format identifier object or default values if not present.\n*\n* @private\n* @param {Object} token - format identifier object\n* @returns {Object} token object\n*/\nfunction initialize( token ) {\n\tvar out = {};\n\tout.specifier = token.specifier;\n\tout.precision = ( token.precision === void 0 ) ? 1 : token.precision;\n\tout.width = token.width;\n\tout.flags = token.flags || '';\n\tout.mapping = token.mapping;\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Generates string from a token array by interpolating values.\n*\n* @param {Array} tokens - string parts and format identifier objects\n* @param {Array} ...args - variable values\n* @throws {TypeError} first argument must be an array\n* @throws {Error} invalid flags\n* @returns {string} formatted string\n*\n* @example\n* var tokens = [ 'beep ', { 'specifier': 's' } ];\n* var out = formatInterpolate( tokens, 'boop' );\n* // returns 'beep boop'\n*/\nfunction formatInterpolate( tokens ) {\n\tvar hasPeriod;\n\tvar flags;\n\tvar token;\n\tvar flag;\n\tvar num;\n\tvar out;\n\tvar pos;\n\tvar i;\n\tvar j;\n\n\tif ( !isArray( tokens ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an array. Value: `' + tokens + '`.' );\n\t}\n\tout = '';\n\tpos = 1;\n\tfor ( i = 0; i < tokens.length; i++ ) {\n\t\ttoken = tokens[ i ];\n\t\tif ( isString( token ) ) {\n\t\t\tout += token;\n\t\t} else {\n\t\t\thasPeriod = token.precision !== void 0;\n\t\t\ttoken = initialize( token );\n\t\t\tif ( !token.specifier ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Token is missing `specifier` property. Index: `'+ i +'`. Value: `' + token + '`.' );\n\t\t\t}\n\t\t\tif ( token.mapping ) {\n\t\t\t\tpos = token.mapping;\n\t\t\t}\n\t\t\tflags = token.flags;\n\t\t\tfor ( j = 0; j < flags.length; j++ ) {\n\t\t\t\tflag = flags.charAt( j );\n\t\t\t\tswitch ( flag ) {\n\t\t\t\tcase ' ':\n\t\t\t\t\ttoken.sign = ' ';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '+':\n\t\t\t\t\ttoken.sign = '+';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '-':\n\t\t\t\t\ttoken.padRight = true;\n\t\t\t\t\ttoken.padZeros = false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '0':\n\t\t\t\t\ttoken.padZeros = flags.indexOf( '-' ) < 0; // NOTE: We use built-in `Array.prototype.indexOf` here instead of `@stdlib/assert/contains` in order to avoid circular dependencies.\n\t\t\t\t\tbreak;\n\t\t\t\tcase '#':\n\t\t\t\t\ttoken.alternate = true;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'invalid flag: ' + flag );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( token.width === '*' ) {\n\t\t\t\ttoken.width = parseInt( arguments[ pos ], 10 );\n\t\t\t\tpos += 1;\n\t\t\t\tif ( isnan( token.width ) ) {\n\t\t\t\t\tthrow new TypeError( 'the argument for * width at position ' + pos + ' is not a number. Value: `' + token.width + '`.' );\n\t\t\t\t}\n\t\t\t\tif ( token.width < 0 ) {\n\t\t\t\t\ttoken.padRight = true;\n\t\t\t\t\ttoken.width = -token.width;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( hasPeriod ) {\n\t\t\t\tif ( token.precision === '*' ) {\n\t\t\t\t\ttoken.precision = parseInt( arguments[ pos ], 10 );\n\t\t\t\t\tpos += 1;\n\t\t\t\t\tif ( isnan( token.precision ) ) {\n\t\t\t\t\t\tthrow new TypeError( 'the argument for * precision at position ' + pos + ' is not a number. Value: `' + token.precision + '`.' );\n\t\t\t\t\t}\n\t\t\t\t\tif ( token.precision < 0 ) {\n\t\t\t\t\t\ttoken.precision = 1;\n\t\t\t\t\t\thasPeriod = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttoken.arg = arguments[ pos ];\n\t\t\tswitch ( token.specifier ) {\n\t\t\tcase 'b':\n\t\t\tcase 'o':\n\t\t\tcase 'x':\n\t\t\tcase 'X':\n\t\t\tcase 'd':\n\t\t\tcase 'i':\n\t\t\tcase 'u':\n\t\t\t\t// Case: %b (binary), %o (octal), %x, %X (hexadecimal), %d, %i (decimal), %u (unsigned decimal)\n\t\t\t\tif ( hasPeriod ) {\n\t\t\t\t\ttoken.padZeros = false;\n\t\t\t\t}\n\t\t\t\ttoken.arg = formatInteger( token );\n\t\t\t\tbreak;\n\t\t\tcase 's':\n\t\t\t\t// Case: %s (string)\n\t\t\t\ttoken.maxWidth = ( hasPeriod ) ? token.precision : -1;\n\t\t\t\tbreak;\n\t\t\tcase 'c':\n\t\t\t\t// Case: %c (character)\n\t\t\t\tif ( !isnan( token.arg ) ) {\n\t\t\t\t\tnum = parseInt( token.arg, 10 );\n\t\t\t\t\tif ( num < 0 || num > 127 ) {\n\t\t\t\t\t\tthrow new Error( 'invalid character code. Value: ' + token.arg );\n\t\t\t\t\t}\n\t\t\t\t\ttoken.arg = ( isnan( num ) ) ?\n\t\t\t\t\t\tString( token.arg ) :\n\t\t\t\t\t\tfromCharCode( num );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'e':\n\t\t\tcase 'E':\n\t\t\tcase 'f':\n\t\t\tcase 'F':\n\t\t\tcase 'g':\n\t\t\tcase 'G':\n\t\t\t\t// Case: %e, %E (scientific notation), %f, %F (decimal floating point), %g, %G (uses the shorter of %e/E or %f/F)\n\t\t\t\tif ( !hasPeriod ) {\n\t\t\t\t\ttoken.precision = 6;\n\t\t\t\t}\n\t\t\t\ttoken.arg = formatDouble( token );\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'invalid specifier: ' + token.specifier );\n\t\t\t}\n\t\t\t// Fit argument into field width...\n\t\t\tif ( token.maxWidth >= 0 && token.arg.length > token.maxWidth ) {\n\t\t\t\ttoken.arg = token.arg.substring( 0, token.maxWidth );\n\t\t\t}\n\t\t\tif ( token.padZeros ) {\n\t\t\t\ttoken.arg = zeroPad( token.arg, token.width || token.precision, token.padRight ); // eslint-disable-line max-len\n\t\t\t} else if ( token.width ) {\n\t\t\t\ttoken.arg = spacePad( token.arg, token.width, token.padRight );\n\t\t\t}\n\t\t\tout += token.arg || '';\n\t\t\tpos += 1;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatInterpolate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar RE = /%(?:([1-9]\\d*)\\$)?([0 +\\-#]*)(\\*|\\d+)?(?:(\\.)(\\*|\\d+)?)?[hlL]?([%A-Za-z])/g;\n\n\n// FUNCTIONS //\n\n/**\n* Parses a delimiter.\n*\n* @private\n* @param {Array} match - regular expression match\n* @returns {Object} delimiter token object\n*/\nfunction parse( match ) {\n\tvar token = {\n\t\t'mapping': ( match[ 1 ] ) ? parseInt( match[ 1 ], 10 ) : void 0,\n\t\t'flags': match[ 2 ],\n\t\t'width': match[ 3 ],\n\t\t'precision': match[ 5 ],\n\t\t'specifier': match[ 6 ]\n\t};\n\tif ( match[ 4 ] === '.' && match[ 5 ] === void 0 ) {\n\t\ttoken.precision = '1';\n\t}\n\treturn token;\n}\n\n\n// MAIN //\n\n/**\n* Tokenizes a string into an array of string parts and format identifier objects.\n*\n* @param {string} str - input string\n* @returns {Array} tokens\n*\n* @example\n* var tokens = formatTokenize( 'Hello %s!' );\n* // returns [ 'Hello ', {...}, '!' ]\n*/\nfunction formatTokenize( str ) {\n\tvar content;\n\tvar tokens;\n\tvar match;\n\tvar prev;\n\n\ttokens = [];\n\tprev = 0;\n\tmatch = RE.exec( str );\n\twhile ( match ) {\n\t\tcontent = str.slice( prev, RE.lastIndex - match[ 0 ].length );\n\t\tif ( content.length ) {\n\t\t\ttokens.push( content );\n\t\t}\n\t\ttokens.push( parse( match ) );\n\t\tprev = RE.lastIndex;\n\t\tmatch = RE.exec( str );\n\t}\n\tcontent = str.slice( prev );\n\tif ( content.length ) {\n\t\ttokens.push( content );\n\t}\n\treturn tokens;\n}\n\n\n// EXPORTS //\n\nexport default formatTokenize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a string primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string primitive\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns false\n*/\nfunction isString( value ) {\n\treturn ( typeof value === 'string' ); // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport interpolate from '@stdlib/string-base-format-interpolate';\nimport tokenize from '@stdlib/string-base-format-tokenize';\nimport isString from './is_string.js';\n\n\n// MAIN //\n\n/**\n* Inserts supplied variable values into a format string.\n*\n* @param {string} str - input string\n* @param {Array} ...args - variable values\n* @throws {TypeError} first argument must be a string\n* @throws {Error} invalid flags\n* @returns {string} formatted string\n*\n* @example\n* var str = format( 'Hello %s!', 'world' );\n* // returns 'Hello world!'\n*\n* @example\n* var str = format( 'Pi: ~%.2f', 3.141592653589793 );\n* // returns 'Pi: ~3.14'\n*/\nfunction format( str ) {\n\tvar args;\n\tvar i;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\targs = [ tokenize( str ) ];\n\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\treturn interpolate.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default format;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport format from '@stdlib/string-format';\nimport toStr from './tostring.js';\nimport toJSON from './tojson.js';\n\n\n// MAIN //\n\n/**\n* 64-bit complex number constructor.\n*\n* @constructor\n* @param {number} real - real component\n* @param {number} imag - imaginary component\n* @throws {TypeError} must invoke using the `new` keyword\n* @throws {TypeError} real component must be a number\n* @throws {TypeError} imaginary component must be a number\n* @returns {Complex64} 64-bit complex number\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n* // returns <Complex64>\n*/\nfunction Complex64( real, imag ) {\n\tif ( !( this instanceof Complex64 ) ) {\n\t\tthrow new TypeError( 'invalid invocation. Constructor must be called with the `new` keyword.' );\n\t}\n\tif ( !isNumber( real ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Real component must be a number. Value: `%s`.', real ) );\n\t}\n\tif ( !isNumber( imag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Imaginary component must be a number. Value: `%s`.', imag ) );\n\t}\n\tdefineProperty( this, 're', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': float64ToFloat32( real )\n\t});\n\tdefineProperty( this, 'im', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': float64ToFloat32( imag )\n\t});\n\treturn this;\n}\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex64\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var nbytes = Complex64.BYTES_PER_ELEMENT;\n* // returns 4\n*/\nsetReadOnly( Complex64, 'BYTES_PER_ELEMENT', 4 );\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex64.prototype\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var nbytes = z.BYTES_PER_ELEMENT;\n* // returns 4\n*/\nsetReadOnly( Complex64.prototype, 'BYTES_PER_ELEMENT', 4 );\n\n/**\n* Length (in bytes) of a complex number.\n*\n* @name byteLength\n* @memberof Complex64.prototype\n* @type {integer}\n* @returns {integer} byte length\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var nbytes = z.byteLength;\n* // returns 8\n*/\nsetReadOnly( Complex64.prototype, 'byteLength', 8 );\n\n/**\n* Serializes a complex number as a string.\n*\n* @name toString\n* @memberof Complex64.prototype\n* @type {Function}\n* @returns {string} serialized complex number\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var str = z.toString();\n* // returns '5 + 3i'\n*/\nsetReadOnly( Complex64.prototype, 'toString', toStr );\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `Complex64` instance.\n*\n* @name toJSON\n* @memberof Complex64.prototype\n* @type {Function}\n* @returns {Object} serialized complex number\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var obj = z.toJSON();\n* // returns { 'type': 'Complex64', 're': 5.0, 'im': 3.0 }\n*/\nsetReadOnly( Complex64.prototype, 'toJSON', toJSON );\n\n\n// EXPORTS //\n\nexport default Complex64;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the real component of a single-precision complex floating-point number.\n*\n* @param {Complex} z - complex number\n* @returns {number} real component\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n*\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var re = realf( z );\n* // returns 5.0\n*/\nfunction realf( z ) {\n\treturn z.re;\n}\n\n\n// EXPORTS //\n\nexport default realf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the imaginary component of a single-precision complex floating-point number.\n*\n* @param {Complex} z - complex number\n* @returns {number} imaginary component\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n*\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var im = imagf( z );\n* // returns 3.0\n*/\nfunction imagf( z ) {\n\treturn z.im;\n}\n\n\n// EXPORTS //\n\nexport default imagf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the absolute value of a double-precision floating-point number `x`.\n*\n* @param {number} x - input value\n* @returns {number} absolute value\n*\n* @example\n* var v = abs( -1.0 );\n* // returns 1.0\n*\n* @example\n* var v = abs( 2.0 );\n* // returns 2.0\n*\n* @example\n* var v = abs( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = abs( -0.0 );\n* // returns 0.0\n*\n* @example\n* var v = abs( NaN );\n* // returns NaN\n*/\nfunction abs( x ) {\n\treturn Math.abs( x ); // eslint-disable-line stdlib/no-builtin-math\n}\n\n\n// EXPORTS //\n\nexport default abs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the maximum value.\n*\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {number} maximum value\n*\n* @example\n* var v = max( 3.14, 4.2 );\n* // returns 4.2\n*\n* @example\n* var v = max( 3.14, NaN );\n* // returns NaN\n*\n* @example\n* var v = max( +0.0, -0.0 );\n* // returns +0.0\n*/\nfunction max( x, y ) {\n\tif ( isnan( x ) || isnan( y ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x === PINF || y === PINF ) {\n\t\treturn PINF;\n\t}\n\tif ( x === y && x === 0.0 ) {\n\t\tif ( isPositiveZero( x ) ) {\n\t\t\treturn x;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( x > y ) {\n\t\treturn x;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default max;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a string.\n*\n* @private\n* @returns {string} serialized complex number\n*/\nfunction toString() { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar str = '' + this.re;\n\tif ( this.im < 0 ) {\n\t\tstr += ' - ' + (-this.im);\n\t} else {\n\t\tstr += ' + ' + this.im;\n\t}\n\tstr += 'i';\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* @private\n* @returns {Object} JSON representation\n*/\nfunction toJSON() {\n\t/* eslint-disable no-invalid-this */\n\tvar out = {};\n\tout.type = 'Complex64';\n\tout.re = this.re;\n\tout.im = this.im;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default toJSON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-max\n* @type {number}\n*\n* @example\n* import FLOAT64_MAX from '@stdlib/constants-float64-max';\n* // returns 1.7976931348623157e+308\n*/\n\n\n// MAIN //\n\n/**\n* Maximum double-precision floating-point number.\n*\n* ## Notes\n*\n* The maximum is given by\n*\n* ```tex\n* 2^{1023} (2 - 2^{-52})\n* ```\n*\n* @constant\n* @type {number}\n* @default 1.7976931348623157e+308\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX = 1.7976931348623157e+308;\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-eps\n* @type {number}\n*\n* @example\n* import FLOAT64_EPSILON from '@stdlib/constants-float64-eps';\n* // returns 2.220446049250313e-16\n*/\n\n\n// MAIN //\n\n/**\n* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.\n*\n* ## Notes\n*\n* The difference is\n*\n* ```tex\n* \\frac{1}{2^{52}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 2.220446049250313e-16\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}\n*/\nvar FLOAT64_EPSILON = 2.2204460492503130808472633361816E-16;\n\n\n// EXPORTS //\n\nexport default FLOAT64_EPSILON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the real part of the quotient.\n*\n* ## Notes\n*\n* -   See figure 10 of [Baudin (2012)][@baudin:2012].\n*\n* [@baudin:2012]: https://arxiv.org/abs/1210.4539\n*\n* @private\n* @param {number} re1 - real component\n* @param {number} im1 - imaginary component\n* @param {number} re2 - real component\n* @param {number} im2 - imaginary component\n* @param {number} r - partial result\n* @param {number} t - partial result\n* @returns {number} real part of the quotient\n*/\nfunction internalCompreal( re1, im1, re2, im2, r, t ) {\n\tvar br;\n\tif ( r === 0.0 ) {\n\t\treturn ( re1 + (im2 * (im1/re2)) ) * t;\n\t}\n\tbr = im1 * r;\n\tif ( br === 0.0 ) {\n\t\treturn ( re1*t ) + ( (im1*t) * r );\n\t}\n\treturn ( re1+br ) * t;\n}\n\n\n// EXPORTS //\n\nexport default internalCompreal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport internalCompreal from './internal_compreal.js';\n\n\n// MAIN //\n\n/**\n* Computes the complex division.\n*\n* ## Notes\n*\n* -   See figure 10 of [reference][@baudin:2012].\n*\n* [@baudin:2012]: https://arxiv.org/abs/1210.4539\n*\n* @private\n* @param {number} re1 - real component\n* @param {number} im1 - imaginary component\n* @param {number} re2 - real component\n* @param {number} im2 - imaginary component\n* @returns {Array<number>} result\n*/\nfunction robustInternal( re1, im1, re2, im2 ) {\n\tvar out;\n\tvar r;\n\tvar t;\n\n\tout = [ 0.0, 0.0 ];\n\tr = im2 / re2;\n\tt = 1.0 / ( re2 + (im2*r) );\n\n\tout[ 0 ] = internalCompreal( re1, im1, re2, im2, r, t );\n\tout[ 1 ] = internalCompreal( im1, -re1, re2, im2, r, t );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default robustInternal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport max from '@stdlib/math-base-special-max';\nimport FLOAT64_BIGGEST from '@stdlib/constants-float64-max';\nimport FLOAT64_SMALLEST from '@stdlib/constants-float64-smallest-normal';\nimport EPS from '@stdlib/constants-float64-eps';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\nimport Complex128 from '@stdlib/complex-float64';\nimport robustInternal from './robust_internal.js';\n\n\n// VARIABLES //\n\nvar LARGE_THRESHOLD = FLOAT64_BIGGEST * 0.5;\nvar SMALL_THRESHOLD = FLOAT64_SMALLEST * ( 2.0 / EPS );\nvar RECIP_EPS_SQR = 2.0 / ( EPS * EPS );\n\n\n// MAIN //\n\n/**\n* Divides two double-precision complex floating-point numbers.\n*\n* ## References\n*\n* -   Baudin, Michael, and Robert L. Smith. 2012. \"A Robust Complex Division in Scilab.\" _arXiv_ abs/1210.4539 \\[cs.MS\\] (October): 1–25. <https://arxiv.org/abs/1210.4539>.\n*\n* @param {Complex128} z1 - complex number\n* @param {Complex128} z2 - complex number\n* @returns {Complex128} result\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var z1 = new Complex128( -13.0, -1.0 );\n* // returns <Complex128>\n*\n* var z2 = new Complex128( -2.0, 1.0 );\n* // returns <Complex128>\n*\n* var out = cdiv( z1, z2 );\n* // returns <Complex128>\n*\n* var re = real( out );\n* // returns 5.0\n*\n* var im = imag( out );\n* // returns 3.0\n*/\nfunction cdiv( z1, z2 ) {\n\tvar re1;\n\tvar re2;\n\tvar im1;\n\tvar im2;\n\tvar out;\n\tvar ab;\n\tvar cd;\n\tvar s;\n\n\tre1 = real( z1 );\n\tre2 = real( z2 );\n\tim1 = imag( z1 );\n\tim2 = imag( z2 );\n\n\tab = max( abs(re1), abs(im1) );\n\tcd = max( abs(re2), abs(im2) );\n\ts = 1.0;\n\n\tif ( ab >= LARGE_THRESHOLD ) {\n\t\tre1 *= 0.5;\n\t\tim1 *= 0.5;\n\t\ts *= 2.0;\n\t} else if ( ab <= SMALL_THRESHOLD ) {\n\t\tre1 *= RECIP_EPS_SQR;\n\t\tim1 *= RECIP_EPS_SQR;\n\t\ts /= RECIP_EPS_SQR;\n\t}\n\tif ( cd >= LARGE_THRESHOLD ) {\n\t\tre2 *= 0.5;\n\t\tim2 *= 0.5;\n\t\ts *= 0.5;\n\t} else if ( cd <= SMALL_THRESHOLD ) {\n\t\tre2 *= RECIP_EPS_SQR;\n\t\tim2 *= RECIP_EPS_SQR;\n\t\ts *= RECIP_EPS_SQR;\n\t}\n\tif ( abs( im2 ) <= abs( re2 ) ) {\n\t\tout = robustInternal( re1, im1, re2, im2 );\n\t} else {\n\t\tout = robustInternal( im1, re1, im2, re2 );\n\t\tout[ 1 ] *= -1;\n\t}\n\tout[ 0 ] *= s;\n\tout[ 1 ] *= s;\n\treturn new Complex128( out[ 0 ], out[ 1 ] );\n}\n\n\n// EXPORTS //\n\nexport default cdiv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar imul = ( typeof Math.imul === 'function' ) ? Math.imul : null; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default imul;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Perform C-like multiplication of two signed 32-bit integers.\n*\n* @module @stdlib/math-base-ops-imul\n*\n* @example\n* import imul from '@stdlib/math-base-ops-imul';\n*\n* var v = imul( -10|0, 4|0 );\n* // returns -40\n*/\n\n// MODULES //\n\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar main;\nif ( typeof builtin === 'function' ) {\n\tmain = builtin;\n} else {\n\tmain = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\n// Define a mask for the least significant 16 bits (low word): 65535 => 0x0000ffff => 00000000000000001111111111111111\nvar LOW_WORD_MASK = 0x0000ffff>>>0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Performs C-like multiplication of two signed 32-bit integers.\n*\n* ## Method\n*\n* -   To emulate C-like multiplication without the aid of 64-bit integers, we recognize that a 32-bit integer can be split into two 16-bit words\n*\n*     ```tex\n*     a = w_h*2^{16} + w_l\n*     ```\n*\n*     where \\\\( w_h \\\\) is the most significant 16 bits and \\\\( w_l \\\\) is the least significant 16 bits. For example, consider the maximum signed 32-bit integer \\\\( 2^{31}-1 \\\\)\n*\n*     ```binarystring\n*     01111111111111111111111111111111\n*     ```\n*\n*     The 16-bit high word is then\n*\n*     ```binarystring\n*     0111111111111111\n*     ```\n*\n*     and the 16-bit low word\n*\n*     ```binarystring\n*     1111111111111111\n*     ```\n*\n*     If we cast the high word to 32-bit precision and multiply by \\\\( 2^{16} \\\\) (equivalent to a 16-bit left shift), then the bit sequence is\n*\n*     ```binarystring\n*     01111111111111110000000000000000\n*     ```\n*\n*     Similarly, upon casting the low word to 32-bit precision, the bit sequence is\n*\n*     ```binarystring\n*     00000000000000001111111111111111\n*     ```\n*\n*     From the rules of binary addition, we recognize that adding the two 32-bit values for the high and low words will return our original value \\\\( 2^{31}-1 \\\\).\n*\n* -   Accordingly, the multiplication of two 32-bit integers can be expressed\n*\n*     ```tex\n*     \\begin{align*}\n*     a \\cdot b &= ( a_h \\cdot 2^{16} + a_l) \\cdot ( b_h \\cdot 2^{16} + b_l) \\\\\n*           &= a_l \\cdot b_l + a_h \\cdot b_l \\cdot 2^{16} + a_l \\cdot b_h \\cdot 2^{16} + (a_h \\cdot b_h) \\cdot 2^{32} \\\\\n*           &= a_l \\cdot b_l + (a_h \\cdot b_l + a_l \\cdot b_h) \\cdot 2^{16} + (a_h \\cdot b_h) \\cdot 2^{32}\n*     \\end{align*}\n*     ```\n*\n* -   We note that multiplying (dividing) an integer by \\\\( 2^n \\\\) is equivalent to performing a left (right) shift of \\\\( n \\\\) bits.\n*\n* -   Further, as we want to return an integer of the same precision, for a 32-bit integer, the return value will be modulo \\\\( 2^{32} \\\\). Stated another way, we only care about the low word of a 64-bit result.\n*\n* -   Accordingly, the last term, being evenly divisible by \\\\( 2^{32} \\\\), drops from the equation leaving the remaining two terms as the remainder.\n*\n*     ```tex\n*     a \\cdot b = a_l \\cdot b_l + (a_h \\cdot b_l + a_l \\cdot b_h) << 16\n*     ```\n*\n* -   Lastly, the second term in the above equation contributes to the middle bits and may cause the product to \"overflow\". However, we can disregard (`>>>0`) overflow bits due to modulo arithmetic, as discussed earlier with regard to the term involving the partial product of high words.\n*\n* @param {integer32} a - integer\n* @param {integer32} b - integer\n* @returns {integer32} product\n*\n* @example\n* var v = imul( -10|0, 4|0 );\n* // returns -40\n*/\nfunction imul( a, b ) {\n\tvar lbits;\n\tvar mbits;\n\tvar ha;\n\tvar hb;\n\tvar la;\n\tvar lb;\n\n\ta |= 0; // asm type annotation\n\tb |= 0; // asm type annotation\n\n\t// Isolate the most significant 16-bits:\n\tha = ( a>>>16 )>>>0; // asm type annotation\n\thb = ( b>>>16 )>>>0; // asm type annotation\n\n\t// Isolate the least significant 16-bits:\n\tla = ( a&LOW_WORD_MASK )>>>0; // asm type annotation\n\tlb = ( b&LOW_WORD_MASK )>>>0; // asm type annotation\n\n\t// Shift by zero (`>>>0`) sets the sign on the high part of the low word (i.e., \"mid-bits\"):\n\tlbits = ( la*lb )>>>0; // asm type annotation; no integer overflow possible\n\tmbits = ( ((ha*lb) + (la*hb))<<16 )>>>0; // asm type annotation; possible integer overflow\n\n\t// The final `|0` converts from an \"unsigned integer\" (possible integer overflow during sum) to a signed integer:\n\treturn ( lbits + mbits )|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nexport default imul;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// VARIABLES //\n\n// Define a mask for the least significant 16 bits (low word): 65535 => 0x0000ffff => 00000000000000001111111111111111\nvar LOW_WORD_MASK = 0x0000ffff>>>0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Performs multiplication of two signed 32-bit integers and returns an array of two signed 32-bit integers which represents the signed 64-bit integer product.\n*\n* @param {uinteger32} a - integer\n* @param {uinteger32} b - integer\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var v = imuldw( 0xAAAAAAAA, 0x55555555, [ 0, 0 ], 1, 0 );\n* // returns [ -477218589, 1908874354 ]\n*/\nfunction imuldw( a, b, out, stride, offset ) {\n\tvar w1;\n\tvar w2;\n\tvar w3;\n\tvar ha;\n\tvar hb;\n\tvar la;\n\tvar lb;\n\tvar t;\n\tvar k;\n\n\tif ( isnan( a ) || isnan( b ) ) {\n\t\tout[ offset ] = NaN;\n\t\tout[ offset + stride ] = NaN;\n\t\treturn out;\n\t}\n\ta |= 0; // asm type annotation\n\tb |= 0; // asm type annotation\n\n\tha = ( a >> 16 ) | 0;\n\tla = ( a & LOW_WORD_MASK ) >>> 0;\n\n\thb = ( b >> 16 ) | 0;\n\tlb = ( b & LOW_WORD_MASK ) >>> 0;\n\n\tt = ( la*lb ) >>> 0;\n\tw3 = ( t & LOW_WORD_MASK ) >>> 0;\n\tk = ( t >>> 16 ) >>> 0;\n\n\tt = ( ( ha*lb ) + k ) >>> 0;\n\tw2 = ( t & LOW_WORD_MASK ) >>> 0;\n\tw1 = ( t >> 16 ) >>> 0;\n\n\tt = ( ( la*hb ) + w2 ) >>> 0;\n\tk = ( t >> 16 ) >>> 0;\n\n\tout[ offset ] = ( ( ha*hb ) + w1 + k ) | 0; // compute the higher 32 bits and cast to a signed 32-bit integer\n\tout[ offset + stride ] = ( ( t << 16 ) + w3 ) | 0; // compute the lower 32 bits and cast to a signed 32-bit integer\n\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default imuldw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Performs multiplication of two signed 32-bit integers and returns an array of two signed 32-bit integers which represents the signed 64-bit integer product.\n*\n* @param {uinteger32} a - integer\n* @param {uinteger32} b - integer\n* @returns {Array<number>} output array\n*\n* @example\n* var v = imuldw( 0xAAAAAAAA, 0x55555555 );\n* // returns [ -477218589, 1908874354 ]\n*/\nfunction imuldw( a, b ) {\n\treturn fcn( a, b, [ 0, 0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default imuldw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Perform multiplication of two signed 32-bit integers and return an array of two signed 32-bit integers which represents the signed 64-bit integer product.\n*\n* @module @stdlib/math-base-ops-imuldw\n*\n* @example\n* import imuldw from '@stdlib/math-base-ops-imuldw';\n*\n* var v = imuldw( 0xAAAAAAAA, 0x55555555 );\n* // returns [ -477218589, 1908874354 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// VARIABLES //\n\n// Define a mask for the least significant 16 bits (low word): 65535 => 0x0000ffff => 00000000000000001111111111111111\nvar LOW_WORD_MASK = 0x0000ffff>>>0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Performs multiplication of two unsigned 32-bit integers and returns an array of two unsigned 32-bit integers which represents the unsigned 64-bit integer product.\n*\n* @param {uinteger32} a - integer\n* @param {uinteger32} b - integer\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var out = [ 0, 0 ];\n* var v = umuldw( 0xAAAAAAAA, 0x55555555, out, 1, 0 );\n* // returns [ 954437176, 1908874354 ]\n*/\nfunction umuldw(a, b, out, stride, offset ) {\n\tvar w1;\n\tvar w2;\n\tvar w3;\n\tvar ha;\n\tvar hb;\n\tvar la;\n\tvar lb;\n\tvar t;\n\tvar k;\n\n\tif ( isnan( a ) || isnan( b ) ) {\n\t\tout[ offset ] = NaN;\n\t\tout[ offset + stride ] = NaN;\n\t\treturn out;\n\t}\n\ta >>>= 0; // asm type annotation\n\tb >>>= 0; // asm type annotation\n\n\tha = ( a >>> 16 ) >>> 0;\n\tla = ( a & LOW_WORD_MASK ) >>> 0;\n\n\thb = ( b >>> 16 ) >>> 0;\n\tlb = ( b & LOW_WORD_MASK ) >>> 0;\n\n\tt = ( la*lb ) >>> 0;\n\tw3 = ( t & LOW_WORD_MASK ) >>> 0;\n\tk = ( t >>> 16 ) >>> 0;\n\n\tt = ( ( ha*lb ) + k ) >>> 0;\n\tw2 = ( t & LOW_WORD_MASK ) >>> 0;\n\tw1 = ( t >>> 16 ) >>> 0;\n\n\tt = ( ( la*hb ) + w2 ) >>> 0;\n\tk = ( t >>> 16 ) >>> 0;\n\n\tout[ offset ] = ( ( ha*hb ) + w1 + k ) >>> 0; // compute the higher 32 bits and cast to an unsigned 32-bit integer\n\tout[ offset + stride ] = ( ( t << 16 ) + w3) >>> 0; // compute the lower 32 bits and cast to an unsigned 32-bit integer\n\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default umuldw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Performs multiplication of two unsigned 32-bit integers and returns an array of two unsigned 32-bit integers which represents the unsigned 64-bit integer product.\n*\n* @param {uinteger32} a - integer\n* @param {uinteger32} b - integer\n* @returns {Array<number>} output array\n*\n* @example\n* var v = umuldw( 0xAAAAAAAA, 0x55555555 );\n* // returns [ 954437176, 1908874354 ]\n*/\nfunction umuldw( a, b ) {\n\treturn fcn( a, b, [ 0, 0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default umuldw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Perform multiplication of two unsigned 32-bit integers and return an array of two unsigned 32-bit integers which represents the unsigned 64-bit integer product.\n*\n* @module @stdlib/math-base-ops-umuldw\n*\n* @example\n* import umuldw from '@stdlib/math-base-ops-umuldw';\n*\n* var v = umuldw( 0xAAAAAAAA, 0x55555555 );\n* // returns [ 954437176, 1908874354 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name add\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/ops/add}\n*/\nimport add from '@stdlib/math-base-ops-add';\nsetReadOnly( ns, 'add', add );\n\n/**\n* @name add3\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/ops/add3}\n*/\nimport add3 from '@stdlib/math-base-ops-add3';\nsetReadOnly( ns, 'add3', add3 );\n\n/**\n* @name add4\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/ops/add4}\n*/\nimport add4 from '@stdlib/math-base-ops-add4';\nsetReadOnly( ns, 'add4', add4 );\n\n/**\n* @name add5\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/ops/add5}\n*/\nimport add5 from '@stdlib/math-base-ops-add5';\nsetReadOnly( ns, 'add5', add5 );\n\n/**\n* @name addf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/ops/addf}\n*/\nimport addf from '@stdlib/math-base-ops-addf';\nsetReadOnly( ns, 'addf', addf );\n\n/**\n* @name cadd\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/ops/cadd}\n*/\nimport cadd from '@stdlib/math-base-ops-cadd';\nsetReadOnly( ns, 'cadd', cadd );\n\n/**\n* @name caddf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/ops/caddf}\n*/\nimport caddf from '@stdlib/math-base-ops-caddf';\nsetReadOnly( ns, 'caddf', caddf );\n\n/**\n* @name cdiv\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/ops/cdiv}\n*/\nimport cdiv from '@stdlib/math-base-ops-cdiv';\nsetReadOnly( ns, 'cdiv', cdiv );\n\n/**\n* @name cmul\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/ops/cmul}\n*/\nimport cmul from '@stdlib/math-base-ops-cmul';\nsetReadOnly( ns, 'cmul', cmul );\n\n/**\n* @name cmulf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/ops/cmulf}\n*/\nimport cmulf from '@stdlib/math-base-ops-cmulf';\nsetReadOnly( ns, 'cmulf', cmulf );\n\n/**\n* @name cneg\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/ops/cneg}\n*/\nimport cneg from '@stdlib/math-base-ops-cneg';\nsetReadOnly( ns, 'cneg', cneg );\n\n/**\n* @name cnegf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/ops/cnegf}\n*/\nimport cnegf from '@stdlib/math-base-ops-cnegf';\nsetReadOnly( ns, 'cnegf', cnegf );\n\n/**\n* @name csub\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/ops/csub}\n*/\nimport csub from '@stdlib/math-base-ops-csub';\nsetReadOnly( ns, 'csub', csub );\n\n/**\n* @name csubf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/ops/csubf}\n*/\nimport csubf from '@stdlib/math-base-ops-csubf';\nsetReadOnly( ns, 'csubf', csubf );\n\n/**\n* @name div\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/ops/div}\n*/\nimport div from '@stdlib/math-base-ops-div';\nsetReadOnly( ns, 'div', div );\n\n/**\n* @name divf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/ops/divf}\n*/\nimport divf from '@stdlib/math-base-ops-divf';\nsetReadOnly( ns, 'divf', divf );\n\n/**\n* @name imul\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/ops/imul}\n*/\nimport imul from '@stdlib/math-base-ops-imul';\nsetReadOnly( ns, 'imul', imul );\n\n/**\n* @name imuldw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/ops/imuldw}\n*/\nimport imuldw from '@stdlib/math-base-ops-imuldw';\nsetReadOnly( ns, 'imuldw', imuldw );\n\n/**\n* @name mul\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/ops/mul}\n*/\nimport mul from '@stdlib/math-base-ops-mul';\nsetReadOnly( ns, 'mul', mul );\n\n/**\n* @name mulf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/ops/mulf}\n*/\nimport mulf from '@stdlib/math-base-ops-mulf';\nsetReadOnly( ns, 'mulf', mulf );\n\n/**\n* @name sub\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/ops/sub}\n*/\nimport sub from '@stdlib/math-base-ops-sub';\nsetReadOnly( ns, 'sub', sub );\n\n/**\n* @name subf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/ops/subf}\n*/\nimport subf from '@stdlib/math-base-ops-subf';\nsetReadOnly( ns, 'subf', subf );\n\n/**\n* @name umul\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/ops/umul}\n*/\nimport umul from '@stdlib/math-base-ops-umul';\nsetReadOnly( ns, 'umul', umul );\n\n/**\n* @name umuldw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/ops/umuldw}\n*/\nimport umuldw from '@stdlib/math-base-ops-umuldw';\nsetReadOnly( ns, 'umuldw', umuldw );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the sum of two double-precision floating-point numbers `x` and `y`.\n*\n* @param {number} x - first input value\n* @param {number} y - second input value\n* @returns {number} sum\n*\n* @example\n* var v = add( -1.0, 5.0 );\n* // returns 4.0\n*\n* @example\n* var v = add( 2.0, 5.0 );\n* // returns 7.0\n*\n* @example\n* var v = add( 0.0, 5.0 );\n* // returns 5.0\n*\n* @example\n* var v = add( -0.0, 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = add( NaN, NaN );\n* // returns NaN\n*/\nfunction add( x, y ) {\n\treturn x + y;\n}\n\n\n// EXPORTS //\n\nexport default add;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the sum of three double-precision floating-point numbers.\n*\n* @param {number} x - first input value\n* @param {number} y - second input value\n* @param {number} z - third input value\n* @returns {number} sum\n*\n* @example\n* var v = add3( -1.0, 5.0, 2.0 );\n* // returns 6.0\n*\n* @example\n* var v = add3( 2.0, 5.0, 2.0 );\n* // returns 9.0\n*\n* @example\n* var v = add3( 0.0, 5.0, 2.0 );\n* // returns 7.0\n*\n* @example\n* var v = add3( -0.0, 0.0, -0.0 );\n* // returns 0.0\n*\n* @example\n* var v = add3( NaN, NaN, NaN );\n* // returns NaN\n*/\nfunction add3( x, y, z ) {\n\treturn x + y + z;\n}\n\n\n// EXPORTS //\n\nexport default add3;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the sum of four double-precision floating-point numbers.\n*\n* @param {number} x - first input value\n* @param {number} y - second input value\n* @param {number} z - third input value\n* @param {number} w - fourth input value\n* @returns {number} sum\n*\n* @example\n* var v = add4( -1.0, 5.0, 2.0, -3.0 );\n* // returns 3.0\n*\n* @example\n* var v = add4( 2.0, 5.0, 2.0, -3.0 );\n* // returns 6.0\n*\n* @example\n* var v = add4( 0.0, 5.0, 2.0, -3.0 );\n* // returns 4.0\n*\n* @example\n* var v = add4( -0.0, 0.0, -0.0, -0.0 );\n* // returns 0.0\n*\n* @example\n* var v = add4( NaN, NaN, NaN, NaN );\n* // returns NaN\n*/\nfunction add4( x, y, z, w ) {\n\treturn x + y + z + w;\n}\n\n\n// EXPORTS //\n\nexport default add4;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the sum of five double-precision floating-point numbers.\n*\n* @param {number} x - first input value\n* @param {number} y - second input value\n* @param {number} z - third input value\n* @param {number} w - fourth input value\n* @param {number} u - fifth input value\n* @returns {number} sum\n*\n* @example\n* var v = add5( -1.0, 5.0, 2.0, -3.0, 4.0 );\n* // returns 7.0\n*\n* @example\n* var v = add5( 2.0, 5.0, 2.0, -3.0, 4.0 );\n* // returns 10.0\n*\n* @example\n* var v = add5( 0.0, 5.0, 2.0, -3.0, 4.0 );\n* // returns 8.0\n*\n* @example\n* var v = add5( -0.0, 0.0, -0.0, -0.0, -0.0 );\n* // returns 0.0\n*\n* @example\n* var v = add5( NaN, NaN, NaN, NaN, NaN );\n* // returns NaN\n*/\nfunction add5( x, y, z, w, u ) {\n\treturn x + y + z + w + u;\n}\n\n\n// EXPORTS //\n\nexport default add5;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the sum of two single-precision floating-point numbers `x` and `y`.\n*\n* @param {number} x - first input value\n* @param {number} y - second input value\n* @returns {number} sum\n*\n* @example\n* var v = addf( -1.0, 5.0 );\n* // returns 4.0\n*\n* @example\n* var v = addf( 2.0, 5.0 );\n* // returns 7.0\n*\n* @example\n* var v = addf( 0.0, 5.0 );\n* // returns 5.0\n*\n* @example\n* var v = addf( -0.0, 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = addf( NaN, NaN );\n* // returns NaN\n*/\nfunction addf( x, y ) {\n\treturn float64ToFloat32( float64ToFloat32( x ) + float64ToFloat32( y ) );\n}\n\n\n// EXPORTS //\n\nexport default addf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Complex128 from '@stdlib/complex-float64';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\n\n\n// MAIN //\n\n/**\n* Adds two double-precision complex floating-point numbers.\n*\n* @param {Complex128} z1 - complex number\n* @param {Complex128} z2 - complex number\n* @returns {Complex128} result\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var z = new Complex128( 5.0, 3.0 );\n* // returns <Complex128>\n*\n* var out = cadd( z, z );\n* // returns <Complex128>\n*\n* var re = real( out );\n* // returns 10.0\n*\n* var im = imag( out );\n* // returns 6.0\n*/\nfunction cadd( z1, z2 ) {\n\tvar re = real( z1 ) + real( z2 );\n\tvar im = imag( z1 ) + imag( z2 );\n\treturn new Complex128( re, im );\n}\n\n\n// EXPORTS //\n\nexport default cadd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport Complex64 from '@stdlib/complex-float32';\nimport realf from '@stdlib/complex-realf';\nimport imagf from '@stdlib/complex-imagf';\n\n\n// MAIN //\n\n/**\n* Adds two single-precision complex floating-point numbers.\n*\n* @param {Complex64} z1 - complex number\n* @param {Complex64} z2 - complex number\n* @returns {Complex64} result\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var z = new Complex64( 5.0, 3.0 );\n* // returns <Complex64>\n*\n* var out = caddf( z, z );\n* // returns <Complex64>\n*\n* var re = realf( out );\n* // returns 10.0\n*\n* var im = imagf( out );\n* // returns 6.0\n*/\nfunction caddf( z1, z2 ) {\n\tvar re = float64ToFloat32( realf( z1 ) + realf( z2 ) );\n\tvar im = float64ToFloat32( imagf( z1 ) + imagf( z2 ) );\n\treturn new Complex64( re, im );\n}\n\n\n// EXPORTS //\n\nexport default caddf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Complex128 from '@stdlib/complex-float64';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\n\n\n// MAIN //\n\n/**\n* Multiplies two double-precision complex floating-point numbers.\n*\n* @param {Complex128} z1 - complex number\n* @param {Complex128} z2 - complex number\n* @returns {Complex128} result\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var z1 = new Complex128( 5.0, 3.0 );\n* // returns <Complex128>\n*\n* var z2 = new Complex128( -2.0, 1.0 );\n* // returns <Complex128>\n*\n* var out = cmul( z1, z2 );\n* // returns <Complex128>\n*\n* var re = real( out );\n* // returns -13.0\n*\n* var im = imag( out );\n* // returns -1.0\n*/\nfunction cmul( z1, z2 ) {\n\tvar re1 = real( z1 );\n\tvar re2 = real( z2 );\n\tvar im1 = imag( z1 );\n\tvar im2 = imag( z2 );\n\tvar re = (re1*re2) - (im1*im2);\n\tvar im = (re1*im2) + (im1*re2);\n\treturn new Complex128( re, im );\n}\n\n\n// EXPORTS //\n\nexport default cmul;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport Complex64 from '@stdlib/complex-float32';\nimport realf from '@stdlib/complex-realf';\nimport imagf from '@stdlib/complex-imagf';\n\n\n// MAIN //\n\n/**\n* Multiplies two single-precision complex floating-point numbers.\n*\n* @param {Complex64} z1 - complex number\n* @param {Complex64} z2 - complex number\n* @returns {Complex64} result\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var z1 = new Complex64( 5.0, 3.0 );\n* // returns <Complex64>\n*\n* var z2 = new Complex64( -2.0, 1.0 );\n* // returns <Complex64>\n*\n* var out = cmulf( z1, z2 );\n* // returns <Complex64>\n*\n* var re = realf( out );\n* // returns -13.0\n*\n* var im = imagf( out );\n* // returns -1.0\n*/\nfunction cmulf( z1, z2 ) {\n\tvar re1 = realf( z1 );\n\tvar re2 = realf( z2 );\n\tvar im1 = imagf( z1 );\n\tvar im2 = imagf( z2 );\n\tvar re = float64ToFloat32(re1*re2) - float64ToFloat32(im1*im2);\n\tvar im = float64ToFloat32(re1*im2) + float64ToFloat32(im1*re2);\n\treturn new Complex64( float64ToFloat32( re ), float64ToFloat32( im ) );\n}\n\n\n// EXPORTS //\n\nexport default cmulf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\nimport Complex128 from '@stdlib/complex-float64';\n\n\n// MAIN //\n\n/**\n* Negates a double-precision complex floating-point number.\n*\n* @param {Complex128} z - complex number\n* @returns {Complex128} result\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var z = new Complex128( -4.2, 5.5 );\n* // returns <Complex128>\n*\n* var out = cneg( z );\n* // returns <Complex128>\n*\n* var re = real( out );\n* // returns 4.2\n*\n* var im = imag( out );\n* // returns -5.5\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var z = new Complex128( 0.0, 0.0 );\n* // returns <Complex128>\n*\n* var out = cneg( z );\n* // returns <Complex128>\n*\n* var re = real( out );\n* // returns -0.0\n*\n* var im = imag( out );\n* // returns -0.0\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var z = new Complex128( NaN, NaN );\n* // returns <Complex128>\n*\n* var out = cneg( z );\n* // returns <Complex128>\n*\n* var re = real( out );\n* // returns NaN\n*\n* var im = imag( out );\n* // returns NaN\n*/\nfunction cneg( z ) {\n\treturn new Complex128( -real( z ), -imag( z ) );\n}\n\n\n// EXPORTS //\n\nexport default cneg;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport realf from '@stdlib/complex-realf';\nimport imagf from '@stdlib/complex-imagf';\nimport Complex64 from '@stdlib/complex-float32';\n\n\n// MAIN //\n\n/**\n* Negates a single-precision complex floating-point number.\n*\n* @param {Complex64} z - complex number\n* @returns {Complex64} result\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var z = new Complex64( -4.2, 5.5 );\n* // returns <Complex64>\n*\n* var out = cnegf( z );\n* // returns <Complex64>\n*\n* var re = realf( out );\n* // returns ~4.2\n*\n* var im = imagf( out );\n* // returns -5.5\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var z = new Complex64( 0.0, 0.0 );\n* // returns <Complex64>\n*\n* var out = cnegf( z );\n* // returns <Complex64>\n*\n* var re = realf( out );\n* // returns -0.0\n*\n* var im = imagf( out );\n* // returns -0.0\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var z = new Complex64( NaN, NaN );\n* // returns <Complex64>\n*\n* var out = cnegf( z );\n* // returns <Complex64>\n*\n* var re = realf( out );\n* // returns NaN\n*\n* var im = imagf( out );\n* // returns NaN\n*/\nfunction cnegf( z ) {\n\treturn new Complex64( -realf( z ), -imagf( z ) );\n}\n\n\n// EXPORTS //\n\nexport default cnegf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Complex128 from '@stdlib/complex-float64';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\n\n\n// MAIN //\n\n/**\n* Subtracts two double-precision complex floating-point numbers.\n*\n* @param {Complex128} z1 - complex number\n* @param {Complex128} z2 - complex number\n* @returns {Complex128} result\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var z1 = new Complex128( 5.0, 3.0 );\n* // returns <Complex128>\n*\n* var z2 = new Complex128( -2.0, 1.0 );\n* // returns <Complex128>\n*\n* var out = csub( z1, z2 );\n* // returns <Complex128>\n*\n* var re = real( out );\n* // returns 7.0\n*\n* var im = imag( out );\n* // returns 2.0\n*/\nfunction csub( z1, z2 ) {\n\tvar re = real( z1 ) - real( z2 );\n\tvar im = imag( z1 ) - imag( z2 );\n\treturn new Complex128( re, im );\n}\n\n\n// EXPORTS //\n\nexport default csub;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport Complex64 from '@stdlib/complex-float32';\nimport realf from '@stdlib/complex-realf';\nimport imagf from '@stdlib/complex-imagf';\n\n\n// MAIN //\n\n/**\n* Subtracts two single-precision complex floating-point numbers.\n*\n* @param {Complex64} z1 - complex number\n* @param {Complex64} z2 - complex number\n* @returns {Complex64} result\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var z1 = new Complex64( 5.0, 3.0 );\n* // returns <Complex64>\n*\n* var z2 = new Complex64( -2.0, 1.0 );\n* // returns <Complex64>\n*\n* var out = csubf( z1, z2 );\n* // returns <Complex64>\n*\n* var re = realf( out );\n* // returns 7.0\n*\n* var im = imagf( out );\n* // returns 2.0\n*/\nfunction csubf( z1, z2 ) {\n\tvar re = float64ToFloat32( realf( z1 ) - realf( z2 ) );\n\tvar im = float64ToFloat32( imagf( z1 ) - imagf( z2 ) );\n\treturn new Complex64( re, im );\n}\n\n\n// EXPORTS //\n\nexport default csubf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Divides two double-precision floating-point numbers `x` and `y`.\n*\n* @param {number} x - first input value (dividend)\n* @param {number} y - second input value (divisor)\n* @returns {number} result\n*\n* @example\n* var v = div( -1.0, 5.0 );\n* // returns -0.2\n*\n* @example\n* var v = div( 2.0, 5.0 );\n* // returns 0.4\n*\n* @example\n* var v = div( 0.0, 5.0 );\n* // returns 0.0\n*\n* @example\n* var v = div( -0.0, 5.0 );\n* // returns -0.0\n*\n* @example\n* var v = div( NaN, NaN );\n* // returns NaN\n*/\nfunction div( x, y ) {\n\treturn x / y;\n}\n\n\n// EXPORTS //\n\nexport default div;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\n\n\n// MAIN //\n\n/**\n* Divides two single-precision floating-point numbers `x` and `y`.\n*\n* @param {number} x - first input value (dividend)\n* @param {number} y - second input value (divisor)\n* @returns {number} result\n*\n* @example\n* var v = divf( -1.0, 5.0 );\n* // returns ~-0.2\n*\n* @example\n* var v = divf( 2.0, 5.0 );\n* // returns ~0.4\n*\n* @example\n* var v = divf( 0.0, 5.0 );\n* // returns 0.0\n*\n* @example\n* var v = divf( -0.0, 5.0 );\n* // returns -0.0\n*\n* @example\n* var v = divf( NaN, NaN );\n* // returns NaN\n*/\nfunction divf( x, y ) {\n\treturn float64ToFloat32( float64ToFloat32( x ) / float64ToFloat32( y ) );\n}\n\n\n// EXPORTS //\n\nexport default divf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Multiplies two double-precision floating-point numbers `x` and `y`.\n*\n* @param {number} x - first input value\n* @param {number} y - second input value\n* @returns {number} result\n*\n* @example\n* var v = mul( -1.0, 5.0 );\n* // returns -5.0\n*\n* @example\n* var v = mul( 2.0, 5.0 );\n* // returns 10.0\n*\n* @example\n* var v = mul( 0.0, 5.0 );\n* // returns 0.0\n*\n* @example\n* var v = mul( -0.0, 0.0 );\n* // returns -0.0\n*\n* @example\n* var v = mul( NaN, NaN );\n* // returns NaN\n*/\nfunction mul( x, y ) {\n\treturn x * y;\n}\n\n\n// EXPORTS //\n\nexport default mul;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\n\n\n// MAIN //\n\n/**\n* Multiplies two single-precision floating-point numbers `x` and `y`.\n*\n* @param {number} x - first input value\n* @param {number} y - second input value\n* @returns {number} result\n*\n* @example\n* var v = mulf( -1.0, 5.0 );\n* // returns -5.0\n*\n* @example\n* var v = mulf( 2.0, 5.0 );\n* // returns 10.0\n*\n* @example\n* var v = mulf( 0.0, 5.0 );\n* // returns 0.0\n*\n* @example\n* var v = mulf( -0.0, 0.0 );\n* // returns -0.0\n*\n* @example\n* var v = mulf( NaN, NaN );\n* // returns NaN\n*/\nfunction mulf( x, y ) {\n\treturn float64ToFloat32( float64ToFloat32( x ) * float64ToFloat32( y ) );\n}\n\n\n// EXPORTS //\n\nexport default mulf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Subtracts two double-precision floating-point numbers `x` and `y`.\n*\n* @param {number} x - first input value\n* @param {number} y - second input value\n* @returns {number} result\n*\n* @example\n* var v = sub( -1.0, 5.0 );\n* // returns -6.0\n*\n* @example\n* var v = sub( 2.0, 5.0 );\n* // returns -3.0\n*\n* @example\n* var v = sub( 0.0, 5.0 );\n* // returns -5.0\n*\n* @example\n* var v = sub( -0.0, 0.0 );\n* // returns -0.0\n*\n* @example\n* var v = sub( NaN, NaN );\n* // returns NaN\n*/\nfunction sub( x, y ) {\n\treturn x - y;\n}\n\n\n// EXPORTS //\n\nexport default sub;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\n\n\n// MAIN //\n\n/**\n* Subtracts two single-precision floating-point numbers `x` and `y`.\n*\n* @param {number} x - first input value\n* @param {number} y - second input value\n* @returns {number} result\n*\n* @example\n* var v = subf( -1.0, 5.0 );\n* // returns -6.0\n*\n* @example\n* var v = subf( 2.0, 5.0 );\n* // returns -3.0\n*\n* @example\n* var v = subf( 0.0, 5.0 );\n* // returns -5.0\n*\n* @example\n* var v = subf( -0.0, 0.0 );\n* // returns -0.0\n*\n* @example\n* var v = subf( NaN, NaN );\n* // returns NaN\n*/\nfunction subf( x, y ) {\n\treturn float64ToFloat32( float64ToFloat32( x ) - float64ToFloat32( y ) );\n}\n\n\n// EXPORTS //\n\nexport default subf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\n// Define a mask for the least significant 16 bits (low word): 65535 => 0x0000ffff => 00000000000000001111111111111111\nvar LOW_WORD_MASK = 0x0000ffff>>>0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Performs C-like multiplication of two unsigned 32-bit integers.\n*\n* ## Method\n*\n* -   To emulate C-like multiplication without the aid of 64-bit integers, we recognize that a 32-bit integer can be split into two 16-bit words\n*\n*     ```tex\n*     a = w_h*2^{16} + w_l\n*     ```\n*\n*     where \\\\( w_h \\\\) is the most significant 16 bits and \\\\( w_l \\\\) is the least significant 16 bits. For example, consider the maximum unsigned 32-bit integer \\\\( 2^{32}-1 \\\\)\n*\n*     ```binarystring\n*     11111111111111111111111111111111\n*     ```\n*\n*     The 16-bit high word is then\n*\n*     ```binarystring\n*     1111111111111111\n*     ```\n*\n*     and the 16-bit low word\n*\n*     ```binarystring\n*     1111111111111111\n*     ```\n*\n*     If we cast the high word to 32-bit precision and multiply by \\\\( 2^{16} \\\\) (equivalent to a 16-bit left shift), then the bit sequence is\n*\n*     ```binarystring\n*     11111111111111110000000000000000\n*     ```\n*\n*     Similarly, upon casting the low word to 32-bit precision, the bit sequence is\n*\n*     ```binarystring\n*     00000000000000001111111111111111\n*     ```\n*\n*     From the rules of binary addition, we recognize that adding the two 32-bit values for the high and low words will return our original value \\\\( 2^{32}-1 \\\\).\n*\n* -   Accordingly, the multiplication of two 32-bit integers can be expressed\n*\n*     ```tex\n*     \\begin{align*}\n*     a \\cdot b &= ( a_h \\cdot 2^{16} + a_l) \\cdot ( b_h \\cdot 2^{16} + b_l) \\\\\n*           &= a_l \\cdot b_l + a_h \\cdot b_l \\cdot 2^{16} + a_l \\cdot b_h \\cdot 2^{16} + (a_h \\cdot b_h) \\cdot 2^{32} \\\\\n*           &= a_l \\cdot b_l + (a_h \\cdot b_l + a_l \\cdot b_h) \\cdot 2^{16} + (a_h \\cdot b_h) \\cdot 2^{32}\n*     \\end{align*}\n*     ```\n*\n* -   We note that multiplying (dividing) an integer by \\\\( 2^n \\\\) is equivalent to performing a left (right) shift of \\\\( n \\\\) bits.\n*\n* -   Further, as we want to return an integer of the same precision, for a 32-bit integer, the return value will be modulo \\\\( 2^{32} \\\\). Stated another way, we only care about the low word of a 64-bit result.\n*\n* -   Accordingly, the last term, being evenly divisible by \\\\( 2^{32} \\\\), drops from the equation leaving the remaining two terms as the remainder.\n*\n*     ```tex\n*     a \\cdot b = a_l \\cdot b_l + (a_h \\cdot b_l + a_l \\cdot b_h) << 16\n*     ```\n*\n* -   Lastly, the second term in the above equation contributes to the middle bits and may cause the product to \"overflow\". However, we can disregard (`>>>0`) overflow bits due to modulo arithmetic, as discussed earlier with regard to the term involving the partial product of high words.\n*\n* @param {uinteger32} a - integer\n* @param {uinteger32} b - integer\n* @returns {uinteger32} product\n*\n* @example\n* var v = umul( 10>>>0, 4>>>0 );\n* // returns 40\n*/\nfunction umul( a, b ) {\n\tvar lbits;\n\tvar mbits;\n\tvar ha;\n\tvar hb;\n\tvar la;\n\tvar lb;\n\n\ta >>>= 0; // asm type annotation\n\tb >>>= 0; // asm type annotation\n\n\t// Isolate the most significant 16-bits:\n\tha = ( a>>>16 )>>>0; // asm type annotation\n\thb = ( b>>>16 )>>>0; // asm type annotation\n\n\t// Isolate the least significant 16-bits:\n\tla = ( a&LOW_WORD_MASK )>>>0; // asm type annotation\n\tlb = ( b&LOW_WORD_MASK )>>>0; // asm type annotation\n\n\t// Compute partial sums:\n\tlbits = ( la*lb )>>>0; // asm type annotation; no integer overflow possible\n\tmbits = ( ((ha*lb) + (la*hb))<<16 )>>>0; // asm type annotation; possible integer overflow\n\n\t// The final `>>>0` converts the intermediate sum to an unsigned integer (possible integer overflow during sum):\n\treturn ( lbits + mbits )>>>0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nexport default umul;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* One fourth times the mathematical constant `π`.\n*\n* @module @stdlib/constants-float64-fourth-pi\n* @type {number}\n*\n* @example\n* import FOURTH_PI from '@stdlib/constants-float64-fourth-pi';\n* // returns 7.85398163397448309616e-1\n*/\n\n\n// MAIN //\n\n/**\n* One fourth times the mathematical constant `π`.\n*\n* @constant\n* @type {number}\n* @default 7.85398163397448309616e-1\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar FOURTH_PI = 7.85398163397448309616e-1;\n\n\n// EXPORTS //\n\nexport default FOURTH_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1995, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport PIO4 from '@stdlib/constants-float64-fourth-pi';\nimport ratevalPQ from './rational_pq.js';\nimport ratevalRS from './rational_rs.js';\n\n\n// VARIABLES //\n\nvar MOREBITS = 6.123233995736765886130e-17; // pi/2 = PIO2 + MOREBITS\n\n\n// MAIN //\n\n/**\n* Computes the arcsine of a double-precision floating-point number.\n*\n* ## Method\n*\n* -   A rational function of the form\n*\n*     ```tex\n*     x + x^3 \\frac{P(x^2)}{Q(x^2)}\n*     ```\n*\n*     is used for \\\\(\\|x\\|\\\\) in the interval \\\\(\\[0, 0.5\\]\\\\). If \\\\(\\|x\\| > 0.5\\\\), it is transformed by the identity\n*\n*     ```tex\n*     \\operatorname{asin}(x) = \\frac{\\pi}{2} - 2 \\operatorname{asin}( \\sqrt{ (1-x)/2 } )\n*     ```\n*\n* ## Notes\n*\n* -   Relative error:\n*\n*     | arithmetic | domain | # trials | peak    | rms     |\n*     |:-----------|:-------|:---------|:--------|:--------|\n*     | DEC        | -1, 1  | 40000    | 2.6e-17 | 7.1e-18 |\n*     | IEEE       | -1, 1  | 10^6     | 1.9e-16 | 5.4e-17 |\n*\n* @param {number} x - input value\n* @returns {number} arcsine (in radians)\n*\n* @example\n* var v = asin( 0.0 );\n* // returns ~0.0\n*\n* @example\n* var v = asin( 3.141592653589793/4.0 );\n* // returns ~0.903\n*\n* @example\n* var v = asin( -3.141592653589793/6.0 );\n* // returns ~-0.551\n*\n* @example\n* var v = asin( NaN );\n* // returns NaN\n*/\nfunction asin( x ) {\n\tvar sgn;\n\tvar zz;\n\tvar a;\n\tvar p;\n\tvar z;\n\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x > 0.0 ) {\n\t\ta = x;\n\t} else {\n\t\tsgn = true;\n\t\ta = -x;\n\t}\n\tif ( a > 1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( a > 0.625 ) {\n\t\t// arcsin(1-x) = pi/2 - sqrt(2x)(1+R(x))\n\t\tzz = 1.0 - a;\n\t\tp = zz * ratevalRS( zz );\n\t\tzz = sqrt( zz + zz );\n\t\tz = PIO4 - zz;\n\t\tzz = ( zz*p ) - MOREBITS;\n\t\tz -= zz;\n\t\tz += PIO4;\n\t} else {\n\t\tif ( a < 1.0e-8 ) {\n\t\t\treturn x;\n\t\t}\n\t\tzz = a * a;\n\t\tz = zz * ratevalPQ( zz );\n\t\tz = ( a*z ) + a;\n\t}\n\treturn ( sgn ) ? -z : z;\n}\n\n\n// EXPORTS //\n\nexport default asin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function (i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\)).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.08333333333333809;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 28.536655482610616 + (x * (-25.56901049652825 + (x * (6.968710824104713 + (x * (-0.5634242780008963 + (x * 0.002967721961301243))))))); // eslint-disable-line max-len\n\t\ts2 = 342.43986579130785 + (x * (-383.8770957603691 + (x * (147.0656354026815 + (x * (-21.947795316429207 + (x * 1.0))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.002967721961301243 + (x * (-0.5634242780008963 + (x * (6.968710824104713 + (x * (-25.56901049652825 + (x * 28.536655482610616))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (-21.947795316429207 + (x * (147.0656354026815 + (x * (-383.8770957603691 + (x * 342.43986579130785))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function (i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\)).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.16666666666666713;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -8.198089802484825 + (x * (19.562619833175948 + (x * (-16.262479672107002 + (x * (5.444622390564711 + (x * (-0.6019598008014124 + (x * 0.004253011369004428))))))))); // eslint-disable-line max-len\n\t\ts2 = -49.18853881490881 + (x * (139.51056146574857 + (x * (-147.1791292232726 + (x * (70.49610280856842 + (x * (-14.740913729888538 + (x * 1.0))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.004253011369004428 + (x * (-0.6019598008014124 + (x * (5.444622390564711 + (x * (-16.262479672107002 + (x * (19.562619833175948 + (x * -8.198089802484825))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (-14.740913729888538 + (x * (70.49610280856842 + (x * (-147.1791292232726 + (x * (139.51056146574857 + (x * -49.18853881490881))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1995, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport asin from '@stdlib/math-base-special-asin';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport PIO4 from '@stdlib/constants-float64-fourth-pi';\n\n\n// VARIABLES //\n\nvar MOREBITS = 6.123233995736765886130e-17; // pi/2 = PIO2 + MOREBITS.\n\n\n// MAIN //\n\n/**\n* Computes the arccosine of a double-precision floating-point number.\n*\n* ## Method\n*\n* -   Analytically,\n*\n*     ```tex\n*     \\operatorname{acos}(x) = \\frac{\\pi}{2} - \\operatorname{asin}(x)\n*     ```\n*\n*     However, if \\\\(\\|x\\|\\\\) is near \\\\(1\\\\), there is cancellation error in subtracting \\\\(\\opertorname{asin}(x)\\\\) from \\\\(\\pi/2\\\\). Hence, if \\\\(x < -0.5\\\\),\n*\n*     ```tex\n*     \\operatorname{acos}(x) = \\pi - 2.0 \\cdot \\operatorname{asin}(\\sqrt{(1+x)/2})\n*     ```\n*\n*     or, if \\\\(x > +0.5\\\\),\n*\n*     ```tex\n*     \\operatorname{acos}(x) = 2.0 \\cdot \\operatorname{asin}( \\sqrt{(1-x)/2} )}\n*     ```\n*\n* ## Notes\n*\n* -   Relative error:\n*\n*     | arithmetic | domain | # trials | peak    | rms     |\n*     |:-----------|:------:|:---------|:--------|:--------|\n*     | DEC        | -1, 1  | 50000    | 3.3e-17 | 8.2e-18 |\n*     | IEEE       | -1, 1  | 10^6     | 2.2e-16 | 6.5e-17 |\n*\n* @param {number} x - input value\n* @returns {number} arccosine (in radians)\n*\n* @example\n* var v = acos( 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = acos( 0.707 ); // ~pi/4\n* // returns ~0.7855\n*\n* @example\n* var v = acos( NaN );\n* // returns NaN\n*/\nfunction acos( x ) {\n\tvar z;\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x < -1.0 || x > 1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x > 0.5 ) {\n\t\treturn 2.0 * asin( sqrt( 0.5 - (0.5*x) ) );\n\t}\n\tz = PIO4 - asin( x );\n\tz += MOREBITS;\n\tz += PIO4;\n\treturn z;\n}\n\n\n// EXPORTS //\n\nexport default acos;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasFloat64Array = ( typeof Float64Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Float64Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Float64Array\n*\n* @example\n* var bool = isFloat64Array( new Float64Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isFloat64Array( [] );\n* // returns false\n*/\nfunction isFloat64Array( value ) {\n\treturn (\n\t\t( hasFloat64Array && value instanceof Float64Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Float64Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isFloat64Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Float64Array === 'function' ) ? Float64Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Float64Array === 'function' ) ? Float64Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of double-precision floating-point numbers in the platform byte order.\n*\n* @module @stdlib/array-float64\n*\n* @example\n* import ctor from '@stdlib/array-float64';\n*\n* var arr = new ctor( 10 );\n* // returns <Float64Array>\n*/\n\n// MODULES //\n\nimport hasFloat64ArraySupport from '@stdlib/assert-has-float64array-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasFloat64ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFloat64Array from '@stdlib/assert-is-float64array';\nimport GlobalFloat64Array from './float64array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Float64Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Float64Array` support\n*\n* @example\n* var bool = hasFloat64ArraySupport();\n* // returns <boolean>\n*/\nfunction hasFloat64ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalFloat64Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = new GlobalFloat64Array( [ 1.0, 3.14, -3.14, NaN ] );\n\t\tbool = (\n\t\t\tisFloat64Array( arr ) &&\n\t\t\tarr[ 0 ] === 1.0 &&\n\t\t\tarr[ 1 ] === 3.14 &&\n\t\t\tarr[ 2 ] === -3.14 &&\n\t\t\tarr[ 3 ] !== arr[ 3 ]\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasFloat64ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of double-precision floating-point numbers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasUint8Array = ( typeof Uint8Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint8Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint8Array\n*\n* @example\n* var bool = isUint8Array( new Uint8Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint8Array( [] );\n* // returns false\n*/\nfunction isUint8Array( value ) {\n\treturn (\n\t\t( hasUint8Array && value instanceof Uint8Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint8Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isUint8Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 8-bit integer.\n*\n* @module @stdlib/constants-uint8-max\n* @type {integer32}\n*\n* @example\n* import UINT8_MAX from '@stdlib/constants-uint8-max';\n* // returns 255\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 8-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{8} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 11111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 255\n*/\nvar UINT8_MAX = 255|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default UINT8_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint8Array === 'function' ) ? Uint8Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint8Array === 'function' ) ? Uint8Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint8\n*\n* @example\n* import ctor from '@stdlib/array-uint8';\n*\n* var arr = new ctor( 10 );\n* // returns <Uint8Array>\n*/\n\n// MODULES //\n\nimport hasUint8ArraySupport from '@stdlib/assert-has-uint8array-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint8ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isUint8Array from '@stdlib/assert-is-uint8array';\nimport UINT8_MAX from '@stdlib/constants-uint8-max';\nimport GlobalUint8Array from './uint8array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint8Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint8Array` support\n*\n* @example\n* var bool = hasUint8ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint8ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint8Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT8_MAX+1, UINT8_MAX+2 ];\n\t\tarr = new GlobalUint8Array( arr );\n\t\tbool = (\n\t\t\tisUint8Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&           // truncation\n\t\t\tarr[ 2 ] === UINT8_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&           // wrap around\n\t\t\tarr[ 4 ] === 1              // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasUint8ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 8-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasUint16Array = ( typeof Uint16Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint16Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint16Array\n*\n* @example\n* var bool = isUint16Array( new Uint16Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint16Array( [] );\n* // returns false\n*/\nfunction isUint16Array( value ) {\n\treturn (\n\t\t( hasUint16Array && value instanceof Uint16Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint16Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isUint16Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 16-bit integer.\n*\n* @module @stdlib/constants-uint16-max\n* @type {integer32}\n*\n* @example\n* import UINT16_MAX from '@stdlib/constants-uint16-max';\n* // returns 65535\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 16-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{16} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 1111111111111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 65535\n*/\nvar UINT16_MAX = 65535|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default UINT16_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint16Array === 'function' ) ? Uint16Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint16Array === 'function' ) ? Uint16Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 16-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint16\n*\n* @example\n* import ctor from '@stdlib/array-uint16';\n*\n* var arr = new ctor( 10 );\n* // returns <Uint16Array>\n*/\n\n// MODULES //\n\nimport hasUint16ArraySupport from '@stdlib/assert-has-uint16array-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint16ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isUint16Array from '@stdlib/assert-is-uint16array';\nimport UINT16_MAX from '@stdlib/constants-uint16-max';\nimport GlobalUint16Array from './uint16array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint16Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint16Array` support\n*\n* @example\n* var bool = hasUint16ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint16ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint16Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT16_MAX+1, UINT16_MAX+2 ];\n\t\tarr = new GlobalUint16Array( arr );\n\t\tbool = (\n\t\t\tisUint16Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&            // truncation\n\t\t\tarr[ 2 ] === UINT16_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&            // wrap around\n\t\t\tarr[ 4 ] === 1               // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasUint16ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 16-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ctors from './ctors.js';\n\n\n// VARIABLES //\n\nvar bool;\n\n\n// FUNCTIONS //\n\n/**\n* Returns a boolean indicating if an environment is little endian.\n*\n* @private\n* @returns {boolean} boolean indicating if an environment is little endian\n*\n* @example\n* var bool = isLittleEndian();\n* // returns <boolean>\n*/\nfunction isLittleEndian() {\n\tvar uint16view;\n\tvar uint8view;\n\n\tuint16view = new ctors[ 'uint16' ]( 1 );\n\n\t/*\n\t* Set the uint16 view to a value having distinguishable lower and higher order words.\n\t*\n\t* 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)\n\t*/\n\tuint16view[ 0 ] = 0x1234;\n\n\t// Create a uint8 view on top of the uint16 buffer:\n\tuint8view = new ctors[ 'uint8' ]( uint16view.buffer );\n\n\t// If little endian, the least significant byte will be first...\n\treturn ( uint8view[ 0 ] === 0x34 );\n}\n\n\n// MAIN //\n\nbool = isLittleEndian();\n\n\n// EXPORTS //\n\nexport default bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint8Array from '@stdlib/array-uint8';\nimport Uint16Array from '@stdlib/array-uint16';\n\n\n// MAIN //\n\nvar ctors = {\n\t'uint16': Uint16Array,\n\t'uint8': Uint8Array\n};\n\n\n// EXPORTS //\n\nexport default ctors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert-is-little-endian';\n\n\n// MAIN //\n\nvar HIGH;\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n} else {\n\tHIGH = 0; // first index\n}\n\n\n// EXPORTS //\n\nexport default HIGH;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float64Array from '@stdlib/array-float64';\nimport HIGH from './high.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - input value\n* @returns {uinteger32} higher order word\n*\n* @example\n* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011\n* // returns 1774486211\n*/\nfunction getHighWord( x ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\treturn UINT32_VIEW[ HIGH ];\n}\n\n\n// EXPORTS //\n\nexport default getHighWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert-is-little-endian';\n\n\n// MAIN //\n\nvar HIGH;\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n} else {\n\tHIGH = 0; // first index\n}\n\n\n// EXPORTS //\n\nexport default HIGH;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float64Array from '@stdlib/array-float64';\nimport HIGH from './high.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Sets the more significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - double\n* @param {uinteger32} high - unsigned 32-bit integer to replace the higher order word of `x`\n* @returns {number} double having the same lower order word as `x`\n*\n* @example\n* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101\n*\n* var y = setHighWord( 3.14e201, high ); //  => 0 00000000000 0000000000000000010110010011110010110101100010000010\n* // returns 1.18350528745e-313\n*\n* @example\n* import PINF from '@stdlib/constants-float64-pinf'; // => 0 11111111111 00000000000000000000 00000000000000000000000000000000\n*\n* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000\n*\n* // Set the higher order bits of `+infinity` to return `1`:\n* var y = setHighWord( PINF, high ); // => 0 01111111111 0000000000000000000000000000000000000000000000000000\n* // returns 1.0\n*/\nfunction setHighWord( x, high ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\tUINT32_VIEW[ HIGH ] = ( high >>> 0 ); // identity bit shift to ensure integer\n\treturn FLOAT64_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default setHighWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FDLIBM]{@link http://www.netlib.org/fdlibm/s_log1p.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport setHighWord from '@stdlib/number-float64-base-set-high-word';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport FLOAT64_EXPONENT_BIAS from '@stdlib/constants-float64-exponent-bias';\nimport polyval from './polyval_lp.js';\n\n\n// VARIABLES //\n\n// High and low words of ln(2):\nvar LN2_HI = 6.93147180369123816490e-01; // 0x3fe62e42 0xfee00000\nvar LN2_LO = 1.90821492927058770002e-10; // 0x3dea39ef 0x35793c76\n\n// sqrt(2)-1:\nvar SQRT2M1 = 4.142135623730950488017e-01; // 0x3fda8279 0x99fcef34\n\n// sqrt(2)/2-1:\nvar SQRT2HALFM1 = -2.928932188134524755992e-01; // 0xbfd2bec3 0x33018866\n\n// 2**-29:\nvar SMALL = 1.862645149230957e-09; // 0x3e200000 0x00000000\n\n// 2**-54:\nvar TINY = 5.551115123125783e-17;\n\n// Max integer (unsafe) => 2**53:\nvar TWO53 = 9007199254740992;\n\n// 2/3:\nvar TWO_THIRDS = 6.666666666666666666e-01;\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of \\\\(1+x\\\\).\n*\n* ## Method\n*\n* 1.  Argument Reduction: find \\\\(k\\\\) and \\\\(f\\\\) such that\n*\n*     ```tex\n*     1+x = 2^k (1+f)\n*     ```\n*\n*     where\n*\n*     ```tex\n*     \\frac{\\sqrt{2}}{2} < 1+f < \\sqrt{2}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     If \\\\(k=0\\\\), then \\\\(f=x\\\\) is exact. However, if \\\\(k \\neq 0\\\\), then \\\\(f\\\\) may not be representable exactly. In that case, a correction term is needed. Let\n*\n*     ```tex\n*     u = \\operatorname{round}(1+x)\n*     ```\n*\n*     and\n*\n*     ```tex\n*     c = (1+x) - u\n*     ```\n*\n*     then\n*\n*     ```tex\n*     \\ln (1+x) - \\ln u \\approx \\frac{c}{u}\n*     ```\n*\n*     We can thus proceed to compute \\\\(\\ln(u)\\\\), and add back the correction term \\\\(c/u\\\\).\n*\n*     <!-- </note> -->\n*\n*     <!-- <note> -->\n*\n*     When \\\\(x > 2^{53}\\\\), one can simply return \\\\(\\ln(x)\\\\).\n*\n*     <!-- </note> -->\n*\n* 2.  Approximation of \\\\(\\operatorname{log1p}(f)\\\\). Let\n*\n*     ```tex\n*     s = \\frac{f}{2+f}\n*     ```\n*\n*     based on\n*\n*     ```tex\n*     \\begin{align*}\n*     \\ln 1+f &= \\ln (1+s) - \\ln (1-s) \\\\\n*             &= 2s + \\frac{2}{3} s^3 + \\frac{2}{5} s^5 + ... \\\\\n*             &= 2s + sR \\\\\n*     \\end{align*}\n*     ```\n*\n*     We use a special Reme algorithm on \\\\(\\[0,0.1716\\]\\\\) to generate a polynomial of degree \\\\(14\\\\) to approximate \\\\(R\\\\). The maximum error of this polynomial approximation is bounded by \\\\(2^{-58.45}\\\\). In other words,\n*\n*     ```tex\n*     R(z) \\approx \\mathrm{Lp}_1 s^2 + \\mathrm{Lp}_2 s^4 + \\mathrm{Lp}_3 s^6 + \\mathrm{Lp}_4 s^8 + \\mathrm{Lp}_5 s^{10} + \\mathrm{Lp}_6 s^{12} + \\mathrm{Lp}_7 s^{14}\n*     ```\n*\n*     and\n*\n*     ```tex\n*     | \\mathrm{Lp}_1 s^2 + \\ldots + \\mathrm{Lp}_7 s^14 - R(z) | \\leq 2^{-58.45}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     The values of \\\\(Lp1\\\\) to \\\\(Lp7\\\\) may be found in the source.\n*\n*     <!-- </note> -->\n*\n*     Note that\n*\n*     ```tex\n*     \\begin{align*}\n*     2s &= f - sf \\\\\n*        &= f - \\frac{f^2}{2} + s \\frac{f^2}{2} \\\\\n*     \\end{align*}\n*     ```\n*\n*     In order to guarantee error in \\\\(\\ln\\\\) below \\\\(1\\ \\mathrm{ulp}\\\\), we compute the log by\n*\n*     ```tex\n*     \\operatorname{log1p}(f) = f - \\biggl(\\frac{f^2}{2} - s\\biggl(\\frac{f^2}{2}+R\\biggr)\\biggr)\n*     ```\n*\n* 3.  Finally,\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{log1p}(x) &= k \\cdot \\mathrm{ln2} + \\operatorname{log1p}(f) \\\\\n*     &= k \\cdot \\mathrm{ln2}_{hi}+\\biggl(f-\\biggl(\\frac{f^2}{2}-\\biggl(s\\biggl(\\frac{f^2}{2}+R\\biggr)+k \\cdot \\mathrm{ln2}_{lo}\\biggr)\\biggr)\\biggr) \\\\\n*     \\end{align*}\n*     ```\n*\n*     Here \\\\(\\mathrm{ln2}\\\\) is split into two floating point numbers:\n*\n*     ```tex\n*     \\mathrm{ln2}_{hi} + \\mathrm{ln2}_{lo}\n*     ```\n*\n*     where \\\\(n \\cdot \\mathrm{ln2}_{hi}\\\\) is always exact for \\\\(|n| < 2000\\\\).\n*\n* ## Special Cases\n*\n* -   \\\\(\\operatorname{log1p}(x) = \\mathrm{NaN}\\\\) with signal if \\\\(x < -1\\\\) (including \\\\(-\\infty\\\\))\n* -   \\\\(\\operatorname{log1p}(+\\infty) = +\\infty\\\\)\n* -   \\\\(\\operatorname{log1p}(-1) = -\\infty\\\\) with signal\n* -   \\\\(\\operatorname{log1p}(\\mathrm{NaN})= \\mathrm{NaN}\\\\) with no signal\n*\n* ## Notes\n*\n* -   According to an error analysis, the error is always less than \\\\(1\\\\) ulp (unit in the last place).\n*\n* -   The hexadecimal values are the intended ones for the used constants. The decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the hexadecimal values shown.\n*\n* -   Assuming \\\\(\\ln(x)\\\\) is accurate, the following algorithm can be used to evaluate \\\\(\\operatorname{log1p}(x)\\\\) to within a few ULP:\n*\n*     ```javascript\n*     var u = 1.0 + x;\n*     if ( u === 1.0 ) {\n*         return x;\n*     } else {\n*         return ln(u) * (x/(u-1.0));\n*     }\n*     ```\n*\n*     See HP-15C Advanced Functions Handbook, p.193.\n*\n* @param {number} x - input value\n* @returns {number} the natural logarithm of `1+x`\n*\n* @example\n* var v = log1p( 4.0 );\n* // returns ~1.609\n*\n* @example\n* var v = log1p( -1.0 );\n* // returns -Infinity\n*\n* @example\n* var v = log1p( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = log1p( -0.0 );\n* // returns -0.0\n*\n* @example\n* var v = log1p( -2.0 );\n* // returns NaN\n*\n* @example\n* var v = log1p( NaN );\n* // returns NaN\n*/\nfunction log1p( x ) {\n\tvar hfsq;\n\tvar hu;\n\tvar y;\n\tvar f;\n\tvar c;\n\tvar s;\n\tvar z;\n\tvar R;\n\tvar u;\n\tvar k;\n\n\tif ( x < -1.0 || isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x === -1.0 ) {\n\t\treturn NINF;\n\t}\n\tif ( x === PINF ) {\n\t\treturn x;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn x; // handle +-0 (IEEE 754-2008 spec)\n\t}\n\t// Set y = |x|:\n\tif ( x < 0.0 ) {\n\t\ty = -x;\n\t} else {\n\t\ty = x;\n\t}\n\t// Argument reduction...\n\tk = 1;\n\n\t// Check if argument reduction is needed and if we can just return a small value approximation requiring less computation but with equivalent accuracy...\n\tif ( y < SQRT2M1 ) { // if |x| < sqrt(2)-1 => ~0.41422\n\t\tif ( y < SMALL ) { // if |x| < 2**-29\n\t\t\tif ( y < TINY ) { // if |x| < 2**-54\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Use a simple two-term Taylor series...\n\t\t\treturn x - ( x*x*0.5 );\n\t\t}\n\t\t// Check if `f=x` can be represented exactly (no need for correction terms), allowing us to bypass argument reduction...\n\t\tif ( x > SQRT2HALFM1 ) { // if x > sqrt(2)/2-1 => ~-0.2929\n\t\t\t// -0.2929 < x < 0.41422\n\t\t\tk = 0;\n\t\t\tf = x; // exact\n\t\t\thu = 1;\n\t\t}\n\t}\n\t// Address case where `f` cannot be represented exactly...\n\tif ( k !== 0 ) {\n\t\tif ( y < TWO53 ) {\n\t\t\tu = 1.0 + x;\n\t\t\thu = getHighWord( u );\n\n\t\t\t// Bit shift to isolate the exponent and then subtract the bias:\n\t\t\tk = (hu>>20) - FLOAT64_EXPONENT_BIAS;\n\n\t\t\t// Correction term...\n\t\t\tif ( k > 0 ) { // positive unbiased exponent\n\t\t\t\tc = 1.0 - (u-x);\n\t\t\t} else { // nonpositive unbiased exponent\n\t\t\t\tc = x - (u-1.0);\n\t\t\t}\n\t\t\tc /= u;\n\t\t} else {\n\t\t\tu = x;\n\t\t\thu = getHighWord( u );\n\n\t\t\t// Bit shift to isolate the exponent and then subtract the bias:\n\t\t\tk = (hu>>20) - FLOAT64_EXPONENT_BIAS;\n\n\t\t\t// Correction term is zero:\n\t\t\tc = 0;\n\t\t}\n\t\t// Apply a bit mask (0 00000000000 11111111111111111111) to remove the exponent:\n\t\thu &= 0x000fffff; // max value => 1048575\n\n\t\t// Check if u significand is less than sqrt(2) significand => 0x6a09e => 01101010000010011110\n\t\tif ( hu < 434334 ) {\n\t\t\t// Normalize u by setting the exponent to 1023 (bias) => 0x3ff00000 => 0 01111111111 00000000000000000000\n\t\t\tu = setHighWord( u, hu|0x3ff00000 );\n\t\t} else {\n\t\t\tk += 1;\n\n\t\t\t// Normalize u/2 by setting the exponent to 1022 (bias-1 => 2**-1 = 1/2) => 0x3fe00000 => 0 01111111110 00000000000000000000\n\t\t\tu = setHighWord( u, hu|0x3fe00000 );\n\n\t\t\t// Subtract hu significand from next largest hu => 0 00000000001 00000000000000000000 => 0x00100000 => 1048576\n\t\t\thu = (1048576-hu)>>2;\n\t\t}\n\t\tf = u - 1.0;\n\t}\n\t// Approximation of log1p(f)...\n\thfsq = 0.5 * f * f;\n\tif ( hu === 0 ) { // if |f| < 2**-20\n\t\tif ( f === 0.0 ) {\n\t\t\tc += k * LN2_LO;\n\t\t\treturn ( k * LN2_HI ) + c;\n\t\t}\n\t\tR = hfsq * (1.0 - ( TWO_THIRDS*f ) ); // avoid division\n\t\treturn ( k*LN2_HI ) - ( (R - ( (k*LN2_LO) + c)) - f );\n\t}\n\ts = f / (2.0 + f);\n\tz = s * s;\n\n\tR = z * polyval( z );\n\n\tif ( k === 0 ) {\n\t\treturn f - ( hfsq - ( s*(hfsq+R) ) );\n\t}\n\treturn ( k*LN2_HI ) - ( (hfsq - ( (s*(hfsq+R)) + ((k*LN2_LO) + c))) - f );\n}\n\n\n// EXPORTS //\n\nexport default log1p;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The bias of a double-precision floating-point number's exponent.\n*\n* @module @stdlib/constants-float64-exponent-bias\n* @type {integer32}\n*\n* @example\n* import FLOAT64_EXPONENT_BIAS from '@stdlib/constants-float64-exponent-bias';\n* // returns 1023\n*/\n\n\n// MAIN //\n\n/**\n* Bias of a double-precision floating-point number's exponent.\n*\n* ## Notes\n*\n* The bias can be computed via\n*\n* ```tex\n* \\mathrm{bias} = 2^{k-1} - 1\n* ```\n*\n* where \\\\(k\\\\) is the number of bits in the exponent; here, \\\\(k = 11\\\\).\n*\n* @constant\n* @type {integer32}\n* @default 1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_EXPONENT_BIAS = 1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_EXPONENT_BIAS;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.6666666666666735;\n\t}\n\treturn 0.6666666666666735 + (x * (0.3999999999940942 + (x * (0.2857142874366239 + (x * (0.22222198432149784 + (x * (0.1818357216161805 + (x * (0.15313837699209373 + (x * 0.14798198605116586))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of `2`.\n*\n* @module @stdlib/constants-float64-ln-two\n* @type {number}\n*\n* @example\n* import LN2 from '@stdlib/constants-float64-ln-two';\n* // returns 0.6931471805599453\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of `2`.\n*\n* ```tex\n* \\ln 2\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.6931471805599453\n*/\nvar LN2 = 6.93147180559945309417232121458176568075500134360255254120680009493393621969694715605863326996418687542001481021e-01; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default LN2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport setHighWord from '@stdlib/number-float64-base-set-high-word';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport BIAS from '@stdlib/constants-float64-exponent-bias';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport polyvalP from './polyval_p.js';\nimport polyvalQ from './polyval_q.js';\n\n\n// VARIABLES //\n\nvar LN2_HI = 6.93147180369123816490e-01; // 3FE62E42 FEE00000\nvar LN2_LO = 1.90821492927058770002e-10; // 3DEA39EF 35793C76\nvar TWO54 = 1.80143985094819840000e+16;  // 0x43500000, 0x00000000\nvar ONE_THIRD = 0.33333333333333333;\n\n// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111\nvar HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation\n\n// 0x7ff00000 = 2146435072 => 0 11111111111 00000000000000000000 => biased exponent: 2047 = 1023+1023 => 2^1023\nvar HIGH_MAX_NORMAL_EXP = 0x7ff00000|0; // asm type annotation\n\n// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022\nvar HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation\n\n// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1\nvar HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of a double-precision floating-point number.\n*\n* @param {NonNegativeNumber} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = ln( 4.0 );\n* // returns ~1.386\n*\n* @example\n* var v = ln( 0.0 );\n* // returns -Infinity\n*\n* @example\n* var v = ln( Infinity );\n* // returns Infinity\n*\n* @example\n* var v = ln( NaN );\n* // returns NaN\n*\n* @example\n* var v = ln( -4.0 );\n* // returns NaN\n*/\nfunction ln( x ) {\n\tvar hfsq;\n\tvar hx;\n\tvar t2;\n\tvar t1;\n\tvar k;\n\tvar R;\n\tvar f;\n\tvar i;\n\tvar j;\n\tvar s;\n\tvar w;\n\tvar z;\n\n\tif ( x === 0.0 ) {\n\t\treturn NINF;\n\t}\n\tif ( isnan( x ) || x < 0.0 ) {\n\t\treturn NaN;\n\t}\n\thx = getHighWord( x );\n\tk = 0|0; // asm type annotation\n\tif ( hx < HIGH_MIN_NORMAL_EXP ) {\n\t\t// Case: 0 < x < 2**-1022\n\t\tk -= 54|0; // asm type annotation\n\n\t\t// Subnormal number, scale up `x`:\n\t\tx *= TWO54;\n\t\thx = getHighWord( x );\n\t}\n\tif ( hx >= HIGH_MAX_NORMAL_EXP ) {\n\t\treturn x + x;\n\t}\n\tk += ( ( hx>>20 ) - BIAS )|0; // asm type annotation\n\thx &= HIGH_SIGNIFICAND_MASK;\n\ti = ( (hx+0x95f64) & 0x100000 )|0; // asm type annotation\n\n\t// Normalize `x` or `x/2`...\n\tx = setHighWord( x, hx|(i^HIGH_BIASED_EXP_0) );\n\tk += ( i>>20 )|0; // asm type annotation\n\tf = x - 1.0;\n\tif ( (HIGH_SIGNIFICAND_MASK&(2+hx)) < 3 ) {\n\t\t// Case: -2**-20 <= f < 2**-20\n\t\tif ( f === 0.0 ) {\n\t\t\tif ( k === 0 ) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\treturn (k * LN2_HI) + (k * LN2_LO);\n\t\t}\n\t\tR = f * f * ( 0.5 - (ONE_THIRD*f) );\n\t\tif ( k === 0 ) {\n\t\t\treturn f - R;\n\t\t}\n\t\treturn (k * LN2_HI) - ( (R-(k*LN2_LO)) - f );\n\t}\n\ts = f / (2.0 + f);\n\tz = s * s;\n\ti = ( hx - 0x6147a )|0; // asm type annotation\n\tw = z * z;\n\tj = ( 0x6b851 - hx )|0; // asm type annotation\n\tt1 = w * polyvalP( w );\n\tt2 = z * polyvalQ( w );\n\ti |= j;\n\tR = t2 + t1;\n\tif ( i > 0 ) {\n\t\thfsq = 0.5 * f * f;\n\t\tif ( k === 0 ) {\n\t\t\treturn f - ( hfsq - (s * (hfsq+R)) );\n\t\t}\n\t\treturn (k * LN2_HI) - ( hfsq - ((s*(hfsq+R))+(k*LN2_LO)) - f );\n\t}\n\tif ( k === 0 ) {\n\t\treturn f - (s*(f-R));\n\t}\n\treturn (k * LN2_HI) - ( ( (s*(f-R)) - (k*LN2_LO) ) - f );\n}\n\n\n// EXPORTS //\n\nexport default ln;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.3999999999940942;\n\t}\n\treturn 0.3999999999940942 + (x * (0.22222198432149784 + (x * 0.15313837699209373))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.6666666666666735;\n\t}\n\treturn 0.6666666666666735 + (x * (0.2857142874366239 + (x * (0.1818357216161805 + (x * 0.14798198605116586))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/12.2.0/lib/msun/src/e_acosh.c?view=markup}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport LN2 from '@stdlib/constants-float64-ln-two';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// VARIABLES //\n\nvar HUGE = 1 << 28; // 2**28\n\n\n// MAIN //\n\n/**\n* Computes the hyperbolic arccosine of a double-precision floating-point number.\n*\n* ## Method\n*\n* Based on\n*\n* ```tex\n* \\operatorname{acosh}(x) = \\log \\left[ x + \\sqrt{ x^2 - 1 } \\right]\n* ```\n*\n* we have\n*\n* ```tex\n* \\operatorname{acosh}(x) = \\begin{cases}\n* \\log(x) + \\tfrac{\\ln}{2} & \\text{ if x is large } \\\\\n* \\log \\left( 2x-\\tfrac{1}{\\sqrt{x^2-1}+x} \\right) & \\text{ if } x > 2 \\\\\n* \\operatorname{log1p}\\left( x - 1 + \\sqrt{ 2 \\cdot (x-1) + (x-1)^2 } \\right) & \\text{ otherwise }\n* \\end{cases}\n* ```\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{acosh}(x) &= \\mathrm{NaN}\\ \\text{ if } x < 1 \\\\\n* \\end{align*}\n* ```\n*\n* @param {number} x - input value\n* @returns {number} hyperbolic arccosine\n*\n* @example\n* var v = acosh( 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = acosh( 2.0 );\n* // returns ~1.317\n*\n* @example\n* var v = acosh( NaN );\n* // returns NaN\n*/\nfunction acosh( x ) {\n\tvar t;\n\tif ( isnan( x ) || x < 1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x === 1.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x >= HUGE ) {\n\t\treturn ln( x ) + LN2;\n\t}\n\tif ( x > 2.0 ) {\n\t\treturn ln( (2.0*x) - ( 1.0 / ( x + sqrt( (x*x) - 1.0 ) ) ) );\n\t}\n\t// Case: 2 >= x > 1\n\tt = x - 1.0;\n\treturn log1p( t + sqrt( (2.0*t) + (t*t) ) );\n}\n\n\n// EXPORTS //\n\nexport default acosh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* One half times the mathematical constant `π`.\n*\n* @module @stdlib/constants-float64-half-pi\n* @type {number}\n*\n* @example\n* import HALF_PI from '@stdlib/constants-float64-half-pi';\n* // returns 1.5707963267948966\n*/\n\n\n// MAIN //\n\n/**\n* One half times the mathematical constant `π`.\n*\n* @constant\n* @type {number}\n* @default 1.5707963267948966\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar HALF_PI = 1.5707963267948966;\n\n\n// EXPORTS //\n\nexport default HALF_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1995, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport PIO2 from '@stdlib/constants-float64-half-pi';\nimport PIO4 from '@stdlib/constants-float64-fourth-pi';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport polyvalP from './polyval_p.js';\nimport polyvalQ from './polyval_q.js';\n\n\n// VARIABLES //\n\nvar MOREBITS = 6.123233995736765886130e-17; // pi/2 = PIO2 + MOREBITS.\nvar T3P8 = 2.41421356237309504880; // tan( 3*pi/8 )\n\n\n// MAIN //\n\n/**\n* Computes the arctangent of a double-precision floating-point number.\n*\n* ## Method\n*\n* -   Range reduction is from three intervals into the interval from 0 to 0.66. The approximant uses a rational function of degree 4/5 of the form\n*\n*     ```tex\n*     x + x^3 \\frac{P(x)}{Q(x)}\n*     ```\n*\n* ## Notes\n*\n* -   Relative error:\n*\n*     | arithmetic | domain  | # trials | peak    | rms     |\n*     |:-----------|:--------|:---------|:--------|:--------|\n*     | DEC        | -10, 10 | 50000    | 2.4e-17 | 8.3e-18 |\n*     | IEEE       | -10, 10 | 10^6     | 1.8e-16 | 5.0e-17 |\n*\n* @param {number} x - input value\n* @returns {number} arctangent (in radians)\n*\n* @example\n* var v = atan( 0.0 );\n* // returns ~0.0\n*\n* @example\n* import PI from '@stdlib/constants-float64-pi';\n*\n* var v = atan( -PI/4.0 );\n* // returns ~-0.666\n*\n* @example\n* import PI from '@stdlib/constants-float64-pi';\n*\n* var v = atan( PI/4.0 );\n* // returns ~0.666\n*\n* @example\n* var v = atan( NaN );\n* // returns NaN\n*/\nfunction atan( x ) {\n\tvar flg;\n\tvar sgn;\n\tvar y;\n\tvar z;\n\tif ( isnan( x ) || x === 0.0 ) {\n\t\treturn x;\n\t}\n\tif ( x === PINF ) {\n\t\treturn PIO2;\n\t}\n\tif ( x === NINF ) {\n\t\treturn -PIO2;\n\t}\n\tif ( x < 0.0 ) {\n\t\tsgn = true;\n\t\tx = -x;\n\t}\n\t// Range reduction:\n\tflg = 0;\n\tif ( x > T3P8 ) {\n\t\ty = PIO2;\n\t\tflg = 1;\n\t\tx = -( 1.0/x );\n\t} else if ( x <= 0.66 ) {\n\t\ty = 0.0;\n\t} else {\n\t\ty = PIO4;\n\t\tflg = 2;\n\t\tx = (x-1.0) / (x+1.0);\n\t}\n\tz = x * x;\n\tz = z*polyvalP( z ) / polyvalQ( z );\n\tz = ( x*z ) + x;\n\tif ( flg === 2 ) {\n\t\tz += 0.5 * MOREBITS;\n\t} else if ( flg === 1 ) {\n\t\tz += MOREBITS;\n\t}\n\ty += z;\n\treturn ( sgn ) ? -y : y;\n}\n\n\n// EXPORTS //\n\nexport default atan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -64.85021904942025;\n\t}\n\treturn -64.85021904942025 + (x * (-122.88666844901361 + (x * (-75.00855792314705 + (x * (-16.157537187333652 + (x * -0.8750608600031904))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 194.5506571482614;\n\t}\n\treturn 194.5506571482614 + (x * (485.3903996359137 + (x * (432.88106049129027 + (x * (165.02700983169885 + (x * (24.858464901423062 + (x * 1.0))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_atanh.c?view=markup}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// VARIABLES //\n\nvar NEAR_ZERO = 1.0 / (1 << 28); // 2**-28\n\n\n// MAIN //\n\n/**\n* Computes the hyperbolic arctangent of a double-precision floating-point number.\n*\n* ## Method\n*\n* 1.  Reduce \\\\( x \\\\) to positive by \\\\( \\operatorname{atanh}(-x) = -\\operatorname{atanh}(x) \\\\)\n*\n* 2.  For \\\\( x \\ge 0.5 \\\\), we calculate\n*\n*     ```tex\n*     \\operatorname{atanh}(x) = \\frac{1}{2} \\cdot \\log\\left( 1 + \\tfrac{2x}{1-x} \\right) = \\frac{1}{2} \\cdot \\operatorname{log1p}\\left( 2 \\tfrac{x}{1-x} \\right)\n*     ```\n*\n*     For \\\\( x < 0.5 \\\\), we have\n*\n*     ```tex\n*     \\operatorname{atanh}(x) = \\frac{1}{2} \\cdot \\operatorname{log1p}\\left( 2x + \\tfrac{2x^2}{1-x} \\right)\n*     ```\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{atanh}(\\mathrm{NaN}) &= \\mathrm{NaN}\\\\\n* \\operatorname{atanh}(1.0) &= \\infty \\\\\n* \\operatorname{atanh}(-1.0) &= -\\infty \\\\\n* \\end{align*}\n* ```\n*\n* @param {number} x - input value\n* @returns {number} hyperbolic arctangent\n*\n* @example\n* var v = atanh( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = atanh( 0.9 );\n* // returns ~1.472\n*\n* @example\n* var v = atanh( 1.0 );\n* // returns Infinity\n*\n* @example\n* var v = atanh( -1.0 );\n* // returns -Infinity\n*\n* @example\n* var v = atanh( NaN );\n* // returns NaN\n*/\nfunction atanh( x ) {\n\tvar sgn;\n\tvar t;\n\tif ( isnan( x ) || x < -1.0 || x > 1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x === 1.0 ) {\n\t\treturn PINF;\n\t}\n\tif ( x === -1.0 ) {\n\t\treturn NINF;\n\t}\n\tif ( x < 0.0 ) {\n\t\tsgn = true;\n\t\tx = -x;\n\t}\n\t// Case: |x| < 2**-28\n\tif ( x < NEAR_ZERO ) {\n\t\treturn ( sgn ) ? -x : x;\n\t}\n\tif ( x < 0.5 ) {\n\t\tt = x + x;\n\t\tt = 0.5 * log1p( t + ( t*x/(1-x) ) );\n\t} else {\n\t\tt = 0.5 * log1p( (x+x) / (1-x) );\n\t}\n\treturn ( sgn ) ? -t : t;\n}\n\n\n// EXPORTS //\n\nexport default atanh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/12.2.0/lib/msun/src/s_asinh.c?view=markup}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isinfinite from '@stdlib/math-base-assert-is-infinite';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport LN2 from '@stdlib/constants-float64-ln-two';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// VARIABLES //\n\nvar NEAR_ZERO = 1.0 / (1 << 28); // 2**-28\nvar HUGE = 1 << 28; // 2**28\n\n\n// MAIN //\n\n/**\n* Computes the hyperbolic arcsine of a double-precision floating-point number.\n*\n* ## Method\n*\n* Based on\n*\n* ```tex\n* \\operatorname{asinh}(x) = \\operatorname{sgn}(x) \\cdot \\log \\left( |x| + \\sqrt{x^2 + 1} \\right)\n* ```\n*\n* we have\n*\n* ```tex\n* \\operatorname{asinh}(x) = \\begin{cases}\n* x  & \\text{ if }  1+x^2 =1, \\\\\n* \\operatorname{sgn}(x) \\cdot \\left( \\log(x) + \\tfrac{\\ln}{2} \\right) & \\text{ if large } |x| \\\\\n* \\operatorname{sgn}(x) \\cdot \\log\\left( 2 |x| + 1 / ( |x|+ \\sqrt{x^2+1} ) \\right) & \\text{ if } |x| > 2 \\\\\n* \\operatorname{sgn}(x) \\cdot \\operatorname{log1p}\\left( |x| + \\tfrac{x^2}{1 + \\sqrt{1+x^2}} \\right) & \\text{otherwise}\n* \\end{cases}\n* ```\n*\n* @param {number} x - input value\n* @returns {number} hyperbolic arcsine\n*\n* @example\n* var v = asinh( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = asinh( 2.0 );\n* // returns ~1.444\n*\n* @example\n* var v = asinh( -2.0 );\n* // returns ~-1.444\n*\n* @example\n* var v = asinh( NaN );\n* // returns NaN\n*/\nfunction asinh( x ) {\n\tvar sgn;\n\tvar xx;\n\tvar t;\n\tif ( isnan( x ) || isinfinite( x ) ) {\n\t\treturn x;\n\t}\n\tif ( x < 0.0 ) {\n\t\tx = -x;\n\t\tsgn = true;\n\t}\n\t// Case: |x| < 2**-28\n\tif ( x < NEAR_ZERO ) {\n\t\tt = x;\n\t}\n\t// Case: |x| > 2**28\n\telse if ( x > HUGE ) {\n\t\tt = ln( x ) + LN2;\n\t}\n\t// Case: 2**28 > |x| > 2.0\n\telse if ( x > 2.0 ) {\n\t\tt = ln( (2.0*x) + ( 1.0 / (sqrt( (x*x) + 1.0 ) + x) ) );\n\t}\n\t// Case: 2.0 > |x| > 2**-28\n\telse {\n\t\txx = x * x;\n\t\tt = log1p( x + ( xx/(1.0 + sqrt(1.0 + xx)) ) );\n\t}\n\treturn ( sgn ) ? -t : t;\n}\n\n\n// EXPORTS //\n\nexport default asinh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for the sign bit of a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-high-word-sign-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT64_HIGH_WORD_SIGN_MASK from '@stdlib/constants-float64-high-word-sign-mask';\n* // returns 2147483648\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for the sign bit of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for the sign bit of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2147483648 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 1 00000000000 00000000000000000000\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x80000000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_SIGN_MASK = 0x80000000>>>0; // eslint-disable-line id-length\n\n\n// EXPORTS //\n\nexport default FLOAT64_HIGH_WORD_SIGN_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert-is-little-endian';\n\n\n// MAIN //\n\nvar indices;\nvar HIGH;\nvar LOW;\n\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n\tLOW = 0; // first index\n} else {\n\tHIGH = 0; // first index\n\tLOW = 1; // second index\n}\nindices = {\n\t'HIGH': HIGH,\n\t'LOW': LOW\n};\n\n\n// EXPORTS //\n\nexport default indices;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert-is-little-endian';\n\n\n// MAIN //\n\nvar indices;\nvar HIGH;\nvar LOW;\n\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n\tLOW = 0; // first index\n} else {\n\tHIGH = 0; // first index\n\tLOW = 1; // second index\n}\nindices = {\n\t'HIGH': HIGH,\n\t'LOW': LOW\n};\n\n\n// EXPORTS //\n\nexport default indices;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float64Array from '@stdlib/array-float64';\nimport indices from './indices.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\nvar HIGH = indices.HIGH;\nvar LOW = indices.LOW;\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @private\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* import Uint32Array from '@stdlib/array-uint32';\n*\n* var out = new Uint32Array( 2 );\n*\n* var w = toWords( 3.14e201, out, 1, 0 );\n* // returns <Uint32Array>[ 1774486211, 2479577218 ]\n*\n* var bool = ( w === out );\n* // returns true\n*/\nfunction toWords( x, out, stride, offset ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\tout[ offset ] = UINT32_VIEW[ HIGH ];\n\tout[ offset + stride ] = UINT32_VIEW[ LOW ];\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default toWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* @param {number} x - input value\n* @returns {Array<number>} output array\n*\n* @example\n* var w = toWords( 3.14e201 );\n* // returns [ 1774486211, 2479577218 ]\n*/\nfunction toWords( x ) {\n\treturn fcn( x, [ 0>>>0, 0>>>0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default toWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Split a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* @module @stdlib/number-float64-base-to-words\n*\n* @example\n* import toWords from '@stdlib/number-float64-base-to-words';\n*\n* var w = toWords( 3.14e201 );\n* // returns [ 1774486211, 2479577218 ]\n*\n* @example\n* import Uint32Array from '@stdlib/array-uint32';\n* import toWords from '@stdlib/number-float64-base-to-words';\n*\n* var out = new Uint32Array( 2 );\n*\n* var w = toWords.assign( 3.14e201, out, 1, 0 );\n* // returns <Uint32Array>[ 1774486211, 2479577218 ]\n*\n* var bool = ( w === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float64Array from '@stdlib/array-float64';\nimport indices from './indices.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\nvar HIGH = indices.HIGH;\nvar LOW = indices.LOW;\n\n\n// MAIN //\n\n/**\n* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {uinteger32} high - higher order word (unsigned 32-bit integer)\n* @param {uinteger32} low - lower order word (unsigned 32-bit integer)\n* @returns {number} floating-point number\n*\n* @example\n* var v = fromWords( 1774486211, 2479577218 );\n* // returns 3.14e201\n*\n* @example\n* var v = fromWords( 3221823995, 1413754136 );\n* // returns -3.141592653589793\n*\n* @example\n* var v = fromWords( 0, 0 );\n* // returns 0.0\n*\n* @example\n* var v = fromWords( 2147483648, 0 );\n* // returns -0.0\n*\n* @example\n* var v = fromWords( 2146959360, 0 );\n* // returns NaN\n*\n* @example\n* var v = fromWords( 2146435072, 0 );\n* // returns Infinity\n*\n* @example\n* var v = fromWords( 4293918720, 0 );\n* // returns -Infinity\n*/\nfunction fromWords( high, low ) {\n\tUINT32_VIEW[ HIGH ] = high;\n\tUINT32_VIEW[ LOW ] = low;\n\treturn FLOAT64_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default fromWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport SIGN_MASK from '@stdlib/constants-float64-high-word-sign-mask';\nimport ABS_MASK from '@stdlib/constants-float64-high-word-abs-mask';\nimport toWords from '@stdlib/number-float64-base-to-words';\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport fromWords from '@stdlib/number-float64-base-from-words';\n\n\n// VARIABLES //\n\n// High/low words workspace:\nvar WORDS = [ 0, 0 ];\n\n\n// MAIN //\n\n/**\n* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.\n*\n* @param {number} x - number from which to derive a magnitude\n* @param {number} y - number from which to derive a sign\n* @returns {number} a double-precision floating-point number\n*\n* @example\n* var z = copysign( -3.14, 10.0 );\n* // returns 3.14\n*\n* @example\n* var z = copysign( 3.14, -1.0 );\n* // returns -3.14\n*\n* @example\n* var z = copysign( 1.0, -0.0 );\n* // returns -1.0\n*\n* @example\n* var z = copysign( -3.14, -0.0 );\n* // returns -3.14\n*\n* @example\n* var z = copysign( -0.0, 1.0 );\n* // returns 0.0\n*/\nfunction copysign( x, y ) {\n\tvar hx;\n\tvar hy;\n\n\t// Split `x` into higher and lower order words:\n\ttoWords.assign( x, WORDS, 1, 0 );\n\thx = WORDS[ 0 ];\n\n\t// Turn off the sign bit of `x`:\n\thx &= ABS_MASK;\n\n\t// Extract the higher order word from `y`:\n\thy = getHighWord( y );\n\n\t// Leave only the sign bit of `y` turned on:\n\thy &= SIGN_MASK;\n\n\t// Copy the sign bit of `y` to `x`:\n\thx |= hy;\n\n\t// Return a new value having the same magnitude as `x`, but with the sign of `y`:\n\treturn fromWords( hx, WORDS[ 1 ] );\n}\n\n\n// EXPORTS //\n\nexport default copysign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for excluding the sign bit of a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-high-word-abs-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT64_HIGH_WORD_ABS_MASK from '@stdlib/constants-float64-high-word-abs-mask';\n* // returns 2147483647\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for excluding the sign bit of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for excluding the sign bit of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2147483647 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 11111111111 11111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x7fffffff\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_ABS_MASK = 0x7fffffff>>>0; // eslint-disable-line id-length\n\n\n// EXPORTS //\n\nexport default FLOAT64_HIGH_WORD_ABS_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The mathematical constant `π`.\n*\n* @module @stdlib/constants-float64-pi\n* @type {number}\n*\n* @example\n* import PI from '@stdlib/constants-float64-pi';\n* // returns 3.141592653589793\n*/\n\n\n// MAIN //\n\n/**\n* The mathematical constant `π`.\n*\n* @constant\n* @type {number}\n* @default 3.141592653589793\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar PI = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original code, copyright and license are from [Go]{@link https://golang.org/src/math/atan2.go}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (c) 2009 The Go Authors. All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without\n* modification, are permitted provided that the following conditions are\n* met:\n*\n*    * Redistributions of source code must retain the above copyright\n* notice, this list of conditions and the following disclaimer.\n*    * Redistributions in binary form must reproduce the above\n* copyright notice, this list of conditions and the following disclaimer\n* in the documentation and/or other materials provided with the\n* distribution.\n*    * Neither the name of Google Inc. nor the names of its\n* contributors may be used to endorse or promote products derived from\n* this software without specific prior written permission.\n*\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n* \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isinfinite from '@stdlib/math-base-assert-is-infinite';\nimport copysign from '@stdlib/math-base-special-copysign';\nimport signbit from '@stdlib/number-float64-base-signbit';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport atan from '@stdlib/math-base-special-atan';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Computes the angle in the plane (in radians) between the positive x-axis and the ray from `(0,0)` to the point `(x,y)`.\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{atan2}(y,\\mathrm{NaN}) &= \\mathrm{NaN}\\\\\n* \\operatorname{atan2}(\\mathrm{NaN},x) &= \\mathrm{NaN}\\\\\n* \\operatorname{atan2}( +0,x \\ge 0 ) &= +0 \\\\\n* \\operatorname{atan2}( -0, x \\ge 0 ) &= -0 \\\\\n* \\operatorname{atan2}( +0,x \\le -0 ) &= +\\Pi \\\\\n* \\operatorname{atan2}( -0, x \\le -0 ) &= -\\Pi \\\\\n* \\operatorname{atan2}(+\\infty, +\\infty) &= +\\tfrac{\\Pi}{4} \\\\\n* \\operatorname{atan2}(-\\infty, +\\infty) &= -\\tfrac{\\Pi}{4} \\\\\n* \\operatorname{atan2}(+\\infty, -\\infty) &= +\\tfrac{3\\Pi}{4} \\\\\n* \\operatorname{atan2}(-\\infty, -\\infty) &= -\\tfrac{3\\Pi}{4} \\\\\n* \\operatorname{atan2}(y, +\\infty) &= 0.0 \\\\\n* \\operatorname{atan2}(y>0, -\\infty) &= +\\Pi \\\\\n* \\operatorname{atan2}(y<0, -\\infty) &= -\\Pi \\\\\n* \\operatorname{atan2}(+\\infty, x ) &= +\\tfrac{\\Pi}{2} \\\\\n* \\operatorname{atan2}(-\\infty, x ) &= -\\tfrac{\\Pi}{2} \\\\\n* \\end{align*}\n* ```\n*\n* @param {number} y - `y` coordinate\n* @param {number} x - `x` coordinate\n* @returns {number} angle (in radians)\n*\n* @example\n* var v = atan2( 2.0, 2.0 ); // => atan(1.0)\n* // returns ~0.785\n*\n* @example\n* var v = atan2( 6.0, 2.0 ); // => atan(3.0)\n* // returns ~1.249\n*\n* @example\n* var v = atan2( -1.0, -1.0 ); // => atan(1.0) - π\n* // returns ~-2.356\n*\n* @example\n* var v = atan2( 3.0, 0.0 ); // => π/2\n* // returns ~1.571\n*\n* @example\n* var v = atan2( -2.0, 0.0 ); // => -π/2\n* // returns ~-1.571\n*\n* @example\n* var v = atan2( 0.0, 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = atan2( 3.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = atan2( NaN, 2.0 );\n* // returns NaN\n*/\nfunction atan2( y, x ) {\n\tvar q;\n\tif ( isnan( x ) || isnan( y ) ) {\n\t\treturn NaN;\n\t}\n\tif ( isinfinite( x ) ) {\n\t\tif ( x === PINF ) {\n\t\t\tif ( isinfinite( y ) ) {\n\t\t\t\treturn copysign( PI / 4.0, y );\n\t\t\t}\n\t\t\treturn copysign( 0.0, y );\n\t\t}\n\t\t// Case: x is -Infinity\n\t\tif ( isinfinite( y ) ) {\n\t\t\treturn copysign( 3.0*PI/4.0, y );\n\t\t}\n\t\treturn copysign( PI, y );\n\t}\n\tif ( isinfinite( y ) ) {\n\t\treturn copysign( PI / 2.0, y );\n\t}\n\tif ( y === 0.0 ) {\n\t\tif ( x >= 0.0 && !signbit( x ) ) {\n\t\t\treturn copysign( 0.0, y );\n\t\t}\n\t\treturn copysign( PI, y );\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn copysign( PI / 2.0, y );\n\t}\n\tq = atan( y / x );\n\tif ( x < 0.0 ) {\n\t\tif ( q <= 0.0 ) {\n\t\t\treturn q + PI;\n\t\t}\n\t\treturn q - PI;\n\t}\n\treturn q;\n}\n\n\n// EXPORTS //\n\nexport default atan2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if the sign bit is on (true) or off (false).\n*\n* @param {number} x - input value\n* @returns {boolean} boolean indicating if sign bit is on or off\n*\n* @example\n* var bool = signbit( 4.0 );\n* // returns false\n*\n* @example\n* var bool = signbit( -9.14e-307 );\n* // returns true\n*\n* @example\n* var bool = signbit( 0.0 );\n* // returns false\n*\n* @example\n* var bool = signbit( -0.0 );\n* // returns true\n*/\nfunction signbit( x ) {\n\t// Extract from the input value a higher order word (unsigned 32-bit integer) containing the exponent and sign:\n\tvar high = getHighWord( x );\n\n\t// Shift off all bits which are not the sign bit and check if the sign bit is on:\n\treturn ( high >>> 31 ) ? true : false; // eslint-disable-line no-unneeded-ternary\n}\n\n\n// EXPORTS //\n\nexport default signbit;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isOdd from '@stdlib/math-base-assert-is-odd';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport BERNOULLI from './bernoulli.json';\n\n\n// VARIABLES //\n\nvar MAX_BERNOULLI = 258|0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Computes the nth Bernoulli number.\n*\n* @param {NonNegativeInteger} n - the Bernoulli number to compute\n* @returns {number} Bernoulli number\n*\n* @example\n* var y = bernoulli( 0 );\n* // returns 1.0\n*\n* @example\n* var y = bernoulli( 1 );\n* // returns 0.0\n*\n* @example\n* var y = bernoulli( 2 );\n* // returns ~0.167\n*\n* @example\n* var y = bernoulli( 3 );\n* // returns 0.0\n*\n* @example\n* var y = bernoulli( 4 );\n* // returns ~-0.033\n*\n* @example\n* var y = bernoulli( 5 );\n* // returns 0.0\n*\n* @example\n* var y = bernoulli( 20 );\n* // returns ~-529.124\n*\n* @example\n* var y = bernoulli( 260 );\n* // returns -Infinity\n*\n* @example\n* var y = bernoulli( 262 );\n* // returns Infinity\n*\n* @example\n* var y = bernoulli( NaN );\n* // returns NaN\n*/\nfunction bernoulli( n ) {\n\tif ( isnan( n ) || !isNonNegativeInteger( n ) ) {\n\t\treturn NaN;\n\t}\n\tif ( isOdd( n ) ) {\n\t\treturn 0.0;\n\t}\n\tif ( n > MAX_BERNOULLI ) {\n\t\treturn ( (n/2)&1 ) ? PINF : NINF;\n\t}\n\treturn BERNOULLI[ n/2 ];\n}\n\n\n// EXPORTS //\n\nexport default bernoulli;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for the exponent of a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-high-word-exponent-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT64_HIGH_WORD_EXPONENT_MASK from '@stdlib/constants-float64-high-word-exponent-mask';\n* // returns 2146435072\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for the exponent of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2146435072 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 11111111111 00000000000000000000\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x7ff00000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_EXPONENT_MASK = 0x7ff00000;\n\n\n// EXPORTS //\n\nexport default FLOAT64_HIGH_WORD_EXPONENT_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert-is-little-endian';\n\n\n// MAIN //\n\nvar LOW;\nif ( isLittleEndian === true ) {\n\tLOW = 0; // first index\n} else {\n\tLOW = 1; // second index\n}\n\n\n// EXPORTS //\n\nexport default LOW;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float64Array from '@stdlib/array-float64';\nimport LOW from './low.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Returns a 32-bit unsigned integer corresponding to the less significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - input value\n* @returns {uinteger32} lower order word\n*\n* @example\n* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010\n* // returns 2479577218\n*/\nfunction getLowWord( x ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\treturn UINT32_VIEW[ LOW ];\n}\n\n\n// EXPORTS //\n\nexport default getLowWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport FLOAT64_SMALLEST_NORMAL from '@stdlib/constants-float64-smallest-normal';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\n\n\n// VARIABLES //\n\n// (1<<52)\nvar SCALAR = 4503599627370496;\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\) and assigns results to a provided output array.\n*\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* import pow from '@stdlib/math-base-special-pow';\n*\n* var out = normalize( 3.14e-319, [ 0.0, 0 ], 1, 0 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var out = normalize( 0.0, [ 0.0, 0 ], 1, 0 );\n* // returns [ 0.0, 0 ];\n*\n* @example\n* import PINF from '@stdlib/constants-float64-pinf';\n*\n* var out = normalize( PINF, [ 0.0, 0 ], 1, 0 );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* import NINF from '@stdlib/constants-float64-ninf';\n*\n* var out = normalize( NINF, [ 0.0, 0 ], 1, 0 );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( NaN, [ 0.0, 0 ], 1, 0 );\n* // returns [ NaN, 0 ]\n*/\nfunction normalize( x, out, stride, offset ) {\n\tif ( isnan( x ) || isInfinite( x ) ) {\n\t\tout[ offset ] = x;\n\t\tout[ offset + stride ] = 0;\n\t\treturn out;\n\t}\n\tif ( x !== 0.0 && abs( x ) < FLOAT64_SMALLEST_NORMAL ) {\n\t\tout[ offset ] = x * SCALAR;\n\t\tout[ offset + stride ] = -52;\n\t\treturn out;\n\t}\n\tout[ offset ] = x;\n\tout[ offset + stride ] = 0;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default normalize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Smallest positive double-precision floating-point normal number.\n*\n* @module @stdlib/constants-float64-smallest-normal\n* @type {number}\n*\n* @example\n* import FLOAT64_SMALLEST_NORMAL from '@stdlib/constants-float64-smallest-normal';\n* // returns 2.2250738585072014e-308\n*/\n\n\n// MAIN //\n\n/**\n* The smallest positive double-precision floating-point normal number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* \\frac{1}{2^{1023-1}}\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000000001 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default 2.2250738585072014e-308\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;\n\n\n// EXPORTS //\n\nexport default FLOAT64_SMALLEST_NORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport EXP_MASK from '@stdlib/constants-float64-high-word-exponent-mask';\nimport BIAS from '@stdlib/constants-float64-exponent-bias';\n\n\n// MAIN //\n\n/**\n* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {integer32} unbiased exponent\n*\n* @example\n* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307\n* // returns -1019\n*\n* @example\n* var exp = exponent( -3.14 );\n* // returns 1\n*\n* @example\n* var exp = exponent( 0.0 );\n* // returns -1023\n*\n* @example\n* var exp = exponent( NaN );\n* // returns 1024\n*/\nfunction exponent( x ) {\n\t// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:\n\tvar high = getHighWord( x );\n\n\t// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:\n\thigh = ( high & EXP_MASK ) >>> 20;\n\n\t// Remove the bias and return:\n\treturn (high - BIAS)|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nexport default exponent;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @module @stdlib/number-float64-base-normalize\n*\n* @example\n* import normalize from '@stdlib/number-float64-base-normalize';\n* import pow from '@stdlib/math-base-special-pow';\n*\n* var out = normalize( 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0, exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import normalize from '@stdlib/number-float64-base-normalize';\n*\n* var out = new Float64Array( 2 );\n*\n* var v = normalize.assign( 3.14e-319, out, 1, 0 );\n* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @param {number} x - input value\n* @returns {NumberArray} output array\n*\n* @example\n* import pow from '@stdlib/math-base-special-pow';\n*\n* var out = normalize( 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var out = normalize( 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* @example\n* import PINF from '@stdlib/constants-float64-pinf';\n*\n* var out = normalize( PINF );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* import NINF from '@stdlib/constants-float64-ninf';\n*\n* var out = normalize( NINF );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( NaN );\n* // returns [ NaN, 0 ]\n*/\nfunction normalize( x ) {\n\treturn fcn( x, [ 0.0, 0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default normalize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// NOTES //\n\n/*\n* => ldexp: load exponent (see [The Open Group]{@link http://pubs.opengroup.org/onlinepubs/9699919799/functions/ldexp.html} and [cppreference]{@link http://en.cppreference.com/w/c/numeric/math/ldexp}).\n*/\n\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport BIAS from '@stdlib/constants-float64-exponent-bias';\nimport MAX_EXPONENT from '@stdlib/constants-float64-max-base2-exponent';\nimport MAX_SUBNORMAL_EXPONENT from '@stdlib/constants-float64-max-base2-exponent-subnormal';\nimport MIN_SUBNORMAL_EXPONENT from '@stdlib/constants-float64-min-base2-exponent-subnormal';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport copysign from '@stdlib/math-base-special-copysign';\nimport { assign as normalize } from '@stdlib/number-float64-base-normalize';\nimport floatExp from '@stdlib/number-float64-base-exponent';\nimport toWords from '@stdlib/number-float64-base-to-words';\nimport fromWords from '@stdlib/number-float64-base-from-words';\n\n\n// VARIABLES //\n\n// 1/(1<<52) = 1/(2**52) = 1/4503599627370496\nvar TWO52_INV = 2.220446049250313e-16;\n\n// Exponent all 0s: 1 00000000000 11111111111111111111 => 2148532223\nvar CLEAR_EXP_MASK = 0x800fffff>>>0; // asm type annotation\n\n// Normalization workspace:\nvar FRAC = [ 0.0, 0.0 ];\n\n// High/low words workspace:\nvar WORDS = [ 0, 0 ];\n\n\n// MAIN //\n\n/**\n* Multiplies a double-precision floating-point number by an integer power of two.\n*\n* @param {number} frac - fraction\n* @param {integer} exp - exponent\n* @returns {number} double-precision floating-point number\n*\n* @example\n* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8\n* // returns 4.0\n*\n* @example\n* var x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)\n* // returns 1.0\n*\n* @example\n* var x = ldexp( 0.0, 20 );\n* // returns 0.0\n*\n* @example\n* var x = ldexp( -0.0, 39 );\n* // returns -0.0\n*\n* @example\n* var x = ldexp( NaN, -101 );\n* // returns NaN\n*\n* @example\n* var x = ldexp( Infinity, 11 );\n* // returns Infinity\n*\n* @example\n* var x = ldexp( -Infinity, -118 );\n* // returns -Infinity\n*/\nfunction ldexp( frac, exp ) {\n\tvar high;\n\tvar m;\n\tif (\n\t\texp === 0 ||\n\t\tfrac === 0.0 || // handles +-0\n\t\tisnan( frac ) ||\n\t\tisInfinite( frac )\n\t) {\n\t\treturn frac;\n\t}\n\t// Normalize the input fraction:\n\tnormalize( frac, FRAC, 1, 0 );\n\tfrac = FRAC[ 0 ];\n\texp += FRAC[ 1 ];\n\n\t// Extract the exponent from `frac` and add it to `exp`:\n\texp += floatExp( frac );\n\n\t// Check for underflow/overflow...\n\tif ( exp < MIN_SUBNORMAL_EXPONENT ) {\n\t\treturn copysign( 0.0, frac );\n\t}\n\tif ( exp > MAX_EXPONENT ) {\n\t\tif ( frac < 0.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\treturn PINF;\n\t}\n\t// Check for a subnormal and scale accordingly to retain precision...\n\tif ( exp <= MAX_SUBNORMAL_EXPONENT ) {\n\t\texp += 52;\n\t\tm = TWO52_INV;\n\t} else {\n\t\tm = 1.0;\n\t}\n\t// Split the fraction into higher and lower order words:\n\ttoWords.assign( frac, WORDS, 1, 0 );\n\thigh = WORDS[ 0 ];\n\n\t// Clear the exponent bits within the higher order word:\n\thigh &= CLEAR_EXP_MASK;\n\n\t// Set the exponent bits to the new exponent:\n\thigh |= ((exp+BIAS) << 20);\n\n\t// Create a new floating-point number:\n\treturn m * fromWords( high, WORDS[ 1 ] );\n}\n\n\n// EXPORTS //\n\nexport default ldexp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-min-base2-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL from '@stdlib/constants-float64-min-base2-exponent-subnormal';\n* // returns -1074\n*/\n\n\n// MAIN //\n\n/**\n* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* ```text\n* -(BIAS+(52-1)) = -(1023+51) = -1074\n* ```\n*\n* where `BIAS = 1023` and `52` is the number of digits in the significand.\n*\n* @constant\n* @type {integer32}\n* @default -1074\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = -1074|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum biased base 2 exponent for a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-max-base2-exponent\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MAX_BASE2_EXPONENT from '@stdlib/constants-float64-max-base2-exponent';\n* // returns 1023\n*/\n\n\n// MAIN //\n\n/**\n* The maximum biased base 2 exponent for a double-precision floating-point number.\n*\n* ```text\n* 11111111110 => 2046 - BIAS = 1023\n* ```\n*\n* where `BIAS = 1023`.\n*\n* @constant\n* @type {integer32}\n* @default 1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_BASE2_EXPONENT = 1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_BASE2_EXPONENT;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-max-base2-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL from '@stdlib/constants-float64-max-base2-exponent-subnormal';\n* // returns -1023\n*/\n\n\n// MAIN //\n\n/**\n* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* ```text\n* 00000000000 => 0 - BIAS = -1023\n* ```\n*\n* where `BIAS = 1023`.\n*\n* @constant\n* @type {integer32}\n* @default -1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = -1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport filled from '@stdlib/array-base-filled';\n\n\n// MAIN //\n\n/**\n* Returns a zero-filled \"generic\" array.\n*\n* @param {NonNegativeInteger} len - array length\n* @returns {Array} output array\n*\n* @example\n* var out = zeros( 3 );\n* // returns [ 0.0, 0.0, 0.0 ]\n*/\nfunction zeros( len ) {\n\treturn filled( 0.0, len );\n}\n\n\n// EXPORTS //\n\nexport default zeros;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a filled \"generic\" array.\n*\n* @param {*} value - fill value\n* @param {NonNegativeInteger} len - array length\n* @returns {Array} filled array\n*\n* @example\n* var out = filled( 0.0, 3 );\n* // returns [ 0.0, 0.0, 0.0 ]\n*\n* @example\n* var out = filled( 'beep', 3 );\n* // returns [ 'beep', 'beep', 'beep' ]\n*/\nfunction filled( value, len ) {\n\tvar arr;\n\tvar i;\n\n\t// Manually push elements in order to ensure \"fast\" elements...\n\tarr = [];\n\tfor ( i = 0; i < len; i++ ) {\n\t\tarr.push( value );\n\t}\n\treturn arr;\n}\n\n\n// EXPORTS //\n\nexport default filled;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n/* eslint-disable array-element-newline */\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\nimport ldexp from '@stdlib/math-base-special-ldexp';\nimport zeros from '@stdlib/array-base-zeros';\n\n\n// VARIABLES //\n\n/*\n* Table of constants for `2/π` (`396` hex digits, `476` decimal).\n*\n* Integer array which contains the (`24*i`)-th to (`24*i+23`)-th bit of `2/π` after binary point. The corresponding floating value is\n*\n* ```tex\n* \\operatorname{ipio2}[i] \\cdot 2^{-24(i+1)}\n* ```\n*\n* This table must have at least `(e0-3)/24 + jk` terms. For quad precision (`e0 <= 16360`, `jk = 6`), this is `686`.\n*/\nvar IPIO2 = [\n\t0xA2F983, 0x6E4E44, 0x1529FC, 0x2757D1, 0xF534DD, 0xC0DB62,\n\t0x95993C, 0x439041, 0xFE5163, 0xABDEBB, 0xC561B7, 0x246E3A,\n\t0x424DD2, 0xE00649, 0x2EEA09, 0xD1921C, 0xFE1DEB, 0x1CB129,\n\t0xA73EE8, 0x8235F5, 0x2EBB44, 0x84E99C, 0x7026B4, 0x5F7E41,\n\t0x3991D6, 0x398353, 0x39F49C, 0x845F8B, 0xBDF928, 0x3B1FF8,\n\t0x97FFDE, 0x05980F, 0xEF2F11, 0x8B5A0A, 0x6D1F6D, 0x367ECF,\n\t0x27CB09, 0xB74F46, 0x3F669E, 0x5FEA2D, 0x7527BA, 0xC7EBE5,\n\t0xF17B3D, 0x0739F7, 0x8A5292, 0xEA6BFB, 0x5FB11F, 0x8D5D08,\n\t0x560330, 0x46FC7B, 0x6BABF0, 0xCFBC20, 0x9AF436, 0x1DA9E3,\n\t0x91615E, 0xE61B08, 0x659985, 0x5F14A0, 0x68408D, 0xFFD880,\n\t0x4D7327, 0x310606, 0x1556CA, 0x73A8C9, 0x60E27B, 0xC08C6B\n];\n\n// Double precision array, obtained by cutting `π/2` into `24` bits chunks...\nvar PIO2 = [\n\t1.57079625129699707031e+00, // 0x3FF921FB, 0x40000000\n\t7.54978941586159635335e-08, // 0x3E74442D, 0x00000000\n\t5.39030252995776476554e-15, // 0x3CF84698, 0x80000000\n\t3.28200341580791294123e-22, // 0x3B78CC51, 0x60000000\n\t1.27065575308067607349e-29, // 0x39F01B83, 0x80000000\n\t1.22933308981111328932e-36, // 0x387A2520, 0x40000000\n\t2.73370053816464559624e-44, // 0x36E38222, 0x80000000\n\t2.16741683877804819444e-51  // 0x3569F31D, 0x00000000\n];\nvar TWO24 = 1.67772160000000000000e+07;  // 0x41700000, 0x00000000\nvar TWON24 = 5.96046447753906250000e-08; // 0x3E700000, 0x00000000\n\n// Arrays for storing temporary values (note that, in C, this is not thread safe):\nvar F = zeros( 20 );\nvar Q = zeros( 20 );\nvar FQ = zeros( 20 );\nvar IQ = zeros( 20 );\n\n\n// FUNCTIONS //\n\n/**\n* Performs the computation for `kernelRempio2()`.\n*\n* @private\n* @param {PositiveNumber} x - input value\n* @param {(Array|TypedArray|Object)} y - output object for storing double precision numbers\n* @param {integer} jz - number of terms of `ipio2[]` used\n* @param {Array<integer>} q - array with integral values, representing the 24-bits chunk of the product of `x` and `2/π`\n* @param {integer} q0 - the corresponding exponent of `q[0]` (the exponent for `q[i]` would be `q0-24*i`)\n* @param {integer} jk - `jk+1` is the initial number of terms of `IPIO2[]` needed in the computation\n* @param {integer} jv - index for pointing to the suitable `ipio2[]` for the computation\n* @param {integer} jx - `nx - 1`\n* @param {Array<number>} f - `IPIO2[]` in floating point\n* @returns {number} last three binary digits of `N`\n*/\nfunction compute( x, y, jz, q, q0, jk, jv, jx, f ) {\n\tvar carry;\n\tvar fw;\n\tvar ih;\n\tvar jp;\n\tvar i;\n\tvar k;\n\tvar n;\n\tvar j;\n\tvar z;\n\n\t// `jp+1` is the number of terms in `PIO2[]` needed:\n\tjp = jk;\n\n\t// Distill `q[]` into `IQ[]` in reverse order...\n\tz = q[ jz ];\n\tj = jz;\n\tfor ( i = 0; j > 0; i++ ) {\n\t\tfw = ( TWON24 * z )|0;\n\t\tIQ[ i ] = ( z - (TWO24*fw) )|0;\n\t\tz = q[ j-1 ] + fw;\n\t\tj -= 1;\n\t}\n\t// Compute `n`...\n\tz = ldexp( z, q0 );\n\tz -= 8.0 * floor( z*0.125 ); // Trim off integer >= 8\n\tn = z|0;\n\tz -= n;\n\tih = 0;\n\tif ( q0 > 0 ) {\n\t\t// Need `IQ[jz-1]` to determine `n`...\n\t\ti = ( IQ[ jz-1 ] >> (24-q0) );\n\t\tn += i;\n\t\tIQ[ jz-1 ] -= ( i << (24-q0) );\n\t\tih = ( IQ[ jz-1 ] >> (23-q0) );\n\t}\n\telse if ( q0 === 0 ) {\n\t\tih = ( IQ[ jz-1 ] >> 23 );\n\t}\n\telse if ( z >= 0.5 ) {\n\t\tih = 2;\n\t}\n\t// Case: q > 0.5\n\tif ( ih > 0 ) {\n\t\tn += 1;\n\t\tcarry = 0;\n\n\t\t// Compute `1-q`:\n\t\tfor ( i = 0; i < jz; i++ ) {\n\t\t\tj = IQ[ i ];\n\t\t\tif ( carry === 0 ) {\n\t\t\t\tif ( j !== 0 ) {\n\t\t\t\t\tcarry = 1;\n\t\t\t\t\tIQ[ i ] = 0x1000000 - j;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tIQ[ i ] = 0xffffff - j;\n\t\t\t}\n\t\t}\n\t\tif ( q0 > 0 ) {\n\t\t\t// Rare case: chance is 1 in 12...\n\t\t\tswitch ( q0 ) { // eslint-disable-line default-case\n\t\t\tcase 1:\n\t\t\t\tIQ[ jz-1 ] &= 0x7fffff;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tIQ[ jz-1 ] &= 0x3fffff;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ( ih === 2 ) {\n\t\t\tz = 1.0 - z;\n\t\t\tif ( carry !== 0 ) {\n\t\t\t\tz -= ldexp( 1.0, q0 );\n\t\t\t}\n\t\t}\n\t}\n\t// Check if re-computation is needed...\n\tif ( z === 0.0 ) {\n\t\tj = 0;\n\t\tfor ( i = jz-1; i >= jk; i-- ) {\n\t\t\tj |= IQ[ i ];\n\t\t}\n\t\tif ( j === 0 ) {\n\t\t\t// Need re-computation...\n\t\t\tfor ( k = 1; IQ[ jk-k ] === 0; k++ ) {\n\t\t\t\t// `k` is the number of terms needed...\n\t\t\t}\n\t\t\tfor ( i = jz+1; i <= jz+k; i++ ) {\n\t\t\t\t// Add `q[jz+1]` to `q[jz+k]`...\n\t\t\t\tf[ jx+i ] = IPIO2[ jv+i ];\n\t\t\t\tfw = 0.0;\n\t\t\t\tfor ( j = 0; j <= jx; j++ ) {\n\t\t\t\t\tfw += x[ j ] * f[ jx + (i-j) ];\n\t\t\t\t}\n\t\t\t\tq[ i ] = fw;\n\t\t\t}\n\t\t\tjz += k;\n\t\t\treturn compute( x, y, jz, q, q0, jk, jv, jx, f );\n\t\t}\n\t}\n\t// Chop off zero terms...\n\tif ( z === 0.0 ) {\n\t\tjz -= 1;\n\t\tq0 -= 24;\n\t\twhile ( IQ[ jz ] === 0 ) {\n\t\t\tjz -= 1;\n\t\t\tq0 -= 24;\n\t\t}\n\t} else {\n\t\t// Break `z` into 24-bit if necessary...\n\t\tz = ldexp( z, -q0 );\n\t\tif ( z >= TWO24 ) {\n\t\t\tfw = (TWON24*z)|0;\n\t\t\tIQ[ jz ] = ( z - (TWO24*fw) )|0;\n\t\t\tjz += 1;\n\t\t\tq0 += 24;\n\t\t\tIQ[ jz ] = fw;\n\t\t} else {\n\t\t\tIQ[ jz ] = z|0;\n\t\t}\n\t}\n\t// Convert integer \"bit\" chunk to floating-point value...\n\tfw = ldexp( 1.0, q0 );\n\tfor ( i = jz; i >= 0; i-- ) {\n\t\tq[ i ] = fw * IQ[i];\n\t\tfw *= TWON24;\n\t}\n\t// Compute `PIO2[0,...,jp]*q[jz,...,0]`...\n\tfor ( i = jz; i >= 0; i-- ) {\n\t\tfw = 0.0;\n\t\tfor ( k = 0; k <= jp && k <= jz-i; k++ ) {\n\t\t\tfw += PIO2[ k ] * q[ i+k ];\n\t\t}\n\t\tFQ[ jz-i ] = fw;\n\t}\n\t// Compress `FQ[]` into `y[]`...\n\tfw = 0.0;\n\tfor ( i = jz; i >= 0; i-- ) {\n\t\tfw += FQ[ i ];\n\t}\n\tif ( ih === 0 ) {\n\t\ty[ 0 ] = fw;\n\t} else {\n\t\ty[ 0 ] = -fw;\n\t}\n\tfw = FQ[ 0 ] - fw;\n\tfor ( i = 1; i <= jz; i++ ) {\n\t\tfw += FQ[i];\n\t}\n\tif ( ih === 0 ) {\n\t\ty[ 1 ] = fw;\n\t} else {\n\t\ty[ 1 ] = -fw;\n\t}\n\treturn ( n & 7 );\n}\n\n\n// MAIN //\n\n/**\n* Returns the last three binary digits of `N` with `y = x - Nπ/2` so that `|y| < π/2`.\n*\n* ## Method\n*\n* -   The method is to compute the integer (`mod 8`) and fraction parts of `2x/π` without doing the full multiplication. In general, we skip the part of the product that is known to be a huge integer (more accurately, equals `0 mod 8` ). Thus, the number of operations is independent of the exponent of the input.\n*\n* @private\n* @param {PositiveNumber} x - input value\n* @param {(Array|TypedArray|Object)} y - remainder elements\n* @param {PositiveInteger} e0 - the exponent of `x[0]` (must be <= 16360)\n* @param {PositiveInteger} nx - dimension of `x[]`\n* @returns {number} last three binary digits of `N`\n*/\nfunction kernelRempio2( x, y, e0, nx ) {\n\tvar fw;\n\tvar jk;\n\tvar jv;\n\tvar jx;\n\tvar jz;\n\tvar q0;\n\tvar i;\n\tvar j;\n\tvar m;\n\n\t// Initialize `jk` for double-precision floating-point numbers:\n\tjk = 4;\n\n\t// Determine `jx`, `jv`, `q0` (note that `q0 < 3`):\n\tjx = nx - 1;\n\tjv = ( (e0 - 3) / 24 )|0;\n\tif ( jv < 0 ) {\n\t\tjv = 0;\n\t}\n\tq0 = e0 - (24 * (jv + 1));\n\n\t// Set up `F[0]` to `F[jx+jk]` where `F[jx+jk] = IPIO2[jv+jk]`:\n\tj = jv - jx;\n\tm = jx + jk;\n\tfor ( i = 0; i <= m; i++ ) {\n\t\tif ( j < 0 ) {\n\t\t\tF[ i ] = 0.0;\n\t\t} else {\n\t\t\tF[ i ] = IPIO2[ j ];\n\t\t}\n\t\tj += 1;\n\t}\n\t// Compute `Q[0],Q[1],...,Q[jk]`:\n\tfor ( i = 0; i <= jk; i++ ) {\n\t\tfw = 0.0;\n\t\tfor ( j = 0; j <= jx; j++ ) {\n\t\t\tfw += x[ j ] * F[ jx + (i-j) ];\n\t\t}\n\t\tQ[ i ] = fw;\n\t}\n\tjz = jk;\n\treturn compute( x, y, jz, Q, q0, jk, jv, jx, F );\n}\n\n\n// EXPORTS //\n\nexport default kernelRempio2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: implementation\n\n/**\n* Rounds a numeric value to the nearest integer.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = round( -4.2 );\n* // returns -4.0\n*\n* @example\n* var v = round( -4.5 );\n* // returns -4.0\n*\n* @example\n* var v = round( -4.6 );\n* // returns -5.0\n*\n* @example\n* var v = round( 9.99999 );\n* // returns 10.0\n*\n* @example\n* var v = round( 9.5 );\n* // returns 10.0\n*\n* @example\n* var v = round( 9.2 );\n* // returns 9.0\n*\n* @example\n* var v = round( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = round( -0.0 );\n* // returns -0.0\n*\n* @example\n* var v = round( Infinity );\n* // returns Infinity\n*\n* @example\n* var v = round( -Infinity );\n* // returns -Infinity\n*\n* @example\n* var v = round( NaN );\n* // returns NaN\n*/\nvar round = Math.round; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default round;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport round from '@stdlib/math-base-special-round';\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\n\n\n// VARIABLES //\n\n// 53 bits of 2/π:\nvar INVPIO2 = 6.36619772367581382433e-01; // 0x3FE45F30, 0x6DC9C883\n\n// First 33 bits of π/2:\nvar PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000\n\n// PIO2_1T = π/2 - PIO2_1:\nvar PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331\n\n// Another 33 bits of π/2:\nvar PIO2_2 = 6.07710050630396597660e-11;  // 0x3DD0B461, 0x1A600000\n\n// PIO2_2T = π/2 - ( PIO2_1 + PIO2_2 ):\nvar PIO2_2T = 2.02226624879595063154e-21; // 0x3BA3198A, 0x2E037073\n\n// Another 33 bits of π/2:\nvar PIO2_3 = 2.02226624871116645580e-21;  // 0x3BA3198A, 0x2E000000\n\n// PIO2_3T = π/2 - ( PIO2_1 + PIO2_2 + PIO2_3 ):\nvar PIO2_3T = 8.47842766036889956997e-32; // 0x397B839A, 0x252049C1\n\n// Exponent mask (2047 => 0x7ff):\nvar EXPONENT_MASK = 0x7ff|0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Computes `x - nπ/2 = r` for medium-sized inputs.\n*\n* @private\n* @param {number} x - input value\n* @param {uint32} ix - high word of `x`\n* @param {(Array|TypedArray|Object)} y - remainder elements\n* @returns {integer} factor of `π/2`\n*/\nfunction rempio2Medium( x, ix, y ) {\n\tvar high;\n\tvar n;\n\tvar t;\n\tvar r;\n\tvar w;\n\tvar i;\n\tvar j;\n\n\tn = round( x * INVPIO2 );\n\tr = x - ( n * PIO2_1 );\n\tw = n * PIO2_1T;\n\n\t// First rounding (good to 85 bits)...\n\tj = (ix >> 20)|0; // asm type annotation\n\ty[ 0 ] = r - w;\n\thigh = getHighWord( y[0] );\n\ti = j - ( (high >> 20) & EXPONENT_MASK );\n\n\t// Check if a second iteration is needed (good to 118 bits)...\n\tif ( i > 16 ) {\n\t\tt = r;\n\t\tw = n * PIO2_2;\n\t\tr = t - w;\n\t\tw = (n * PIO2_2T) - ((t-r) - w);\n\t\ty[ 0 ] = r - w;\n\t\thigh = getHighWord( y[0] );\n\t\ti = j - ( (high >> 20) & EXPONENT_MASK );\n\n\t\t// Check if a third iteration is needed (151 bits accumulated)...\n\t\tif ( i > 49 ) {\n\t\t\tt = r;\n\t\t\tw = n * PIO2_3;\n\t\t\tr = t - w;\n\t\t\tw = (n * PIO2_3T) - ((t-r) - w);\n\t\t\ty[ 0 ] = r - w;\n\t\t}\n\t}\n\ty[ 1 ] = (r - y[0]) - w;\n\treturn n;\n}\n\n\n// EXPORTS //\n\nexport default rempio2Medium;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n*\n* Optimized by Bruce D. Evans.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ABS_MASK from '@stdlib/constants-float64-high-word-abs-mask';\nimport EXPONENT_MASK from '@stdlib/constants-float64-high-word-exponent-mask';\nimport SIGNIFICAND_MASK from '@stdlib/constants-float64-high-word-significand-mask';\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport getLowWord from '@stdlib/number-float64-base-get-low-word';\nimport fromWords from '@stdlib/number-float64-base-from-words';\nimport rempio2Kernel from './kernel_rempio2.js';\nimport rempio2Medium from './rempio2_medium.js';\n\n\n// VARIABLES //\n\nvar ZERO = 0.00000000000000000000e+00;    // 0x00000000, 0x00000000\nvar TWO24 = 1.67772160000000000000e+07;   // 0x41700000, 0x00000000\n\n// 33 bits of π/2:\nvar PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000\n\n// PIO2_1T = π/2 - PIO2_1:\nvar PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331\nvar TWO_PIO2_1T = 2.0 * PIO2_1T;\nvar THREE_PIO2_1T = 3.0 * PIO2_1T;\nvar FOUR_PIO2_1T = 4.0 * PIO2_1T;\n\n// High word significand for π and π/2: 0x921fb = 598523 => 00000000000010010010000111111011\nvar PI_HIGH_WORD_SIGNIFICAND = 0x921fb|0; // asm type annotation\n\n// High word for π/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011\nvar PIO4_HIGH_WORD = 0x3fe921fb|0; // asm type annotation\n\n// High word for 3π/4: 0x4002d97c = 1073928572 => 01000000000000101101100101111100\nvar THREE_PIO4_HIGH_WORD = 0x4002d97c|0; // asm type annotation\n\n// High word for 5π/4: 0x400f6a7a = 1074752122 => 01000000000011110110101001111010\nvar FIVE_PIO4_HIGH_WORD = 0x400f6a7a|0; // asm type annotation\n\n// High word for 6π/4: 0x4012d97c = 1074977148 => 01000000000100101101100101111100\nvar THREE_PIO2_HIGH_WORD = 0x4012d97c|0; // asm type annotation\n\n// High word for 7π/4: 0x4015fdbc = 1075183036 => 01000000000101011111110110111100\nvar SEVEN_PIO4_HIGH_WORD = 0x4015fdbc|0; // asm type annotation\n\n// High word for 8π/4: 0x401921fb = 1075388923 => 01000000000110010010000111111011\nvar TWO_PI_HIGH_WORD = 0x401921fb|0; // asm type annotation\n\n// High word for 9π/4: 0x401c463b = 1075594811 => 01000000000111000100011000111011\nvar NINE_PIO4_HIGH_WORD = 0x401c463b|0; // asm type annotation\n\n// 2^20*π/2 = 1647099.3291652855 => 0100000100111001001000011111101101010100010001000010110100011000 => high word => 0x413921fb = 1094263291 => 01000001001110010010000111111011\nvar MEDIUM = 0x413921fb|0; // asm type annotation\n\n// Arrays for storing temporary values:\nvar TX = [ 0.0, 0.0, 0.0 ];\nvar TY = [ 0.0, 0.0 ];\n\n\n// MAIN //\n\n/**\n* Computes `x - nπ/2 = r`.\n*\n* ## Notes\n*\n* -   Returns `n` and stores the remainder `r` as two numbers `y[0]` and `y[1]`, such that `y[0]+y[1] = r`.\n*\n* @param {number} x - input value\n* @param {(Array|TypedArray|Object)} y - remainder elements\n* @returns {integer} factor of `π/2`\n*\n* @example\n* var y = [ 0.0, 0.0 ];\n* var n = rempio2( 128.0, y );\n* // returns 81\n*\n* var y1 = y[ 0 ];\n* // returns ~0.765\n*\n* var y2 = y[ 1 ];\n* // returns ~3.618e-17\n*\n* @example\n* var y = [ 0.0, 0.0 ];\n* var n = rempio2( NaN, y );\n* // returns 0\n*\n* var y1 = y[ 0 ];\n* // returns NaN\n*\n* var y2 = y[ 1 ];\n* // returns NaN\n*/\nfunction rempio2( x, y ) {\n\tvar low;\n\tvar e0;\n\tvar hx;\n\tvar ix;\n\tvar nx;\n\tvar i;\n\tvar n;\n\tvar z;\n\n\thx = getHighWord( x );\n\tix = (hx & ABS_MASK)|0; // asm type annotation\n\n\t// Case: |x| ~<= π/4 (no need for reduction)\n\tif ( ix <= PIO4_HIGH_WORD ) {\n\t\ty[ 0 ] = x;\n\t\ty[ 1 ] = 0.0;\n\t\treturn 0;\n\t}\n\t// Case: |x| ~<= 5π/4\n\tif ( ix <= FIVE_PIO4_HIGH_WORD ) {\n\t\t// Case: |x| ~= π/2 or π\n\t\tif ( (ix & SIGNIFICAND_MASK) === PI_HIGH_WORD_SIGNIFICAND ) {\n\t\t\t// Cancellation => use medium case\n\t\t\treturn rempio2Medium( x, ix, y );\n\t\t}\n\t\t// Case: |x| ~<= 3π/4\n\t\tif ( ix <= THREE_PIO4_HIGH_WORD ) {\n\t\t\tif ( x > 0.0 ) {\n\t\t\t\tz = x - PIO2_1;\n\t\t\t\ty[ 0 ] = z - PIO2_1T;\n\t\t\t\ty[ 1 ] = (z - y[0]) - PIO2_1T;\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tz = x + PIO2_1;\n\t\t\ty[ 0 ] = z + PIO2_1T;\n\t\t\ty[ 1 ] = (z - y[0]) + PIO2_1T;\n\t\t\treturn -1;\n\t\t}\n\t\tif ( x > 0.0 ) {\n\t\t\tz = x - ( 2.0*PIO2_1 );\n\t\t\ty[ 0 ] = z - TWO_PIO2_1T;\n\t\t\ty[ 1 ] = (z - y[0]) - TWO_PIO2_1T;\n\t\t\treturn 2;\n\t\t}\n\t\tz = x + ( 2.0*PIO2_1 );\n\t\ty[ 0 ] = z + TWO_PIO2_1T;\n\t\ty[ 1 ] = (z - y[0]) + TWO_PIO2_1T;\n\t\treturn -2;\n\t}\n\t// Case: |x| ~<= 9π/4\n\tif ( ix <= NINE_PIO4_HIGH_WORD ) {\n\t\t// Case: |x| ~<= 7π/4\n\t\tif ( ix <= SEVEN_PIO4_HIGH_WORD ) {\n\t\t\t// Case: |x| ~= 3π/2\n\t\t\tif ( ix === THREE_PIO2_HIGH_WORD ) {\n\t\t\t\treturn rempio2Medium( x, ix, y );\n\t\t\t}\n\t\t\tif ( x > 0.0 ) {\n\t\t\t\tz = x - ( 3.0*PIO2_1 );\n\t\t\t\ty[ 0 ] = z - THREE_PIO2_1T;\n\t\t\t\ty[ 1 ] = (z - y[0]) - THREE_PIO2_1T;\n\t\t\t\treturn 3;\n\t\t\t}\n\t\t\tz = x + ( 3.0*PIO2_1 );\n\t\t\ty[ 0 ] = z + THREE_PIO2_1T;\n\t\t\ty[ 1 ] = (z - y[0]) + THREE_PIO2_1T;\n\t\t\treturn -3;\n\t\t}\n\t\t// Case: |x| ~= 4π/2\n\t\tif ( ix === TWO_PI_HIGH_WORD ) {\n\t\t\treturn rempio2Medium( x, ix, y );\n\t\t}\n\t\tif ( x > 0.0 ) {\n\t\t\tz = x - ( 4.0*PIO2_1 );\n\t\t\ty[ 0 ] = z - FOUR_PIO2_1T;\n\t\t\ty[ 1 ] = (z - y[0]) - FOUR_PIO2_1T;\n\t\t\treturn 4;\n\t\t}\n\t\tz = x + ( 4.0*PIO2_1 );\n\t\ty[ 0 ] = z + FOUR_PIO2_1T;\n\t\ty[ 1 ] = (z - y[0]) + FOUR_PIO2_1T;\n\t\treturn -4;\n\t}\n\t// Case: |x| ~< 2^20*π/2 (medium size)\n\tif ( ix < MEDIUM ) {\n\t\treturn rempio2Medium( x, ix, y );\n\t}\n\t// Case: x is NaN or infinity\n\tif ( ix >= EXPONENT_MASK ) {\n\t\ty[ 0 ] = NaN;\n\t\ty[ 1 ] = NaN;\n\t\treturn 0.0;\n\t}\n\t// Set z = scalbn(|x|, ilogb(x)-23)...\n\tlow = getLowWord( x );\n\te0 = (ix >> 20) - 1046; // `e0 = ilogb(z) - 23` => unbiased exponent minus 23\n\tz = fromWords( ix - ((e0 << 20)|0), low );\n\tfor ( i = 0; i < 2; i++ ) {\n\t\tTX[ i ] = z|0;\n\t\tz = (z - TX[i]) * TWO24;\n\t}\n\tTX[ 2 ] = z;\n\tnx = 3;\n\twhile ( TX[ nx-1 ] === ZERO ) {\n\t\t// Skip zero term...\n\t\tnx -= 1;\n\t}\n\tn = rempio2Kernel( TX, TY, e0, nx, 1 );\n\tif ( x < 0.0 ) {\n\t\ty[ 0 ] = -TY[ 0 ];\n\t\ty[ 1 ] = -TY[ 1 ];\n\t\treturn -n;\n\t}\n\ty[ 0 ] = TY[ 0 ];\n\ty[ 1 ] = TY[ 1 ];\n\treturn n;\n}\n\n\n// EXPORTS //\n\nexport default rempio2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for the significand of a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-high-word-significand-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT64_HIGH_WORD_SIGNIFICAND_MASK from '@stdlib/constants-float64-high-word-significand-mask';\n* // returns 1048575\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for the significand of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for the significand of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 1048575 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000000000 11111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x000fffff\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_SIGNIFICAND_MASK = 0x000fffff;\n\n\n// EXPORTS //\n\nexport default FLOAT64_HIGH_WORD_SIGNIFICAND_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of FreeBSD [k_sin.c]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c} and [k_cos.c]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_cos.c}. The implementation follows the original sine and cosine kernels, but has been modified for JavaScript and combined into a single function.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar S1 = -1.66666666666666324348e-01; // 0xBFC55555, 0x55555549\nvar S2 = 8.33333333332248946124e-03;  // 0x3F811111, 0x1110F8A6\nvar S3 = -1.98412698298579493134e-04; // 0xBF2A01A0, 0x19C161D5\nvar S4 = 2.75573137070700676789e-06;  // 0x3EC71DE3, 0x57B1FE7D\nvar S5 = -2.50507602534068634195e-08; // 0xBE5AE5E6, 0x8A2B9CEB\nvar S6 = 1.58969099521155010221e-10;  // 0x3DE5D93A, 0x5ACFD57C\n\nvar C1 = 4.16666666666666019037e-02;  // 0x3FA55555, 0x5555554C\nvar C2 = -1.38888888888741095749e-03; // 0xBF56C16C, 0x16C15177\nvar C3 = 2.48015872894767294178e-05;  // 0x3EFA01A0, 0x19CB1590\nvar C4 = -2.75573143513906633035e-07; // 0xBE927E4F, 0x809C52AD\nvar C5 = 2.08757232129817482790e-09;  // 0x3E21EE9E, 0xBDB4B1C4\nvar C6 = -1.13596475577881948265e-11; // 0xBDA8FAE9, 0xBE8838D4\n\n\n// MAIN //\n\n/**\n* Computes the sine and cosine on \\\\( \\approx \\[-\\pi/4, \\pi/4\\] \\\\) (except for \\\\(-0\\\\)), where \\\\( \\pi/4 \\approx 0.7854 \\\\).\n*\n* @private\n* @param {number} x - input value (in radians, assumed to be bounded by `~π/4` in magnitude)\n* @param {number} y - tail of `x`\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} sine and cosine\n*/\nfunction kernelSincos( x, y, out, stride, offset ) {\n\tvar hz;\n\tvar r;\n\tvar v;\n\tvar w;\n\tvar z;\n\n\tz = x * x;\n\tw = z * z;\n\tr = S2 + (z * (S3 + (z*S4))) + (z * w * (S5 + (z*S6)));\n\tv = z * x;\n\tif ( y === 0.0 ) {\n\t\tout[ offset ] = x + (v * (S1 + (z*r)));\n\t} else {\n\t\tout[ offset ] = x - (((z*((0.5*y) - (v*r))) - y) - (v*S1));\n\t}\n\tr = z * (C1 + (z * (C2 + (z*C3))));\n\tr += w * w * (C4 + (z * (C5 + (z*C6))));\n\thz = 0.5 * z;\n\tw = 1.0 - hz;\n\tout[ offset + stride ] = w + ( ((1.0-w) - hz) + ((z*r) - (x*y)) );\n\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default kernelSincos;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of FreeBSD [k_sin.c]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c} and [k_cos.c]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_cos.c}. The implementation follows the original sine and cosine kernels, but has been modified for JavaScript and combined into a single function.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ABS_MASK from '@stdlib/constants-float64-high-word-abs-mask';\nimport EXPONENT_MASK from '@stdlib/constants-float64-high-word-exponent-mask';\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport rempio2 from '@stdlib/math-base-special-rempio2';\nimport kernelSincos from './kernel_sincos.js';\n\n\n// VARIABLES //\n\n// High word for PI/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011\nvar PIO4_HIGH_WORD = 0x3fe921fb|0; // asm type annotation\n\n// The smaller of the two cutoffs for the sine and cosine kernels: 2^-27 = 0x3e400000 => 00111110010000000000000000000000\nvar SMALL_HIGH_WORD = 0x3e400000|0; // asm type annotation\n\n// Array for storing remainder elements:\nvar Y = [ 0.0, 0.0 ];\n\n\n// MAIN //\n\n/**\n* Simultaneously computes the sine and cosine of a number and assigns results to a provided output array.\n*\n* ## Method\n*\n* -   Let \\\\(S\\\\), \\\\(C\\\\), and \\\\(T\\\\) denote the \\\\(\\sin\\\\), \\\\(\\cos\\\\) and \\\\(\\tan\\\\), respectively, on \\\\(\\[-\\pi/4, +\\pi/4\\]\\\\).\n*\n* -   Reduce the argument \\\\(x\\\\) to \\\\(y1+y2 = x-k\\pi/2\\\\) in \\\\(\\[-\\pi/4, +\\pi/4\\]\\\\), and let \\\\(n = k \\mod 4\\\\).\n*\n* -   We have\n*\n*     | n | sin(x) | cos(x) | tan(x) |\n*     | - | ------ | ------ | ------ |\n*     | 0 |    S   |    C   |   T    |\n*     | 1 |    C   |   -S   |  -1/T  |\n*     | 2 |   -S   |   -C   |   T    |\n*     | 3 |   -C   |    S   |  -1/T  |\n*\n* @private\n* @param {number} x - input value (in radians)\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var v = sincos( 0.0, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ ~0.0, ~1.0 ]\n*\n* @example\n* var v = sincos( 3.141592653589793/2.0, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ ~1.0, ~0.0 ]\n*\n* @example\n* var v = sincos( -3.141592653589793/6.0, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ ~-0.5, ~0.866 ]\n*\n* @example\n* var v = sincos( NaN, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ NaN, NaN ]\n*/\nfunction sincos( x, out, stride, offset ) {\n\tvar ix;\n\tvar n;\n\n\tix = getHighWord( x );\n\n\t// Case: |x| ~< π/4\n\tix &= ABS_MASK;\n\tif ( ix <= PIO4_HIGH_WORD ) {\n\t\t// Case: |x| ~< 2^-26\n\t\tif ( ix < SMALL_HIGH_WORD ) {\n\t\t\tif ( (x|0) === 0 ) {\n\t\t\t\tout[ offset ] = x;\n\t\t\t\tout[ offset + stride ] = 0.0;\n\t\t\t}\n\t\t}\n\t\treturn kernelSincos( x, 0.0, out, stride, offset );\n\t}\n\t// Case: x is NaN or infinity\n\tif ( ix >= EXPONENT_MASK ) {\n\t\tout[ offset ] = NaN;\n\t\tout[ offset + stride ] = NaN;\n\t\treturn out;\n\t}\n\t// Argument reduction...\n\tn = rempio2( x, Y );\n\n\t// Compute the sine and cosine together:\n\tkernelSincos( Y[ 0 ], Y[ 1 ], out, stride, offset );\n\n\tswitch ( n & 3 ) {\n\tcase 1:\n\t\tix = out[ offset + stride ];\n\t\tout[ offset + stride ] = -out[ offset ];\n\t\tout[ offset ] = ix;\n\t\treturn out;\n\tcase 2:\n\t\tout[ offset ] *= -1;\n\t\tout[ offset + stride ] *= -1;\n\t\treturn out;\n\tcase 3:\n\t\t// Passing\n\t\tix = -out[ offset + stride ];\n\t\tout[ offset + stride ] = out[ offset ];\n\t\tout[ offset ] = ix;\n\t\treturn out;\n\tdefault:\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default sincos;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport assign from './assign.js';\n\n\n// MAIN //\n\n/**\n* Simultaneously computes the sine and cosine of a number.\n*\n* @param {number} x - input value (in radians)\n* @returns {Array<number>} sine and cosine\n*\n* @example\n* var v = sincos( 0.0 );\n* // returns [ ~0.0, ~1.0 ]\n*\n* @example\n* var v = sincos( 3.141592653589793/2.0 );\n* // returns [ ~1.0, ~0.0 ]\n*\n* @example\n* var v = sincos( -3.141592653589793/6.0 );\n* // returns [ ~-0.5, ~0.866 ]\n*\n* @example\n* var v = sincos( NaN );\n* // returns [ NaN, NaN ]\n*/\nfunction sincos( x ) {\n\treturn assign( x, [ 0.0, 0.0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default sincos;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Simultaneously compute the sine and cosine of a number.\n*\n* @module @stdlib/math-base-special-sincos\n*\n* @example\n* import sincos from '@stdlib/math-base-special-sincos';\n*\n* var v = sincos( 0.0 );\n* // returns [ ~0.0, ~1.0 ]\n*\n* v = sincos( 3.141592653589793/2.0 );\n* // returns [ ~1.0, ~0.0 ]\n*\n* v = sincos( -3.141592653589793/6.0 );\n* // returns [ ~-0.5, ~0.866 ]\n*\n* v = sincos( NaN );\n* // returns [ NaN, NaN ]\n*\n* @example\n* import sincos from '@stdlib/math-base-special-sincos';\n*\n* var out = new Float64Array( 2 );\n*\n* var v = sincos( out, 0.0 );\n* // return <Float64Array>[ ~0.0, ~1.0 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link https://github.com/boostorg/math/blob/develop/include/boost/math/special_functions/detail/bessel_j0.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright Xiaogang Zhang, 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport { assign as sincos } from '@stdlib/math-base-special-sincos';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport poly1 from './rational_p1q1.js';\nimport poly2 from './rational_p2q2.js';\nimport polyC from './rational_pcqc.js';\nimport polyS from './rational_psqs.js';\n\n\n// VARIABLES //\n\nvar ONE_DIV_SQRT_PI = 0.5641895835477563;\nvar x1 = 2.4048255576957727686e+00;\nvar x2 = 5.5200781102863106496e+00;\nvar x11 = 6.160e+02;\nvar x12 = -1.42444230422723137837e-03;\nvar x21 = 1.4130e+03;\nvar x22 = 5.46860286310649596604e-04;\n\n// `sincos` workspace:\nvar sc = [ 0.0, 0.0 ];\n\n\n// MAIN //\n\n/**\n* Computes the Bessel function of the first kind of order zero.\n*\n* @param {number} x - input value\n* @returns {number} evaluated Bessel function\n*\n* @example\n* var v = j0( 0.0 );\n* // returns 1.0\n*\n* v = j0( 1.0 );\n* // returns ~0.765\n*\n* v = j0( Infinity );\n* // returns 0.0\n*\n* v = j0( -Infinity );\n* // returns 0.0\n*\n* v = j0( NaN );\n* // returns NaN\n*/\nfunction j0( x ) {\n\tvar rc;\n\tvar rs;\n\tvar y2;\n\tvar r;\n\tvar y;\n\tvar f;\n\n\tif ( x < 0 ) {\n\t\tx = -x;\n\t}\n\tif ( x === PINF ) {\n\t\treturn 0.0;\n\t}\n\tif ( x === 0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x <= 4.0 ) {\n\t\ty = x * x;\n\t\tr = poly1( y );\n\t\tf = ( x+x1 ) * ( (x - (x11/256.0)) - x12 );\n\t\treturn f * r;\n\t}\n\tif ( x <= 8.0 ) {\n\t\ty = 1.0 - ( ( x*x )/64.0 );\n\t\tr = poly2( y );\n\t\tf = ( x+x2 ) * ( (x - (x21/256.0)) - x22 );\n\t\treturn f * r;\n\t}\n\ty = 8.0 / x;\n\ty2 = y * y;\n\trc = polyC( y2 );\n\trs = polyS( y2 );\n\tf = ONE_DIV_SQRT_PI / sqrt(x);\n\n\t/*\n\t* What follows is really just:\n\t*\n\t* ```\n\t* var z = x - pi/4;\n\t* return f * (rc * cos(z) - y * rs * sin(z));\n\t* ```\n\t*\n\t* But using the addition formulae for sin and cos, plus the special values for sin/cos of `π/4`.\n\t*/\n\tsincos( x, sc, 1, 0 );\n\treturn f * ( ( rc * (sc[1]+sc[0]) ) - ( (y*rs) * (sc[0]-sc[1]) ) );\n}\n\n\n// EXPORTS //\n\nexport default j0;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.17291506903064494;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -412986685009.9087 + (x * (27282507878.60594 + (x * (-621407004.2354012 + (x * (6630299.79048338 + (x * (-36629.81465510709 + (x * (103.44222815443189 + (x * -0.12117036164593528))))))))))); // eslint-disable-line max-len\n\t\ts2 = 2388378799633.229 + (x * (26328198300.85965 + (x * (139850973.72263435 + (x * (456126.9622421994 + (x * (936.1402239233771 + (x * (1.0 + (x * 0.0))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.12117036164593528 + (x * (103.44222815443189 + (x * (-36629.81465510709 + (x * (6630299.79048338 + (x * (-621407004.2354012 + (x * (27282507878.60594 + (x * -412986685009.9087))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0 + (x * (1.0 + (x * (936.1402239233771 + (x * (456126.9622421994 + (x * (139850973.72263435 + (x * (26328198300.85965 + (x * 2388378799633.229))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.005119512965174424;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -1831.9397969392085 + (x * (-12254.07816137899 + (x * (-7287.970246446462 + (x * (10341.910641583727 + (x * (11725.046279757104 + (x * (4417.670702532509 + (x * (743.2119668062425 + (x * 48.5917033559165))))))))))))); // eslint-disable-line max-len\n\t\ts2 = -357834.78026152303 + (x * (245991.0226258631 + (x * (-84055.06259116957 + (x * (18680.99000835919 + (x * (-2945.876654550934 + (x * (333.07310774649073 + (x * (-25.258076240801554 + (x * 1.0))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 48.5917033559165 + (x * (743.2119668062425 + (x * (4417.670702532509 + (x * (11725.046279757104 + (x * (10341.910641583727 + (x * (-7287.970246446462 + (x * (-12254.07816137899 + (x * -1831.9397969392085))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (-25.258076240801554 + (x * (333.07310774649073 + (x * (-2945.876654550934 + (x * (18680.99000835919 + (x * (-84055.06259116957 + (x * (245991.0226258631 + (x * -357834.78026152303))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 22779.090197304686 + (x * (41345.38663958076 + (x * (21170.523380864943 + (x * (3480.648644324927 + (x * (153.76201909008356 + (x * 0.8896154842421046))))))))); // eslint-disable-line max-len\n\t\ts2 = 22779.090197304686 + (x * (41370.41249551042 + (x * (21215.350561880117 + (x * (3502.8735138235606 + (x * (157.11159858080893 + (x * 1.0))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.8896154842421046 + (x * (153.76201909008356 + (x * (3480.648644324927 + (x * (21170.523380864943 + (x * (41345.38663958076 + (x * 22779.090197304686))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (157.11159858080893 + (x * (3502.8735138235606 + (x * (21215.350561880117 + (x * (41370.41249551042 + (x * 22779.090197304686))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.015625;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -89.22660020080009 + (x * (-185.91953644342993 + (x * (-111.83429920482737 + (x * (-22.300261666214197 + (x * (-1.244102674583564 + (x * -0.008803330304868075))))))))); // eslint-disable-line max-len\n\t\ts2 = 5710.502412851206 + (x * (11951.131543434614 + (x * (7264.278016921102 + (x * (1488.7231232283757 + (x * (90.59376959499312 + (x * 1.0))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.008803330304868075 + (x * (-1.244102674583564 + (x * (-22.300261666214197 + (x * (-111.83429920482737 + (x * (-185.91953644342993 + (x * -89.22660020080009))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (90.59376959499312 + (x * (1488.7231232283757 + (x * (7264.278016921102 + (x * (11951.131543434614 + (x * 5710.502412851206))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of the mathematical constant `π`.\n*\n* @module @stdlib/constants-float64-sqrt-pi\n* @type {number}\n*\n* @example\n* import SQRT_PI from '@stdlib/constants-float64-sqrt-pi';\n* // returns 1.7724538509055160\n*/\n\n\n// MAIN //\n\n/**\n* Square root of the mathematical constant `π`.\n*\n* @constant\n* @type {number}\n* @default 1.7724538509055160\n* @see [OEIS]{@link https://oeis.org/A002161}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar SQRT_PI = 1.772453850905516027298167483341145182797549456122387128213;\n\n\n// EXPORTS //\n\nexport default SQRT_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link https://github.com/boostorg/math/blob/develop/include/boost/math/special_functions/detail/bessel_j1.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright Xiaogang Zhang, 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport { assign as sincos } from '@stdlib/math-base-special-sincos';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport SQRT_PI from '@stdlib/constants-float64-sqrt-pi';\nimport poly1 from './rational_p1q1.js';\nimport poly2 from './rational_p2q2.js';\nimport polyC from './rational_pcqc.js';\nimport polyS from './rational_psqs.js';\n\n\n// VARIABLES //\n\nvar x1 = 3.8317059702075123156e+00;\nvar x2 = 7.0155866698156187535e+00;\nvar x11 = 9.810e+02;\nvar x12 = -3.2527979248768438556e-04;\nvar x21 = 1.7960e+03;\nvar x22 = -3.8330184381246462950e-05;\n\n// `sincos` workspace:\nvar sc = [ 0.0, 0.0 ];\n\n\n// MAIN //\n\n/**\n* Computes the Bessel function of the first kind of order one.\n*\n* ## Notes\n*\n* -   Accuracy for subnormal `x` is very poor. Full accuracy is achieved at `1.0e-308` but trends progressively to zero at `5e-324`. This suggests that underflow (or overflow, perhaps due to a reciprocal) is effectively cutting off digits of precision until the computation loses all accuracy at `5e-324`.\n*\n* @param {number} x - input value\n* @returns {number} evaluated Bessel function\n*\n* @example\n* var v = j1( 0.0 );\n* // returns 0.0\n*\n* v = j1( 1.0 );\n* // returns ~0.440\n*\n* v = j1( Infinity );\n* // returns 0.0\n*\n* v = j1( -Infinity );\n* // returns 0.0\n*\n* v = j1( NaN );\n* // returns NaN\n*/\nfunction j1( x ) {\n\tvar value;\n\tvar rc;\n\tvar rs;\n\tvar y2;\n\tvar r;\n\tvar y;\n\tvar f;\n\tvar w;\n\n\tw = abs( x );\n\tif ( x === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( w === PINF ) {\n\t\treturn 0.0;\n\t}\n\tif ( w <= 4.0 ) {\n\t\ty = x * x;\n\t\tr = poly1( y );\n\t\tf = w * ( w+x1 ) * ( ( w - (x11/256.0) ) - x12 );\n\t\tvalue = f * r;\n\t} else if ( w <= 8.0 ) {\n\t\ty = x * x;\n\t\tr = poly2( y );\n\t\tf = w * ( w+x2 ) * ( ( w - (x21/256.0) ) - x22 );\n\t\tvalue = f * r;\n\t} else {\n\t\ty = 8.0 / w;\n\t\ty2 = y * y;\n\t\trc = polyC( y2 );\n\t\trs = polyS( y2 );\n\t\tf = 1.0 / ( sqrt( w ) * SQRT_PI );\n\n\t\t/*\n\t\t* What follows is really just:\n\t\t*\n\t\t* ```\n\t\t* z = w - 0.75 * pi;\n\t\t* value = f * ( rc * cos( z ) - y * rs * sin( z ) );\n\t\t* ```\n\t\t*\n\t\t* but using the sin/cos addition rules plus constants for the values of sin/cos of `3π/4` which then cancel out with corresponding terms in \"f\".\n\t\t*/\n\t\tsincos( w, sc, 1, 0 );\n\t\tvalue = f * ( ( rc * (sc[0]-sc[1]) ) + ( (y*rs) * (sc[0]+sc[1]) ) );\n\t}\n\tif ( x < 0.0 ) {\n\t\tvalue *= -1.0;\n\t}\n\treturn value;\n}\n\n\n// EXPORTS //\n\nexport default j1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.03405537391318949;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -142585098013.66644 + (x * (6678104126.14924 + (x * (-115486967.64841276 + (x * (980629.0409895825 + (x * (-4461.579298277507 + (x * (10.650724020080236 + (x * -0.010767857011487301))))))))))); // eslint-disable-line max-len\n\t\ts2 = 4186860446082.0176 + (x * (42091902282.58013 + (x * (202283751.40097034 + (x * (591176.1449417479 + (x * (1074.227223951738 + (x * (1.0 + (x * 0.0))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.010767857011487301 + (x * (10.650724020080236 + (x * (-4461.579298277507 + (x * (980629.0409895825 + (x * (-115486967.64841276 + (x * (6678104126.14924 + (x * -142585098013.66644))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0 + (x * (1.0 + (x * (1074.227223951738 + (x * (591176.1449417479 + (x * (202283751.40097034 + (x * (42091902282.58013 + (x * 4186860446082.0176))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.010158790774176108;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -17527881995806512.0 + (x * (1660853173129901.8 + (x * (-36658018905416.664 + (x * (355806656709.1062 + (x * (-1811393126.9860668 + (x * (5079326.614801118 + (x * (-7502.334222078161 + (x * 4.6179191852758255))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1725390588844768000.0 + (x * (17128800897135812.0 + (x * (84899346165481.42 + (x * (276227772862.44086 + (x * (648725028.9959639 + (x * (1126712.5065029138 + (x * (1388.6978985861358 + (x * 1.0))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 4.6179191852758255 + (x * (-7502.334222078161 + (x * (5079326.614801118 + (x * (-1811393126.9860668 + (x * (355806656709.1062 + (x * (-36658018905416.664 + (x * (1660853173129901.8 + (x * -17527881995806512.0))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (1388.6978985861358 + (x * (1126712.5065029138 + (x * (648725028.9959639 + (x * (276227772862.44086 + (x * (84899346165481.42 + (x * (17128800897135812.0 + (x * 1725390588844768000.0))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -4435757.816794128 + (x * (-9942246.505077641 + (x * (-6603373.248364939 + (x * (-1523529.3511811374 + (x * (-109824.05543459347 + (x * (-1611.6166443246102 + (x * 0.0))))))))))); // eslint-disable-line max-len\n\t\ts2 = -4435757.816794128 + (x * (-9934124.389934586 + (x * (-6585339.4797230875 + (x * (-1511809.5066341609 + (x * (-107263.8599110382 + (x * (-1455.0094401904962 + (x * 1.0))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (-1611.6166443246102 + (x * (-109824.05543459347 + (x * (-1523529.3511811374 + (x * (-6603373.248364939 + (x * (-9942246.505077641 + (x * -4435757.816794128))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (-1455.0094401904962 + (x * (-107263.8599110382 + (x * (-1511809.5066341609 + (x * (-6585339.4797230875 + (x * (-9934124.389934586 + (x * -4435757.816794128))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.046875;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 33220.913409857225 + (x * (85145.1606753357 + (x * (66178.83658127084 + (x * (18494.262873223866 + (x * (1706.375429020768 + (x * (35.26513384663603 + (x * 0.0))))))))))); // eslint-disable-line max-len\n\t\ts2 = 708712.8194102874 + (x * (1819458.0422439973 + (x * (1419460.669603721 + (x * (400294.43582266977 + (x * (37890.2297457722 + (x * (863.8367769604992 + (x * 1.0))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (35.26513384663603 + (x * (1706.375429020768 + (x * (18494.262873223866 + (x * (66178.83658127084 + (x * (85145.1606753357 + (x * 33220.913409857225))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (863.8367769604992 + (x * (37890.2297457722 + (x * (400294.43582266977 + (x * (1419460.669603721 + (x * (1819458.0422439973 + (x * 708712.8194102874))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link https://github.com/boostorg/math/blob/develop/include/boost/math/special_functions/detail/bessel_y0.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright Xiaogang Zhang, 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ln from '@stdlib/math-base-special-ln';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport PI from '@stdlib/constants-float64-pi';\nimport SQRT_PI from '@stdlib/constants-float64-sqrt-pi';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport { assign as sincos } from '@stdlib/math-base-special-sincos';\nimport besselj0 from '@stdlib/math-base-special-besselj0';\nimport poly1 from './rational_p1q1.js';\nimport poly2 from './rational_p2q2.js';\nimport poly3 from './rational_p3q3.js';\nimport polyC from './rational_pcqc.js';\nimport polyS from './rational_psqs.js';\n\n\n// VARIABLES //\n\nvar ONE_DIV_SQRT_PI = 1.0 / SQRT_PI;\nvar TWO_DIV_PI = 2.0 / PI;\n\nvar x1 = 8.9357696627916752158e-01;\nvar x2 = 3.9576784193148578684e+00;\nvar x3 = 7.0860510603017726976e+00;\nvar x11 = 2.280e+02;\nvar x12 = 2.9519662791675215849e-03;\nvar x21 = 1.0130e+03;\nvar x22 = 6.4716931485786837568e-04;\nvar x31 = 1.8140e+03;\nvar x32 = 1.1356030177269762362e-04;\n\n// `sincos` workspace:\nvar sc = [ 0.0, 0.0 ];\n\n\n// MAIN //\n\n/**\n* Computes the Bessel function of the second kind of order zero.\n*\n* ## Notes\n*\n* -   Accuracy for subnormal `x` is very poor. Full accuracy is achieved at `1.0e-308` but trends progressively to zero at `5e-324`. This suggests that underflow (or overflow, perhaps due to a reciprocal) is effectively cutting off digits of precision until the computation loses all accuracy at `5e-324`.\n*\n* @param {number} x - input value\n* @returns {number} evaluated Bessel function\n*\n* @example\n* var v = y0( 0.0 );\n* // returns -Infinity\n*\n* v = y0( 1.0 );\n* // returns ~0.088\n*\n* v = y0( -1.0 );\n* // returns NaN\n*\n* v = y0( Infinity );\n* // returns 0.0\n*\n* v = y0( -Infinity );\n* // returns NaN\n*\n* v = y0( NaN );\n* // returns NaN\n*/\nfunction y0( x ) {\n\tvar rc;\n\tvar rs;\n\tvar y2;\n\tvar r;\n\tvar y;\n\tvar z;\n\tvar f;\n\n\tif ( x < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn NINF;\n\t}\n\tif ( x === PINF ) {\n\t\treturn 0.0;\n\t}\n\tif ( x <= 3.0 ) {\n\t\ty = x * x;\n\t\tz = ( ln( x/x1 ) * besselj0( x ) ) * TWO_DIV_PI;\n\t\tr = poly1( y );\n\t\tf = ( x+x1 ) * ( ( x - (x11/256.0) ) - x12 );\n\t\treturn z + ( f*r );\n\t}\n\tif ( x <= 5.5 ) {\n\t\ty = x * x;\n\t\tz = ( ln( x/x2 ) * besselj0( x ) ) * TWO_DIV_PI;\n\t\tr = poly2( y );\n\t\tf = ( x+x2 ) * ( (x - (x21/256.0)) - x22 );\n\t\treturn z + ( f*r );\n\t}\n\tif ( x <= 8.0 ) {\n\t\ty = x * x;\n\t\tz = ( ln( x/x3 ) * besselj0( x ) ) * TWO_DIV_PI;\n\t\tr = poly3( y );\n\t\tf = ( x+x3 ) * ( (x - (x31/256.0)) - x32 );\n\t\treturn z + ( f*r );\n\t}\n\ty = 8.0 / x;\n\ty2 = y * y;\n\trc = polyC( y2 );\n\trs = polyS( y2 );\n\tf = ONE_DIV_SQRT_PI / sqrt( x );\n\n\t/*\n\t* The following code is really just:\n\t*\n\t* ```\n\t* z = x - 0.25 * pi;\n\t* value = f * ( rc * sin( z ) + y * rs * cos( z ) );\n\t* ```\n\t*\n\t* But using the sin/cos addition formulae and constant values for sin/cos of `π/4` which then cancel part of the \"f\" term as they're all `1/sqrt(2)`:\n\t*/\n\tsincos( x, sc, 1, 0 );\n\treturn f * ( ( rc * (sc[0]-sc[1]) ) + ( (y*rs) * (sc[1]+sc[0]) ) );\n}\n\n\n// EXPORTS //\n\nexport default y0;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link https://github.com/boostorg/math/blob/develop/include/boost/math/special_functions/detail/bessel_y1.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright Xiaogang Zhang, 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ln from '@stdlib/math-base-special-ln';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport PI from '@stdlib/constants-float64-pi';\nimport SQRT_PI from '@stdlib/constants-float64-sqrt-pi';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport { assign as sincos } from '@stdlib/math-base-special-sincos';\nimport besselj1 from '@stdlib/math-base-special-besselj1';\nimport poly1 from './rational_p1q1.js';\nimport poly2 from './rational_p2q2.js';\nimport polyC from './rational_pcqc.js';\nimport polyS from './rational_psqs.js';\n\n\n// VARIABLES //\n\nvar ONE_DIV_SQRT_PI = 1.0 / SQRT_PI;\nvar TWO_DIV_PI = 2.0 / PI;\n\nvar x1 = 2.1971413260310170351e+00;\nvar x2 = 5.4296810407941351328e+00;\nvar x11 = 5.620e+02;\nvar x12 = 1.8288260310170351490e-03;\nvar x21 = 1.3900e+03;\nvar x22 = -6.4592058648672279948e-06;\n\n// `sincos` workspace:\nvar sc = [ 0.0, 0.0 ];\n\n\n// MAIN //\n\n/**\n* Computes the Bessel function of the second kind of order one.\n*\n* ## Notes\n*\n* -   Accuracy for subnormal `x` is very poor. Full accuracy is achieved at `1.0e-308` but trends progressively to zero at `5e-324`. This suggests that underflow (or overflow, perhaps due to a reciprocal) is effectively cutting off digits of precision until the computation loses all accuracy at `5e-324`.\n*\n* @param {number} x - input value\n* @returns {number} evaluated Bessel function\n*\n* @example\n* var v = y1( 0.0 );\n* // returns -Infinity\n*\n* v = y1( 1.0 );\n* // returns ~-0.781\n*\n* v = y1( -1.0 );\n* // returns NaN\n*\n* v = y1( Infinity );\n* // returns 0.0\n*\n* v = y1( -Infinity );\n* // returns NaN\n*\n* v = y1( NaN );\n* // returns NaN\n*/\nfunction y1( x ) {\n\tvar rc;\n\tvar rs;\n\tvar y2;\n\tvar r;\n\tvar y;\n\tvar z;\n\tvar f;\n\n\tif ( x < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn NINF;\n\t}\n\tif ( x === PINF ) {\n\t\treturn 0.0;\n\t}\n\tif ( x <= 4.0 ) {\n\t\ty = x * x;\n\t\tz = ( ln( x/x1 ) * besselj1( x ) ) * TWO_DIV_PI;\n\t\tr = poly1( y );\n\t\tf = ( ( x+x1 ) * ( (x - (x11/256.0)) - x12 ) ) / x;\n\t\treturn z + ( f*r );\n\t}\n\tif ( x <= 8.0 ) {\n\t\ty = x * x;\n\t\tz = ( ln( x/x2 ) * besselj1( x ) ) * TWO_DIV_PI;\n\t\tr = poly2( y );\n\t\tf = ( ( x+x2 ) * ( (x - (x21/256.0)) - x22 ) ) / x;\n\t\treturn z + ( f*r );\n\t}\n\ty = 8.0 / x;\n\ty2 = y * y;\n\trc = polyC( y2 );\n\trs = polyS( y2 );\n\tf = ONE_DIV_SQRT_PI / sqrt( x );\n\n\t/*\n\t* This code is really just:\n\t*\n\t* ```\n\t* z = x - 0.75 * PI;\n\t* return f * (rc * sin(z) + y * rs * cos(z));\n\t* ```\n\t*\n\t* But using the sin/cos addition rules, plus constants for sin/cos of `3π/4` which then cancel out with corresponding terms in \"f\".\n\t*/\n\tsincos( x, sc, 1, 0 );\n\treturn f * ( ( ( (y*rs) * (sc[0]-sc[1]) ) - ( rc * (sc[0]+sc[1]) ) ) );\n}\n\n\n// EXPORTS //\n\nexport default y1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: implementation (?)\n\n/**\n* Rounds a double-precision floating-point number toward positive infinity.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = ceil( -4.2 );\n* // returns -4.0\n*\n* @example\n* var v = ceil( 9.99999 );\n* // returns 10.0\n*\n* @example\n* var v = ceil( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = ceil( NaN );\n* // returns NaN\n*/\nvar ceil = Math.ceil; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default ceil;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\nimport ceil from '@stdlib/math-base-special-ceil';\n\n\n// MAIN //\n\n/**\n* Rounds a double-precision floating-point number toward zero.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = trunc( -4.2 );\n* // returns -4.0\n*\n* @example\n* var v = trunc( 9.99999 );\n* // returns 9.0\n*\n* @example\n* var v = trunc( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = trunc( -0.0 );\n* // returns -0.0\n*\n* @example\n* var v = trunc( NaN );\n* // returns NaN\n*\n* @example\n* var v = trunc( Infinity );\n* // returns Infinity\n*\n* @example\n* var v = trunc( -Infinity );\n* // returns -Infinity\n*/\nfunction trunc( x ) {\n\tif ( x < 0.0 ) {\n\t\treturn ceil( x );\n\t}\n\treturn floor( x );\n}\n\n\n// EXPORTS //\n\nexport default trunc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyrights, licenses, and long comment were part of the original implementation available as part of [Go]{@link https://github.com/golang/go/blob/cb07765045aed5104a3df31507564ac99e6ddce8/src/math/exp.go}, which in turn was based on an implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_exp.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (c) 2009 The Go Authors. All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without\n* modification, are permitted provided that the following conditions are\n* met:\n*\n*    * Redistributions of source code must retain the above copyright\n* notice, this list of conditions and the following disclaimer.\n*    * Redistributions in binary form must reproduce the above\n* copyright notice, this list of conditions and the following disclaimer\n* in the documentation and/or other materials provided with the\n* distribution.\n*    * Neither the name of Google Inc. nor the names of its\n* contributors may be used to endorse or promote products derived from\n* this software without specific prior written permission.\n*\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n* \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n* ```\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport trunc from '@stdlib/math-base-special-trunc';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport expmulti from './expmulti.js';\n\n\n// VARIABLES //\n\nvar LN2_HI = 6.93147180369123816490e-01;\nvar LN2_LO = 1.90821492927058770002e-10;\nvar LOG2_E = 1.44269504088896338700e+00;\nvar OVERFLOW = 7.09782712893383973096e+02;\nvar UNDERFLOW = -7.45133219101941108420e+02;\nvar NEARZERO = 1.0 / (1 << 28); // 2^-28\nvar NEG_NEARZERO = -NEARZERO;\n\n\n// MAIN //\n\n/**\n* Evaluates the natural exponential function.\n*\n* ## Method\n*\n* 1.  We reduce \\\\( x \\\\) to an \\\\( r \\\\) so that \\\\( |r| \\leq 0.5 \\cdot \\ln(2) \\approx 0.34658 \\\\). Given \\\\( x \\\\), we find an \\\\( r \\\\) and integer \\\\( k \\\\) such that\n*\n*     ```tex\n*     \\begin{align*}\n*     x &= k \\cdot \\ln(2) + r \\\\\n*     |r| &\\leq 0.5 \\cdot \\ln(2)\n*     \\end{align*}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     \\\\( r \\\\) can be represented as \\\\( r = \\mathrm{hi} - \\mathrm{lo} \\\\) for better accuracy.\n*\n*     <!-- </note> -->\n*\n* 2.  We approximate of \\\\( e^{r} \\\\) by a special rational function on the interval \\\\(\\[0,0.34658]\\\\):\n*\n*     ```tex\n*     \\begin{align*}\n*     R\\left(r^2\\right) &= r \\cdot \\frac{ e^{r}+1 }{ e^{r}-1 } \\\\\n*     &= 2 + \\frac{r^2}{6} - \\frac{r^4}{360} + \\ldots\n*     \\end{align*}\n*     ```\n*\n*     We use a special Remes algorithm on \\\\(\\[0,0.34658]\\\\) to generate a polynomial of degree \\\\(5\\\\) to approximate \\\\(R\\\\). The maximum error of this polynomial approximation is bounded by \\\\(2^{-59}\\\\). In other words,\n*\n*     ```tex\n*     R(z) \\sim 2 + P_1 z + P_2 z^2 + P_3 z^3 + P_4 z^4 + P_5 z^5\n*     ```\n*\n*     where \\\\( z = r^2 \\\\) and\n*\n*     ```tex\n*     \\left|  2 + P_1 z + \\ldots + P_5 z^5  - R(z) \\right| \\leq 2^{-59}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     The values of \\\\( P_1 \\\\) to \\\\( P_5 \\\\) are listed in the source code.\n*\n*     <!-- </note> -->\n*\n*     The computation of \\\\( e^{r} \\\\) thus becomes\n*\n*     ```tex\n*     \\begin{align*}\n*     e^{r} &= 1 + \\frac{2r}{R-r} \\\\\n*           &= 1 + r + \\frac{r \\cdot R_1(r)}{2 - R_1(r)}\\ \\text{for better accuracy}\n*     \\end{align*}\n*     ```\n*\n*     where\n*\n*     ```tex\n*     R_1(r) = r - P_1\\ r^2 + P_2\\ r^4 + \\ldots + P_5\\ r^{10}\n*     ```\n*\n* 3.  We scale back to obtain \\\\( e^{x} \\\\). From step 1, we have\n*\n*     ```tex\n*     e^{x} = 2^k e^{r}\n*     ```\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* e^\\infty &= \\infty \\\\\n* e^{-\\infty} &= 0 \\\\\n* e^{\\mathrm{NaN}} &= \\mathrm{NaN} \\\\\n* e^0 &= 1\\ \\mathrm{is\\ exact\\ for\\ finite\\ argument\\ only}\n* \\end{align*}\n* ```\n*\n* ## Notes\n*\n* -   According to an error analysis, the error is always less than \\\\(1\\\\) ulp (unit in the last place).\n*\n* -   For an IEEE double,\n*\n*     -   if \\\\(x > 7.09782712893383973096\\mbox{e+}02\\\\), then \\\\(e^{x}\\\\) overflows\n*     -   if \\\\(x < -7.45133219101941108420\\mbox{e+}02\\\\), then \\\\(e^{x}\\\\) underflows\n*\n* -   The hexadecimal values included in the source code are the intended ones for the used constants. Decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the intended hexadecimal values.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = exp( 4.0 );\n* // returns ~54.5982\n*\n* @example\n* var v = exp( -9.0 );\n* // returns ~1.234e-4\n*\n* @example\n* var v = exp( 0.0 );\n* // returns 1.0\n*\n* @example\n* var v = exp( NaN );\n* // returns NaN\n*/\nfunction exp( x ) {\n\tvar hi;\n\tvar lo;\n\tvar k;\n\n\tif ( isnan( x ) || x === PINF ) {\n\t\treturn x;\n\t}\n\tif ( x === NINF ) {\n\t\treturn 0.0;\n\t}\n\tif ( x > OVERFLOW ) {\n\t\treturn PINF;\n\t}\n\tif ( x < UNDERFLOW ) {\n\t\treturn 0.0;\n\t}\n\tif (\n\t\tx > NEG_NEARZERO &&\n\t\tx < NEARZERO\n\t) {\n\t\treturn 1.0 + x;\n\t}\n\t// Reduce and compute `r = hi - lo` for extra precision...\n\tif ( x < 0.0 ) {\n\t\tk = trunc( (LOG2_E*x) - 0.5 );\n\t} else {\n\t\tk = trunc( (LOG2_E*x) + 0.5 );\n\t}\n\thi = x - (k*LN2_HI);\n\tlo = k * LN2_LO;\n\n\treturn expmulti( hi, lo, k );\n}\n\n\n// EXPORTS //\n\nexport default exp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyrights, licenses, and long comment were part of the original implementation available as part of [Go]{@link https://github.com/golang/go/blob/cb07765045aed5104a3df31507564ac99e6ddce8/src/math/exp.go}, which in turn was based on an implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_exp.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (c) 2009 The Go Authors. All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without\n* modification, are permitted provided that the following conditions are\n* met:\n*\n*    * Redistributions of source code must retain the above copyright\n* notice, this list of conditions and the following disclaimer.\n*    * Redistributions in binary form must reproduce the above\n* copyright notice, this list of conditions and the following disclaimer\n* in the documentation and/or other materials provided with the\n* distribution.\n*    * Neither the name of Google Inc. nor the names of its\n* contributors may be used to endorse or promote products derived from\n* this software without specific prior written permission.\n*\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n* \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n* ```\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ldexp from '@stdlib/math-base-special-ldexp';\nimport polyvalP from './polyval_p.js';\n\n\n// MAIN //\n\n/**\n* Computes \\\\(e^{r} 2^k\\\\) where \\\\(r = \\mathrm{hi} - \\mathrm{lo}\\\\) and \\\\(|r| \\leq \\ln(2)/2\\\\).\n*\n* @private\n* @param {number} hi - upper bound\n* @param {number} lo - lower bound\n* @param {integer} k - power of 2\n* @returns {number} function value\n*/\nfunction expmulti( hi, lo, k ) {\n\tvar r;\n\tvar t;\n\tvar c;\n\tvar y;\n\n\tr = hi - lo;\n\tt = r * r;\n\tc = r - ( t*polyvalP( t ) );\n\ty = 1.0 - ( lo - ( (r*c)/(2.0-c) ) - hi);\n\n\treturn ldexp( y, k );\n}\n\n\n// EXPORTS //\n\nexport default expmulti;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.16666666666666602;\n\t}\n\treturn 0.16666666666666602 + (x * (-0.0027777777777015593 + (x * (0.00006613756321437934 + (x * (-0.0000016533902205465252 + (x * 4.1381367970572385e-8))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert-is-little-endian';\n\n\n// MAIN //\n\nvar LOW;\nif ( isLittleEndian === true ) {\n\tLOW = 0; // first index\n} else {\n\tLOW = 1; // second index\n}\n\n\n// EXPORTS //\n\nexport default LOW;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float64Array from '@stdlib/array-float64';\nimport LOW from './low.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Sets the less significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - double\n* @param {uinteger32} low - unsigned 32-bit integer to replace the lower order word of `x`\n* @returns {number} double having the same higher order word as `x`\n*\n* @example\n* var low = 5 >>> 0; // => 00000000000000000000000000000101\n*\n* var x = 3.14e201; // => 0 11010011100 01001000001011000011 10010011110010110101100010000010\n*\n* var y = setLowWord( x, low ); // => 0 11010011100 01001000001011000011 00000000000000000000000000000101\n* // returns 3.139998651394392e+201\n*\n* @example\n* import PINF from '@stdlib/constants-float64-pinf';\n* import NINF from '@stdlib/constants-float64-ninf';\n*\n* var low = 12345678;\n*\n* var y = setLowWord( PINF, low );\n* // returns NaN\n*\n* y = setLowWord( NINF, low );\n* // returns NaN\n*\n* y = setLowWord( NaN, low );\n* // returns NaN\n*/\nfunction setLowWord( x, low ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\tUINT32_VIEW[ LOW ] = ( low >>> 0 ); // identity bit shift to ensure integer\n\treturn FLOAT64_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default setLowWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Converts an unsigned 32-bit integer to a signed 32-bit integer.\n*\n* @param {uinteger32} x - unsigned 32-bit integer\n* @returns {integer32} signed 32-bit integer\n*\n* @example\n* import float64ToUint32 from '@stdlib/number-float64-base-to-uint32';\n* var y = uint32ToInt32( float64ToUint32( 4294967295 ) );\n* // returns -1\n*\n* @example\n* import float64ToUint32 from '@stdlib/number-float64-base-to-uint32';\n* var y = uint32ToInt32( float64ToUint32( 3 ) );\n* // returns 3\n*/\nfunction uint32ToInt32( x ) {\n\t// NOTE: we could also use typed-arrays to achieve the same end.\n\treturn x|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nexport default uint32ToInt32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport setLowWord from '@stdlib/number-float64-base-set-low-word';\nimport setHighWord from '@stdlib/number-float64-base-set-high-word';\nimport BIAS from '@stdlib/constants-float64-exponent-bias';\nimport polyvalL from './polyval_l.js';\n\n\n// VARIABLES //\n\n// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111\nvar HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation\n\n// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022\nvar HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation\n\n// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1\nvar HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation\n\n// 0x20000000 = 536870912 => 0 01000000000 00000000000000000000 => biased exponent: 512 = -511+1023\nvar HIGH_BIASED_EXP_NEG_512 = 0x20000000|0; // asm type annotation\n\n// 0x00080000 = 524288 => 0 00000000000 10000000000000000000\nvar HIGH_SIGNIFICAND_HALF = 0x00080000|0; // asm type annotation\n\n// TODO: consider making an external constant\nvar HIGH_NUM_SIGNIFICAND_BITS = 20|0; // asm type annotation\n\nvar TWO53 = 9007199254740992.0;\t// 0x43400000, 0x00000000\n\n// 2/(3*LN2)\nvar CP = 9.61796693925975554329e-01; // 0x3FEEC709, 0xDC3A03FD\n\n// (float)CP\nvar CP_HI = 9.61796700954437255859e-01; // 0x3FEEC709, 0xE0000000\n\n// Low: CP_HI\nvar CP_LO = -7.02846165095275826516e-09; // 0xBE3E2FE0, 0x145B01F5\n\nvar BP = [\n\t1.0,\n\t1.5\n];\nvar DP_HI = [\n\t0.0,\n\t5.84962487220764160156e-01 // 0x3FE2B803, 0x40000000\n];\nvar DP_LO = [\n\t0.0,\n\t1.35003920212974897128e-08 // 0x3E4CFDEB, 0x43CFD006\n];\n\n\n// MAIN //\n\n/**\n* Computes \\\\(\\operatorname{log2}(ax)\\\\).\n*\n* @private\n* @param {Array} out - output array\n* @param {number} ax - absolute value of `x`\n* @param {number} ahx - high word of `ax`\n* @returns {Array} output array containing a tuple comprised of high and low parts\n*\n* @example\n* var t = log2ax( [ 0.0, 0.0 ], 9.0, 1075970048 ); // => [ t1, t2 ]\n* // returns [ 3.169923782348633, 0.0000012190936795504075 ]\n*/\nfunction log2ax( out, ax, ahx ) {\n\tvar tmp;\n\tvar ss; // `hs + ls`\n\tvar s2; // `ss` squared\n\tvar hs;\n\tvar ls;\n\tvar ht;\n\tvar lt;\n\tvar bp; // `BP` constant\n\tvar dp; // `DP` constant\n\tvar hp;\n\tvar lp;\n\tvar hz;\n\tvar lz;\n\tvar t1;\n\tvar t2;\n\tvar t;\n\tvar r;\n\tvar u;\n\tvar v;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tn = 0|0; // asm type annotation\n\n\t// Check if `x` is subnormal...\n\tif ( ahx < HIGH_MIN_NORMAL_EXP ) {\n\t\tax *= TWO53;\n\t\tn -= 53|0; // asm type annotation\n\t\tahx = getHighWord( ax );\n\t}\n\t// Extract the unbiased exponent of `x`:\n\tn += ((ahx >> HIGH_NUM_SIGNIFICAND_BITS) - BIAS)|0; // asm type annotation\n\n\t// Isolate the significand bits of `x`:\n\tj = (ahx & HIGH_SIGNIFICAND_MASK)|0; // asm type annotation\n\n\t// Normalize `ahx` by setting the (biased) exponent to `1023`:\n\tahx = (j | HIGH_BIASED_EXP_0)|0; // asm type annotation\n\n\t// Determine the interval of `|x|` by comparing significand bits...\n\n\t// |x| < sqrt(3/2)\n\tif ( j <= 0x3988E ) { // 0 00000000000 00111001100010001110\n\t\tk = 0;\n\t}\n\t// |x| < sqrt(3)\n\telse if ( j < 0xBB67A ) { // 0 00000000000 10111011011001111010\n\t\tk = 1;\n\t}\n\t// |x| >= sqrt(3)\n\telse {\n\t\tk = 0;\n\t\tn += 1|0; // asm type annotation\n\t\tahx -= HIGH_MIN_NORMAL_EXP;\n\t}\n\t// Load the normalized high word into `|x|`:\n\tax = setHighWord( ax, ahx );\n\n\t// Compute `ss = hs + ls = (x-1)/(x+1)` or `(x-1.5)/(x+1.5)`:\n\tbp = BP[ k ]; // BP[0] = 1.0, BP[1] = 1.5\n\tu = ax - bp; // (x-1) || (x-1.5)\n\tv = 1.0 / (ax + bp); // 1/(x+1) || 1/(x+1.5)\n\tss = u * v;\n\ths = setLowWord( ss, 0 ); // set all low word (less significant significand) bits to 0s\n\n\t// Compute `ht = ax + bp` (via manipulation, i.e., bit flipping, of the high word):\n\ttmp = ((ahx>>1) | HIGH_BIASED_EXP_NEG_512) + HIGH_SIGNIFICAND_HALF;\n\ttmp += (k << 18); // `(k<<18)` can be considered the word equivalent of `1.0` or `1.5`\n\tht = setHighWord( 0.0, tmp );\n\tlt = ax - (ht - bp);\n\tls = v * ( ( u - (hs*ht) ) - ( hs*lt ) );\n\n\t// Compute `log(ax)`...\n\n\ts2 = ss * ss;\n\tr = s2 * s2 * polyvalL( s2 );\n\tr += ls * (hs + ss);\n\ts2 = hs * hs;\n\tht = 3.0 + s2 + r;\n\tht = setLowWord( ht, 0 );\n\tlt = r - ((ht-3.0) - s2);\n\n\t// u+v = ss*(1+...):\n\tu = hs * ht;\n\tv = ( ls*ht ) + ( lt*ss );\n\n\t// 2/(3LN2) * (ss+...):\n\thp = u + v;\n\thp = setLowWord( hp, 0 );\n\tlp = v - (hp - u);\n\thz = CP_HI * hp; // CP_HI+CP_LO = 2/(3*LN2)\n\tlz = ( CP_LO*hp ) + ( lp*CP ) + DP_LO[ k ];\n\n\t// log2(ax) = (ss+...)*2/(3*LN2) = n + dp + hz + lz\n\tdp = DP_HI[ k ];\n\tt = n;\n\tt1 = ((hz+lz) + dp) + t; // log2(ax)\n\tt1 = setLowWord( t1, 0 );\n\tt2 = lz - (((t1-t) - dp) - hz);\n\n\tout[ 0 ] = t1;\n\tout[ 1 ] = t2;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default log2ax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isOdd from '@stdlib/math-base-assert-is-odd';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport toWords from '@stdlib/number-float64-base-to-words';\nimport setLowWord from '@stdlib/number-float64-base-set-low-word';\nimport uint32ToInt32 from '@stdlib/number-uint32-base-to-int32';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport ABS_MASK from '@stdlib/constants-float64-high-word-abs-mask';\nimport xIsZero from './x_is_zero.js';\nimport yIsHuge from './y_is_huge.js';\nimport yIsInfinite from './y_is_infinite.js';\nimport log2ax from './log2ax.js';\nimport logx from './logx.js';\nimport pow2 from './pow2.js';\n\n\n// VARIABLES //\n\n// 0x3fefffff = 1072693247 => 0 01111111110 11111111111111111111 => biased exponent: 1022 = -1+1023 => 2^-1\nvar HIGH_MAX_NEAR_UNITY = 0x3fefffff|0; // asm type annotation\n\n// 0x41e00000 = 1105199104 => 0 10000011110 00000000000000000000 => biased exponent: 1054 = 31+1023 => 2^31\nvar HIGH_BIASED_EXP_31 = 0x41e00000|0; // asm type annotation\n\n// 0x43f00000 = 1139802112 => 0 10000111111 00000000000000000000 => biased exponent: 1087 = 64+1023 => 2^64\nvar HIGH_BIASED_EXP_64 = 0x43f00000|0; // asm type annotation\n\n// 0x40900000 = 1083179008 => 0 10000001001 00000000000000000000 => biased exponent: 1033 = 10+1023 => 2^10 = 1024\nvar HIGH_BIASED_EXP_10 = 0x40900000|0; // asm type annotation\n\n// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1\nvar HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation\n\n// 0x4090cc00 = 1083231232 => 0 10000001001 00001100110000000000\nvar HIGH_1075 = 0x4090cc00|0; // asm type annotation\n\n// 0xc090cc00 = 3230714880 => 1 10000001001 00001100110000000000\nvar HIGH_NEG_1075 = 0xc090cc00>>>0; // asm type annotation\n\nvar HIGH_NUM_NONSIGN_BITS = 31|0; // asm type annotation\n\nvar HUGE = 1.0e300;\nvar TINY = 1.0e-300;\n\n// -(1024-log2(ovfl+.5ulp))\nvar OVT = 8.0085662595372944372e-17;\n\n// High/low words workspace:\nvar WORDS = [ 0|0, 0|0 ];\n\n// Log workspace:\nvar LOG_WORKSPACE = [ 0.0, 0.0 ];\n\n\n// MAIN //\n\n/**\n* Evaluates the exponential function.\n*\n* ## Method\n*\n* 1.  Let \\\\(x = 2^n (1+f)\\\\).\n*\n* 2.  Compute \\\\(\\operatorname{log2}(x)\\\\) as\n*\n*     ```tex\n*     \\operatorname{log2}(x) = w_1 + w_2\n*     ```\n*\n*     where \\\\(w_1\\\\) has \\\\(53 - 24 = 29\\\\) bit trailing zeros.\n*\n* 3.  Compute\n*\n*     ```tex\n*     y \\cdot \\operatorname{log2}(x) = n + y^\\prime\n*     ```\n*\n*     by simulating multi-precision arithmetic, where \\\\(|y^\\prime| \\leq 0.5\\\\).\n*\n* 4.  Return\n*\n*     ```tex\n*     x^y = 2^n e^{y^\\prime \\cdot \\mathrm{log2}}\n*     ```\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* x^{\\mathrm{NaN}} &= \\mathrm{NaN} & \\\\\n* (\\mathrm{NaN})^y &= \\mathrm{NaN} & \\\\\n* 1^y &= 1 & \\\\\n* x^0 &= 1 & \\\\\n* x^1 &= x & \\\\\n* (\\pm 0)^\\infty &= +0 & \\\\\n* (\\pm 0)^{-\\infty} &= +\\infty & \\\\\n* (+0)^y &= +0 & \\mathrm{if}\\ y > 0 \\\\\n* (+0)^y &= +\\infty & \\mathrm{if}\\ y < 0 \\\\\n* (-0)^y &= -\\infty & \\mathrm{if}\\ y\\ \\mathrm{is\\ an\\ odd\\ integer\\ and}\\ y < 0 \\\\\n* (-0)^y &= +\\infty & \\mathrm{if}\\ y\\ \\mathrm{is\\ not\\ an\\ odd\\ integer\\ and}\\ y < 0 \\\\\n* (-0)^y &= -0 & \\mathrm{if}\\ y\\ \\mathrm{is\\ an\\ odd\\ integer\\ and}\\ y > 0 \\\\\n* (-0)^y &= +0 & \\mathrm{if}\\ y\\ \\mathrm{is\\ not\\ an\\ odd\\ integer\\ and}\\ y > 0 \\\\\n* (-1)^{\\pm\\infty} &= \\mathrm{NaN} & \\\\\n* x^{\\infty} &= +\\infty & |x| > 1 \\\\\n* x^{\\infty} &= +0 & |x| < 1 \\\\\n* x^{-\\infty} &= +0 & |x| > 1 \\\\\n* x^{-\\infty} &= +\\infty & |x| < 1 \\\\\n* (-\\infty)^y &= (-0)^y & \\\\\n* \\infty^y &= +0 & y < 0 \\\\\n* \\infty^y &= +\\infty & y > 0 \\\\\n* x^y &= \\mathrm{NaN} & \\mathrm{if}\\ y\\ \\mathrm{is\\ not\\ a\\ finite\\ integer\\ and}\\ x < 0\n* \\end{align*}\n* ```\n*\n* ## Notes\n*\n* -   \\\\(\\operatorname{pow}(x,y)\\\\) returns \\\\(x^y\\\\) nearly rounded. In particular, \\\\(\\operatorname{pow}(<\\mathrm{integer}>,<\\mathrm{integer}>)\\\\) **always** returns the correct integer, provided the value is representable.\n* -   The hexadecimal values shown in the source code are the intended values for used constants. Decimal values may be used, provided the compiler will accurately convert decimal to binary in order to produce the hexadecimal values.\n*\n* @param {number} x - base\n* @param {number} y - exponent\n* @returns {number} function value\n*\n* @example\n* var v = pow( 2.0, 3.0 );\n* // returns 8.0\n*\n* @example\n* var v = pow( 4.0, 0.5 );\n* // returns 2.0\n*\n* @example\n* var v = pow( 100.0, 0.0 );\n* // returns 1.0\n*\n* @example\n* var v = pow( 3.141592653589793, 5.0 );\n* // returns ~306.0197\n*\n* @example\n* var v = pow( 3.141592653589793, -0.2 );\n* // returns ~0.7954\n*\n* @example\n* var v = pow( NaN, 3.0 );\n* // returns NaN\n*\n* @example\n* var v = pow( 5.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = pow( NaN, NaN );\n* // returns NaN\n*/\nfunction pow( x, y ) {\n\tvar ahx; // absolute value high word `x`\n\tvar ahy; // absolute value high word `y`\n\tvar ax;  // absolute value `x`\n\tvar hx;  // high word `x`\n\tvar lx;  // low word `x`\n\tvar hy;  // high word `y`\n\tvar ly;  // low word `y`\n\tvar sx;  // sign `x`\n\tvar sy;  // sign `y`\n\tvar y1;\n\tvar hp;\n\tvar lp;\n\tvar t;\n\tvar z;   // y prime\n\tvar j;\n\tvar i;\n\tif ( isnan( x ) || isnan( y ) ) {\n\t\treturn NaN;\n\t}\n\t// Split `y` into high and low words:\n\ttoWords.assign( y, WORDS, 1, 0 );\n\thy = WORDS[ 0 ];\n\tly = WORDS[ 1 ];\n\n\t// Special cases `y`...\n\tif ( ly === 0 ) {\n\t\tif ( y === 0.0 ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\tif ( y === 1.0 ) {\n\t\t\treturn x;\n\t\t}\n\t\tif ( y === -1.0 ) {\n\t\t\treturn 1.0 / x;\n\t\t}\n\t\tif ( y === 0.5 ) {\n\t\t\treturn sqrt( x );\n\t\t}\n\t\tif ( y === -0.5 ) {\n\t\t\treturn 1.0 / sqrt( x );\n\t\t}\n\t\tif ( y === 2.0 ) {\n\t\t\treturn x * x;\n\t\t}\n\t\tif ( y === 3.0 ) {\n\t\t\treturn x * x * x;\n\t\t}\n\t\tif ( y === 4.0 ) {\n\t\t\tx *= x;\n\t\t\treturn x * x;\n\t\t}\n\t\tif ( isInfinite( y ) ) {\n\t\t\treturn yIsInfinite( x, y );\n\t\t}\n\t}\n\t// Split `x` into high and low words:\n\ttoWords.assign( x, WORDS, 1, 0 );\n\thx = WORDS[ 0 ];\n\tlx = WORDS[ 1 ];\n\n\t// Special cases `x`...\n\tif ( lx === 0 ) {\n\t\tif ( hx === 0 ) {\n\t\t\treturn xIsZero( x, y );\n\t\t}\n\t\tif ( x === 1.0 ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\tif (\n\t\t\tx === -1.0 &&\n\t\t\tisOdd( y )\n\t\t) {\n\t\t\treturn -1.0;\n\t\t}\n\t\tif ( isInfinite( x ) ) {\n\t\t\tif ( x === NINF ) {\n\t\t\t\t// `pow( 1/x, -y )`\n\t\t\t\treturn pow( -0.0, -y );\n\t\t\t}\n\t\t\tif ( y < 0.0 ) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\treturn PINF;\n\t\t}\n\t}\n\tif (\n\t\tx < 0.0 &&\n\t\tisInteger( y ) === false\n\t) {\n\t\t// Signal NaN...\n\t\treturn (x-x)/(x-x);\n\t}\n\tax = abs( x );\n\n\t// Remove the sign bits (i.e., get absolute values):\n\tahx = (hx & ABS_MASK)|0; // asm type annotation\n\tahy = (hy & ABS_MASK)|0; // asm type annotation\n\n\t// Extract the sign bits:\n\tsx = (hx >>> HIGH_NUM_NONSIGN_BITS)|0; // asm type annotation\n\tsy = (hy >>> HIGH_NUM_NONSIGN_BITS)|0; // asm type annotation\n\n\t// Determine the sign of the result...\n\tif ( sx && isOdd( y ) ) {\n\t\tsx = -1.0;\n\t} else {\n\t\tsx = 1.0;\n\t}\n\t// Case 1: `|y|` is huge...\n\n\t// |y| > 2^31\n\tif ( ahy > HIGH_BIASED_EXP_31 ) {\n\t\t// `|y| > 2^64`, then must over- or underflow...\n\t\tif ( ahy > HIGH_BIASED_EXP_64 ) {\n\t\t\treturn yIsHuge( x, y );\n\t\t}\n\t\t// Over- or underflow if `x` is not close to unity...\n\n\t\tif ( ahx < HIGH_MAX_NEAR_UNITY ) {\n\t\t\t// y < 0\n\t\t\tif ( sy === 1 ) {\n\t\t\t\t// Signal overflow...\n\t\t\t\treturn sx * HUGE * HUGE;\n\t\t\t}\n\t\t\t// Signal underflow...\n\t\t\treturn sx * TINY * TINY;\n\t\t}\n\t\tif ( ahx > HIGH_BIASED_EXP_0 ) {\n\t\t\t// y > 0\n\t\t\tif ( sy === 0 ) {\n\t\t\t\t// Signal overflow...\n\t\t\t\treturn sx * HUGE * HUGE;\n\t\t\t}\n\t\t\t// Signal underflow...\n\t\t\treturn sx * TINY * TINY;\n\t\t}\n\t\t// At this point, `|1-x|` is tiny (`<= 2^-20`). Suffice to compute `log(x)` by `x - x^2/2 + x^3/3 - x^4/4`.\n\t\tt = logx( LOG_WORKSPACE, ax );\n\t}\n\t// Case 2: `|y|` is not huge...\n\telse {\n\t\tt = log2ax( LOG_WORKSPACE, ax, ahx );\n\t}\n\t// Split `y` into `y1 + y2` and compute `(y1+y2) * (t1+t2)`...\n\ty1 = setLowWord( y, 0 );\n\tlp = ( (y-y1)*t[0] ) + ( y*t[1] );\n\thp = y1 * t[0];\n\tz = lp + hp;\n\n\t// Note: *can* be more performant to use `getHighWord` and `getLowWord` directly, but using `toWords` looks cleaner.\n\ttoWords.assign( z, WORDS, 1, 0 );\n\tj = uint32ToInt32( WORDS[0] );\n\ti = uint32ToInt32( WORDS[1] );\n\n\t// z >= 1024\n\tif ( j >= HIGH_BIASED_EXP_10 ) {\n\t\t// z > 1024\n\t\tif ( ((j-HIGH_BIASED_EXP_10)|i) !== 0 ) {\n\t\t\t// Signal overflow...\n\t\t\treturn sx * HUGE * HUGE;\n\t\t}\n\t\tif ( (lp+OVT) > (z-hp) ) {\n\t\t\t// Signal overflow...\n\t\t\treturn sx * HUGE * HUGE;\n\t\t}\n\t}\n\t// z <= -1075\n\telse if ( (j&ABS_MASK) >= HIGH_1075 ) {\n\t\t// z < -1075\n\t\tif ( ((j-HIGH_NEG_1075)|i) !== 0 ) {\n\t\t\t// Signal underflow...\n\t\t\treturn sx * TINY * TINY;\n\t\t}\n\t\tif ( lp <= (z-hp) ) {\n\t\t\t// Signal underflow...\n\t\t\treturn sx * TINY * TINY;\n\t\t}\n\t}\n\t// Compute `2^(hp+lp)`...\n\tz = pow2( j, hp, lp );\n\n\treturn sx * z;\n}\n\n\n// EXPORTS //\n\nexport default pow;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the exponential function when \\\\( y = \\pm \\infty\\\\).\n*\n* @private\n* @param {number} x - base\n* @param {number} y - exponent\n* @returns {number} function value\n*\n* @example\n* var v = pow( -1.0, Infinity );\n* // returns NaN\n*\n* @example\n* var v = pow( -1.0, -Infinity  );\n* // returns NaN\n*\n* @example\n* var v = pow( 1.0, Infinity );\n* // returns 1.0\n*\n* @example\n* var v = pow( 1.0, -Infinity  );\n* // returns 1.0\n*\n* @example\n* var v = pow( 0.5, Infinity );\n* // returns 0.0\n*\n* @example\n* var v = pow( 0.5, -Infinity  );\n* // returns Infinity\n*\n* @example\n* var v = pow( 1.5, -Infinity  );\n* // returns 0.0\n*\n* @example\n* var v = pow( 1.5, Infinity );\n* // returns Infinity\n*/\nfunction pow( x, y ) {\n\tif ( x === -1.0 ) {\n\t\t// Julia (0.4.2) and Python (2.7.9) return `1.0` (WTF???). JavaScript (`Math.pow`), R, and libm return `NaN`. We choose `NaN`, as the value is indeterminate; i.e., we cannot determine whether `y` is odd, even, or somewhere in between.\n\t\treturn (x-x)/(x-x); // signal NaN\n\t}\n\tif ( x === 1.0 ) {\n\t\treturn 1.0;\n\t}\n\t// (|x| > 1 && y === NINF) || (|x| < 1 && y === PINF)\n\tif ( (abs(x) < 1.0) === (y === PINF) ) {\n\t\treturn 0.0;\n\t}\n\t// (|x| > 1 && y === PINF) || (|x| < 1 && y === NINF)\n\treturn PINF;\n}\n\n\n// EXPORTS //\n\nexport default pow;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isOdd from '@stdlib/math-base-assert-is-odd';\nimport copysign from '@stdlib/math-base-special-copysign';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the exponential function when \\\\(|x| = 0\\\\).\n*\n* @private\n* @param {number} x - base\n* @param {number} y - exponent\n* @returns {number} function value\n*\n* @example\n* var v = pow( 0.0, 2 );\n* // returns 0.0\n*\n* @example\n* var v = pow( -0.0, -9 );\n* // returns -Infinity\n*\n* @example\n* var v = pow( 0.0, -9 );\n* // returns Infinity\n*\n* @example\n* var v = pow( -0.0, 9 );\n* // returns 0.0\n*\n* @example\n* var v = pow( 0.0, -Infinity  );\n* // returns Infinity\n*\n* @example\n* var v = pow( 0.0, Infinity );\n* // returns 0.0\n*/\nfunction pow( x, y ) {\n\tif ( y === NINF ) {\n\t\treturn PINF;\n\t}\n\tif ( y === PINF ) {\n\t\treturn 0.0;\n\t}\n\tif ( y > 0.0 ) {\n\t\tif ( isOdd( y ) ) {\n\t\t\treturn x; // handles +-0\n\t\t}\n\t\treturn 0.0;\n\t}\n\t// y < 0.0\n\tif ( isOdd( y ) ) {\n\t\treturn copysign( PINF, x ); // handles +-0\n\t}\n\treturn PINF;\n}\n\n\n// EXPORTS //\n\nexport default pow;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ABS_MASK from '@stdlib/constants-float64-high-word-abs-mask';\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\n\n\n// VARIABLES //\n\n// 0x3fefffff = 1072693247 => 0 01111111110 11111111111111111111 => biased exponent: 1022 = -1+1023 => 2^-1\nvar HIGH_MAX_NEAR_UNITY = 0x3fefffff|0; // asm type annotation\n\nvar HUGE = 1.0e300;\nvar TINY = 1.0e-300;\n\n\n// MAIN //\n\n/**\n* Evaluates the exponential function when \\\\(|y| > 2^64\\\\).\n*\n* @private\n* @param {number} x - base\n* @param {number} y - exponent\n* @returns {number} overflow or underflow result\n*\n* @example\n* var v = pow( 9.0, 3.6893488147419103e19 );\n* // returns Infinity\n*\n* @example\n* var v = pow( -3.14, -3.6893488147419103e19 );\n* // returns 0.0\n*/\nfunction pow( x, y ) {\n\tvar ahx;\n\tvar hx;\n\n\thx = getHighWord( x );\n\tahx = (hx & ABS_MASK);\n\n\tif ( ahx <= HIGH_MAX_NEAR_UNITY ) {\n\t\tif ( y < 0 ) {\n\t\t\t// Signal overflow...\n\t\t\treturn HUGE * HUGE;\n\t\t}\n\t\t// Signal underflow...\n\t\treturn TINY * TINY;\n\t}\n\t// `x` has a biased exponent greater than or equal to `0`...\n\n\tif ( y > 0 ) {\n\t\t// Signal overflow...\n\t\treturn HUGE * HUGE;\n\t}\n\t// Signal underflow...\n\treturn TINY * TINY;\n}\n\n\n// EXPORTS //\n\nexport default pow;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setLowWord from '@stdlib/number-float64-base-set-low-word';\nimport polyvalW from './polyval_w.js';\n\n\n// VARIABLES //\n\n// 1/LN2\nvar INV_LN2 = 1.44269504088896338700e+00; // 0x3FF71547, 0x652B82FE\n\n// High (24 bits): 1/LN2\nvar INV_LN2_HI = 1.44269502162933349609e+00; // 0x3FF71547, 0x60000000\n\n// Low: 1/LN2\nvar INV_LN2_LO = 1.92596299112661746887e-08; // 0x3E54AE0B, 0xF85DDF44\n\n\n// MAIN //\n\n/**\n* Computes \\\\(\\operatorname{log}(x)\\\\) assuming \\\\(|1-x|\\\\) is small and using the approximation \\\\(x - x^2/2 + x^3/3 - x^4/4\\\\).\n*\n* @private\n* @param {Array} out - output array\n* @param {number} ax - absolute value of `x`\n* @returns {Array} output array containing a tuple comprised of high and low parts\n*\n* @example\n* var t = logx( [ 0.0, 0.0 ], 9.0 ); // => [ t1, t2 ]\n* // returns [ -1265.7236328125, -0.0008163940840404393 ]\n*/\nfunction logx( out, ax ) {\n\tvar t2;\n\tvar t1;\n\tvar t;\n\tvar w;\n\tvar u;\n\tvar v;\n\n\tt = ax - 1.0; // `t` has `20` trailing zeros\n\tw = t * t * polyvalW( t );\n\tu = INV_LN2_HI * t; // `INV_LN2_HI` has `21` significant bits\n\tv = ( t*INV_LN2_LO ) - ( w*INV_LN2 );\n\tt1 = u + v;\n\tt1 = setLowWord( t1, 0 );\n\tt2 = v - (t1 - u);\n\n\tout[ 0 ] = t1;\n\tout[ 1 ] = t2;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default logx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.5;\n\t}\n\treturn 0.5 + (x * (-0.3333333333333333 + (x * 0.25)));\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.5999999999999946;\n\t}\n\treturn 0.5999999999999946 + (x * (0.4285714285785502 + (x * (0.33333332981837743 + (x * (0.272728123808534 + (x * (0.23066074577556175 + (x * 0.20697501780033842))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport setHighWord from '@stdlib/number-float64-base-set-high-word';\nimport setLowWord from '@stdlib/number-float64-base-set-low-word';\nimport uint32ToInt32 from '@stdlib/number-uint32-base-to-int32';\nimport ldexp from '@stdlib/math-base-special-ldexp';\nimport LN2 from '@stdlib/constants-float64-ln-two';\nimport BIAS from '@stdlib/constants-float64-exponent-bias';\nimport ABS_MASK from '@stdlib/constants-float64-high-word-abs-mask';\nimport HIGH_SIGNIFICAND_MASK from '@stdlib/constants-float64-high-word-significand-mask';\nimport polyvalP from './polyval_p.js';\n\n\n// VARIABLES //\n\n// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022\nvar HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation\n\n// 0x3fe00000 = 1071644672 => 0 01111111110 00000000000000000000 => biased exponent: 1022 = -1+1023 => 2^-1\nvar HIGH_BIASED_EXP_NEG_1 = 0x3fe00000|0; // asm type annotation\n\n// TODO: consider making into an external constant\nvar HIGH_NUM_SIGNIFICAND_BITS = 20|0; // asm type annotation\n\n// High: LN2\nvar LN2_HI = 6.93147182464599609375e-01; // 0x3FE62E43, 0x00000000\n\n// Low: LN2\nvar LN2_LO = -1.90465429995776804525e-09; // 0xBE205C61, 0x0CA86C39\n\n\n// MAIN //\n\n/**\n* Computes \\\\(2^{\\mathrm{hp} + \\mathrm{lp}\\\\).\n*\n* @private\n* @param {number} j - high word of `hp + lp`\n* @param {number} hp - first power summand\n* @param {number} lp - second power summand\n* @returns {number} function value\n*\n* @example\n* var z = pow2( 1065961648, -0.3398475646972656, -0.000002438187359100815 );\n* // returns ~0.79\n*/\nfunction pow2( j, hp, lp ) {\n\tvar tmp;\n\tvar t1;\n\tvar t;\n\tvar r;\n\tvar u;\n\tvar v;\n\tvar w;\n\tvar z;\n\tvar n;\n\tvar i;\n\tvar k;\n\n\ti = (j & ABS_MASK)|0; // asm type annotation\n\tk = ((i>>HIGH_NUM_SIGNIFICAND_BITS) - BIAS)|0; // asm type annotation\n\tn = 0;\n\n\t// `|z| > 0.5`, set `n = z+0.5`\n\tif ( i > HIGH_BIASED_EXP_NEG_1 ) {\n\t\tn = (j + (HIGH_MIN_NORMAL_EXP>>(k+1)))>>>0; // asm type annotation\n\t\tk = (((n & ABS_MASK)>>HIGH_NUM_SIGNIFICAND_BITS) - BIAS)|0; // new k for n\n\t\ttmp = ((n & ~(HIGH_SIGNIFICAND_MASK >> k)))>>>0; // asm type annotation\n\t\tt = setHighWord( 0.0, tmp );\n\t\tn = (((n & HIGH_SIGNIFICAND_MASK)|HIGH_MIN_NORMAL_EXP) >> (HIGH_NUM_SIGNIFICAND_BITS-k))>>>0; // eslint-disable-line max-len\n\t\tif ( j < 0 ) {\n\t\t\tn = -n;\n\t\t}\n\t\thp -= t;\n\t}\n\tt = lp + hp;\n\tt = setLowWord( t, 0 );\n\tu = t * LN2_HI;\n\tv = ( (lp - (t-hp))*LN2 ) + ( t*LN2_LO );\n\tz = u + v;\n\tw = v - (z - u);\n\tt = z * z;\n\tt1 = z - ( t*polyvalP( t ) );\n\tr = ( (z*t1) / (t1-2.0) ) - ( w + (z*w) );\n\tz = 1.0 - (r - z);\n\tj = getHighWord( z );\n\tj = uint32ToInt32( j );\n\tj += (n << HIGH_NUM_SIGNIFICAND_BITS)>>>0; // asm type annotation\n\n\t// Check for subnormal output...\n\tif ( (j>>HIGH_NUM_SIGNIFICAND_BITS) <= 0 ) {\n\t\tz = ldexp( z, n );\n\t} else {\n\t\tz = setHighWord( z, j );\n\t}\n\treturn z;\n}\n\n\n// EXPORTS //\n\nexport default pow2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.16666666666666602;\n\t}\n\treturn 0.16666666666666602 + (x * (-0.0027777777777015593 + (x * (0.00006613756321437934 + (x * (-0.0000016533902205465252 + (x * 4.1381367970572385e-8))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Euler's number.\n*\n* @module @stdlib/constants-float64-e\n* @type {number}\n*\n* @example\n* import E from '@stdlib/constants-float64-e';\n* // returns 2.718281828459045\n*/\n\n\n// MAIN //\n\n/**\n* Euler's number.\n*\n* @constant\n* @type {number}\n* @default 2.718281828459045\n* @see [OEIS]{@link https://oeis.org/A001113}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/E_(mathematical_constant)}\n*/\nvar E = 2.718281828459045235360287471352662497757247093699959574966;\n\n\n// EXPORTS //\n\nexport default E;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn Infinity;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 709811.662581658 + (x * (679979.8474157227 + (x * (293136.7857211597 + (x * (74887.54032914672 + (x * (12555.290582413863 + (x * (1443.4299244417066 + (x * (115.24194596137347 + (x * (6.309239205732627 + (x * (0.22668404630224365 + (x * (0.004826466289237662 + (x * 0.00004624429436045379))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0 + (x * (362880.0 + (x * (1026576.0 + (x * (1172700.0 + (x * (723680.0 + (x * (269325.0 + (x * (63273.0 + (x * (9450.0 + (x * (870.0 + (x * (45.0 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.00004624429436045379 + (x * (0.004826466289237662 + (x * (0.22668404630224365 + (x * (6.309239205732627 + (x * (115.24194596137347 + (x * (1443.4299244417066 + (x * (12555.290582413863 + (x * (74887.54032914672 + (x * (293136.7857211597 + (x * (679979.8474157227 + (x * 709811.662581658))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (45.0 + (x * (870.0 + (x * (9450.0 + (x * (63273.0 + (x * (269325.0 + (x * (723680.0 + (x * (1172700.0 + (x * (1026576.0 + (x * (362880.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport E from '@stdlib/constants-float64-e';\nimport EPSILON from '@stdlib/constants-float64-eps';\nimport lanczosSumExpGScaled from './lanczos_sum_expg_scaled.js'; // Lanczos approximation scaled by exp(G)\n\n\n// VARIABLES //\n\nvar G = 10.90051099999999983936049829935654997826;\n\n\n// MAIN //\n\n/**\n* Evaluate the beta function.\n*\n* @param {NonNegativeNumber} a - input value\n* @param {NonNegativeNumber} b - input value\n* @returns {number} evaluated beta function\n*\n* @example\n* var v = beta( 0.0, 0.5 );\n* // returns Infinity\n*\n* @example\n* var v = beta( 1.0, 1.0 );\n* // returns 1.0\n*\n* @example\n* var v = beta( -1.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = beta( 5.0, 0.2 );\n* // returns ~3.382\n*\n* @example\n* var v = beta( 4.0, 1.0 );\n* // returns 0.25\n*\n* @example\n* var v = beta( NaN, 2.0 );\n* // returns NaN\n*/\nfunction beta( a, b ) {\n\tvar ambh;\n\tvar agh;\n\tvar bgh;\n\tvar cgh;\n\tvar res;\n\tvar tmp;\n\tvar c;\n\n\tif ( isnan( a ) || isnan( b ) ) {\n\t\treturn NaN;\n\t}\n\tif ( a < 0.0 || b < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( b === 1.0 ) {\n\t\treturn 1.0 / a;\n\t}\n\tif ( a === 1.0 ) {\n\t\treturn 1.0 / b;\n\t}\n\tc = a + b;\n\tif ( c < EPSILON ) {\n\t\tres = c / a;\n\t\tres /= b;\n\t\treturn res;\n\t}\n\n\t// Special cases:\n\tif ( c === a && b < EPSILON ) {\n\t\treturn 1.0 / b;\n\t}\n\tif ( c === b && a < EPSILON ) {\n\t\treturn 1.0 / a;\n\t}\n\n\tif ( a < b ) {\n\t\t// Swap `a` and `b`:\n\t\ttmp = b;\n\t\tb = a;\n\t\ta = tmp;\n\t}\n\n\t// Lanczos calculation:\n\tagh = a + G - 0.5;\n\tbgh = b + G - 0.5;\n\tcgh = c + G - 0.5;\n\tres = lanczosSumExpGScaled( a ) * ( lanczosSumExpGScaled( b )/lanczosSumExpGScaled( c ) ); // eslint-disable-line max-len\n\tambh = a - 0.5 - b;\n\tif ( ( abs( b*ambh ) < ( cgh*100.0 ) ) && a > 100.0 ) {\n\t\t// Special case where the base of the power term is close to 1; compute `(1+x)^y` instead:\n\t\tres *= exp( ambh * log1p( -b/cgh ) );\n\t} else {\n\t\tres *= pow( agh/cgh, ambh );\n\t}\n\tif ( cgh > 1.0e10 ) {\n\t\t// This avoids possible overflow, but appears to be marginally less accurate:\n\t\tres *= pow( (agh/cgh)*(bgh/cgh), b );\n\t} else {\n\t\tres *= pow( (agh*bgh)/(cgh*cgh), b );\n\t}\n\tres *= sqrt( E/bgh);\n\treturn res;\n}\n\n\n// EXPORTS //\n\nexport default beta;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FDLIBM]{@link http://www.netlib.org/fdlibm/s_expm1.c} and [FreeBSD]{@link https://svnweb.freebsd.org/base/release/12.2.0/lib/msun/src/s_expm1.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport setHighWord from '@stdlib/number-float64-base-set-high-word';\nimport fromWords from '@stdlib/number-float64-base-from-words';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport FLOAT64_EXPONENT_BIAS from '@stdlib/constants-float64-exponent-bias';\nimport HALF_LN2 from '@stdlib/constants-float64-half-ln-two';\nimport polyval from './polyval_q.js';\n\n\n// VARIABLES //\n\nvar OVERFLOW_THRESHOLD = 7.09782712893383973096e+02; // 0x40862E42 0xFEFA39EF\n\n// High and low words of ln(2):\nvar LN2_HI = 6.93147180369123816490e-01; // 0x3FE62E42 0xFEE00000\nvar LN2_LO = 1.90821492927058770002e-10; // 0x3DEA39EF 0x35793C76\n\n// 1 / ln(2):\nvar LN2_INV = 1.44269504088896338700e+00; // 0x3FF71547 0x652B82FE\n\n// ln(2) * 56:\nvar LN2x56 = 3.88162421113569373274e+01; // 0x4043687A 0x9F1AF2B1\n\n// ln(2) * 1.5:\nvar LN2_HALFX3 = 1.03972077083991796413e+00; // 0x3FF0A2B2 0x3F3BAB73\n\n\n// MAIN //\n\n/**\n* Computes `exp(x) - 1`.\n*\n* ## Method\n*\n* 1.  Given \\\\(x\\\\), we use argument reduction to find \\\\(r\\\\) and an integer \\\\(k\\\\) such that\n*\n*     ```tex\n*     x = k \\cdot \\ln(2) + r\n*     ```\n*\n*     where\n*\n*     ```tex\n*     |r| \\leq \\frac{\\ln(2)}{2} \\approx 0.34658\n*     ```\n*\n*     <!-- <note> -->\n*\n*     A correction term \\\\(c\\\\) will need to be computed to compensate for the error in \\\\(r\\\\) when rounded to a floating-point number.\n*\n*     <!-- </note> -->\n*\n* 2.  To approximate \\\\(\\operatorname{expm1}(r)\\\\), we use a special rational function on the interval \\\\(\\[0,0.34658]\\\\). Since\n*\n*     ```tex\n*     r \\frac{e^r + 1}{e^r - 1} = 2 + \\frac{r^2}{6} - \\frac{r^4}{360} + \\ldots\n*     ```\n*\n*     we define \\\\(\\operatorname{R1}(r^2)\\\\) by\n*\n*     ```tex\n*     r \\frac{e^r + 1}{e^r - 1} = 2 + \\frac{r^2}{6} \\operatorname{R1}(r^2)\n*     ```\n*\n*     That is,\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{R1}(r^2) &= \\frac{6}{r} \\biggl(\\frac{e^r+1}{e^r-1} - \\frac{2}{r}\\biggr) \\\\\n*     &= \\frac{6}{r} \\biggl( 1 + 2 \\biggl(\\frac{1}{e^r-1} - \\frac{1}{r}\\biggr)\\biggr) \\\\\n*     &= 1 - \\frac{r^2}{60} + \\frac{r^4}{2520} - \\frac{r^6}{100800} + \\ldots\n*     \\end{align*}\n*     ```\n*\n*     We use a special Remes algorithm on \\\\(\\[0,0.347]\\\\) to generate a polynomial of degree \\\\(5\\\\) in \\\\(r^2\\\\) to approximate \\\\(\\mathrm{R1}\\\\). The maximum error of this polynomial approximation is bounded by \\\\(2^{-61}\\\\). In other words,\n*\n*     ```tex\n*     \\operatorname{R1}(z) \\approx 1 + \\mathrm{Q1} \\cdot z + \\mathrm{Q2} \\cdot z^2 + \\mathrm{Q3} \\cdot z^3 + \\mathrm{Q4} \\cdot z^4 + \\mathrm{Q5} \\cdot z^5\n*     ```\n*\n*     where\n*\n*     ```tex\n*     \\begin{align*}\n*     \\mathrm{Q1} &= -1.6666666666666567384\\mbox{e-}2 \\\\\n*     \\mathrm{Q2} &= 3.9682539681370365873\\mbox{e-}4 \\\\\n*     \\mathrm{Q3} &= -9.9206344733435987357\\mbox{e-}6 \\\\\n*     \\mathrm{Q4} &= 2.5051361420808517002\\mbox{e-}7 \\\\\n*     \\mathrm{Q5} &= -6.2843505682382617102\\mbox{e-}9\n*     \\end{align*}\n*     ```\n*\n*     where \\\\(z = r^2\\\\) and the values of \\\\(\\mathrm{Q1}\\\\) to \\\\(\\mathrm{Q5}\\\\) are listed in the source. The error is bounded by\n*\n*     ```tex\n*     \\biggl| 1 + \\mathrm{Q1} \\cdot z + \\ldots + \\mathrm{Q5} \\cdot z - \\operatorname{R1}(z) \\biggr| \\leq 2^{-61}\n*     ```\n*\n*     \\\\(\\operatorname{expm1}(r) = e^r - 1\\\\) is then computed by the following specific way which minimizes the accumulated rounding error\n*\n*     ```tex\n*     \\operatorname{expm1}(r) = r + \\frac{r^2}{2} + \\frac{r^3}{2} \\biggl( \\frac{3 - (\\mathrm{R1} + \\mathrm{R1} \\cdot \\frac{r}{2})}{6 - r ( 3 - \\mathrm{R1} \\cdot \\frac{r}{2})} \\biggr)\n*     ```\n*\n*     To compensate for the error in the argument reduction, we use\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{expm1}(r+c) &= \\operatorname{expm1}(r) + c + \\operatorname{expm1}(r) \\cdot c \\\\\n*     &\\approx \\operatorname{expm1}(r) + c + rc\n*     \\end{align*}\n*     ```\n*\n*     Thus, \\\\(c + rc\\\\) will be added in as the correction terms for \\\\(\\operatorname{expm1}(r+c)\\\\). Now, we can rearrange the term to avoid optimization screw up.\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{expm1}(r+c) &\\approx r - \\biggl( \\biggl( r + \\biggl( \\frac{r^2}{2} \\biggl( \\frac{\\mathrm{R1} - (3 - \\mathrm{R1} \\cdot \\frac{r}{2})}{6 - r (3 - \\mathrm{R1} \\cdot \\frac{r}{2})} \\biggr) - c \\biggr) - c \\biggr) - \\frac{r^2}{2} \\biggr) \\\\\n*     &= r - \\mathrm{E}\n*     \\end{align*}\n*     ```\n*\n* 3.  To scale back to obtain \\\\(\\operatorname{expm1}(x)\\\\), we have (from step 1)\n*\n*     ```tex\n*     \\operatorname{expm1}(x) = \\begin{cases}\n*     2^k  (\\operatorname{expm1}(r) + 1) - 1 \\\\\n*     2^k (\\operatorname{expm1}(r) + (1-2^{-k}))\n*     \\end{cases}\n*     ```\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{expm1}(\\infty) &= \\infty \\\\\n* \\operatorname{expm1}(-\\infty) &= -1 \\\\\n* \\operatorname{expm1}(\\mathrm{NaN}) &= \\mathrm{NaN}\n* \\end{align*}\n* ```\n*\n* ## Notes\n*\n* -   For finite arguments, only \\\\(\\operatorname{expm1}(0) = 0\\\\) is exact.\n*\n* -   To save one multiplication, we scale the coefficient \\\\(\\mathrm{Qi}\\\\) to \\\\(\\mathrm{Qi} \\cdot {2^i}\\\\) and replace \\\\(z\\\\) by \\\\(\\frac{x^2}{2}\\\\).\n*\n* -   To achieve maximum accuracy, we compute \\\\(\\operatorname{expm1}(x)\\\\) by\n*\n*     -   if \\\\(x < -56 \\cdot \\ln(2)\\\\), return \\\\(-1.0\\\\) (raise inexact if \\\\(x\\\\) does not equal \\\\(\\infty\\\\))\n*\n*     -   if \\\\(k = 0\\\\), return \\\\(r-\\mathrm{E}\\\\)\n*\n*     -   if \\\\(k = -1\\\\), return \\\\(\\frac{(r-\\mathrm{E})-1}{2}\\\\)\n*\n*     -   if \\\\(k = 1\\\\),\n*\n*         -   if \\\\(r < -0.25\\\\), return \\\\(2((r+0.5)- \\mathrm{E})\\\\)\n*         -   else return \\\\(1+2(r-\\mathrm{E})\\\\)\n*\n*     -   if \\\\(k < -2\\\\) or \\\\(k > 56\\\\), return \\\\(2^k(1-(\\mathrm{E}-r)) - 1\\\\) (or \\\\(e^x-1\\\\))\n*\n*     -   if \\\\(k \\leq 20\\\\), return \\\\(2^k((1-2^{-k})-(\\mathrm{E}-r))\\\\)\n*\n*     -   else return \\\\(2^k(1-((\\mathrm{E}+2^{-k})-r))\\\\)\n*\n* -   For IEEE 754 double, if \\\\(x > 7.09782712893383973096\\mbox{e+}02\\\\), then \\\\(\\operatorname{expm1}(x)\\\\) will overflow.\n*\n* -   The hexadecimal values listed in the source are the intended ones for the implementation constants. Decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the intended hexadecimal values.\n*\n* -   According to an error analysis, the error is always less than \\\\(1\\\\) ulp (unit in the last place).\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = expm1( 0.2 );\n* // returns ~0.221\n*\n* @example\n* var v = expm1( -9.0 );\n* // returns ~-0.9999\n*\n* @example\n* var v = expm1( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = expm1( NaN );\n* // returns NaN\n*/\nfunction expm1( x ) {\n\tvar halfX;\n\tvar twopk;\n\tvar sign;\n\tvar hi;\n\tvar lo;\n\tvar hx;\n\tvar r1;\n\tvar y;\n\tvar z;\n\tvar c;\n\tvar t;\n\tvar e;\n\tvar k;\n\n\tif ( x === PINF || isnan( x ) ) {\n\t\treturn x;\n\t}\n\tif ( x === NINF ) {\n\t\treturn -1.0;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn x; // handles +-0 (IEEE 754-2008)\n\t}\n\t// Set y = |x|:\n\tif ( x < 0.0 ) {\n\t\tsign = true;\n\t\ty = -x;\n\t} else {\n\t\tsign = false;\n\t\ty = x;\n\t}\n\t// Filter out huge and non-finite arguments...\n\tif ( y >= LN2x56 ) { // if |x| >= 56*ln(2)\n\t\tif ( sign ) { // if x <= -56*ln(2)\n\t\t\treturn -1.0;\n\t\t}\n\t\tif ( y >= OVERFLOW_THRESHOLD ) { // if |x| >= 709.78...\n\t\t\treturn PINF;\n\t\t}\n\t}\n\t// Extract the more significant bits from |x|:\n\thx = getHighWord( y )|0; // asm type annotation\n\n\t// Argument reduction...\n\tif ( y > HALF_LN2 ) { // if |x| > 0.5*ln(2)\n\t\tif ( y < LN2_HALFX3 ) { // if |x| < 1.5*ln(2)\n\t\t\tif ( sign ) {\n\t\t\t\thi = x + LN2_HI;\n\t\t\t\tlo = -LN2_LO;\n\t\t\t\tk = -1;\n\t\t\t} else {\n\t\t\t\thi = x - LN2_HI;\n\t\t\t\tlo = LN2_LO;\n\t\t\t\tk = 1;\n\t\t\t}\n\t\t} else {\n\t\t\tif ( sign ) {\n\t\t\t\tk = (LN2_INV*x) - 0.5;\n\t\t\t} else {\n\t\t\t\tk = (LN2_INV*x) + 0.5;\n\t\t\t}\n\t\t\tk |= 0; // use a bitwise OR to cast `k` to an integer (see also asm.js type annotations: http://asmjs.org/spec/latest/#annotations)\n\t\t\tt = k;\n\t\t\thi = x - (t*LN2_HI); // t*ln2_hi is exact here\n\t\t\tlo = t * LN2_LO;\n\t\t}\n\t\tx = hi - lo;\n\t\tc = (hi-x) - lo;\n\t}\n\t// If |x| < 2**-54 => high word: 0 01111001001 00000000000000000000 => 0x3c900000 = 1016070144  => exponent = 01111001001 = 969 = 1023-54\n\telse if ( hx < 1016070144 ) {\n\t\treturn x;\n\t} else {\n\t\tk = 0;\n\t}\n\t// x is now in primary range...\n\thalfX = 0.5 * x;\n\tz = x * halfX;\n\n\tr1 = 1.0 + ( z * polyval( z ) );\n\n\tt = 3.0 - (r1*halfX);\n\te = z * ( (r1-t) / (6.0 - (x*t)) );\n\tif ( k === 0 ) {\n\t\treturn x - ( (x*e) - z );\t// c is 0\n\t}\n\ttwopk = fromWords( (FLOAT64_EXPONENT_BIAS+k)<<20, 0 ); // 2^k\n\te = ( x * (e-c) ) - c;\n\te -= z;\n\tif ( k === -1 ) {\n\t\treturn ( 0.5*(x-e) ) - 0.5;\n\t}\n\tif ( k === 1 ) {\n\t\tif ( x < -0.25 ) {\n\t\t\treturn -2.0 * ( e - (x+0.5) );\n\t\t}\n\t\treturn 1.0 + ( 2.0 * (x-e) );\n\t}\n\tif ( k <= -2 || k > 56 ) { // suffice to return exp(x)-1\n\t\ty = 1.0 - (e-x);\n\t\tif ( k === 1024 ) {\n\t\t\t// Add k to y's exponent:\n\t\t\thi = (getHighWord( y ) + (k<<20))|0; // asm type annotation\n\t\t\ty = setHighWord( y, hi );\n\t\t} else {\n\t\t\ty *= twopk;\n\t\t}\n\t\treturn y - 1.0;\n\t}\n\tt = 1.0;\n\tif ( k < 20 ) {\n\t\t// 0x3ff00000 - (0x200000>>k) = 1072693248 - (0x200000>>k) => 0x3ff00000 = 00111111111100000000000000000000 and 0x200000 = 0 00000000010 00000000000000000000\n\t\thi = (1072693248 - (0x200000>>k))|0; // asm type annotation\n\t\tt = setHighWord( t, hi ); // t=1-2^-k\n\t\ty = t - (e-x);\n\t} else {\n\t\thi = ( (FLOAT64_EXPONENT_BIAS-k)<<20 )|0; // asm type annotation\n\t\tt = setHighWord( t, hi ); // t=2^-k\n\t\ty = x - (e+t);\n\t\ty += 1.0;\n\t}\n\ty *= twopk;\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default expm1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* One half times the natural logarithm of 2.\n*\n* @module @stdlib/constants-float64-half-ln-two\n* @type {number}\n*\n* @example\n* import HALF_LN2 from '@stdlib/constants-float64-half-ln-two';\n* // returns 3.46573590279972654709e-01\n*/\n\n// MAIN //\n\n/**\n* One half times the natural logarithm of 2.\n*\n* ```tex\n* \\frac{\\ln 2}{2}\n* ```\n*\n* @constant\n* @type {number}\n* @default 3.46573590279972654709e-01\n*/\nvar HALF_LN2 = 3.46573590279972654709e-01; // 0x3FD62E42 0xFEFA39EF\n\n\n// EXPORTS //\n\nexport default HALF_LN2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.03333333333333313;\n\t}\n\treturn -0.03333333333333313 + (x * (0.0015873015872548146 + (x * (-0.0000793650757867488 + (x * (0.000004008217827329362 + (x * -2.0109921818362437e-7))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns the minimum value.\n*\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {number} minimum value\n*\n* @example\n* var v = min( 3.14, 4.2 );\n* // returns 3.14\n*\n* @example\n* var v = min( 3.14, NaN );\n* // returns NaN\n*\n* @example\n* var v = min( +0.0, -0.0 );\n* // returns -0.0\n*/\nfunction min( x, y ) {\n\tif ( isnan( x ) || isnan( y ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x === NINF || y === NINF ) {\n\t\treturn NINF;\n\t}\n\tif ( x === y && x === 0.0 ) {\n\t\tif ( isNegativeZero( x ) ) {\n\t\t\treturn x;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( x < y ) {\n\t\treturn x;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default min;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/12.2.0/lib/msun/src/k_cos.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport polyval13 from './polyval_c13.js';\nimport polyval46 from './polyval_c46.js';\n\n\n// MAIN //\n\n/**\n* Computes the cosine on \\\\( \\[-\\pi/4, \\pi/4] \\\\), where \\\\( \\pi/4 \\approx 0.785398164 \\\\).\n*\n* ## Method\n*\n* -   Since \\\\( \\cos(-x) = \\cos(x) \\\\), we need only to consider positive \\\\(x\\\\).\n*\n* -   If \\\\( x < 2^{-27} \\\\), return \\\\(1\\\\) which is inexact if \\\\( x \\ne 0 \\\\).\n*\n* -   \\\\( cos(x) \\\\) is approximated by a polynomial of degree \\\\(14\\\\) on \\\\( \\[0,\\pi/4] \\\\).\n*\n*     ```tex\n*     \\cos(x) \\approx 1 - \\frac{x \\cdot x}{2} + C_1 \\cdot x^4 + \\ldots + C_6 \\cdot x^{14}\n*     ```\n*\n*     where the Remez error is\n*\n*     ```tex\n*     \\left| \\cos(x) - \\left( 1 - \\frac{x^2}{2} + C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{15} \\right) \\right| \\le 2^{-58}\n*     ```\n*\n* -   Let \\\\( C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{14} \\\\), then\n*\n*     ```tex\n*     \\cos(x) \\approx 1 - \\frac{x \\cdot x}{2} + r\n*     ```\n*\n*     Since\n*\n*     ```tex\n*     \\cos(x+y) \\approx \\cos(x) - \\sin(x) \\cdot y \\approx \\cos(x) - x \\cdot y\n*     ```\n*\n*     a correction term is necessary in \\\\( \\cos(x) \\\\). Hence,\n*\n*     ```tex\n*     \\cos(x+y) = 1 - \\left( \\frac{x \\cdot x}{2} - (r - x \\cdot y) \\right)\n*     ```\n*\n*     For better accuracy, rearrange to\n*\n*     ```tex\n*     \\cos(x+y) \\approx w + \\left( t + ( r - x \\cdot y ) \\right)\n*     ```\n*\n*     where \\\\( w = 1 - \\frac{x \\cdot x}{2} \\\\) and \\\\( t \\\\) is a tiny correction term (\\\\( 1 - \\frac{x \\cdot x}{2} = w + t \\\\) exactly in infinite precision). The exactness of \\\\(w + t\\\\) in infinite precision depends on \\\\(w\\\\) and \\\\(t\\\\) having the same precision as \\\\(x\\\\).\n*\n* @param {number} x - input value (in radians, assumed to be bounded by ~pi/4 in magnitude)\n* @param {number} y - tail of `x`\n* @returns {number} cosine\n*\n* @example\n* var v = kernelCos( 0.0, 0.0 );\n* // returns ~1.0\n*\n* @example\n* var v = kernelCos( 3.141592653589793/6.0, 0.0 );\n* // returns ~0.866\n*\n* @example\n* var v = kernelCos( 0.785, -1.144e-17 );\n* // returns ~0.707\n*\n* @example\n* var v = kernelCos( NaN, 0.0 );\n* // returns NaN\n*/\nfunction kernelCos( x, y ) {\n\tvar hz;\n\tvar r;\n\tvar w;\n\tvar z;\n\n\tz = x * x;\n\tw = z * z;\n\tr = z * polyval13( z );\n\tr += w * w * polyval46( z );\n\thz = 0.5 * z;\n\tw = 1.0 - hz;\n\treturn w + ( ((1.0-w) - hz) + ((z*r) - (x*y)) );\n}\n\n\n// EXPORTS //\n\nexport default kernelCos;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.0416666666666666;\n\t}\n\treturn 0.0416666666666666 + (x * (-0.001388888888887411 + (x * 0.00002480158728947673))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -2.7557314351390663e-7;\n\t}\n\treturn -2.7557314351390663e-7 + (x * (2.087572321298175e-9 + (x * -1.1359647557788195e-11))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar S1 = -1.66666666666666324348e-01; // 0xBFC55555, 0x55555549\nvar S2 = 8.33333333332248946124e-03;  // 0x3F811111, 0x1110F8A6\nvar S3 = -1.98412698298579493134e-04; // 0xBF2A01A0, 0x19C161D5\nvar S4 = 2.75573137070700676789e-06;  // 0x3EC71DE3, 0x57B1FE7D\nvar S5 = -2.50507602534068634195e-08; // 0xBE5AE5E6, 0x8A2B9CEB\nvar S6 = 1.58969099521155010221e-10;  // 0x3DE5D93A, 0x5ACFD57C\n\n\n// MAIN //\n\n/**\n* Computes the sine on \\\\( \\approx \\[-\\pi/4, \\pi/4] \\\\) (except on \\\\(-0\\\\)), where \\\\( \\pi/4 \\approx 0.7854 \\\\).\n*\n* ## Method\n*\n* -   Since \\\\( \\sin(-x) = -\\sin(x) \\\\), we need only to consider positive \\\\(x\\\\).\n*\n* -   Callers must return \\\\( \\sin(-0) = -0 \\\\) without calling here since our odd polynomial is not evaluated in a way that preserves \\\\(-0\\\\). Callers may do the optimization \\\\( \\sin(x) \\approx x \\\\) for tiny \\\\(x\\\\).\n*\n* -   \\\\( \\sin(x) \\\\) is approximated by a polynomial of degree \\\\(13\\\\) on \\\\( \\left\\[0,\\tfrac{pi}{4}\\right] \\\\)\n*\n*     ```tex\n*     \\sin(x) \\approx x + S_1 \\cdot x^3 + \\ldots + S_6 \\cdot x^{13}\n*     ```\n*\n*     where\n*\n*     ```tex\n*     \\left| \\frac{\\sin(x)}{x} \\left( 1 + S_1 \\cdot x + S_2 \\cdot x + S_3 \\cdot x + S_4 \\cdot x + S_5 \\cdot x + S_6 \\cdot x \\right) \\right| \\le 2^{-58}\n*     ```\n*\n* -   We have\n*\n*     ```tex\n*     \\sin(x+y) = \\sin(x) + \\sin'(x') \\cdot y \\approx \\sin(x) + (1-x*x/2) \\cdot y\n*     ```\n*\n*     For better accuracy, let\n*\n*     ```tex\n*     r = x^3 * \\left( S_2 + x^2 \\cdot \\left( S_3 + x^2 * \\left( S_4 + x^2 \\cdot ( S_5+x^2 \\cdot S_6 ) \\right) \\right) \\right)\n*     ```\n*\n*     then\n*\n*     ```tex\n*     \\sin(x) = x + \\left( S_1 \\cdot x + ( x \\cdot (r-y/2) + y ) \\right)\n*     ```\n*\n* @param {number} x - input value (in radians, assumed to be bounded by `~pi/4` in magnitude)\n* @param {number} y - tail of `x`\n* @returns {number} sine\n*\n* @example\n* var v = kernelSin( 0.0, 0.0 );\n* // returns ~0.0\n*\n* @example\n* var v = kernelSin( 3.141592653589793/6.0, 0.0 );\n* // returns ~0.5\n*\n* @example\n* var v = kernelSin( 0.619, 9.279e-18 );\n* // returns ~0.58\n*\n* @example\n* var v = kernelSin( NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var v = kernelSin( 3.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = kernelSin( NaN, NaN );\n* // returns NaN\n*/\nfunction kernelSin( x, y ) {\n\tvar r;\n\tvar v;\n\tvar w;\n\tvar z;\n\n\tz = x * x;\n\tw = z * z;\n\tr = S2 + (z * (S3 + (z*S4))) + (z * w * (S5 + (z*S6)));\n\tv = z * x;\n\tif ( y === 0.0 ) {\n\t\treturn x + (v * (S1 + (z*r)));\n\t}\n\treturn x - (((z*((0.5*y) - (v*r))) - y) - (v*S1));\n}\n\n\n// EXPORTS //\n\nexport default kernelSin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_sin.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ABS_MASK from '@stdlib/constants-float64-high-word-abs-mask';\nimport EXPONENT_MASK from '@stdlib/constants-float64-high-word-exponent-mask';\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport kernelCos from '@stdlib/math-base-special-kernel-cos';\nimport kernelSin from '@stdlib/math-base-special-kernel-sin';\nimport rempio2 from '@stdlib/math-base-special-rempio2';\n\n\n// VARIABLES //\n\n// High word for PI/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011\nvar PIO4_HIGH_WORD = 0x3fe921fb|0; // asm type annotation\n\n// 2^-26 = 1.4901161193847656e-8 => 0011111001010000000000000000000000000000000000000000000000000000 => high word => 00111110010100000000000000000000 => 0x3e500000 = 1045430272\nvar SMALL_HIGH_WORD = 0x3e500000|0; // asm type annotation\n\n// Array for storing remainder elements:\nvar Y = [ 0.0, 0.0 ];\n\n\n// MAIN //\n\n/**\n* Computes the sine of a number.\n*\n* ## Method\n*\n* -   Let \\\\(S\\\\), \\\\(C\\\\), and \\\\(T\\\\) denote the \\\\(\\sin\\\\), \\\\(\\cos\\\\), and \\\\(\\tan\\\\), respectively, on \\\\(\\[-\\pi/4, +\\pi/4\\]\\\\).\n*\n* -   Reduce the argument \\\\(x\\\\) to \\\\(y1+y2 = x-k\\pi/2\\\\) in \\\\(\\[-\\pi/4, +\\pi/4\\]\\\\), and let \\\\(n = k \\mod 4\\\\).\n*\n* -   We have\n*\n*     | n | sin(x) | cos(x) | tan(x) |\n*     | - | ------ | ------ | ------ |\n*     | 0 |   S    |   C    |    T   |\n*     | 1 |   C    |  -S    |  -1/T  |\n*     | 2 |  -S    |  -C    |    T   |\n*     | 3 |  -C    |   S    |  -1/T  |\n*\n* @param {number} x - input value (in radians)\n* @returns {number} sine\n*\n* @example\n* var v = sin( 0.0 );\n* // returns ~0.0\n*\n* @example\n* var v = sin( 3.141592653589793/2.0 );\n* // returns ~1.0\n*\n* @example\n* var v = sin( -3.141592653589793/6.0 );\n* // returns ~-0.5\n*\n* @example\n* var v = sin( NaN );\n* // returns NaN\n*/\nfunction sin( x ) {\n\tvar ix;\n\tvar n;\n\n\tix = getHighWord( x );\n\tix &= ABS_MASK;\n\n\t// Case: |x| ~< π/4\n\tif ( ix <= PIO4_HIGH_WORD ) {\n\t\t// Case: |x| ~< 2^-26\n\t\tif ( ix < SMALL_HIGH_WORD ) {\n\t\t\treturn x;\n\t\t}\n\t\treturn kernelSin( x, 0.0 );\n\t}\n\t// Case: x is NaN or infinity\n\tif ( ix >= EXPONENT_MASK ) {\n\t\treturn NaN;\n\t}\n\t// Argument reduction...\n\tn = rempio2( x, Y );\n\tswitch ( n & 3 ) {\n\tcase 0:\n\t\treturn kernelSin( Y[ 0 ], Y[ 1 ] );\n\tcase 1:\n\t\treturn kernelCos( Y[ 0 ], Y[ 1 ] );\n\tcase 2:\n\t\treturn -kernelSin( Y[ 0 ], Y[ 1 ] );\n\tdefault:\n\t\treturn -kernelCos( Y[ 0 ], Y[ 1 ] );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default sin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport SQRT_TWO_PI from '@stdlib/constants-float64-sqrt-two-pi';\nimport pow from '@stdlib/math-base-special-pow';\nimport exp from '@stdlib/math-base-special-exp';\nimport polyval from './polyval_s.js';\n\n\n// VARIABLES //\n\nvar MAX_STIRLING = 143.01608;\n\n\n// MAIN //\n\n/**\n* Evaluates the gamma function using Stirling's formula. The polynomial is valid for \\\\(33 \\leq x \\leq 172\\\\).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} function value\n*/\nfunction gamma( x ) {\n\tvar w;\n\tvar y;\n\tvar v;\n\n\tw = 1.0 / x;\n\tw = 1.0 + ( w * polyval( w ) );\n\ty = exp( x );\n\n\t// Check `x` to avoid `pow()` overflow...\n\tif ( x > MAX_STIRLING ) {\n\t\tv = pow( x, ( 0.5*x ) - 0.25 );\n\t\ty = v * (v/y);\n\t} else {\n\t\ty = pow( x, x-0.5 ) / y;\n\t}\n\treturn SQRT_TWO_PI * y * w;\n}\n\n\n// EXPORTS //\n\nexport default gamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.08333333333334822;\n\t}\n\treturn 0.08333333333334822 + (x * (0.0034722222160545866 + (x * (-0.0026813261780578124 + (x * (-0.00022954996161337813 + (x * 0.0007873113957930937))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of the mathematical constant `π` times `2`.\n*\n* @module @stdlib/constants-float64-sqrt-two-pi\n* @type {number}\n*\n* @example\n* import SQRT_TWO_PI from '@stdlib/constants-float64-sqrt-two-pi';\n* // returns 2.5066282746310007\n*/\n\n\n// MAIN //\n\n/**\n* Square root of the mathematical constant `π` times `2`.\n*\n* @constant\n* @type {number}\n* @default 2.5066282746310007\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar SQRT_TWO_PI = 2.506628274631000502415765284811045253e+00;\n\n\n// EXPORTS //\n\nexport default SQRT_TWO_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The Euler-Mascheroni constant.\n*\n* @module @stdlib/constants-float64-eulergamma\n* @type {number}\n*\n* @example\n* import GAMMA from '@stdlib/constants-float64-eulergamma';\n* // returns 0.5772156649015329\n*/\n\n\n// MAIN //\n\n/**\n* The Euler-Mascheroni constant.\n*\n* @constant\n* @type {number}\n* @default 0.5772156649015329\n* @see [OEIS]{@link http://oeis.org/A001620}\n* @see [Mathworld]{@link http://mathworld.wolfram.com/Euler-MascheroniConstant.html}\n*/\nvar GAMMA = 0.577215664901532860606512090082402431042;\n\n\n// EXPORTS //\n\nexport default GAMMA;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport EULER from '@stdlib/constants-float64-eulergamma';\n\n\n// MAIN //\n\n/**\n* Evaluates the gamma function using a small-value approximation.\n*\n* @private\n* @param {number} x - input value\n* @param {number} z - scale factor\n* @returns {number} function value\n*/\nfunction gamma( x, z ) {\n\treturn z / ( (1.0+( EULER*x )) * x );\n}\n\n\n// EXPORTS //\n\nexport default gamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\nimport abs from '@stdlib/math-base-special-abs';\nimport floor from '@stdlib/math-base-special-floor';\nimport sin from '@stdlib/math-base-special-sin';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PI from '@stdlib/constants-float64-pi';\nimport stirlingApprox from './stirling_approximation.js';\nimport smallApprox from './small_approximation.js';\nimport rateval from './rational_pq.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the gamma function.\n*\n* ## Method\n*\n* 1.  Arguments \\\\(|x| \\leq 34\\\\) are reduced by recurrence and the function approximated by a rational function of degree \\\\(6/7\\\\) in the interval \\\\((2,3)\\\\).\n* 2.  Large negative arguments are made positive using a reflection formula.\n* 3.  Large arguments are handled by Stirling's formula.\n*\n* ## Notes\n*\n* -   Relative error:\n*\n*     | arithmetic | domain    | # trials | peak    | rms     |\n*     |:----------:|:---------:|:--------:|:-------:|:-------:|\n*     | DEC        | -34,34    | 10000    | 1.3e-16 | 2.5e-17 |\n*     | IEEE       | -170,-33  | 20000    | 2.3e-15 | 3.3e-16 |\n*     | IEEE       | -33, 33   | 20000    | 9.4e-16 | 2.2e-16 |\n*     | IEEE       | 33, 171.6 | 20000    | 2.3e-15 | 3.2e-16 |\n*\n* -   Error for arguments outside the test range will be larger owing to error amplification by the exponential function.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = gamma( 4.0 );\n* // returns 6.0\n*\n* @example\n* var v = gamma( -1.5 );\n* // returns ~2.363\n*\n* @example\n* var v = gamma( -0.5 );\n* // returns ~-3.545\n*\n* @example\n* var v = gamma( 0.5 );\n* // returns ~1.772\n*\n* @example\n* var v = gamma( 0.0 );\n* // returns Infinity\n*\n* @example\n* var v = gamma( -0.0 );\n* // returns -Infinity\n*\n* @example\n* var v = gamma( NaN );\n* // returns NaN\n*/\nfunction gamma( x ) {\n\tvar sign;\n\tvar q;\n\tvar p;\n\tvar z;\n\tif (\n\t\t(isInteger( x ) && x < 0) ||\n\t\tx === NINF ||\n\t\tisnan( x )\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 ) {\n\t\tif ( isNegativeZero( x ) ) {\n\t\t\treturn NINF;\n\t\t}\n\t\treturn PINF;\n\t}\n\tif ( x > 171.61447887182298 ) {\n\t\treturn PINF;\n\t}\n\tif ( x < -170.5674972726612 ) {\n\t\treturn 0.0;\n\t}\n\tq = abs( x );\n\tif ( q > 33.0 ) {\n\t\tif ( x >= 0.0 ) {\n\t\t\treturn stirlingApprox( x );\n\t\t}\n\t\tp = floor( q );\n\n\t\t// Check whether `x` is even...\n\t\tif ( (p&1) === 0 ) {\n\t\t\tsign = -1.0;\n\t\t} else {\n\t\t\tsign = 1.0;\n\t\t}\n\t\tz = q - p;\n\t\tif ( z > 0.5 ) {\n\t\t\tp += 1.0;\n\t\t\tz = q - p;\n\t\t}\n\t\tz = q * sin( PI * z );\n\t\treturn sign * PI / ( abs(z)*stirlingApprox(q) );\n\t}\n\t// Reduce `x`...\n\tz = 1.0;\n\twhile ( x >= 3.0 ) {\n\t\tx -= 1.0;\n\t\tz *= x;\n\t}\n\twhile ( x < 0.0 ) {\n\t\tif ( x > -1.0e-9 ) {\n\t\t\treturn smallApprox( x, z );\n\t\t}\n\t\tz /= x;\n\t\tx += 1.0;\n\t}\n\twhile ( x < 2.0 ) {\n\t\tif ( x < 1.0e-9 ) {\n\t\t\treturn smallApprox( x, z );\n\t\t}\n\t\tz /= x;\n\t\tx += 1.0;\n\t}\n\tif ( x === 2.0 ) {\n\t\treturn z;\n\t}\n\tx -= 2.0;\n\treturn z * rateval( x );\n}\n\n\n// EXPORTS //\n\nexport default gamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 1.0 + (x * (0.4942148268014971 + (x * (0.20744822764843598 + (x * (0.04763678004571372 + (x * (0.010421379756176158 + (x * (0.0011913514700658638 + (x * (0.00016011952247675185 + (x * 0.0))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.0714304917030273 + (x * (-0.23459179571824335 + (x * (0.035823639860549865 + (x * (0.011813978522206043 + (x * (-0.004456419138517973 + (x * (0.0005396055804933034 + (x * -0.000023158187332412014))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (0.00016011952247675185 + (x * (0.0011913514700658638 + (x * (0.010421379756176158 + (x * (0.04763678004571372 + (x * (0.20744822764843598 + (x * (0.4942148268014971 + (x * 1.0))))))))))))); // eslint-disable-line max-len\n\t\ts2 = -0.000023158187332412014 + (x * (0.0005396055804933034 + (x * (-0.004456419138517973 + (x * (0.011813978522206043 + (x * (0.035823639860549865 + (x * (-0.23459179571824335 + (x * (0.0714304917030273 + (x * 1.0))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport FACTORIALS from './factorials.json';\n\n\n// VARIABLES //\n\nvar MAX_FACTORIAL = 170; // TODO: consider extracting as a constant\n\n\n// MAIN //\n\n/**\n* Evaluates the factorial of `x`.\n*\n* @param {number} x - input value\n* @returns {number} factorial\n*\n* @example\n* var v = factorial( 3.0 );\n* // returns 6.0\n*\n* @example\n* var v = factorial( -1.5 );\n* // returns ~-3.545\n*\n* @example\n* var v = factorial( -0.5 );\n* // returns ~1.772\n*\n* @example\n* var v = factorial( 0.5 );\n* // returns ~0.886\n*\n* @example\n* var v = factorial( -10.0 );\n* // returns NaN\n*\n* @example\n* var v = factorial( 171.0 );\n* // returns Infinity\n*\n* @example\n* var v = factorial( NaN );\n* // returns NaN\n*/\nfunction factorial( x ) {\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( isInteger( x ) ) {\n\t\tif ( x < 0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= MAX_FACTORIAL ) {\n\t\t\treturn FACTORIALS[ x ];\n\t\t}\n\t\treturn PINF;\n\t}\n\treturn gamma( x + 1.0 );\n}\n\n\n// EXPORTS //\n\nexport default factorial;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn Infinity;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 38474670393.31777 + (x * (36857665043.51951 + (x * (15889202453.72942 + (x * (4059208354.298835 + (x * (680547661.1834733 + (x * (78239755.00312005 + (x * (6246580.776401795 + (x * (341986.3488721347 + (x * (12287.194511824551 + (x * (261.61404416416684 + (x * 2.5066282746310007))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0 + (x * (362880.0 + (x * (1026576.0 + (x * (1172700.0 + (x * (723680.0 + (x * (269325.0 + (x * (63273.0 + (x * (9450.0 + (x * (870.0 + (x * (45.0 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 2.5066282746310007 + (x * (261.61404416416684 + (x * (12287.194511824551 + (x * (341986.3488721347 + (x * (6246580.776401795 + (x * (78239755.00312005 + (x * (680547661.1834733 + (x * (4059208354.298835 + (x * (15889202453.72942 + (x * (36857665043.51951 + (x * 38474670393.31777))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (45.0 + (x * (870.0 + (x * (9450.0 + (x * (63273.0 + (x * (269325.0 + (x * (723680.0 + (x * (1172700.0 + (x * (1026576.0 + (x * (362880.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006-7, 2013-14.\n* Copyright Paul A. Bristow 2007, 2013-14.\n* Copyright Nikhar Agrawal 2013-14.\n* Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport lanczosSum from '@stdlib/math-base-special-gamma-lanczos-sum';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport EPSILON from '@stdlib/constants-float64-eps';\nimport E from '@stdlib/constants-float64-e';\nimport G from '@stdlib/constants-float64-gamma-lanczos-g';\n\n\n// VARIABLES //\n\nvar MAX_FACTORIAL = 170; // TODO: consider moving to pkg\nvar FACTORIAL_169 = 4.269068009004705e+304;\n\n\n// MAIN //\n\n/**\n* Calculates the ratio of two gamma functions via Lanczos approximation.\n*\n* ## Notes\n*\n* -   When \\\\( z < \\epsilon \\\\), we get spurious numeric overflow unless we're very careful. This can occur either inside `lanczosSum(z)` or in the final combination of terms. To avoid this, split the product up into 2 (or 3) parts:\n*\n*     ```tex\n*     \\begin{align*}\n*     G(z) / G(L) &= 1 / (z \\cdot G(L)) ; z < \\eps, L = z + \\delta = \\delta \\\\\n*     z * G(L) &= z * G(lim) \\cdot (G(L)/G(lim)) ; lim = \\text{largest factorial}\n*     \\end{align*}\n*     ```\n*\n* @private\n* @param {number} z - first gamma parameter\n* @param {number} delta - difference\n* @returns {number} gamma ratio\n*/\nfunction gammaDeltaRatioLanczos( z, delta ) {\n\tvar result;\n\tvar ratio;\n\tvar zgh;\n\n\tif ( z < EPSILON ) {\n\t\tif ( delta > MAX_FACTORIAL ) {\n\t\t\tratio = gammaDeltaRatioLanczos( delta, MAX_FACTORIAL-delta );\n\t\t\tratio *= z;\n\t\t\tratio *= FACTORIAL_169;\n\t\t\treturn 1.0 / ratio;\n\t\t}\n\t\treturn 1.0 / ( z * gamma( z+delta ) );\n\t}\n\tzgh = z + G - 0.5;\n\tif ( z + delta === z ) {\n\t\tif ( abs(delta) < 10.0 ) {\n\t\t\tresult = exp( ( 0.5-z ) * log1p( delta/zgh ) );\n\t\t} else {\n\t\t\tresult = 1.0;\n\t\t}\n\t} else {\n\t\tif ( abs(delta) < 10.0 ) {\n\t\t\tresult = exp( ( 0.5-z ) * log1p( delta/zgh ));\n\t\t} else {\n\t\t\tresult = pow( zgh / (zgh+delta), z-0.5 );\n\t\t}\n\t\t// Split up the calculation to avoid spurious overflow:\n\t\tresult *= lanczosSum( z ) / lanczosSum( z + delta );\n\t}\n\tresult *= pow( E / ( zgh+delta ), delta );\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default gammaDeltaRatioLanczos;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Arbitrary constant `g` to be used in Lanczos approximation functions.\n*\n* @module @stdlib/constants-float64-gamma-lanczos-g\n* @type {number}\n*\n* @example\n* import FLOAT64_GAMMA_LANCZOS_G from '@stdlib/constants-float64-gamma-lanczos-g';\n* // returns 10.900511\n*/\n\n\n// MAIN //\n\n/**\n* Arbitrary constant `g` to be used in Lanczos approximation functions.\n*\n* @constant\n* @type {number}\n* @default 10.900511\n* @see [Lanczos Approximation]{@link https://en.wikipedia.org/wiki/Lanczos_approximation}\n*/\nvar FLOAT64_GAMMA_LANCZOS_G = 10.90051099999999983936049829935654997826;\n\n\n// EXPORTS //\n\nexport default FLOAT64_GAMMA_LANCZOS_G;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006-7, 2013-14.\n* Copyright Paul A. Bristow 2007, 2013-14.\n* Copyright Nikhar Agrawal 2013-14.\n* Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport floor from '@stdlib/math-base-special-floor';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport factorial from '@stdlib/math-base-special-factorial';\nimport gammaDeltaRatioLanczos from './gamma_delta_ratio_lanczos.js';\n\n\n// VARIABLES //\n\nvar MAX_FACTORIAL = 170; // TODO: consider moving to pkg\n\n\n// MAIN //\n\n/**\n* Computes the ratio of two gamma functions.\n*\n* ## Notes\n*\n* -   Specifically, the function evaluates\n*\n*     ```tex\n*     \\frac{ \\Gamma( z ) }{ \\Gamma( z + \\delta ) }\n*     ```\n*\n* @param {number} z - first gamma parameter\n* @param {number} delta - difference\n* @returns {number} gamma ratio\n*\n* @example\n* var y = gammaDeltaRatio( 2.0, 3.0 );\n* // returns ~0.042\n*\n* @example\n* var y = gammaDeltaRatio( 4.0, 0.5 );\n* // returns ~0.516\n*\n* @example\n* var y = gammaDeltaRatio( 100.0, 0.0 );\n* // returns 1.0\n*/\nfunction gammaDeltaRatio( z, delta ) {\n\tvar result;\n\tvar idelta;\n\tvar iz;\n\n\tif ( z <= 0.0 || z + delta <= 0.0 ) {\n\t\t// This isn't very sophisticated, or accurate, but it does work:\n\t\treturn gamma( z ) / gamma( z + delta );\n\t}\n\tidelta = floor( delta );\n\tif ( idelta === delta ) {\n\t\tiz = floor( z );\n\t\tif ( iz === z ) {\n\t\t\t// As both `z` and `delta` are integers, see if we can use a table lookup:\n\t\t\tif ( z <= MAX_FACTORIAL && ( z + delta <= MAX_FACTORIAL ) ) {\n\t\t\t\treturn factorial( iz - 1.0 ) / factorial( idelta + iz - 1.0 );\n\t\t\t}\n\t\t}\n\t\tif ( abs(delta) < 20.0 ) {\n\t\t\t// As `delta` is a small integer, we can use a finite product:\n\t\t\tif ( delta === 0.0 ) {\n\t\t\t\treturn 1.0;\n\t\t\t}\n\t\t\tif ( delta < 0.0 ) {\n\t\t\t\tz -= 1.0;\n\t\t\t\tresult = z;\n\t\t\t\tdelta += 1.0;\n\t\t\t\twhile ( delta !== 0.0 ) {\n\t\t\t\t\tz -= 1.0;\n\t\t\t\t\tresult *= z;\n\t\t\t\t\tdelta += 1.0;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tresult = 1.0 / z;\n\t\t\tdelta -= 1.0;\n\t\t\twhile ( delta !== 0.0 ) {\n\t\t\t\tz += 1.0;\n\t\t\t\tresult /= z;\n\t\t\t\tdelta -= 1.0;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\treturn gammaDeltaRatioLanczos( z, delta );\n}\n\n\n// EXPORTS //\n\nexport default gammaDeltaRatio;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_cos.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport kernelCos from '@stdlib/math-base-special-kernel-cos';\nimport kernelSin from '@stdlib/math-base-special-kernel-sin';\nimport rempio2 from '@stdlib/math-base-special-rempio2';\n\n\n// VARIABLES //\n\n// Scratch array for storing temporary values:\nvar buffer = [ 0.0, 0.0 ]; // WARNING: not thread safe\n\n// High word absolute value mask: 0x7fffffff => 01111111111111111111111111111111\nvar HIGH_WORD_ABS_MASK = 0x7fffffff|0; // asm type annotation\n\n// High word of π/4: 0x3fe921fb => 00111111111010010010000111111011\nvar HIGH_WORD_PIO4 = 0x3fe921fb|0; // asm type annotation\n\n// High word of 2^-27: 0x3e400000 => 00111110010000000000000000000000\nvar HIGH_WORD_TWO_NEG_27 = 0x3e400000|0; // asm type annotation\n\n// High word exponent mask: 0x7ff00000 => 01111111111100000000000000000000\nvar HIGH_WORD_EXPONENT_MASK = 0x7ff00000|0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Computes the cosine of a number.\n*\n* @param {number} x - input value (in radians)\n* @returns {number} cosine\n*\n* @example\n* var v = cos( 0.0 );\n* // returns 1.0\n*\n* @example\n* var v = cos( 3.141592653589793/4.0 );\n* // returns ~0.707\n*\n* @example\n* var v = cos( -3.141592653589793/6.0 );\n* // returns ~0.866\n*\n* @example\n* var v = cos( NaN );\n* // returns NaN\n*/\nfunction cos( x ) {\n\tvar ix;\n\tvar n;\n\n\tix = getHighWord( x );\n\tix &= HIGH_WORD_ABS_MASK;\n\n\t// Case: |x| ~< pi/4\n\tif ( ix <= HIGH_WORD_PIO4 ) {\n\t\t// Case: x < 2**-27\n\t\tif ( ix < HIGH_WORD_TWO_NEG_27 ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn kernelCos( x, 0.0 );\n\t}\n\t// Case: cos(Inf or NaN) is NaN */\n\tif ( ix >= HIGH_WORD_EXPONENT_MASK ) {\n\t\treturn NaN;\n\t}\n\t// Case: Argument reduction needed...\n\tn = rempio2( x, buffer );\n\tswitch ( n & 3 ) {\n\tcase 0:\n\t\treturn kernelCos( buffer[ 0 ], buffer[ 1 ] );\n\tcase 1:\n\t\treturn -kernelSin( buffer[ 0 ], buffer[ 1 ] );\n\tcase 2:\n\t\treturn -kernelCos( buffer[ 0 ], buffer[ 1 ] );\n\tdefault:\n\t\treturn kernelSin( buffer[ 0 ], buffer[ 1 ] );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default cos;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* Notes:\n*\t=> sin(-x) = -sin(x)\n*\t=> sin(+n) = +0, where `n` is a positive integer\n*\t=> sin(-n) = -sin(+n) = -0, where `n` is a positive integer\n*\t=> cos(-x) = cos(x)\n*/\n\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport cos from '@stdlib/math-base-special-cos';\nimport sin from '@stdlib/math-base-special-sin';\nimport abs from '@stdlib/math-base-special-abs';\nimport copysign from '@stdlib/math-base-special-copysign';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Computes the value of `sin(πx)`.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var y = sinpi( 0.0 );\n* // returns 0.0\n*\n* @example\n* var y = sinpi( 0.5 );\n* // returns 1.0\n*\n* @example\n* var y = sinpi( 0.9 );\n* // returns ~0.309\n*\n* @example\n* var y = sinpi( NaN );\n* // returns NaN\n*/\nfunction sinpi( x ) {\n\tvar ar;\n\tvar r;\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( isInfinite( x ) ) {\n\t\treturn NaN;\n\t}\n\t// Argument reduction (reduce to [0,2))...\n\tr = x % 2.0; // sign preserving\n\tar = abs( r );\n\n\t// If `x` is an integer, the mod is an integer...\n\tif ( ar === 0.0 || ar === 1.0 ) {\n\t\treturn copysign( 0.0, r );\n\t}\n\tif ( ar < 0.25 ) {\n\t\treturn sin( PI*r );\n\t}\n\t// In each of the following, we further reduce to [-π/4,π/4)...\n\tif ( ar < 0.75 ) {\n\t\tar = 0.5 - ar;\n\t\treturn copysign( cos( PI*ar ), r );\n\t}\n\tif ( ar < 1.25 ) {\n\t\tr = copysign( 1.0, r ) - r;\n\t\treturn sin( PI*r );\n\t}\n\tif ( ar < 1.75 ) {\n\t\tar -= 1.5;\n\t\treturn -copysign( cos( PI*ar ), r );\n\t}\n\tr -= copysign( 2.0, r );\n\treturn sin( PI*r );\n}\n\n\n// EXPORTS //\n\nexport default sinpi;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_lgamma_r.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport abs from '@stdlib/math-base-special-abs';\nimport ln from '@stdlib/math-base-special-ln';\nimport trunc from '@stdlib/math-base-special-trunc';\nimport sinpi from '@stdlib/math-base-special-sinpi';\nimport PI from '@stdlib/constants-float64-pi';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport polyvalA1 from './polyval_a1.js';\nimport polyvalA2 from './polyval_a2.js';\nimport polyvalR from './polyval_r.js';\nimport polyvalS from './polyval_s.js';\nimport polyvalT1 from './polyval_t1.js';\nimport polyvalT2 from './polyval_t2.js';\nimport polyvalT3 from './polyval_t3.js';\nimport polyvalU from './polyval_u.js';\nimport polyvalV from './polyval_v.js';\nimport polyvalW from './polyval_w.js';\n\n\n// VARIABLES //\n\nvar A1C = 7.72156649015328655494e-02; // 0x3FB3C467E37DB0C8\nvar A2C = 3.22467033424113591611e-01; // 0x3FD4A34CC4A60FAD\nvar RC = 1.0;\nvar SC = -7.72156649015328655494e-02; // 0xBFB3C467E37DB0C8\nvar T1C = 4.83836122723810047042e-01; // 0x3FDEF72BC8EE38A2\nvar T2C = -1.47587722994593911752e-01; // 0xBFC2E4278DC6C509\nvar T3C = 6.46249402391333854778e-02; // 0x3FB08B4294D5419B\nvar UC = -7.72156649015328655494e-02; // 0xBFB3C467E37DB0C8\nvar VC = 1.0;\nvar WC = 4.18938533204672725052e-01; // 0x3FDACFE390C97D69\nvar YMIN = 1.461632144968362245;\nvar TWO52 = 4503599627370496; // 2**52\nvar TWO58 = 288230376151711744; // 2**58\nvar TINY = 8.470329472543003e-22;\nvar TC = 1.46163214496836224576e+00; // 0x3FF762D86356BE3F\nvar TF = -1.21486290535849611461e-01; // 0xBFBF19B9BCC38A42\nvar TT = -3.63867699703950536541e-18; // 0xBC50C7CAA48A971F => TT = -(tail of TF)\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the gamma function.\n*\n* ## Method\n*\n* 1.  Argument reduction for \\\\(0 < x \\leq 8\\\\). Since \\\\(\\Gamma(1+s) = s \\Gamma(s)\\\\), for \\\\(x \\in \\[0,8]\\\\), we may reduce \\\\(x\\\\) to a number in \\\\(\\[1.5,2.5]\\\\) by\n*\n*     ```tex\n*     \\operatorname{lgamma}(1+s) = \\ln(s) + \\operatorname{lgamma}(s)\n*     ```\n*\n*     For example,\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{lgamma}(7.3) &= \\ln(6.3) + \\operatorname{lgamma}(6.3) \\\\\n*     &= \\ln(6.3 \\cdot 5.3) + \\operatorname{lgamma}(5.3) \\\\\n*     &= \\ln(6.3 \\cdot 5.3 \\cdot 4.3 \\cdot 3.3 \\cdot2.3) + \\operatorname{lgamma}(2.3)\n*     \\end{align*}\n*     ```\n*\n* 2.  Compute a polynomial approximation of \\\\(\\mathrm{lgamma}\\\\) around its minimum (\\\\(\\mathrm{ymin} = 1.461632144968362245\\\\)) to maintain monotonicity. On the interval \\\\(\\[\\mathrm{ymin} - 0.23, \\mathrm{ymin} + 0.27]\\\\) (i.e., \\\\(\\[1.23164,1.73163]\\\\)), we let \\\\(z = x - \\mathrm{ymin}\\\\) and use\n*\n*     ```tex\n*     \\operatorname{lgamma}(x) = -1.214862905358496078218 + z^2 \\cdot \\operatorname{poly}(z)\n*     ```\n*\n*     where \\\\(\\operatorname{poly}(z)\\\\) is a \\\\(14\\\\) degree polynomial.\n*\n* 3.  Compute a rational approximation in the primary interval \\\\(\\[2,3]\\\\). Let \\\\( s = x - 2.0 \\\\). We can thus use the approximation\n*\n*     ```tex\n*     \\operatorname{lgamma}(x) = \\frac{s}{2} + s\\frac{\\operatorname{P}(s)}{\\operatorname{Q}(s)}\n*     ```\n*\n*     with accuracy\n*\n*     ```tex\n*     \\biggl|\\frac{\\mathrm{P}}{\\mathrm{Q}} - \\biggr(\\operatorname{lgamma}(x)-\\frac{s}{2}\\biggl)\\biggl| < 2^{-61.71}\n*     ```\n*\n*     The algorithms are based on the observation\n*\n*     ```tex\n*     \\operatorname{lgamma}(2+s) = s(1 - \\gamma) + \\frac{\\zeta(2) - 1}{2} s^2 - \\frac{\\zeta(3) - 1}{3} s^3 + \\ldots\n*     ```\n*\n*     where \\\\(\\zeta\\\\) is the zeta function and \\\\(\\gamma = 0.5772156649...\\\\) is the Euler-Mascheroni constant, which is very close to \\\\(0.5\\\\).\n*\n* 4.  For \\\\(x \\geq 8\\\\),\n*\n*     ```tex\n*     \\operatorname{lgamma}(x) \\approx \\biggl(x-\\frac{1}{2}\\biggr) \\ln(x) - x + \\frac{\\ln(2\\pi)}{2} + \\frac{1}{12x} - \\frac{1}{360x^3} + \\ldots\n*     ```\n*\n*     which can be expressed\n*\n*     ```tex\n*     \\operatorname{lgamma}(x) \\approx \\biggl(x-\\frac{1}{2}\\biggr)(\\ln(x)-1)-\\frac{\\ln(2\\pi)-1}{2} + \\ldots\n*     ```\n*\n*     Let \\\\(z = \\frac{1}{x}\\\\). We can then use the approximation\n*\n*     ```tex\n*     f(z) = \\operatorname{lgamma}(x) - \\biggl(x-\\frac{1}{2}\\biggr)(\\ln(x)-1)\n*     ```\n*\n*     by\n*\n*     ```tex\n*     w = w_0 + w_1 z + w_2 z^3 + w_3 z^5 + \\ldots + w_6 z^{11}\n*     ```\n*\n*     where\n*\n*     ```tex\n*     |w - f(z)| < 2^{-58.74}\n*     ```\n*\n* 5.  For negative \\\\(x\\\\), since\n*\n*     ```tex\n*     -x \\Gamma(-x) \\Gamma(x) = \\frac{\\pi}{\\sin(\\pi x)}\n*     ```\n*\n*     where \\\\(\\Gamma\\\\) is the gamma function, we have\n*\n*     ```tex\n*     \\Gamma(x) = \\frac{\\pi}{\\sin(\\pi x)(-x)\\Gamma(-x)}\n*     ```\n*\n*     Since \\\\(\\Gamma(-x)\\\\) is positive,\n*\n*     ```tex\n*     \\operatorname{sign}(\\Gamma(x)) = \\operatorname{sign}(\\sin(\\pi x))\n*     ```\n*\n*     for \\\\(x < 0\\\\). Hence, for \\\\(x < 0\\\\),\n*\n*     ```tex\n*     \\mathrm{signgam} = \\operatorname{sign}(\\sin(\\pi x))\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{lgamma}(x) &= \\ln(|\\Gamma(x)|) \\\\\n*     &= \\ln\\biggl(\\frac{\\pi}{|x \\sin(\\pi x)|}\\biggr) - \\operatorname{lgamma}(-x)\n*     \\end{align*}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     Note that one should avoid computing \\\\(\\pi (-x)\\\\) directly in the computation of \\\\(\\sin(\\pi (-x))\\\\).\n*\n*     <!-- </note> -->\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{lgamma}(2+s) &\\approx s (1-\\gamma) & \\mathrm{for\\ tiny\\ s} \\\\\n* \\operatorname{lgamma}(x) &\\approx -\\ln(x) & \\mathrm{for\\ tiny\\ x} \\\\\n* \\operatorname{lgamma}(1) &= 0 & \\\\\n* \\operatorname{lgamma}(2) &= 0 & \\\\\n* \\operatorname{lgamma}(0) &= \\infty & \\\\\n* \\operatorname{lgamma}(\\infty) &= \\infty & \\\\\n* \\operatorname{lgamma}(-\\mathrm{integer}) &= \\pm \\infty\n* \\end{align*}\n* ```\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = gammaln( 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = gammaln( 2.0 );\n* // returns 0.0\n*\n* @example\n* var v = gammaln( 4.0 );\n* // returns ~1.792\n*\n* @example\n* var v = gammaln( -0.5 );\n* // returns ~1.266\n*\n* @example\n* var v = gammaln( 0.5 );\n* // returns ~0.572\n*\n* @example\n* var v = gammaln( 0.0 );\n* // returns Infinity\n*\n* @example\n* var v = gammaln( NaN );\n* // returns NaN\n*/\nfunction gammaln( x ) {\n\tvar isNegative;\n\tvar nadj;\n\tvar flg;\n\tvar p3;\n\tvar p2;\n\tvar p1;\n\tvar p;\n\tvar q;\n\tvar t;\n\tvar w;\n\tvar y;\n\tvar z;\n\tvar r;\n\n\t// Special cases: NaN, +-infinity\n\tif ( isnan( x ) || isInfinite( x ) ) {\n\t\treturn x;\n\t}\n\t// Special case: 0\n\tif ( x === 0.0 ) {\n\t\treturn PINF;\n\t}\n\tif ( x < 0.0 ) {\n\t\tisNegative = true;\n\t\tx = -x;\n\t} else {\n\t\tisNegative = false;\n\t}\n\t// If |x| < 2**-70, return -ln(|x|)\n\tif ( x < TINY ) {\n\t\treturn -ln( x );\n\t}\n\tif ( isNegative ) {\n\t\t// If |x| >= 2**52, must be -integer\n\t\tif ( x >= TWO52 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tt = sinpi( x );\n\t\tif ( t === 0.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tnadj = ln( PI / abs( t*x ) );\n\t}\n\t// If x equals 1 or 2, return 0\n\tif ( x === 1.0 || x === 2.0 ) {\n\t\treturn 0.0;\n\t}\n\t// If x < 2, use lgamma(x) = lgamma(x+1) - log(x)\n\tif ( x < 2.0 ) {\n\t\tif ( x <= 0.9 ) {\n\t\t\tr = -ln( x );\n\n\t\t\t// 0.7316 <= x <=  0.9\n\t\t\tif ( x >= ( YMIN - 1.0 + 0.27 ) ) {\n\t\t\t\ty = 1.0 - x;\n\t\t\t\tflg = 0;\n\t\t\t}\n\t\t\t// 0.2316 <= x < 0.7316\n\t\t\telse if ( x >= (YMIN - 1.0 - 0.27) ) {\n\t\t\t\ty = x - (TC - 1.0);\n\t\t\t\tflg = 1;\n\t\t\t}\n\t\t\t// 0 < x < 0.2316\n\t\t\telse {\n\t\t\t\ty = x;\n\t\t\t\tflg = 2;\n\t\t\t}\n\t\t} else {\n\t\t\tr = 0.0;\n\n\t\t\t// 1.7316 <= x < 2\n\t\t\tif ( x >= (YMIN + 0.27) ) {\n\t\t\t\ty = 2.0 - x;\n\t\t\t\tflg = 0;\n\t\t\t}\n\t\t\t// 1.2316 <= x < 1.7316\n\t\t\telse if ( x >= (YMIN - 0.27) ) {\n\t\t\t\ty = x - TC;\n\t\t\t\tflg = 1;\n\t\t\t}\n\t\t\t// 0.9 < x < 1.2316\n\t\t\telse {\n\t\t\t\ty = x - 1.0;\n\t\t\t\tflg = 2;\n\t\t\t}\n\t\t}\n\t\tswitch ( flg ) { // eslint-disable-line default-case\n\t\tcase 0:\n\t\t\tz = y * y;\n\t\t\tp1 = A1C + (z*polyvalA1( z ));\n\t\t\tp2 = z * (A2C + (z*polyvalA2( z )));\n\t\t\tp = (y*p1) + p2;\n\t\t\tr += ( p - (0.5*y) );\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tz = y * y;\n\t\t\tw = z * y;\n\t\t\tp1 = T1C + (w*polyvalT1( w ));\n\t\t\tp2 = T2C + (w*polyvalT2( w ));\n\t\t\tp3 = T3C + (w*polyvalT3( w ));\n\t\t\tp = (z*p1) - (TT - (w*(p2+(y*p3))));\n\t\t\tr += ( TF + p );\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tp1 = y * (UC + (y*polyvalU( y )));\n\t\t\tp2 = VC + (y*polyvalV( y ));\n\t\t\tr += (-0.5*y) + (p1/p2);\n\t\t\tbreak;\n\t\t}\n\t}\n\t// 2 <= x < 8\n\telse if ( x < 8.0 ) {\n\t\tflg = trunc( x );\n\t\ty = x - flg;\n\t\tp = y * (SC + (y*polyvalS( y )));\n\t\tq = RC + (y*polyvalR( y ));\n\t\tr = (0.5*y) + (p/q);\n\t\tz = 1.0; // gammaln(1+s) = ln(s) + gammaln(s)\n\t\tswitch ( flg ) { // eslint-disable-line default-case\n\t\tcase 7:\n\t\t\tz *= y + 6.0;\n\n\t\t\t/* Falls through */\n\t\tcase 6:\n\t\t\tz *= y + 5.0;\n\n\t\t\t/* Falls through */\n\t\tcase 5:\n\t\t\tz *= y + 4.0;\n\n\t\t\t/* Falls through */\n\t\tcase 4:\n\t\t\tz *= y + 3.0;\n\n\t\t\t/* Falls through */\n\t\tcase 3:\n\t\t\tz *= y + 2.0;\n\t\t\tr += ln( z );\n\t\t}\n\t}\n\t// 8 <= x < 2**58\n\telse if ( x < TWO58 ) {\n\t\tt = ln( x );\n\t\tz = 1.0 / x;\n\t\ty = z * z;\n\t\tw = WC + (z*polyvalW( y ));\n\t\tr = ((x-0.5)*(t-1.0)) + w;\n\t}\n\t// 2**58 <= x <= Inf\n\telse {\n\t\tr = x * ( ln(x)-1.0 );\n\t}\n\tif ( isNegative ) {\n\t\tr = nadj - r;\n\t}\n\treturn r;\n}\n\n\n// EXPORTS //\n\nexport default gammaln;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.06735230105312927;\n\t}\n\treturn 0.06735230105312927 + (x * (0.007385550860814029 + (x * (0.0011927076318336207 + (x * (0.00022086279071390839 + (x * 0.000025214456545125733))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.020580808432516733;\n\t}\n\treturn 0.020580808432516733 + (x * (0.0028905138367341563 + (x * (0.0005100697921535113 + (x * (0.00010801156724758394 + (x * 0.000044864094961891516))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.032788541075985965;\n\t}\n\treturn -0.032788541075985965 + (x * (0.006100538702462913 + (x * (-0.0014034646998923284 + (x * 0.00031563207090362595))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.01797067508118204;\n\t}\n\treturn 0.01797067508118204 + (x * (-0.0036845201678113826 + (x * (0.000881081882437654 + (x * -0.00031275416837512086))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.010314224129834144;\n\t}\n\treturn -0.010314224129834144 + (x * (0.0022596478090061247 + (x * (-0.0005385953053567405 + (x * 0.0003355291926355191))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.6328270640250934;\n\t}\n\treturn 0.6328270640250934 + (x * (1.4549225013723477 + (x * (0.9777175279633727 + (x * (0.22896372806469245 + (x * 0.013381091853678766))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 2.4559779371304113;\n\t}\n\treturn 2.4559779371304113 + (x * (2.128489763798934 + (x * (0.7692851504566728 + (x * (0.10422264559336913 + (x * 0.003217092422824239))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.21498241596060885;\n\t}\n\treturn 0.21498241596060885 + (x * (0.325778796408931 + (x * (0.14635047265246445 + (x * (0.02664227030336386 + (x * (0.0018402845140733772 + (x * 0.00003194753265841009))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.3920053346762105;\n\t}\n\treturn 1.3920053346762105 + (x * (0.7219355475671381 + (x * (0.17193386563280308 + (x * (0.01864591917156529 + (x * (0.0007779424963818936 + (x * 0.000007326684307446256))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.08333333333333297;\n\t}\n\treturn 0.08333333333333297 + (x * (-0.0027777777772877554 + (x * (0.0007936505586430196 + (x * (-0.00059518755745034 + (x * (0.0008363399189962821 + (x * -0.0016309293409657527))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of double-precision floating-point epsilon.\n*\n* @module @stdlib/constants-float64-sqrt-eps\n* @type {number}\n*\n* @example\n* import FLOAT64_SQRT_EPSILON from '@stdlib/constants-float64-sqrt-eps';\n* // returns 0.14901161193847656e-7\n*/\n\n\n// MAIN //\n\n/**\n* Square root of double-precision floating-point epsilon.\n*\n* ```tex\n* \\sqrt{\\frac{1}{2^{52}}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.14901161193847656e-7\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}\n*/\nvar FLOAT64_SQRT_EPSILON = 0.1490116119384765625e-7;\n\n\n// EXPORTS //\n\nexport default FLOAT64_SQRT_EPSILON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the maximum double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-max-ln\n* @type {number}\n*\n* @example\n* import FLOAT64_MAX_LN from '@stdlib/constants-float64-max-ln';\n* // returns 709.782712893384\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of the maximum double-precision floating-point number.\n*\n* ## Notes\n*\n* The natural logarithm of the maximum is given by\n*\n* ```tex\n* \\ln \\left( 2^{1023} (2 - 2^{-52}) \\right)\n* ```\n*\n* @constant\n* @type {number}\n* @default 709.782712893384\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_LN = 709.782712893384;\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_LN;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_erf.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport setLowWord from '@stdlib/number-float64-base-set-low-word';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport polyvalPP from './polyval_pp.js';\nimport polyvalQQ from './polyval_qq.js';\nimport polyvalPA from './polyval_pa.js';\nimport polyvalQA from './polyval_qa.js';\nimport polyvalRA from './polyval_ra.js';\nimport polyvalSA from './polyval_sa.js';\nimport polyvalRB from './polyval_rb.js';\nimport polyvalSB from './polyval_sb.js';\n\n\n// VARIABLES //\n\nvar TINY = 1.0e-300;\n\n// 2**-56 = 1/(2**56) = 1/72057594037927940\nvar SMALL = 1.3877787807814457e-17;\n\nvar ERX = 8.45062911510467529297e-1;  // 0x3FEB0AC1, 0x60000000\n\nvar PPC = 1.28379167095512558561e-1;  // 0x3FC06EBA, 0x8214DB68\nvar QQC = 1.0;\n\nvar PAC = -2.36211856075265944077e-3; // 0xBF6359B8, 0xBEF77538\nvar QAC = 1.0;\n\nvar RAC = -9.86494403484714822705e-3; // 0xBF843412, 0x600D6435\nvar SAC = 1.0;\n\nvar RBC = -9.86494292470009928597e-3; // 0xBF843412, 0x39E86F4A\nvar SBC = 1.0;\n\n\n// MAIN //\n\n/**\n* Evaluates the complementary error function.\n*\n* ```tex\n* \\operatorname{erf}(x) = \\frac{2}{\\sqrt{\\pi}} \\int^{x}_{0} e^{-t^2}\\ \\mathrm{dt}\n* ```\n*\n* Note that\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{erfc}(x) &= 1 - \\operatorname{erf}(x) \\\\\n* \\operatorname{erf}(-x) &= -\\operatorname{erf}(x) \\\\\n* \\operatorname{erfc}(-x) &= 2 - \\operatorname{erfc}(x)\n* \\end{align*}\n* ```\n*\n* ## Method\n*\n* 1.  For \\\\(|x| \\in [0, 0.84375)\\\\),\n*\n*     ```tex\n*     \\operatorname{erf}(x) = x + x \\cdot \\operatorname{R}(x^2)\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\operatorname{erfc}(x) = \\begin{cases}\n*     1 - \\operatorname{erf}(x) & \\textrm{if}\\ x \\in (-.84375,0.25) \\\\\n*     0.5 + ((0.5-x)-x \\mathrm{R}) & \\textrm{if}\\ x \\in [0.25,0.84375)\n*     \\end{cases}\n*     ```\n*\n*     where \\\\(R = P/Q\\\\) and where \\\\(P\\\\) is an odd polynomial of degree \\\\(8\\\\) and \\\\(Q\\\\) is an odd polynomial of degree \\\\(10\\\\).\n*\n*     ```tex\n*     \\biggl| \\mathrm{R} - \\frac{\\operatorname{erf}(x)-x}{x} \\biggr| \\leq 2^{-57.90}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     The formula is derived by noting\n*\n*     ```tex\n*     \\operatorname{erf}(x) = \\frac{2}{\\sqrt{\\pi}}\\biggl(x - \\frac{x^3}{3} + \\frac{x^5}{10} - \\frac{x^7}{42} + \\ldots \\biggr)\n*     ```\n*\n*     and that\n*\n*     ```tex\n*     \\frac{2}{\\sqrt{\\pi}} = 1.128379167095512573896158903121545171688\n*     ```\n*\n*     is close to unity. The interval is chosen because the fix point of \\\\(\\operatorname{erf}(x)\\\\) is near \\\\(0.6174\\\\) (i.e., \\\\(\\operatorname{erf(x)} = x\\\\) when \\\\(x\\\\) is near \\\\(0.6174\\\\)), and, by some experiment, \\\\(0.84375\\\\) is chosen to guarantee the error is less than one ulp for \\\\(\\operatorname{erf}(x)\\\\).\n*\n*     <!-- </note> -->\n*\n* 2.  For \\\\(|x| \\in [0.84375,1.25)\\\\), let \\\\(s = |x|-1\\\\), and \\\\(c = 0.84506291151\\\\) rounded to single (\\\\(24\\\\) bits)\n*\n*     ```tex\n*     \\operatorname{erf}(x) = \\operatorname{sign}(x) \\cdot \\biggl(c + \\frac{\\operatorname{P1}(s)}{\\operatorname{Q1}(s)}\\biggr)\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\operatorname{erfc}(x) = \\begin{cases}\n*     (1-c) - \\frac{\\operatorname{P1}(s)}{\\operatorname{Q1}(s)} & \\textrm{if}\\ x > 0 \\\\\n*     1 + \\biggl(c + \\frac{\\operatorname{P1}(s)}{\\operatorname{Q1}(s)}\\biggr) & \\textrm{if}\\ x < 0\n*     \\end{cases}\n*     ```\n*\n*     where\n*\n*     ```tex\n*     \\biggl|\\frac{\\mathrm{P1}}{\\mathrm{Q1}} - (\\operatorname{erf}(|x|)-c)\\biggr| \\leq 2^{-59.06}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     Here, we use the Taylor series expansion at \\\\(x = 1\\\\)\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{erf}(1+s) &= \\operatorname{erf}(1) + s\\cdot \\operatorname{poly}(s) \\\\\n*     &= 0.845.. + \\frac{\\operatorname{P1}(s)}{\\operatorname{Q1}(s)}\n*     \\end{align*}\n*     ```\n*\n*     using a rational approximation to approximate\n*\n*     ```tex\n*     \\operatorname{erf}(1+s) - (c = (\\mathrm{single})0.84506291151)\n*     ```\n*\n*     <!-- </note> -->\n*\n*     Note that, for \\\\(x \\in [0.84375,1.25)\\\\), \\\\(|\\mathrm{P1}/\\mathrm{Q1}| < 0.078\\\\), where\n*\n*     -   \\\\(\\operatorname{P1}(s)\\\\) is a degree \\\\(6\\\\) polynomial in \\\\(s\\\\)\n*     -   \\\\(\\operatorname{Q1}(s)\\\\) is a degree \\\\(6\\\\) polynomial in \\\\(s\\\\)\n*\n* 3.  For \\\\(x \\in [1.25,1/0.35)\\\\),\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{erfc}(x) &= \\frac{1}{x}e^{-x^2-0.5625+(\\mathrm{R1}/\\mathrm{S1})} \\\\\n*     \\operatorname{erf}(x) &= 1 - \\operatorname{erfc}(x)\n*     \\end{align*}\n*     ```\n*\n*     where\n*\n*     -   \\\\(\\operatorname{R1}(z)\\\\) is a degree \\\\(7\\\\) polynomial in \\\\(z\\\\), where \\\\(z = 1/x^2\\\\)\n*     -   \\\\(\\operatorname{S1}(z)\\\\) is a degree \\\\(8\\\\) polynomial in \\\\(z\\\\)\n*\n* 4.  For \\\\(x \\in [1/0.35,28)\\\\),\n*\n*     ```tex\n*     \\operatorname{erfc}(x) = \\begin{cases}\n*     \\frac{1}{x} e^{-x^2-0.5625+(\\mathrm{R2}/\\mathrm{S2})} & \\textrm{if}\\ x > 0 \\\\\n*     2.0 - \\frac{1}{x} e^{-x^2-0.5625+(\\mathrm{R2}/\\mathrm{S2})} & \\textrm{if}\\ -6 < x < 0 \\\\\n*     2.0 - \\mathrm{tiny} & \\textrm{if}\\ x \\leq -6\n*     \\end{cases}\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\operatorname{erf}(x) = \\begin{cases}\n*     \\operatorname{sign}(x) \\cdot (1.0 - \\operatorname{erfc}(x)) & \\textrm{if}\\ x < 6 \\\\\n*     \\operatorname{sign}(x) \\cdot (1.0 - \\mathrm{tiny}) & \\textrm{otherwise}\n*     \\end{cases}\n*     ```\n*\n*     where\n*\n*     -   \\\\(\\operatorname{R2}(z)\\\\) is a degree \\\\(6\\\\) polynomial in \\\\(z\\\\), where \\\\(z = 1/x^2\\\\)\n*     -   \\\\(\\operatorname{S2}(z)\\\\) is a degree \\\\(7\\\\) polynomial in \\\\(z\\\\)\n*\n* 5.  For \\\\(x \\in [28, \\infty)\\\\),\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{erf}(x) &= \\operatorname{sign}(x) \\cdot (1 - \\mathrm{tiny}) & \\textrm{(raise inexact)}\n*     \\end{align*}\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\operatorname{erfc}(x) = \\begin{cases}\n*     \\mathrm{tiny} \\cdot \\mathrm{tiny} & \\textrm{if}\\ x > 0\\ \\textrm{(raise underflow)} \\\\\n*     2 - \\mathrm{tiny} & \\textrm{if}\\ x < 0\n*     \\end{cases}\n*     ```\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{erf}(0) &= 0 \\\\\n* \\operatorname{erf}(-0) &= -0 \\\\\n* \\operatorname{erf}(\\infty) &= 1 \\\\\n* \\operatorname{erf}(-\\infty) &= -1 \\\\\n* \\operatorname{erfc}(0) &= 1 \\\\\n* \\operatorname{erfc}(\\infty) &= 0 \\\\\n* \\operatorname{erfc}(-\\infty) &= 2 \\\\\n* \\operatorname{erf}(\\mathrm{NaN}) &= \\mathrm{NaN} \\\\\n* \\operatorname{erfc}(\\mathrm{NaN}) &= \\mathrm{NaN}\n* \\end{align*}\n* ```\n*\n* ## Notes\n*\n* -   To compute \\\\(\\exp(-x^2-0.5625+(\\mathrm{R}/\\mathrm{S}))\\\\), let \\\\(s\\\\) be a single precision number and \\\\(s := x\\\\); then\n*\n*     ```tex\n*     -x^2 = -s^2 + (s-x)(s+x)\n*     ```\n*\n*     and\n*\n*     ```tex\n*     e^{-x^2-0.5626+(\\mathrm{R}/\\mathrm{S})} = e^{-s^2-0.5625} e^{(s-x)(s+x)+(\\mathrm{R}/\\mathrm{S})}\n*     ```\n*\n* -   `#4` and `#5` make use of the asymptotic series\n*\n*     ```tex\n*     \\operatorname{erfc}(x) \\approx \\frac{e^{-x^2}}{x\\sqrt{\\pi}} (1 + \\operatorname{poly}(1/x^2))\n*     ```\n*\n*     We use a rational approximation to approximate\n*\n*     ```tex\n*     g(s) = f(1/x^2) = \\ln(\\operatorname{erfc}(x) \\cdot x) - x^2 + 0.5625\n*     ```\n*\n* -   The error bound for \\\\(\\mathrm{R1}/\\mathrm{S1}\\\\) is\n*\n*     ```tex\n*     |\\mathrm{R1}/\\mathrm{S1} - f(x)| < 2^{-62.57}\n*     ```\n*\n*     and for \\\\(\\mathrm{R2}/\\mathrm{S2}\\\\) is\n*\n*     ```tex\n*     |\\mathrm{R2}/\\mathrm{S2} - f(x)| < 2^{-61.52}\n*     ```\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var y = erfc( 2.0 );\n* // returns ~0.0047\n*\n* @example\n* var y = erfc( -1.0 );\n* // returns ~1.8427\n*\n* @example\n* var y = erfc( 0.0 );\n* // returns 1.0\n*\n* @example\n* var y = erfc( Infinity );\n* // returns 0.0\n*\n* @example\n* var y = erfc( -Infinity );\n* // returns 2.0\n*\n* @example\n* var y = erfc( NaN );\n* // returns NaN\n*/\nfunction erfc( x ) {\n\tvar sign;\n\tvar ax;\n\tvar z;\n\tvar r;\n\tvar s;\n\tvar y;\n\tvar p;\n\tvar q;\n\n\t// Special case: NaN\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\t// Special case: +infinity\n\tif ( x === PINF ) {\n\t\treturn 0.0;\n\t}\n\t// Special case: -infinity\n\tif ( x === NINF ) {\n\t\treturn 2.0;\n\t}\n\t// Special case: +-0\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x < 0.0 ) {\n\t\tsign = true;\n\t\tax = -x;\n\t} else {\n\t\tsign = false;\n\t\tax = x;\n\t}\n\t// |x| < 0.84375\n\tif ( ax < 0.84375 ) {\n\t\tif ( ax < SMALL ) {\n\t\t\treturn 1.0 - x; // raise inexact\n\t\t}\n\t\tz = x * x;\n\t\tr = PPC + ( z*polyvalPP( z ) );\n\t\ts = QQC + ( z*polyvalQQ( z ) );\n\t\ty = r / s;\n\n\t\t// x < 1/4\n\t\tif ( x < 0.25 ) {\n\t\t\treturn 1.0 - ( x + (x*y) );\n\t\t}\n\t\tr = x * y;\n\t\tr += x - 0.5;\n\t\treturn 0.5 - r;\n\t}\n\t// 0.84375 <= |x| < 1.25\n\tif ( ax < 1.25 ) {\n\t\ts = ax - 1.0;\n\t\tp = PAC + ( s*polyvalPA( s ) );\n\t\tq = QAC + ( s*polyvalQA( s ) );\n\t\tif ( sign ) {\n\t\t\treturn 1.0 + ERX + (p/q);\n\t\t}\n\t\treturn 1.0 - ERX - (p/q);\n\t}\n\t// |x| < 28\n\tif ( ax < 28.0 ) {\n\t\ts = 1.0 / (ax*ax);\n\n\t\t// |x| < 1/0.35 ~ 2.857143\n\t\tif ( ax < 2.857142857142857 ) {\n\t\t\tr = RAC + ( s*polyvalRA( s ) );\n\t\t\ts = SAC + ( s*polyvalSA( s ) );\n\t\t}\n\t\t// |x| >= 1/0.35 ~ 2.857143\n\t\telse {\n\t\t\t// x < -6\n\t\t\tif ( x < -6.0 ) {\n\t\t\t\treturn 2.0 - TINY; // raise inexact\n\t\t\t}\n\t\t\tr = RBC + ( s*polyvalRB( s ) );\n\t\t\ts = SBC + ( s*polyvalSB( s ) );\n\t\t}\n\t\tz = setLowWord( ax, 0 ); // pseudo-single (20-bit) precision x\n\t\tr = exp( -(z*z) - 0.5625 ) * exp( ((z-ax)*(z+ax)) + (r/s) );\n\t\tif ( sign ) {\n\t\t\treturn 2.0 - (r/ax);\n\t\t}\n\t\treturn r/ax;\n\t}\n\tif ( sign ) {\n\t\treturn 2.0 - TINY; // raise inexact; ~2\n\t}\n\treturn TINY * TINY; // raise inexact; ~0\n}\n\n\n// EXPORTS //\n\nexport default erfc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.3250421072470015;\n\t}\n\treturn -0.3250421072470015 + (x * (-0.02848174957559851 + (x * (-0.005770270296489442 + (x * -0.000023763016656650163))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.39791722395915535;\n\t}\n\treturn 0.39791722395915535 + (x * (0.0650222499887673 + (x * (0.005081306281875766 + (x * (0.00013249473800432164 + (x * -0.000003960228278775368))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.41485611868374833;\n\t}\n\treturn 0.41485611868374833 + (x * (-0.3722078760357013 + (x * (0.31834661990116175 + (x * (-0.11089469428239668 + (x * (0.035478304325618236 + (x * -0.002166375594868791))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.10642088040084423;\n\t}\n\treturn 0.10642088040084423 + (x * (0.540397917702171 + (x * (0.07182865441419627 + (x * (0.12617121980876164 + (x * (0.01363708391202905 + (x * 0.011984499846799107))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.6938585727071818;\n\t}\n\treturn -0.6938585727071818 + (x * (-10.558626225323291 + (x * (-62.375332450326006 + (x * (-162.39666946257347 + (x * (-184.60509290671104 + (x * (-81.2874355063066 + (x * -9.814329344169145))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 19.651271667439257;\n\t}\n\treturn 19.651271667439257 + (x * (137.65775414351904 + (x * (434.56587747522923 + (x * (645.3872717332679 + (x * (429.00814002756783 + (x * (108.63500554177944 + (x * (6.570249770319282 + (x * -0.0604244152148581))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.799283237680523;\n\t}\n\treturn -0.799283237680523 + (x * (-17.757954917754752 + (x * (-160.63638485582192 + (x * (-637.5664433683896 + (x * (-1025.0951316110772 + (x * -483.5191916086514))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 30.33806074348246;\n\t}\n\treturn 30.33806074348246 + (x * (325.7925129965739 + (x * (1536.729586084437 + (x * (3199.8582195085955 + (x * (2553.0504064331644 + (x * (474.52854120695537 + (x * -22.44095244658582))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the smallest normalized double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-min-ln\n* @type {number}\n*\n* @example\n* import FLOAT64_MIN_LN from '@stdlib/constants-float64-min-ln';\n* // returns -708.3964185322641\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of the smallest normalized double-precision floating-point number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* -\\ln \\left( 2^{1023-1} \\right)\n* ```\n*\n* @constant\n* @type {number}\n* @default -708.3964185322641\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_LN = -708.3964185322641;\n\n\n// EXPORTS //\n\nexport default FLOAT64_MIN_LN;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport MIN_LN from '@stdlib/constants-float64-min-ln';\n\n\n// MAIN //\n\n/**\n* Calculates the power term prefix `(z^a)(e^-z)` used in the non-normalized incomplete gammas.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} z - function parameter\n* @returns {number} power term prefix\n*/\nfunction fullIGammaPrefix( a, z ) {\n\tvar prefix;\n\tvar alz;\n\n\talz = a * ln( z );\n\tif ( z >= 1.0 ) {\n\t\tif ( ( alz < MAX_LN ) && ( -z > MIN_LN ) ) {\n\t\t\tprefix = pow( z, a ) * exp( -z );\n\t\t}\n\t\telse if ( a >= 1.0 ) {\n\t\t\tprefix = pow( z / exp(z/a), a );\n\t\t}\n\t\telse {\n\t\t\tprefix = exp( alz - z );\n\t\t}\n\t}\n\telse {\n\t\t/* eslint-disable no-lonely-if */\n\t\tif ( alz > MIN_LN ) {\n\t\t\tprefix = pow( z, a ) * exp( -z );\n\t\t}\n\t\telse if ( z/a < MAX_LN ) {\n\t\t\tprefix = pow( z / exp(z/a), a );\n\t\t} else {\n\t\t\tprefix = exp( alz - z );\n\t\t}\n\t}\n\treturn prefix;\n}\n\n\n// EXPORTS //\n\nexport default fullIGammaPrefix;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @param {NumericArray} c - polynomial coefficients sorted in ascending degree\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*\n* @example\n* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2\n* // returns 123.0\n*/\nfunction evalpoly( c, x ) {\n\tvar p;\n\tvar i;\n\n\ti = c.length;\n\tif ( i < 2 || x === 0.0 ) {\n\t\tif ( i === 0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn c[ 0 ];\n\t}\n\ti -= 1;\n\tp = ( c[ i ] * x ) + c[ i-1 ];\n\ti -= 2;\n\twhile ( i >= 0 ) {\n\t\tp = ( p * x ) + c[ i ];\n\t\ti -= 1;\n\t}\n\treturn p;\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a Function object.\n*\n* @name Function\n* @constructor\n* @type {Function}\n* @param {...*} [argNames] - parameters names\n* @param {string} body - function body\n* @returns {Function} function\n*\n* @example\n* var add = new Fcn( 'x', 'y', 'return x + y' );\n*\n* var v = add( 1, 2 );\n* // returns 3\n*/\nvar Fcn = Function; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default Fcn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Fcn from '@stdlib/function-ctor';\nimport evalpoly from './main.js';\n\n\n// MAIN //\n\n/**\n* Generates a function for evaluating a polynomial.\n*\n* ## Notes\n*\n* -   The compiled function uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @param {NumericArray} c - polynomial coefficients sorted in ascending degree\n* @returns {Function} function for evaluating a polynomial\n*\n* @example\n* var polyval = factory( [3.0,2.0,1.0] );\n*\n* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2\n* // returns 123.0\n*\n* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2\n* // returns 38.0\n*/\nfunction factory( c ) {\n\tvar f;\n\tvar n;\n\tvar m;\n\tvar i;\n\n\t// Avoid exceeding the maximum stack size on V8 :(. Note that the choice of `500` was empirically determined...\n\tif ( c.length > 500 ) {\n\t\treturn polyval;\n\t}\n\t// Code generation. Start with the function definition...\n\tf = 'return function evalpoly(x){';\n\n\t// Create the function body...\n\tn = c.length;\n\n\t// If no coefficients, the function always returns 0...\n\tif ( n === 0 ) {\n\t\tf += 'return 0.0;';\n\t}\n\t// If only one coefficient, the function always returns that coefficient...\n\telse if ( n === 1 ) {\n\t\tf += 'return ' + c[ 0 ] + ';';\n\t}\n\t// If more than one coefficient, apply Horner's method...\n\telse {\n\t\t// If `x == 0`, return the first coefficient...\n\t\tf += 'if(x===0.0){return ' + c[ 0 ] + ';}';\n\n\t\t// Otherwise, evaluate the polynomial...\n\t\tf += 'return ' + c[ 0 ];\n\t\tm = n - 1;\n\t\tfor ( i = 1; i < n; i++ ) {\n\t\t\tf += '+x*';\n\t\t\tif ( i < m ) {\n\t\t\t\tf += '(';\n\t\t\t}\n\t\t\tf += c[ i ];\n\t\t}\n\t\t// Close all the parentheses...\n\t\tfor ( i = 0; i < m-1; i++ ) {\n\t\t\tf += ')';\n\t\t}\n\t\tf += ';';\n\t}\n\t// Close the function:\n\tf += '}';\n\n\t// Add a source directive for debugging:\n\tf += '//# sourceURL=evalpoly.factory.js';\n\n\t// Create the function in the global scope:\n\treturn ( new Fcn( f ) )();\n\n\t/*\n\t*    function evalpoly( x ) {\n\t*        if ( x === 0.0 ) {\n\t*            return c[ 0 ];\n\t*        }\n\t*        return c[0]+x*(c[1]+x*(c[2]+x*(c[3]+...+x*(c[n-2]+x*c[n-1]))));\n\t*    }\n\t*/\n\n\t/**\n\t* Evaluates a polynomial.\n\t*\n\t* @private\n\t* @param {number} x - value at which to evaluate a polynomial\n\t* @returns {number} evaluated polynomial\n\t*/\n\tfunction polyval( x ) {\n\t\treturn evalpoly( c, x );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate a polynomial.\n*\n* @module @stdlib/math-base-tools-evalpoly\n*\n* @example\n* import evalpoly from '@stdlib/math-base-tools-evalpoly';\n*\n* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2\n* // returns 123.0\n*\n* @example\n* import evalpoly from '@stdlib/math-base-tools-evalpoly';\n*\n* var polyval = evalpoly.factory( [3.0,2.0,1.0] );\n*\n* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2\n* // returns 123.0\n*\n* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2\n* // returns 38.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Alias for `eval` global.\n*\n* @module @stdlib/utils-eval\n*\n* @example\n* import evil from '@stdlib/utils-eval';\n*\n* var v = evil( '5*4*3*2*1' );\n* // returns 120\n*/\n\n// MODULES //\n\nvar evil = eval; // eslint-disable-line no-eval\n\n\n// EXPORTS //\n\nexport default evil;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport evil from '@stdlib/utils-eval';\n\n\n// MAIN //\n\n/**\n* Tests for native `function*()` support.\n*\n* @returns {boolean} boolean indicating if an environment has native `function*()` support\n*\n* @example\n* var bool = hasGeneratorSupport();\n* // returns <boolean>\n*/\nfunction hasGeneratorSupport() {\n\tvar bool;\n\ttry {\n\t\tevil( '\"use strict\"; (function* () {})' );\n\t\tbool = true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasGeneratorSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport EPS from '@stdlib/constants-float64-eps';\n\n\n// VARIABLES //\n\nvar MAX_TERMS = 1000000;\n\n\n// MAIN //\n\n/**\n* Sum the elements of the series given by the supplied function.\n*\n* @param {Function} generator - series function\n* @param {Object} [options] - function options\n* @param {PositiveInteger} [options.maxTerms=1000000] - maximum number of terms to be added\n* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance\n* @param {number} [options.initialValue=0] - initial value of the resulting sum\n* @returns {number} sum of all series terms\n*\n* @example\n* var gen = geometricSeriesClosure( 0.9 )\n* var out = sumSeries( gen );\n* // returns 10.0\n*\n* function geometricSeriesClosure( x ) {\n*     var exponent = -1;\n*     return function() {\n*         exponent += 1;\n*         return Math.pow( x, exponent );\n*     };\n* }\n*/\nfunction sumSeries( generator, options ) {\n\tvar tolerance;\n\tvar nextTerm;\n\tvar counter;\n\tvar result;\n\tvar opts;\n\n\topts = {};\n\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t}\n\ttolerance = opts.tolerance || EPS;\n\tcounter = opts.maxTerms || MAX_TERMS;\n\tresult = opts.initialValue || 0;\n\n\t// Repeatedly call function...\n\tdo {\n\t\tnextTerm = generator();\n\t\tresult += nextTerm;\n\t}\n\twhile ( ( abs(tolerance * result) < abs(nextTerm) ) && --counter ); // eslint-disable-line no-plusplus\n\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default sumSeries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Sum the elements of the series given by the supplied function.\n*\n* @module @stdlib/math-base-tools-sum-series\n*\n* @example\n* import sumSeries from '@stdlib/math-base-tools-sum-series';\n*\n* var gen = geometricSeriesClosure( 0.9 )\n* var out = sumSeries( gen );\n* // returns 10\n*\n* function geometricSeriesClosure( x ) {\n*     var exponent = -1;\n*     return function() {\n*         exponent += 1;\n*         return Math.pow( x, exponent );\n*     };\n* }\n*/\n\n// MODULES //\n\nimport hasGeneratorSupport from '@stdlib/assert-has-generator-support';\nimport generator from './generators.js';\nimport basic from './basic.js';\n\n\n// MAIN //\n\nvar sumSeries;\nif ( hasGeneratorSupport() ) {\n\tsumSeries = generator;\n} else {\n\tsumSeries = basic;\n}\n\n\n// EXPORTS //\n\nexport default sumSeries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport EPS from '@stdlib/constants-float64-eps';\n\n\n// VARIABLES //\n\nvar MAX_TERMS = 1000000;\n\n\n// MAIN //\n\n/**\n* Sum the elements of the series given by the supplied function.\n*\n* @param {Function} generator - series function\n* @param {Object} [options] - function options\n* @param {PositiveInteger} [options.maxTerms=1000000] - maximum number of terms to be added\n* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance\n* @param {number} [options.initialValue=0] - initial value of the resulting sum\n* @returns {number} sum of all series terms\n*\n* @example\n* var gen = geometricSeriesGenerator( 0.9 );\n* var out = sumSeries( gen );\n* // returns 10.0\n*\n* function* geometricSeriesGenerator( x ) {\n*     var exponent = 0;\n*     while ( true ) {\n*         yield Math.pow( x, exponent );\n*         exponent += 1;\n*     }\n* }\n*/\nfunction sumSeries( generator, options ) {\n\tvar isgenerator;\n\tvar tolerance;\n\tvar nextTerm;\n\tvar counter;\n\tvar result;\n\tvar opts;\n\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t}\n\ttolerance = opts.tolerance || EPS;\n\tcounter = opts.maxTerms || MAX_TERMS;\n\tresult = opts.initialValue || 0;\n\n\tisgenerator = typeof generator.next === 'function';\n\tif ( isgenerator === true ) {\n\t\t// Case A: Iterate over generator object created by a generator function...\n\t\tfor ( nextTerm of generator ) {\n\t\t\tresult += nextTerm;\n\t\t\tif (\n\t\t\t\tabs(tolerance * result) >= abs(nextTerm) ||\n\t\t\t\t--counter === 0 // eslint-disable-line no-plusplus\n\t\t\t) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// Case B: Repeatedly call function...\n\t\tdo {\n\t\t\tnextTerm = generator();\n\t\t\tresult += nextTerm;\n\t\t}\n\t\twhile ( ( abs(tolerance * result) < abs(nextTerm) ) && --counter ); // eslint-disable-line no-plusplus\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default sumSeries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link https://www.boost.org/doc/libs/1_83_0/boost/math/special_functions/log1p.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2005-2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport ln from '@stdlib/math-base-special-ln';\nimport FLOAT_EPS from '@stdlib/constants-float64-eps';\nimport sumSeries from '@stdlib/math-base-tools-sum-series';\nimport log1pSeries from './log1p_series.js';\n\n\n// MAIN //\n\n/**\n* Evaluates \\\\( \\operatorname{log1pmx}(x) = \\ln(1+x) - x \\\\).\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = log1pmx( 1.1 );\n* // returns ~-0.358\n*\n* @example\n* var v = log1pmx( 0.99 );\n* // returns ~-0.302\n*\n* @example\n* var v = log1pmx( -0.99 );\n* // returns ~-3.615\n*\n* @example\n* var v = log1pmx( -1.1 );\n* // returns NaN\n*\n* @example\n* var v = log1pmx( NaN );\n* // returns NaN\n*/\nfunction log1pmx( x ) {\n\tvar opts;\n\tvar ax;\n\tif ( x <= -1.0 ) {\n\t\treturn NaN;\n\t}\n\tax = abs( x );\n\tif ( ax > 0.95 ) {\n\t\treturn ln( 1.0 + x ) - x;\n\t}\n\tif ( ax < FLOAT_EPS ) {\n\t\treturn -x * x / 2.0;\n\t}\n\topts = {\n\t\t'initialValue': -x\n\t};\n\treturn sumSeries( log1pSeries( x ), opts );\n}\n\n\n// EXPORTS //\n\nexport default log1pmx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link https://www.boost.org/doc/libs/1_83_0/boost/math/special_functions/log1p.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2005-2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Creates a function to evaluate a Taylor series expansion `pow(-1, k-1) * pow(x, k) / k` for `ln(1 + x)`.\n*\n* @private\n* @param {number} x - the value at which to evaluate the series\n* @returns {Function} series function\n*/\nfunction log1pSeries( x ) {\n\tvar mMult = -x;\n\tvar mProd = -1.0;\n\tvar k = 0;\n\n\treturn next;\n\n\t/**\n\t* Calculate the next term of the series.\n\t*\n\t* @private\n\t* @returns {number} series expansion term\n\t*/\n\tfunction next() {\n\t\tmProd *= mMult;\n\t\tk += 1;\n\t\treturn mProd / k;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default log1pSeries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The mathematical constant `π` times `2`.\n*\n* @module @stdlib/constants-float64-two-pi\n* @type {number}\n*\n* @example\n* import TWO_PI from '@stdlib/constants-float64-two-pi';\n* // returns 6.283185307179586\n*/\n\n\n// MAIN //\n\n/**\n* The mathematical constant `π` times `2`.\n*\n* @constant\n* @type {number}\n* @default 6.283185307179586\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar TWO_PI = 6.28318530717958647692528676655900576839433879875021164194988918461563281257241799725606965068423413596429617303; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default TWO_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport evalpoly from '@stdlib/math-base-tools-evalpoly';\nimport log1pmx from '@stdlib/math-base-special-log1pmx';\nimport erfc from '@stdlib/math-base-special-erfc';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport exp from '@stdlib/math-base-special-exp';\nimport TWO_PI from '@stdlib/constants-float64-two-pi';\nimport polyvalC0 from './polyval_c0.js';\nimport polyvalC1 from './polyval_c1.js';\nimport polyvalC2 from './polyval_c2.js';\nimport polyvalC3 from './polyval_c3.js';\nimport polyvalC4 from './polyval_c4.js';\nimport polyvalC5 from './polyval_c5.js';\nimport polyvalC6 from './polyval_c6.js';\nimport polyvalC7 from './polyval_c7.js';\nimport polyvalC8 from './polyval_c8.js';\n\n\n// VARIABLES //\n\n// Pre-allocate workspace array:\nvar workspace = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Asymptotic expansions of the incomplete gamma functions when `a` is large and `x ~ a` (IEEE double precision or 10^-17).\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} x - function parameter\n* @returns {number} value of asymptotic expansion\n*/\nfunction igammaTemmeLarge( a, x ) {\n\tvar result;\n\tvar sigma;\n\tvar phi;\n\tvar y;\n\tvar z;\n\n\tsigma = ( x-a ) / a;\n\tphi = -log1pmx( sigma );\n\ty = a * phi;\n\tz = sqrt( 2.0 * phi );\n\tif ( x < a ) {\n\t\tz = -z;\n\t}\n\tworkspace[ 0 ] = polyvalC0( z );\n\tworkspace[ 1 ] = polyvalC1( z );\n\tworkspace[ 2 ] = polyvalC2( z );\n\tworkspace[ 3 ] = polyvalC3( z );\n\tworkspace[ 4 ] = polyvalC4( z );\n\tworkspace[ 5 ] = polyvalC5( z );\n\tworkspace[ 6 ] = polyvalC6( z );\n\tworkspace[ 7 ] = polyvalC7( z );\n\tworkspace[ 8 ] = polyvalC8( z );\n\tworkspace[ 9 ] = -0.00059676129019274625;\n\tresult = evalpoly( workspace, 1.0/a );\n\tresult *= exp( -y ) / sqrt( TWO_PI * a );\n\tif ( x < a ) {\n\t\tresult = -result;\n\t}\n\tresult += erfc( sqrt(y) ) / 2.0;\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default igammaTemmeLarge;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sumSeries from '@stdlib/math-base-tools-sum-series';\nimport lowerIncompleteGammaSeries from './lower_incomplete_gamma_series.js';\n\n\n// MAIN //\n\n/**\n* Sums elements of the series expansion of the lower incomplete gamma function.\n*\n* ## Method\n*\n* -   Multiply result by `((z^a) * (e^-z) / a)` to get the full lower incomplete integral.\n* -   Divide by `tgamma(a)` to get the normalized value.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} z - function parameter\n* @param {number} initialValue - initial value of the resulting sum\n* @returns {number} sum of terms of lower gamma series\n*/\nfunction lowerGammaSeries( a, z, initialValue ) {\n\tvar result;\n\tvar s;\n\n\tinitialValue = initialValue || 0.0;\n\ts = lowerIncompleteGammaSeries( a, z );\n\tresult = sumSeries( s, {\n\t\t'initialValue': initialValue\n\t});\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default lowerGammaSeries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Creates a function to evaluate a series expansion of the incomplete gamma function.\n*\n* @private\n* @param {number} a1 - function parameter\n* @param {number} z1 - function parameter\n* @returns {Function} series function\n*/\nfunction lowerIncompleteGammaSeries( a1, z1 ) {\n\tvar result = 1.0;\n\tvar a = a1;\n\tvar z = z1;\n\treturn next;\n\n\t/**\n\t* Calculate the next term of the series.\n\t*\n\t* @private\n\t* @returns {number} series expansion term\n\t*/\n\tfunction next() {\n\t\tvar r = result;\n\t\ta += 1.0;\n\t\tresult *= z/a;\n\t\treturn r;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default lowerIncompleteGammaSeries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn Infinity;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 709811.662581658 + (x * (679979.8474157227 + (x * (293136.7857211597 + (x * (74887.54032914672 + (x * (12555.290582413863 + (x * (1443.4299244417066 + (x * (115.24194596137347 + (x * (6.309239205732627 + (x * (0.22668404630224365 + (x * (0.004826466289237662 + (x * 0.00004624429436045379))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0 + (x * (362880.0 + (x * (1026576.0 + (x * (1172700.0 + (x * (723680.0 + (x * (269325.0 + (x * (63273.0 + (x * (9450.0 + (x * (870.0 + (x * (45.0 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.00004624429436045379 + (x * (0.004826466289237662 + (x * (0.22668404630224365 + (x * (6.309239205732627 + (x * (115.24194596137347 + (x * (1443.4299244417066 + (x * (12555.290582413863 + (x * (74887.54032914672 + (x * (293136.7857211597 + (x * (679979.8474157227 + (x * 709811.662581658))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (45.0 + (x * (870.0 + (x * (9450.0 + (x * (63273.0 + (x * (269325.0 + (x * (723680.0 + (x * (1172700.0 + (x * (1026576.0 + (x * (362880.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006-7, 2013-14.\n* Copyright Paul A. Bristow 2007, 2013-14.\n* Copyright Nikhar Agrawal 2013-14.\n* Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport lanczosSumExpGScaled from '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled';\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\nimport ln from '@stdlib/math-base-special-ln';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport MIN_LN from '@stdlib/constants-float64-min-ln';\nimport G from '@stdlib/constants-float64-gamma-lanczos-g';\nimport E from '@stdlib/constants-float64-e';\n\n\n// MAIN //\n\n/**\n* Computes `(z^a)*(e^-z) / gamma(a)`.\n*\n* @private\n* @param {number} a - input value\n* @param {number} z - input value\n* @returns {number} function value\n*/\nfunction regularisedGammaPrefix( a, z ) {\n\tvar prefix;\n\tvar amza;\n\tvar agh;\n\tvar alz;\n\tvar amz;\n\tvar sq;\n\tvar d;\n\n\tagh = a + G - 0.5;\n\td = ( (z - a) - G + 0.5 ) / agh;\n\tif ( a < 1.0 ) {\n\t\t// Treat a < 1 as a special case because our Lanczos approximations are optimized against the factorials with a > 1, and for high precision types very small values of `a` can give rather erroneous results for gamma:\n\t\tif ( z <= MIN_LN ) {\n\t\t\t// Use logs, so should be free of cancellation errors:\n\t\t\treturn exp( ( a * ln(z) ) - z - gammaln( a ) );\n\t\t}\n\t\t// No danger of overflow as gamma(a) < 1/a for small a, so direct calculation:\n\t\treturn pow( z, a ) * exp( -z ) / gamma( a );\n\t}\n\tif ( abs(d*d*a) <= 100.0 && a > 150.0 ) {\n\t\t// Special case for large a and a ~ z:\n\t\tprefix = ( a * ( log1p( d ) - d ) ) + ( z * ( 0.5-G ) / agh );\n\t\tprefix = exp( prefix );\n\t}\n\telse {\n\t\t// General case. Direct computation is most accurate, but use various fallbacks for different parts of the problem domain:\n\t\talz = a * ln(z / agh);\n\t\tamz = a - z;\n\t\tif (\n\t\t\tmin(alz, amz) <= MIN_LN ||\n\t\t\tmax(alz, amz) >= MAX_LN\n\t\t) {\n\t\t\tamza = amz / a;\n\t\t\tif (\n\t\t\t\tmin(alz, amz)/2.0 > MIN_LN &&\n\t\t\t\tmax(alz, amz)/2.0 < MAX_LN\n\t\t\t) {\n\t\t\t\t// Compute square root of the result and then square it:\n\t\t\t\tsq = pow( z / agh, a / 2.0 ) * exp( amz / 2.0 );\n\t\t\t\tprefix = sq * sq;\n\t\t\t}\n\t\t\telse if (\n\t\t\t\tmin(alz, amz)/4.0 > MIN_LN &&\n\t\t\t\tmax(alz, amz)/4.0 < MAX_LN &&\n\t\t\t\tz > a\n\t\t\t) {\n\t\t\t\t// Compute the 4th root of the result then square it twice:\n\t\t\t\tsq = pow( z / agh, a / 4.0 ) * exp( amz / 4.0 );\n\t\t\t\tprefix = sq * sq;\n\t\t\t\tprefix *= prefix;\n\t\t\t}\n\t\t\telse if (\n\t\t\t\tamza > MIN_LN &&\n\t\t\t\tamza < MAX_LN\n\t\t\t) {\n\t\t\t\tprefix = pow( (z * exp(amza)) / agh, a );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprefix = exp( alz + amz );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprefix = pow( z / agh, a ) * exp( amz );\n\t\t}\n\t}\n\tprefix *= sqrt( agh / E ) / lanczosSumExpGScaled( a );\n\treturn prefix;\n}\n\n\n// EXPORTS //\n\nexport default regularisedGammaPrefix;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_60_0/boost/math/special_functions/powm1.hpp}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport ln from '@stdlib/math-base-special-ln';\nimport pow from '@stdlib/math-base-special-pow';\nimport trunc from '@stdlib/math-base-special-trunc';\n\n\n// MAIN //\n\n/**\n* Evaluates `bˣ - 1`.\n*\n* @param {number} b - base\n* @param {number} x - exponent\n* @returns {number} function value\n*\n* @example\n* var y = powm1( 2.0, 3.0 );\n* // returns 7.0\n*\n* @example\n* var y = powm1( 4.0, 0.5 );\n* // returns 1.0\n*\n* @example\n* var y = powm1( 0.0, 100.0 );\n* // returns -1.0\n*\n* @example\n* var y = powm1( 100.0, 0.0 );\n* // returns 0.0\n*\n* @example\n* var y = powm1( 0.0, 0.0 );\n* // returns 0.0\n*\n* @example\n* var y = powm1( 3.141592653589793, 5.0 );\n* // returns ~305.0197\n*\n* @example\n* var y = powm1( NaN, 3.0 );\n* // returns NaN\n*\n* @example\n* var y = powm1( 5.0, NaN );\n* // returns NaN\n*/\nfunction powm1( b, x ) {\n\tvar y;\n\tif (\n\t\tisnan( b ) ||\n\t\tisnan( x )\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 ) {\n\t\t// Any number raised to zero (including 0) is always 1 => b^0 - 1 = 0\n\t\treturn 0.0;\n\t}\n\tif ( b === 0.0 ) {\n\t\t// Zero raised to any number (except 0) is always zero => 0^x - 1 = -1\n\t\treturn -1.0;\n\t}\n\tif ( b < 0.0 && x%2.0 === 0 ) {\n\t\t// If `x` is even, recognize that `(-b)**x == (b)**x`...\n\t\tb = -b;\n\t}\n\tif ( b > 0.0 ) {\n\t\tif (\n\t\t\tabs( x*(b-1.0) ) < 0.5 ||\n\t\t\tabs( x ) < 0.2\n\t\t) {\n\t\t\t// No good/quick approximation for ln(b)*x, so we have to evaluate...\n\t\t\ty = ln( b ) * x;\n\t\t\tif ( y < 0.5 ) {\n\t\t\t\treturn expm1( y );\n\t\t\t}\n\t\t}\n\t} else if ( trunc( x ) !== x ) {\n\t\t// Exponentiation would yield a complex result...\n\t\treturn NaN;\n\t}\n\treturn pow( b, x ) - 1.0;\n}\n\n\n// EXPORTS //\n\nexport default powm1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/lgamma_small.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006-7, 2013-14.\n* (C) Copyright Paul A. Bristow 2007, 2013-14.\n* (C) Copyright Nikhar Agrawal 2013-14.\n* (C) Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ln from '@stdlib/math-base-special-ln';\nimport EPS from '@stdlib/constants-float64-eps';\nimport rateval1 from './rational_p1q1.js';\nimport rateval2 from './rational_p2q2.js';\nimport rateval3 from './rational_p3q3.js';\n\n\n// VARIABLES //\n\nvar Y1 = 0.158963680267333984375;\nvar Y2 = 0.52815341949462890625;\nvar Y3 = 0.452017307281494140625;\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the gamma function for small arguments.\n*\n* ## Method\n*\n* 1.  For \\\\( z > 2 \\\\), begin by performing argument reduction until \\\\( z \\\\) is in \\\\(\\[2,3)\\\\). Use the following form:\n*\n*     ```tex\n*     \\operatorname{gammaln}(z) = (z-2)(z+1)(Y + R(z-2))\n*     ```\n*\n*     where \\\\( R(z-2) \\\\) is a rational approximation optimized for low absolute error. As long as the absolute error is small compared to the constant \\\\( Y \\\\), then any rounding error in the computation will get wiped out.\n*\n* 2.  If \\\\( z < 1 \\\\), use recurrence to shift to \\\\( z \\\\) in the interval \\\\(\\[1,2\\]\\\\). Then, use one of two approximations: one for \\\\( z \\\\) in \\\\(\\[1,1.5\\]\\\\) and one for \\\\( z \\\\) in \\\\(\\[1.5,2\\]\\\\):\n*\n*     -   For \\(( z \\\\) in \\\\(\\[1,1.5\\]\\\\), use\n*\n*         ```tex\n*         \\operatorname{gammaln}(z) = (z-1)(z-2)(Y + R(z-1))\n*         ```\n*\n*         where \\\\( R(z-1) \\\\) is a rational approximation optimized for low absolute error. As long as the absolute error is small compared to the constant \\\\( Y \\\\), then any rounding error in the computation will get wiped out.\n*\n*     -   For \\\\( z \\\\) in \\\\(\\[1.5,2\\]\\\\), use\n*\n*         ```tex\n*         \\operatorname{gammaln}(z) = (2-z)(1-z)(Y + R(2-z))\n*         ```\n*\n*         where \\\\( R(2-z) \\\\) is a rational approximation optimized for low absolute error. As long as the absolute error is small compared to the constant \\\\( Y \\\\), then any rounding error in the computation will get wiped out.\n*\n* ## Notes\n*\n* -   Relative error:\n*\n*     | function | peak         | maximum deviation |\n*     |:--------:|:------------:|:-----------------:|\n*     | R(Z-2)   | 4.231e-18    | 5.900e-24         |\n*     | R(Z-1)   | 1.230011e-17 | 3.139e-021        |\n*     | R(2-Z)   | 1.797565e-17 | 2.151e-021        |\n*\n* @private\n* @param {number} z - input value\n* @param {number} zm1 - `z` minus one\n* @param {number} zm2 - `z` minus two\n* @returns {number} function value\n*/\nfunction lgammaSmallImp( z, zm1, zm2 ) {\n\tvar prefix;\n\tvar result;\n\tvar r;\n\tvar R;\n\n\tif ( z < EPS ) {\n\t\treturn -ln( z );\n\t}\n\tif ( zm1 === 0.0 || zm2 === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tresult = 0.0;\n\tif ( z > 2.0 ) {\n\t\tif ( z >= 3.0 ) {\n\t\t\tdo {\n\t\t\t\tz -= 1.0;\n\t\t\t\tzm2 -= 1.0;\n\t\t\t\tresult += ln(z);\n\t\t\t} while ( z >= 3.0 );\n\t\t\tzm2 = z - 2.0;\n\t\t}\n\t\tr = zm2 * ( z+1.0 );\n\t\tR = rateval1( zm2 );\n\t\tresult += ( r*Y1 ) + ( r*R );\n\t\treturn result;\n\t}\n\tif ( z < 1.0 ) {\n\t\tresult += -ln(z);\n\t\tzm2 = zm1;\n\t\tzm1 = z;\n\t\tz += 1.0;\n\t}\n\tif ( z <= 1.5 ) {\n\t\tr = rateval2( zm1 );\n\t\tprefix = zm1 * zm2;\n\t\tresult += ( prefix*Y2 ) + ( prefix*r );\n\t\treturn result;\n\t}\n\t// Case: 1.5 < z <= 2\n\tr = zm2 * zm1;\n\tR = rateval3( -zm2 );\n\tresult += ( r*Y3 ) + ( r*R );\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default lgammaSmallImp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.01803556856784494;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.01803556856784494 + (x * (0.02512664961998968 + (x * (0.049410315156753225 + (x * (0.0172491608709614 + (x * (-0.0002594535632054381 + (x * (-0.0005410098692152044 + (x * (-0.00003245886498259485 + (x * 0.0))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (1.962029871977952 + (x * (1.4801966942423133 + (x * (0.5413914320717209 + (x * (0.09885042511280101 + (x * (0.008213096746488934 + (x * (0.00022493629192211576 + (x * -2.2335276320861708e-7))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (-0.00003245886498259485 + (x * (-0.0005410098692152044 + (x * (-0.0002594535632054381 + (x * (0.0172491608709614 + (x * (0.049410315156753225 + (x * (0.02512664961998968 + (x * -0.01803556856784494))))))))))))); // eslint-disable-line max-len\n\t\ts2 = -2.2335276320861708e-7 + (x * (0.00022493629192211576 + (x * (0.008213096746488934 + (x * (0.09885042511280101 + (x * (0.5413914320717209 + (x * (1.4801966942423133 + (x * (1.962029871977952 + (x * 1.0))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.04906224540690395;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.04906224540690395 + (x * (-0.09691175301595212 + (x * (-0.4149833583594954 + (x * (-0.4065671242119384 + (x * (-0.1584135863906922 + (x * (-0.024014982064857155 + (x * -0.0010034668769627955))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (3.0234982984646304 + (x * (3.4873958536072385 + (x * (1.9141558827442668 + (x * (0.5071377386143635 + (x * (0.05770397226904519 + (x * 0.001957681026011072))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.0010034668769627955 + (x * (-0.024014982064857155 + (x * (-0.1584135863906922 + (x * (-0.4065671242119384 + (x * (-0.4149833583594954 + (x * (-0.09691175301595212 + (x * 0.04906224540690395))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.001957681026011072 + (x * (0.05770397226904519 + (x * (0.5071377386143635 + (x * (1.9141558827442668 + (x * (3.4873958536072385 + (x * (3.0234982984646304 + (x * 1.0))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.029232972183027003;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.029232972183027003 + (x * (0.14421626775719232 + (x * (-0.14244039073863127 + (x * (0.05428096940550536 + (x * (-0.008505359768683364 + (x * (0.0004311713426792973 + (x * 0.0))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (-1.5016935605448505 + (x * (0.846973248876495 + (x * (-0.22009515181499575 + (x * (0.02558279715597587 + (x * (-0.0010066679553914337 + (x * -8.271935218912905e-7))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (0.0004311713426792973 + (x * (-0.008505359768683364 + (x * (0.05428096940550536 + (x * (-0.14244039073863127 + (x * (0.14421626775719232 + (x * -0.029232972183027003))))))))))); // eslint-disable-line max-len\n\t\ts2 = -8.271935218912905e-7 + (x * (-0.0010066679553914337 + (x * (0.02558279715597587 + (x * (-0.22009515181499575 + (x * (0.846973248876495 + (x * (-1.5016935605448505 + (x * 1.0))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006-7, 2013-14.\n* (C) Copyright Paul A. Bristow 2007, 2013-14.\n* (C) Copyright Nikhar Agrawal 2013-14.\n* (C) Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gamma from '@stdlib/math-base-special-gamma';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport lgammaSmallImp from './lgamma_small_imp.js';\n\n\n// MAIN //\n\n/**\n* Computes `gamma(x+1) - 1`.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = gammap1m1( 0.2 );\n* // returns ~-0.082\n*\n* @example\n* var v = gammap1m1( -9.2 );\n* // returns ~-1.0\n*\n* @example\n* var v = gammap1m1( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = gammap1m1( -3.0 );\n* // returns NaN\n*\n* @example\n* var v = gammap1m1( NaN );\n* // returns NaN\n*/\nfunction gammap1m1( x ) {\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\tif ( x < -0.5 ) {\n\t\t\t// Best method is simply to subtract 1 from gamma:\n\t\t\treturn gamma( 1.0+x ) - 1.0;\n\t\t}\n\t\t// Use expm1 on the logarithm of gamma:\n\t\treturn expm1( -log1p( x ) + lgammaSmallImp( x+2.0, x+1.0, x ) );\n\t}\n\tif ( x < 2.0 ) {\n\t\t// Use expm1 on the logarithm of gamma:\n\t\treturn expm1( lgammaSmallImp( x+1.0, x, x-1.0 ) );\n\t}\n\t// Best method is simply to subtract 1 from gamma:\n\treturn gamma( 1.0+x ) - 1.0;\n}\n\n\n// EXPORTS //\n\nexport default gammap1m1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport FLOAT32_SMALLEST_NORMAL from '@stdlib/constants-float32-smallest-normal';\nimport EPS from '@stdlib/constants-float64-eps';\n\n\n// VARIABLES //\n\nvar MAX_ITER = 1000000;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates a continued fraction expansion.\n*\n* ```text\n*           a1\n*      ---------------\n*      b1 +     a2\n*           ----------\n*            b2 +   a3\n*                -----\n*                b3 + ...\n* ```\n*\n* @private\n* @param {Function} gen - function giving terms of continued fraction expansion\n* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term\n* @param {PositiveInteger} maxIter - maximum number of iterations\n* @returns {number} evaluated expansion\n*/\nfunction continuedFractionA( gen, factor, maxIter ) {\n\tvar isgenerator;\n\tvar delta;\n\tvar a0;\n\tvar f;\n\tvar C;\n\tvar D;\n\tvar v;\n\n\tisgenerator = typeof gen.next === 'function';\n\tv = ( isgenerator ) ? gen.next().value : gen();\n\tf = v[ 1 ];\n\ta0 = v[ 0 ];\n\tif ( f === 0.0 ) {\n\t\tf = FLOAT32_SMALLEST_NORMAL;\n\t}\n\tC = f;\n\tD = 0;\n\tif ( isgenerator === true ) {\n\t\tdo {\n\t\t\tv = gen.next().value;\n\t\t\tif ( v ) {\n\t\t\t\tD = v[ 1 ] + ( v[ 0 ] * D );\n\t\t\t\tif ( D === 0.0 ) {\n\t\t\t\t\tD = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tC = v[ 1 ] + ( v[ 0 ] / C );\n\t\t\t\tif ( C === 0.0 ) {\n\t\t\t\t\tC = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tD = 1.0 / D;\n\t\t\t\tdelta = C * D;\n\t\t\t\tf *= delta;\n\t\t\t}\n\t\t} while ( ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus\n\t} else {\n\t\tdo {\n\t\t\tv = gen();\n\t\t\tif ( v ) {\n\t\t\t\tD = v[ 1 ] + ( v[ 0 ] * D );\n\t\t\t\tif ( D === 0.0 ) {\n\t\t\t\t\tD = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tC = v[ 1 ] + ( v[ 0 ] / C );\n\t\t\t\tif ( C === 0.0 ) {\n\t\t\t\t\tC = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tD = 1.0 / D;\n\t\t\t\tdelta = C * D;\n\t\t\t\tf *= delta;\n\t\t\t}\n\t\t} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus\n\t}\n\treturn a0 / f;\n}\n\n/**\n* Evaluates a continued fraction expansion.\n*\n* ```text\n*      b0 +    a1\n*      ---------------\n*      b1 +     a2\n*           ----------\n*           b2 +   a3\n*                -----\n*                b3 + ...\n* ```\n*\n* @private\n* @param {Function} gen - function giving terms of continued fraction expansion\n* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term\n* @param {PositiveInteger} maxIter - maximum number of iterations\n* @returns {number} evaluated expansion\n*/\nfunction continuedFractionB( gen, factor, maxIter ) {\n\tvar isgenerator;\n\tvar delta;\n\tvar f;\n\tvar C;\n\tvar D;\n\tvar v;\n\n\tisgenerator = typeof gen.next === 'function';\n\tv = ( isgenerator ) ? gen.next().value : gen();\n\tf = v[ 1 ];\n\tif ( f === 0.0 ) {\n\t\tf = FLOAT32_SMALLEST_NORMAL;\n\t}\n\tC = f;\n\tD = 0.0;\n\tif ( isgenerator === true ) {\n\t\tdo {\n\t\t\tv = gen.next().value;\n\t\t\tif ( v ) {\n\t\t\t\tD = v[ 1 ] + ( v[ 0 ] * D );\n\t\t\t\tif ( D === 0.0 ) {\n\t\t\t\t\tD = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tC = v[ 1 ] + ( v[ 0 ] / C );\n\t\t\t\tif ( C === 0.0 ) {\n\t\t\t\t\tC = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tD = 1.0 / D;\n\t\t\t\tdelta = C * D;\n\t\t\t\tf *= delta;\n\t\t\t}\n\t\t} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus\n\t} else {\n\t\tdo {\n\t\t\tv = gen();\n\t\t\tif ( v ) {\n\t\t\t\tD = v[ 1 ] + ( v[ 0 ] * D );\n\t\t\t\tif ( D === 0.0 ) {\n\t\t\t\t\tD = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tC = v[ 1 ] + ( v[ 0 ] / C );\n\t\t\t\tif ( C === 0.0 ) {\n\t\t\t\t\tC = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tD = 1.0 / D;\n\t\t\t\tdelta = C * D;\n\t\t\t\tf *= delta;\n\t\t\t}\n\t\t} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus\n\t}\n\treturn f;\n}\n\n\n// MAIN //\n\n/**\n* Evaluates the continued fraction approximation for the supplied series generator using the modified Lentz algorithm.\n*\n* ## References\n*\n* -   Lentz, William J. 1976. \"Generating bessel functions in Mie scattering calculations using continued fractions.\" _Applied Optics_ 15 (3): 668–71. doi:[10.1364/AO.15.000668](https://doi.org/10.1364/AO.15.000668).\n*\n* @param {Function} generator - function returning terms of continued fraction expansion\n* @param {Object} [options] - function options\n* @param {PositiveInteger} [options.maxIter=1000] - maximum number of iterations\n* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance\n* @param {boolean} [options.keep=false] - whether to keep the leading b term\n* @returns {number} value of continued fraction\n*\n* @example\n* // Continued fraction for (e-1)^(-1):\n* var gen = generator();\n* var out = continuedFraction( gen );\n* // returns ~0.582\n*\n* function* generator() {\n*    var i = 0;\n*    while ( true ) {\n*        i++;\n*        yield [ i, i ];\n*    }\n* }\n*/\nfunction continuedFraction( generator, options ) {\n\tvar maxIter;\n\tvar opts;\n\tvar eps;\n\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t}\n\tmaxIter = opts.maxIter || MAX_ITER;\n\teps = opts.tolerance || EPS;\n\n\tif ( opts.keep ) {\n\t\treturn continuedFractionB( generator, eps, maxIter );\n\t}\n\treturn continuedFractionA( generator, eps, maxIter );\n}\n\n\n// EXPORTS //\n\nexport default continuedFraction;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Smallest positive single-precision floating-point normal number.\n*\n* @module @stdlib/constants-float32-smallest-normal\n* @type {number}\n*\n* @example\n* import FLOAT32_SMALLEST_NORMAL from '@stdlib/constants-float32-smallest-normal';\n* // returns 1.1754943508222875e-38\n*/\n\n\n// MAIN //\n\n/**\n* The smallest positive single-precision floating-point normal number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* \\frac{1}{2^{127-1}}\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000001 00000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default 1.1754943508222875e-38\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_SMALLEST_NORMAL = 1.1754943508222875e-38;\n\n\n// EXPORTS //\n\nexport default FLOAT32_SMALLEST_NORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport EPS from '@stdlib/constants-float64-eps';\nimport FLOAT32_SMALLEST_NORMAL from '@stdlib/constants-float32-smallest-normal';\n\n\n// VARIABLES //\n\nvar MAX_ITER = 1000000;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates a continued fraction expansion.\n*\n* ```text\n*           a1\n*      ---------------\n*      b1 +     a2\n*           ----------\n*            b2 +   a3\n*                -----\n*                b3 + ...\n* ```\n*\n* @private\n* @param {Function} gen - function giving terms of continued fraction expansion\n* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term\n* @param {PositiveInteger} maxIter - maximum number of iterations\n* @returns {number} evaluated expansion\n*/\nfunction continuedFractionA( gen, factor, maxIter ) {\n\tvar delta;\n\tvar a0;\n\tvar C;\n\tvar D;\n\tvar f;\n\tvar v;\n\n\tv = gen();\n\tf = v[ 1 ];\n\ta0 = v[ 0 ];\n\tif ( f === 0 ) {\n\t\tf = FLOAT32_SMALLEST_NORMAL;\n\t}\n\tC = f;\n\tD = 0.0;\n\n\tdo {\n\t\tv = gen();\n\t\tif ( v ) {\n\t\t\tD = v[ 1 ] + ( v[ 0 ] * D );\n\t\t\tif ( D === 0.0 ) {\n\t\t\t\tD = FLOAT32_SMALLEST_NORMAL;\n\t\t\t}\n\t\t\tC = v[ 1 ] + ( v[ 0 ] / C );\n\t\t\tif ( C === 0.0 ) {\n\t\t\t\tC = FLOAT32_SMALLEST_NORMAL;\n\t\t\t}\n\t\t\tD = 1.0 / D;\n\t\t\tdelta = C * D;\n\t\t\tf *= delta;\n\t\t}\n\t} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus\n\n\treturn a0 / f;\n}\n\n/**\n* Evaluates a continued fraction expansion.\n*\n* ```text\n*      b0 +   a1\n*      ---------------\n*      b1 +   a2\n*           ----------\n*           b2 +   a3\n*                -----\n*                b3 + ...\n* ```\n*\n* @private\n* @param {Function} gen - function giving terms of continued fraction expansion\n* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term\n* @param {PositiveInteger} maxIter - maximum number of iterations\n* @returns {number} evaluated expansion\n*/\nfunction continuedFractionB( gen, factor, maxIter ) {\n\tvar delta;\n\tvar C;\n\tvar D;\n\tvar f;\n\tvar v;\n\n\tv = gen();\n\tf = v[ 1 ];\n\tif ( f === 0.0 ) {\n\t\tf = FLOAT32_SMALLEST_NORMAL;\n\t}\n\tC = f;\n\tD = 0.0;\n\tdo {\n\t\tv = gen();\n\t\tif ( v ) {\n\t\t\tD = v[ 1 ] + ( v[ 0 ] * D );\n\t\t\tif ( D === 0.0 ) {\n\t\t\t\tD = FLOAT32_SMALLEST_NORMAL;\n\t\t\t}\n\t\t\tC = v[ 1 ] + ( v[ 0 ] / C );\n\t\t\tif ( C === 0.0 ) {\n\t\t\t\tC = FLOAT32_SMALLEST_NORMAL;\n\t\t\t}\n\t\t\tD = 1.0 / D;\n\t\t\tdelta = C * D;\n\t\t\tf *= delta;\n\t\t}\n\t} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus\n\treturn f;\n}\n\n\n// MAIN //\n\n/**\n* Evaluates the continued fraction approximation for the supplied series generator using the modified Lentz algorithm.\n*\n* ## References\n*\n* -   Lentz, William J. 1976. \"Generating bessel functions in Mie scattering calculations using continued fractions.\" _Applied Optics_ 15 (3): 668–71. doi:[10.1364/AO.15.000668](https://doi.org/10.1364/AO.15.000668).\n*\n* @param {Function} generator - function returning terms of continued fraction expansion\n* @param {Object} [options] - function options\n* @param {PositiveInteger} [options.maxIter=1000000] - maximum number of iterations\n* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance\n* @param {boolean} [options.keep=false] - whether to keep the leading b term\n* @returns {number} value of continued fraction\n*\n* @example\n* // Continued fraction for (e-1)^(-1):\n* var gen = generator();\n* var out = continuedFraction( gen );\n* // returns ~0.582\n*\n* function generator() {\n*    var i = 0;\n*    return function() {\n*        i++;\n*        return [ i, i ];\n*    };\n* }\n*/\nfunction continuedFraction( generator, options ) {\n\tvar maxIter;\n\tvar opts;\n\tvar eps;\n\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t}\n\teps = opts.tolerance || EPS;\n\tmaxIter = opts.maxIter || MAX_ITER;\n\n\tif ( opts.keep ) {\n\t\treturn continuedFractionB( generator, eps, maxIter );\n\t}\n\treturn continuedFractionA( generator, eps, maxIter );\n}\n\n\n// EXPORTS //\n\nexport default continuedFraction;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Calculate a continued fraction approximation.\n*\n* @module @stdlib/math-base-tools-continued-fraction\n*\n* @example\n* import continuedFraction from '@stdlib/math-base-tools-continued-fraction';\n*\n* // Continued fraction for (e-1)^(-1):\n* var gen = generator()\n* var out = continuedFraction( gen );\n* // returns ~0.582\n*\n* function generator() {\n*    var i = 0;\n*    return function() {\n*        i++;\n*        return [ i, i ];\n*    };\n* }\n*/\n\n// MODULES //\n\nimport hasGeneratorSupport from '@stdlib/assert-has-generator-support';\nimport generator from './generators.js';\nimport basic from './basic.js';\n\n\n// MAIN //\n\nvar continuedFraction;\nif ( hasGeneratorSupport() ) {\n\tcontinuedFraction = generator;\n} else {\n\tcontinuedFraction = basic;\n}\n\n\n// EXPORTS //\n\nexport default continuedFraction;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport continuedFraction from '@stdlib/math-base-tools-continued-fraction';\nimport upperIncompleteGammaFract from './upper_incomplete_gamma_fract.js';\n\n\n// MAIN //\n\n/**\n* Evaluate the lower incomplete gamma integral via a series expansion and divide by `gamma(z)` to normalize.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} z - function parameter\n* @returns {number} function value\n*/\nfunction upperGammaFraction( a, z ) {\n\tvar f = upperIncompleteGammaFract( a, z );\n\treturn 1.0 / ( z - a + 1.0 + continuedFraction( f ) );\n}\n\n\n// EXPORTS //\n\nexport default upperGammaFraction;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Creates a function to evaluate a series expansion of the upper incomplete gamma fraction.\n*\n* @private\n* @param {number} a1 - function parameter\n* @param {number} z1 - function parameter\n* @returns {Function} series function\n*/\nfunction upperIncompleteGammaFract( a1, z1 ) {\n\tvar z = z1 - a1 + 1.0;\n\tvar a = a1;\n\tvar k = 0;\n\treturn next;\n\n\t/**\n\t* Calculate the next term of the series.\n\t*\n\t* @private\n\t* @returns {Array} series expansion terms\n\t*/\n\tfunction next() {\n\t\tk += 1;\n\t\tz += 2.0;\n\t\treturn [\n\t\t\tk * (a - k),\n\t\t\tz\n\t\t];\n\t}\n}\n\n\n// EXPORTS //\n\nexport default upperIncompleteGammaFract;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006-7, 2013-14.\n* (C) Copyright Paul A. Bristow 2007, 2013-14.\n* (C) Copyright Nikhar Agrawal 2013-14.\n* (C) Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport floor from '@stdlib/math-base-special-floor';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport SQRT_EPSILON from '@stdlib/constants-float64-sqrt-eps';\nimport FLOAT64_MAX from '@stdlib/constants-float64-max';\nimport SQRT_TWO_PI from '@stdlib/constants-float64-sqrt-two-pi';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport finiteGammaQ from './finite_gamma_q.js';\nimport finiteHalfGammaQ from './finite_half_gamma_q.js';\nimport fullIGammaPrefix from './full_igamma_prefix.js';\nimport igammaTemmeLarge from './igamma_temme_large.js';\nimport lowerGammaSeries from './lower_gamma_series.js';\nimport regularisedGammaPrefix from './regularised_gamma_prefix.js';\nimport tgammaSmallUpperPart from './tgamma_small_upper_part.js';\nimport upperGammaFraction from './upper_gamma_fraction.js';\n\n\n// VARIABLES //\n\nvar MAX_FACTORIAL = 170; // TODO: consider extracting as a constant\n\n\n// MAIN //\n\n/**\n* Computes the regularized incomplete gamma function. The upper tail is calculated via the modified Lentz's method for computing continued fractions, the lower tail using a power expansion.\n*\n* ## Notes\n*\n* -   When `a >= MAX_FACTORIAL` and computing the non-normalized incomplete gamma, result is rather hard to compute unless we use logs. There are really two options a) if `x` is a long way from `a` in value then we can reliably use methods 2 and 4 below in logarithmic form and go straight to the result. Otherwise we let the regularized gamma take the strain (the result is unlikely to underflow in the central region anyway) and combine with `lgamma` in the hopes that we get a finite result.\n*\n* @param {NonNegativeNumber} x - function parameter\n* @param {PositiveNumber} a - function parameter\n* @param {boolean} [regularized=true] - boolean indicating if the function should evaluate the regularized or non-regularized incomplete gamma functions\n* @param {boolean} [upper=false] - boolean indicating if the function should return the upper tail of the incomplete gamma function\n* @returns {number} function value\n*/\nfunction gammainc( x, a, regularized, upper ) {\n\tvar optimisedInvert;\n\tvar normalized;\n\tvar evalMethod;\n\tvar initValue;\n\tvar isHalfInt;\n\tvar useTemme;\n\tvar isSmallA;\n\tvar invert;\n\tvar result;\n\tvar isInt;\n\tvar sigma;\n\tvar gam;\n\tvar res;\n\tvar fa;\n\tvar g;\n\n\tif ( x < 0.0 || a <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tnormalized = ( regularized === void 0 ) ? true : regularized;\n\tinvert = upper;\n\tresult = 0.0;\n\tif ( a >= MAX_FACTORIAL && !normalized ) {\n\t\tif ( invert && ( a * 4.0 < x ) ) {\n\t\t\t// This is method 4 below, done in logs:\n\t\t\tresult = ( a * ln(x) ) - x;\n\t\t\tresult += ln( upperGammaFraction( a, x ) );\n\t\t}\n\t\telse if ( !invert && ( a > 4.0 * x ) ) {\n\t\t\t// This is method 2 below, done in logs:\n\t\t\tresult = ( a * ln(x) ) - x;\n\t\t\tinitValue = 0;\n\t\t\tresult += ln( lowerGammaSeries( a, x, initValue ) / a );\n\t\t}\n\t\telse {\n\t\t\tresult = gammainc( a, x, true, invert );\n\t\t\tif ( result === 0.0 ) {\n\t\t\t\tif ( invert ) {\n\t\t\t\t\t// Try http://functions.wolfram.com/06.06.06.0039.01\n\t\t\t\t\tresult = 1.0 + ( 1.0 / (12.0*a) ) + ( 1.0 / (288.0*a*a) );\n\t\t\t\t\tresult = ln( result ) - a + ( ( a-0.5 ) * ln(a) );\n\t\t\t\t\tresult += ln( SQRT_TWO_PI );\n\t\t\t\t} else {\n\t\t\t\t\t// This is method 2 below, done in logs, we're really outside the range of this method, but since the result is almost certainly infinite, we should probably be OK:\n\t\t\t\t\tresult = ( a * ln( x ) ) - x;\n\t\t\t\t\tinitValue = 0.0;\n\t\t\t\t\tresult += ln( lowerGammaSeries( a, x, initValue ) / a);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult = ln( result ) + gammaln( a );\n\t\t\t}\n\t\t}\n\t\tif ( result > MAX_LN ) {\n\t\t\treturn PINF;\n\t\t}\n\t\treturn exp( result );\n\t}\n\tisSmallA = ( a < 30 ) && ( a <= x + 1.0 ) && ( x < MAX_LN );\n\tif ( isSmallA ) {\n\t\tfa = floor( a );\n\t\tisInt = ( fa === a );\n\t\tisHalfInt = ( isInt ) ? false : ( abs( fa - a ) === 0.5 );\n\t} else {\n\t\tisInt = isHalfInt = false;\n\t}\n\tif ( isInt && x > 0.6 ) {\n\t\t// Calculate Q via finite sum:\n\t\tinvert = !invert;\n\t\tevalMethod = 0;\n\t}\n\telse if ( isHalfInt && x > 0.2 ) {\n\t\t// Calculate Q via finite sum for half integer a:\n\t\tinvert = !invert;\n\t\tevalMethod = 1;\n\t}\n\telse if ( x < SQRT_EPSILON && a > 1.0 ) {\n\t\tevalMethod = 6;\n\t}\n\telse if ( x < 0.5 ) {\n\t\t// Changeover criterion chosen to give a changeover at Q ~ 0.33:\n\t\tif ( -0.4 / ln( x ) < a ) {\n\t\t\tevalMethod = 2;\n\t\t} else {\n\t\t\tevalMethod = 3;\n\t\t}\n\t}\n\telse if ( x < 1.1 ) {\n\t\t// Changeover here occurs when P ~ 0.75 or Q ~ 0.25:\n\t\tif ( x * 0.75 < a ) {\n\t\t\tevalMethod = 2;\n\t\t} else {\n\t\t\tevalMethod = 3;\n\t\t}\n\t}\n\telse {\n\t\t// Begin by testing whether we're in the \"bad\" zone where the result will be near 0.5 and the usual series and continued fractions are slow to converge:\n\t\tuseTemme = false;\n\t\tif ( normalized && a > 20 ) {\n\t\t\tsigma = abs( (x-a)/a );\n\t\t\tif ( a > 200 ) {\n\t\t\t\t// Limit chosen so that we use Temme's expansion only if the result would be larger than about 10^-6. Below that the regular series and continued fractions converge OK, and if we use Temme's method we get increasing errors from the dominant erfc term as it's (inexact) argument increases in magnitude.\n\t\t\t\tif ( 20 / a > sigma * sigma ) {\n\t\t\t\t\tuseTemme = true;\n\t\t\t\t}\n\t\t\t} else if ( sigma < 0.4 ) {\n\t\t\t\tuseTemme = true;\n\t\t\t}\n\t\t}\n\t\tif ( useTemme ) {\n\t\t\tevalMethod = 5;\n\t\t}\n\t\t// Regular case where the result will not be too close to 0.5: Changeover occurs at P ~ Q ~ 0.5. Note that series computation of P is about x2 faster than continued fraction calculation of Q, so try and use the CF only when really necessary, especially for small x.\n\t\telse if ( x - ( 1.0 / (3.0 * x) ) < a ) {\n\t\t\tevalMethod = 2;\n\t\t} else {\n\t\t\tevalMethod = 4;\n\t\t\tinvert = !invert;\n\t\t}\n\t}\n\n\t/* eslint-disable default-case */\n\tswitch ( evalMethod ) {\n\tcase 0:\n\t\tresult = finiteGammaQ( a, x );\n\t\tif (normalized === false ) {\n\t\t\tresult *= gamma( a );\n\t\t}\n\t\tbreak;\n\tcase 1:\n\t\tresult = finiteHalfGammaQ( a, x );\n\t\tif ( normalized === false ) {\n\t\t\tresult *= gamma( a );\n\t\t}\n\t\tbreak;\n\tcase 2:\n\t\t// Compute P:\n\t\tresult = ( normalized ) ?\n\t\t\tregularisedGammaPrefix( a, x ) :\n\t\t\tfullIGammaPrefix( a, x );\n\t\tif ( result !== 0.0 ) {\n\t\t\tinitValue = 0.0;\n\t\t\toptimisedInvert = false;\n\t\t\tif ( invert ) {\n\t\t\t\tinitValue = ( normalized ) ? 1.0 : gamma(a);\n\t\t\t\tif (\n\t\t\t\t\tnormalized ||\n\t\t\t\t\tresult >= 1.0 ||\n\t\t\t\t\tFLOAT64_MAX * result > initValue\n\t\t\t\t) {\n\t\t\t\t\tinitValue /= result;\n\t\t\t\t\tif (\n\t\t\t\t\t\tnormalized ||\n\t\t\t\t\t\ta < 1.0 ||\n\t\t\t\t\t\t( FLOAT64_MAX / a > initValue )\n\t\t\t\t\t) {\n\t\t\t\t\t\tinitValue *= -a;\n\t\t\t\t\t\toptimisedInvert = true;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tinitValue = 0.0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tinitValue = 0.0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresult *= lowerGammaSeries( a, x, initValue ) / a;\n\t\tif ( optimisedInvert ) {\n\t\t\tinvert = false;\n\t\t\tresult = -result;\n\t\t}\n\t\tbreak;\n\tcase 3:\n\t\t// Compute Q:\n\t\tinvert = !invert;\n\t\tres = tgammaSmallUpperPart( a, x, invert );\n\t\tresult = res[ 0 ];\n\t\tg = res[ 1 ];\n\t\tinvert = false;\n\t\tif ( normalized ) {\n\t\t\tresult /= g;\n\t\t}\n\t\tbreak;\n\tcase 4:\n\t\t// Compute Q:\n\t\tresult = ( normalized ) ?\n\t\t\tregularisedGammaPrefix( a, x ) :\n\t\t\tfullIGammaPrefix( a, x );\n\t\tif ( result !== 0 ) {\n\t\t\tresult *= upperGammaFraction( a, x );\n\t\t}\n\t\tbreak;\n\tcase 5:\n\t\tresult = igammaTemmeLarge( a, x );\n\t\tif ( x >= a ) {\n\t\t\tinvert = !invert;\n\t\t}\n\t\tbreak;\n\tcase 6:\n\t\t// Since x is so small that P is necessarily very small too, use http://functions.wolfram.com/GammaBetaErf/GammaRegularized/06/01/05/01/01/\n\t\tresult = ( normalized ) ?\n\t\t\tpow(x, a) / gamma( a + 1.0 ) :\n\t\t\tpow( x, a ) / a;\n\t\tresult *= 1.0 - ( a * x / ( a + 1.0 ) );\n\t\tbreak;\n\t}\n\tif ( normalized && result > 1.0 ) {\n\t\tresult = 1.0;\n\t}\n\tif ( invert ) {\n\t\tgam = ( normalized ) ? 1.0 : gamma( a );\n\t\tresult = gam - result;\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default gammainc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Calculates normalized Q when a is an integer.\n*\n* @private\n* @param {integer} a - function parameter\n* @param {number} x - function parameter\n* @returns {number} upper gamma fraction\n*/\nfunction finiteGammaQ( a, x ) {\n\tvar term;\n\tvar sum;\n\tvar e;\n\tvar n;\n\n\te = exp( -x );\n\tsum = e;\n\tif ( sum !== 0.0 ) {\n\t\tterm = sum;\n\t\tfor ( n = 1; n < a; ++n ) {\n\t\t\tterm /= n;\n\t\t\tterm *= x;\n\t\t\tsum += term;\n\t\t}\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default finiteGammaQ;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport erfc from '@stdlib/math-base-special-erfc';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport exp from '@stdlib/math-base-special-exp';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Calculates normalized Q when a is a half-integer.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} x - function parameter\n* @returns {number} upper gamma fraction\n*/\nfunction finiteHalfGammaQ( a, x ) {\n\tvar half;\n\tvar term;\n\tvar sum;\n\tvar e;\n\tvar n;\n\n\te = erfc( sqrt(x) );\n\tif ( e !== 0 && a > 1.0 ) {\n\t\tterm = exp( -x ) / sqrt( PI * x );\n\t\tterm *= x;\n\t\thalf = 0.5;\n\t\tterm /= half;\n\t\tsum = term;\n\t\tfor ( n = 2; n < a; ++n ) {\n\t\t\tterm /= n - half;\n\t\t\tterm *= x;\n\t\t\tsum += term;\n\t\t}\n\t\te += sum;\n\t}\n\treturn e;\n}\n\n\n// EXPORTS //\n\nexport default finiteHalfGammaQ;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport powm1 from '@stdlib/math-base-special-powm1';\nimport sumSeries from '@stdlib/math-base-tools-sum-series';\nimport gamma1pm1 from '@stdlib/math-base-special-gamma1pm1';\nimport smallGamma2Series from './small_gamma2_series.js';\n\n\n// MAIN //\n\n/**\n* Compute the full upper fraction (Q) when `a` is very small.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} x - function parameter\n* @param {boolean} invert - boolean indicating if the upper tail of the incomplete gamma function should be evaluated\n* @returns {Array} full upper fraction (Q) and pgam\n*/\nfunction tgammaSmallUpperPart( a, x, invert ) {\n\tvar initialValue;\n\tvar result;\n\tvar pgam;\n\tvar p;\n\tvar s;\n\n\tresult = gamma1pm1( a );\n\tpgam = ( result + 1.0 ) / a;\n\tp = powm1( x, a );\n\tresult -= p;\n\tresult /= a;\n\ts = smallGamma2Series( a, x );\n\tp += 1.0;\n\tinitialValue = ( invert ) ? pgam : 0.0;\n\tresult = -p * sumSeries( s, {\n\t\t'initialValue': (initialValue - result) / p\n\t});\n\tif ( invert ) {\n\t\tresult = -result;\n\t}\n\treturn [ result, pgam ];\n}\n\n\n// EXPORTS //\n\nexport default tgammaSmallUpperPart;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n/**\n* Series representation for upper fraction when `z` is small.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} x - function parameter\n* @returns {Function} series function\n*/\nfunction smallGamma2Series( a, x ) {\n\tvar result;\n\tvar apn;\n\tvar n;\n\tvar r;\n\n\tresult = -x;\n\tx = -x;\n\tapn = a + 1.0;\n\tn = 1;\n\treturn next;\n\n\t/**\n\t* Calculate the next term of the series.\n\t*\n\t* @private\n\t* @returns {number} series expansion term\n\t*/\n\tfunction next() {\n\t\tr = result / apn;\n\t\tresult *= x;\n\t\tn += 1;\n\t\tresult /= n;\n\t\tapn += 1.0;\n\t\treturn r;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default smallGamma2Series;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.3333333333333333;\n\t}\n\treturn -0.3333333333333333 + (x * (0.08333333333333333 + (x * (-0.014814814814814815 + (x * (0.0011574074074074073 + (x * (0.0003527336860670194 + (x * (-0.0001787551440329218 + (x * (0.00003919263178522438 + (x * (-0.0000021854485106799924 + (x * (-0.00000185406221071516 + (x * (8.296711340953087e-7 + (x * (-1.7665952736826078e-7 + (x * (6.707853543401498e-9 + (x * (1.0261809784240309e-8 + (x * (-4.382036018453353e-9 + (x * 9.14769958223679e-10))))))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.001851851851851852;\n\t}\n\treturn -0.001851851851851852 + (x * (-0.003472222222222222 + (x * (0.0026455026455026454 + (x * (-0.0009902263374485596 + (x * (0.00020576131687242798 + (x * (-4.018775720164609e-7 + (x * (-0.000018098550334489977 + (x * (0.00000764916091608111 + (x * (-0.0000016120900894563446 + (x * (4.647127802807434e-9 + (x * (1.378633446915721e-7 + (x * (-5.752545603517705e-8 + (x * 1.1951628599778148e-8))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.004133597883597883;\n\t}\n\treturn 0.004133597883597883 + (x * (-0.0026813271604938273 + (x * (0.0007716049382716049 + (x * (0.0000020093878600823047 + (x * (-0.00010736653226365161 + (x * (0.000052923448829120125 + (x * (-0.000012760635188618728 + (x * (3.423578734096138e-8 + (x * (0.0000013721957309062932 + (x * (-6.298992138380055e-7 + (x * 1.4280614206064242e-7))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.0006494341563786008;\n\t}\n\treturn 0.0006494341563786008 + (x * (0.00022947209362139917 + (x * (-0.0004691894943952557 + (x * (0.00026772063206283885 + (x * (-0.00007561801671883977 + (x * (-2.396505113867297e-7 + (x * (0.000011082654115347302 + (x * (-0.0000056749528269915965 + (x * 0.0000014230900732435883))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.0008618882909167117;\n\t}\n\treturn -0.0008618882909167117 + (x * (0.0007840392217200666 + (x * (-0.0002990724803031902 + (x * (-0.0000014638452578843418 + (x * (0.00006641498215465122 + (x * (-0.00003968365047179435 + (x * 0.000011375726970678419))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.00033679855336635813;\n\t}\n\treturn -0.00033679855336635813 + (x * (-0.00006972813758365858 + (x * (0.0002772753244959392 + (x * (-0.00019932570516188847 + (x * (0.00006797780477937208 + (x * (1.419062920643967e-7 + (x * (-0.000013594048189768693 + (x * (0.000008018470256334202 + (x * -0.000002291481176508095))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.0005313079364639922;\n\t}\n\treturn 0.0005313079364639922 + (x * (-0.0005921664373536939 + (x * (0.0002708782096718045 + (x * (7.902353232660328e-7 + (x * (-0.00008153969367561969 + (x * (0.0000561168275310625 + (x * -0.000018329116582843375))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.00034436760689237765;\n\t}\n\treturn 0.00034436760689237765 + (x * (0.00005171790908260592 + (x * (-0.00033493161081142234 + (x * (0.0002812695154763237 + (x * -0.00010976582244684731))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.0006526239185953094;\n\t}\n\treturn -0.0006526239185953094 + (x * (0.0008394987206720873 + (x * -0.000438297098541721))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaDeltaRatio from '@stdlib/math-base-special-gamma-delta-ratio';\nimport factorial from '@stdlib/math-base-special-factorial';\nimport gammainc from '@stdlib/math-base-special-gammainc';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport abs from '@stdlib/math-base-special-abs';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport MIN_VALUE from '@stdlib/constants-float64-smallest-normal';\nimport EPSILON from '@stdlib/constants-float64-eps';\nimport fullIGammaPrefix from './full_igamma_prefix.js';\nimport regularizedGammaPrefix from './regularized_gamma_prefix.js';\n\n\n// VARIABLES //\n\nvar p = new Array( 30 );\n\n\n// MAIN //\n\n/**\n* This is DiDonato and Morris's BGRAT routine, see Eq's 9 through 9.6.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {Probability} y - probability equal to `1-x`\n* @param {NonNegativeInteger} s0 - initial value\n* @param {number} mult - initial value\n* @param {boolean} normalized - boolean indicating whether to evaluate the regularized or non-regularized incomplete beta function\n* @returns {number} function value\n*/\nfunction betaSmallBLargeASeries( a, b, x, y, s0, mult, normalized ) {\n\tvar prefix;\n\tvar tmp1;\n\tvar tnp1;\n\tvar sum;\n\tvar b2n;\n\tvar bm1;\n\tvar lx2;\n\tvar lxp;\n\tvar mbn;\n\tvar lx;\n\tvar t4;\n\tvar h;\n\tvar j;\n\tvar m;\n\tvar n;\n\tvar r;\n\tvar t;\n\tvar u;\n\n\t// Some values we'll need later, these are Eq 9.1:\n\tbm1 = b - 1.0;\n\tt = a + ( bm1 / 2.0 );\n\tif ( y < 0.35 ) {\n\t\tlx = log1p( -y );\n\t} else {\n\t\tlx = ln( x );\n\t}\n\tu = -t * lx;\n\n\t// And from from 9.2:\n\th = regularizedGammaPrefix( b, u );\n\tif ( h <= MIN_VALUE ) {\n\t\treturn s0;\n\t}\n\tif ( normalized ) {\n\t\tprefix = h / gammaDeltaRatio( a, b );\n\t\tprefix /= pow( t, b );\n\t} else {\n\t\tprefix = fullIGammaPrefix( b, u ) / pow( t, b );\n\t}\n\tprefix *= mult;\n\n\t// We need the quantity Pn. Unfortunately, this is computed recursively and requires a full history of all the previous values. No choice but to declare a big table and hope it's big enough...\n\tp[ 0 ] = 1;  // see 9.3.\n\n\t// Now an initial value for J, see 9.6: gammainc( u, b, regularized, upper )\n\tj = gammainc( u, b, true, true );\n\tj /= h;\n\n\t// Now we can start to pull things together and evaluate the sum in Eq 9:\n\tsum = s0 + ( prefix * j ); // Value at N = 0\n\n\t// Some variables we'll need...\n\ttnp1 = 1.0; // 2*N+1\n\tlx2 = lx / 2.0;\n\tlx2 *= lx2;\n\tlxp = 1.0;\n\tt4 = 4.0 * t * t;\n\tb2n = b;\n\tfor ( n = 1; n < p.length; ++n ) {\n\t\t// Begin by evaluating the next Pn from Eq 9.4:\n\t\ttnp1 += 2.0;\n\t\tp[ n ] = 0.0;\n\t\tmbn = b - n;\n\t\ttmp1 = 3;\n\t\tfor ( m = 1; m < n; ++m ) {\n\t\t\tmbn = ( m * b ) - n;\n\t\t\tp[ n ] += mbn * p[ n-m ] / factorial( tmp1 );\n\t\t\ttmp1 += 2;\n\t\t}\n\t\tp[ n ] /= n;\n\t\tp[ n ] += bm1 / factorial( tnp1 );\n\n\t\t// Now we want Jn from Jn-1 using Eq 9.6:\n\t\tj = ( ( b2n * ( b2n+1.0 ) * j ) + ( ( u+b2n+1.0 ) * lxp ) ) / t4;\n\t\tlxp *= lx2;\n\t\tb2n += 2.0;\n\n\t\t// Pull it together with Eq 9:\n\t\tr = prefix * p[ n ] * j;\n\t\tsum += r;\n\t\tif ( r > 1.0 ) {\n\t\t\tif ( abs( r ) < abs( EPSILON * sum ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if ( abs( r / EPSILON ) < abs( sum ) ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default betaSmallBLargeASeries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006-7, 2013-14.\n* Copyright Paul A. Bristow 2007, 2013-14.\n* Copyright Nikhar Agrawal 2013-14.\n* Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport lanczosSumExpGScaled from '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled';\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\nimport ln from '@stdlib/math-base-special-ln';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport MIN_LN from '@stdlib/constants-float64-min-ln';\nimport G from '@stdlib/constants-float64-gamma-lanczos-g';\nimport E from '@stdlib/constants-float64-e';\n\n\n// MAIN //\n\n/**\n* Computes `(z^a)*(e^-z) / gamma(a)`.\n*\n* @private\n* @param {number} a - input value\n* @param {number} z - input value\n* @returns {number} function value\n*/\nfunction regularizedGammaPrefix( a, z ) {\n\tvar prefix;\n\tvar amza;\n\tvar agh;\n\tvar alz;\n\tvar amz;\n\tvar sq;\n\tvar d;\n\n\tagh = a + G - 0.5;\n\td = ( (z - a) - G + 0.5 ) / agh;\n\tif ( a < 1.0 ) {\n\t\t// Treat a < 1 as a special case because our Lanczos approximations are optimized against the factorials with a > 1, and for high precision types very small values of `a` can give rather erroneous results for gamma:\n\t\tif ( z <= MIN_LN ) {\n\t\t\t// Use logs, so should be free of cancellation errors:\n\t\t\treturn exp( ( a * ln(z) ) - z - gammaln( a ) );\n\t\t}\n\t\t// No danger of overflow as gamma(a) < 1/a for small a, so direct calculation:\n\t\treturn pow( z, a ) * exp( -z ) / gamma( a );\n\t}\n\tif ( abs(d*d*a) <= 100.0 && a > 150.0 ) {\n\t\t// Special case for large a and a ~ z:\n\t\tprefix = ( a * ( log1p( d ) - d ) ) + ( z * ( 0.5-G ) / agh );\n\t\tprefix = exp( prefix );\n\t}\n\telse {\n\t\t// General case. Direct computation is most accurate, but use various fallbacks for different parts of the problem domain:\n\t\talz = a * ln(z / agh);\n\t\tamz = a - z;\n\t\tif (\n\t\t\tmin(alz, amz) <= MIN_LN ||\n\t\t\tmax(alz, amz) >= MAX_LN\n\t\t) {\n\t\t\tamza = amz / a;\n\t\t\tif (\n\t\t\t\tmin(alz, amz)/2.0 > MIN_LN &&\n\t\t\t\tmax(alz, amz)/2.0 < MAX_LN\n\t\t\t) {\n\t\t\t\t// Compute square root of the result and then square it:\n\t\t\t\tsq = pow( z/agh, a/2.0 ) * exp( amz/2.0 );\n\t\t\t\tprefix = sq * sq;\n\t\t\t}\n\t\t\telse if (\n\t\t\t\tmin(alz, amz)/4.0 > MIN_LN &&\n\t\t\t\tmax(alz, amz)/4.0 < MAX_LN &&\n\t\t\t\tz > a\n\t\t\t) {\n\t\t\t\t// Compute the 4th root of the result then square it twice:\n\t\t\t\tsq = pow( z/agh, a/4.0 ) * exp( amz/4.0 );\n\t\t\t\tprefix = sq * sq;\n\t\t\t\tprefix *= prefix;\n\t\t\t}\n\t\t\telse if (\n\t\t\t\tamza > MIN_LN &&\n\t\t\t\tamza < MAX_LN\n\t\t\t) {\n\t\t\t\tprefix = pow( (z * exp(amza)) / agh, a );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprefix = exp( alz + amz );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprefix = pow( z/agh, a ) * exp( amz );\n\t\t}\n\t}\n\tprefix *= sqrt( agh/E ) / lanczosSumExpGScaled( a );\n\treturn prefix;\n}\n\n\n// EXPORTS //\n\nexport default regularizedGammaPrefix;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport MIN_LN from '@stdlib/constants-float64-min-ln';\n\n\n// MAIN //\n\n/**\n* Calculates the power term prefix `(z^a)(e^-z)` used in the non-normalized incomplete gammas.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} z - function parameter\n* @returns {number} power term prefix\n*/\nfunction fullIGammaPrefix( a, z ) {\n\tvar prefix;\n\tvar alz;\n\n\talz = a * ln( z );\n\tif ( z >= 1.0 ) {\n\t\tif ( ( alz < MAX_LN ) && ( -z > MIN_LN ) ) {\n\t\t\tprefix = pow( z, a ) * exp( -z );\n\t\t}\n\t\telse if ( a >= 1.0 ) {\n\t\t\tprefix = pow( z / exp(z/a), a );\n\t\t}\n\t\telse {\n\t\t\tprefix = exp( alz - z );\n\t\t}\n\t}\n\telse if ( alz > MIN_LN ) {\n\t\tprefix = pow( z, a ) * exp( -z );\n\t}\n\telse if ( z/a < MAX_LN ) {\n\t\tprefix = pow( z / exp(z/a), a );\n\t}\n\telse {\n\t\tprefix = exp( alz - z );\n\t}\n\treturn prefix;\n}\n\n\n// EXPORTS //\n\nexport default fullIGammaPrefix;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the delta in `beta(a,b,x) = prefix + delta * beta(a+k,b,x)`.\n*\n* ## Notes\n*\n* Specifically, the function calculates\n*\n* ```tex\n* \\frac{ (a)(a+1)(a+2)...(a+k-1) }{ (b)(b+1)(b+2)...(b+k-1) }\n* ```\n*\n* The function should only called with small `k`; for large `k`, it is grossly inefficient.\n*\n* @private\n* @param {number} a - input value\n* @param {number} b - input value\n* @param {NonNegativeInteger} k - input value\n* @returns {number} ratio value\n*/\nfunction risingFactorialRatio( a, b, k ) {\n\tvar result;\n\tvar i;\n\tif ( k === 0 ) {\n\t\treturn 1.0;\n\t}\n\tresult = 1.0;\n\tfor ( i = 0; i < k; i++ ) {\n\t\tresult *= ( a + i ) / ( b + i );\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default risingFactorialRatio;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport max from '@stdlib/math-base-special-max';\n\n\n// MAIN //\n\n/**\n* Returns the maximum absolute value.\n*\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {number} maximum absolute value\n*\n* @example\n* var v = maxabs( 3.14, -4.2 );\n* // returns 4.2\n*\n* @example\n* var v = maxabs( 3.14, NaN );\n* // returns NaN\n*\n* @example\n* var v = maxabs( +0.0, -0.0 );\n* // returns +0.0\n*/\nfunction maxabs( x, y ) {\n\treturn max( abs( x ), abs( y ) );\n}\n\n\n// EXPORTS //\n\nexport default maxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport min from '@stdlib/math-base-special-min';\n\n\n// MAIN //\n\n/**\n* Returns the minimum absolute value.\n*\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {number} minimum absolute value\n*\n* @example\n* var v = minabs( -3.14, 4.2 );\n* // returns 3.14\n*\n* @example\n* var v = minabs( 3.14, NaN );\n* // returns NaN\n*\n* @example\n* var v = minabs( +0.0, -0.0 );\n* // returns +0.0\n*/\nfunction minabs( x, y ) {\n\treturn min( abs( x ), abs( y ) );\n}\n\n\n// EXPORTS //\n\nexport default minabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport lanczosSumExpGScaled from '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled';\nimport maxabs from '@stdlib/math-base-special-maxabs';\nimport minabs from '@stdlib/math-base-special-minabs';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport min from '@stdlib/math-base-special-min';\nimport ln from '@stdlib/math-base-special-ln';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport MIN_LN from '@stdlib/constants-float64-min-ln';\nimport G from '@stdlib/constants-float64-gamma-lanczos-g';\nimport E from '@stdlib/constants-float64-e';\n\n\n// MAIN //\n\n/**\n* Computes the leading power terms in the incomplete beta function.\n*\n* When normalized,\n*\n* ```tex\n* \\frac{ x^a y^b }{ \\operatorname{Beta}(a,b) }\n* ```\n*\n* and otherwise\n*\n* ```tex\n* x^a y^b\n* ```\n*\n* ## Notes\n*\n* -   Almost all of the error in the incomplete beta comes from this function, particularly when \\\\( a \\\\) and \\\\( b \\\\) are large. Computing large powers are _hard_ though, and using logarithms just leads to horrendous cancellation errors.\n*\n* -   For \\\\( l1 * l2 > 0 \\\\) or \\\\( \\operatorname{min}( a, b ) < 1 \\\\), the two power terms both go in the same direction (toward zero or toward infinity). In this case if either term overflows or underflows, then the product of the two must do so also. Alternatively, if one exponent is less than one, then we can't productively use it to eliminate overflow or underflow from the other term.  Problems with spurious overflow/underflow can't be ruled out. In this case, but it is _very_ unlikely since one of the power terms will evaluate to a number close to 1.\n*\n* -   If \\\\( \\max( \\abs(l1), \\abs(l2) ) < 0.5 \\\\), both exponents are near one and both the exponents are greater than one, and, further, these two power terms tend in opposite directions (one toward zero, the other toward infinity), so we have to combine the terms to avoid any risk of overflow or underflow. We do this by moving one power term inside the other, we have:\n*\n*     ```tex\n*     (1 + l_1)^a \\cdot (1 + l_2)^b \\\\\n*     = ((1 + l_1) \\cdot (1 + l_2)^(b/a))^a \\\\\n*     = (1 + l_1 + l_3 + l_1*l_3)^a\n*     ```\n*\n*     and\n*\n*     ```tex\n*     l_3 = (1 + l_2)^(b/a) - 1 \\\\\n*     = \\exp((b/a) * \\ln(1 + l_2)) - 1\n*     ```\n*\n*     The tricky bit is deciding which term to move inside. By preference, we move the larger term inside, so that the size of the largest exponent is reduced.  However, that can only be done as long as l3 (see above) is also small.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {Probability} y - probability equal to `1-x`\n* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function\n* @returns {number} power terms\n*/\nfunction ibetaPowerTerms( a, b, x, y, normalized ) {\n\tvar result;\n\tvar smallA;\n\tvar ratio;\n\tvar agh;\n\tvar bgh;\n\tvar cgh;\n\tvar l1;\n\tvar l2;\n\tvar l3;\n\tvar p1;\n\tvar b1;\n\tvar b2;\n\tvar c;\n\tvar l;\n\n\tif ( !normalized ) {\n\t\t// Can we do better here?\n\t\treturn pow( x, a ) * pow( y, b );\n\t}\n\tc = a + b;\n\n\t// Combine power terms with Lanczos approximation:\n\tagh = a + G - 0.5;\n\tbgh = b + G - 0.5;\n\tcgh = c + G - 0.5;\n\tresult = lanczosSumExpGScaled( c );\n\tresult /= lanczosSumExpGScaled( a ) * lanczosSumExpGScaled( b );\n\n\t// Combine with the leftover terms from the Lanczos approximation:\n\tresult *= sqrt( bgh / E );\n\tresult *= sqrt( agh / cgh );\n\n\t// `l1` and `l2` are the base of the exponents minus one:\n\tl1 = ( ( x * b ) - ( y * agh ) ) / agh;\n\tl2 = ( ( y * a ) - ( x * bgh ) ) / bgh;\n\tif ( minabs( l1, l2 ) < 0.2 ) {\n\t\t// When the base of the exponent is very near 1 we get really gross errors unless extra care is taken:\n\t\tif ( l1 * l2 > 0 || min( a, b ) < 1 ) {\n\t\t\tif ( abs(l1) < 0.1 ) {\n\t\t\t\tresult *= exp( a * log1p( l1 ) );\n\t\t\t} else {\n\t\t\t\tresult *= pow( ( x*cgh ) / agh, a );\n\t\t\t}\n\t\t\tif ( abs(l2) < 0.1 ) {\n\t\t\t\tresult *= exp( b * log1p( l2 ) );\n\t\t\t} else {\n\t\t\t\tresult *= pow((y * cgh) / bgh, b);\n\t\t\t}\n\t\t}\n\t\telse if ( maxabs( l1, l2 ) < 0.5 ) {\n\t\t\tsmallA = a < b;\n\t\t\tratio = b / a;\n\t\t\tif (\n\t\t\t\t(smallA && (ratio * l2 < 0.1)) ||\n\t\t\t\t(!smallA && (l1 / ratio > 0.1))\n\t\t\t) {\n\t\t\t\tl3 = expm1( ratio * log1p( l2 ) );\n\t\t\t\tl3 = l1 + l3 + ( l3 * l1 );\n\t\t\t\tl3 = a * log1p( l3 );\n\t\t\t\tresult *= exp( l3 );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tl3 = expm1( log1p( l1 ) / ratio );\n\t\t\t\tl3 = l2 + l3 + ( l3 * l2 );\n\t\t\t\tl3 = b * log1p( l3 );\n\t\t\t\tresult *= exp( l3 );\n\t\t\t}\n\t\t}\n\t\telse if ( abs(l1) < abs(l2) ) {\n\t\t\t// First base near 1 only:\n\t\t\tl = ( a * log1p( l1 ) ) + ( b * ln( ( y*cgh ) / bgh ) );\n\t\t\tif ( l <= MIN_LN || l >= MAX_LN ) {\n\t\t\t\tl += ln(result);\n\t\t\t\tif ( l >= MAX_LN ) {\n\t\t\t\t\treturn NaN;\n\t\t\t\t}\n\t\t\t\tresult = exp( l );\n\t\t\t} else {\n\t\t\t\tresult *= exp( l );\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Second base near 1 only:\n\t\t\tl = ( b * log1p( l2 ) ) + ( a * ln( (x*cgh) / agh ) );\n\t\t\tif ( l <= MIN_LN || l >= MAX_LN ) {\n\t\t\t\tl += ln(result);\n\t\t\t\tif ( l >= MAX_LN ) {\n\t\t\t\t\treturn NaN;\n\t\t\t\t}\n\t\t\t\tresult = exp( l );\n\t\t\t} else {\n\t\t\t\tresult *= exp( l );\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\t// General case:\n\t\tb1 = (x * cgh) / agh;\n\t\tb2 = (y * cgh) / bgh;\n\t\tl1 = a * ln(b1);\n\t\tl2 = b * ln(b2);\n\t\tif (\n\t\t\tl1 >= MAX_LN ||\n\t\t\tl1 <= MIN_LN ||\n\t\t\tl2 >= MAX_LN ||\n\t\t\tl2 <= MIN_LN\n\t\t) {\n\t\t\t// Oops, under/overflow, sidestep if we can:\n\t\t\tif ( a < b ) {\n\t\t\t\tp1 = pow( b2, b / a );\n\t\t\t\tl3 = a * ( ln(b1) + ln(p1) );\n\t\t\t\tif ( l3 < MAX_LN && l3 > MIN_LN ) {\n\t\t\t\t\tresult *= pow( p1 * b1, a );\n\t\t\t\t} else {\n\t\t\t\t\tl2 += l1 + ln(result);\n\t\t\t\t\tif ( l2 >= MAX_LN ) {\n\t\t\t\t\t\treturn NaN;\n\t\t\t\t\t}\n\t\t\t\t\tresult = exp( l2 );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tp1 = pow( b1, a / b );\n\t\t\t\tl3 = ( ln(p1) + ln(b2) ) * b;\n\t\t\t\tif ( l3 < MAX_LN && l3 > MIN_LN ) {\n\t\t\t\t\tresult *= pow( p1 * b2, b );\n\t\t\t\t} else {\n\t\t\t\t\tl2 += l1 + ln( result );\n\t\t\t\t\tif (l2 >= MAX_LN) {\n\t\t\t\t\t\treturn NaN;\n\t\t\t\t\t}\n\t\t\t\t\tresult = exp( l2 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Finally the normal case:\n\t\t\tresult *= pow( b1, a ) * pow( b2, b );\n\t\t}\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default ibetaPowerTerms;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport continuedFraction from '@stdlib/math-base-tools-continued-fraction';\nimport ibetaPowerTerms from './ibeta_power_terms.js';\n\n\n// VARIABLES //\n\nvar OPTS = {\n\t'keep': true,\n\t'maxIter': 1000\n};\n\n\n// FUNCTIONS //\n\n/**\n* Continued fraction for the incomplete beta.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {Probability} y - probability equal to `1-x`\n* @returns {Function} series function\n*/\nfunction ibetaFraction2t( a, b, x, y ) {\n\tvar m = 0;\n\treturn next;\n\n\t/**\n\t* Calculate the numerator and denominator of the next term of the series.\n\t*\n\t* @private\n\t* @returns {Array} series expansion terms\n\t*/\n\tfunction next() {\n\t\tvar denom;\n\t\tvar aN;\n\t\tvar bN;\n\n\t\taN = (a + m - 1) * (a + b + m - 1) * m * (b - m) * x * x;\n\t\tdenom = a + ( 2.0*m ) - 1.0;\n\t\taN /= denom * denom;\n\t\tbN = m;\n\t\tbN += (m * (b - m) * x) / ( a + ( 2.0*m ) - 1.0 );\n\t\tbN += ( (a+m) * ( (a*y) - (b*x) + 1.0 + ( m*(2.0-x) ) ) ) / ( a + (2.0*m) + 1.0 ); // eslint-disable-line max-len\n\t\tm += 1;\n\t\treturn [ aN, bN ];\n\t}\n}\n\n\n// MAIN //\n\n/**\n* Evaluates the incomplete beta via the continued fraction representation.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {Probability} y - probability equal to `1-x`\n* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function\n* @param {(Array|TypedArray|Object)} out - output array holding the derivative as the second element\n* @returns {number} incomplete beta value\n*/\nfunction ibetaFraction2( a, b, x, y, normalized, out ) {\n\tvar result;\n\tvar fract;\n\tvar f;\n\n\tresult = ibetaPowerTerms( a, b, x, y, normalized );\n\tif ( out ) {\n\t\tout[ 1 ] = result;\n\t}\n\tif ( result === 0.0 ) {\n\t\treturn result;\n\t}\n\tf = ibetaFraction2t( a, b, x, y );\n\tfract = continuedFraction( f, OPTS );\n\treturn result / fract;\n}\n\n\n// EXPORTS //\n\nexport default ibetaFraction2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport MAX_SAFE_INTEGER from '@stdlib/constants-float64-max-safe-integer';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isOdd from '@stdlib/math-base-assert-is-odd';\nimport floor from '@stdlib/math-base-special-floor';\nimport gcd from '@stdlib/math-base-special-gcd';\n\n\n// MAIN //\n\n/**\n* Computes the binomial coefficient of two integers.\n*\n* @param {integer} n - input value\n* @param {integer} k - second input value\n* @returns {integer} function value\n*\n* @example\n* var v = binomcoef( 8, 2 );\n* // returns 28\n*\n* @example\n* var v = binomcoef( 0, 0 );\n* // returns 1\n*\n* @example\n* var v = binomcoef( -4, 2 );\n* // returns 10\n*\n* @example\n* var v = binomcoef( NaN, 3 );\n* // returns NaN\n*\n* @example\n* var v = binomcoef( 5, NaN );\n* // returns NaN\n*\n* @example\n* var v = binomcoef( NaN, NaN );\n* // returns NaN\n*/\nfunction binomcoef( n, k ) {\n\tvar res;\n\tvar sgn;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar g;\n\tvar s;\n\tif ( isnan( n ) || isnan( k ) ) {\n\t\treturn NaN;\n\t}\n\tif ( !isInteger( n ) || !isInteger( k ) ) {\n\t\treturn NaN;\n\t}\n\tif ( k < 0 ) {\n\t\treturn 0;\n\t}\n\tsgn = 1;\n\tif ( n < 0 ) {\n\t\tn = -n + k - 1;\n\t\tif ( isOdd( k ) ) {\n\t\t\tsgn *= -1;\n\t\t}\n\t}\n\tif ( k > n ) {\n\t\treturn 0;\n\t}\n\tif ( k === 0 || k === n ) {\n\t\treturn sgn;\n\t}\n\tif ( k === 1 || k === n - 1 ) {\n\t\treturn sgn * n;\n\t}\n\ts = floor( MAX_SAFE_INTEGER / n );\n\n\t// Use a standard algorithm for computing the binomial coefficient (e.g., see Knuth's \"The Art of Computer Programming, 3rd Edition, Volume 2: Seminumerical Algorithms\")...\n\tres = 1;\n\tfor ( d = 1; d <= k; d++ ) {\n\t\t// Check for potential overflow...\n\t\tif ( res > s ) {\n\t\t\tbreak;\n\t\t}\n\t\tres *= n;\n\t\tres /= d;\n\t\tn -= 1;\n\t}\n\t// If we did not early exit from the previous loop, the answer is exact, and we can simply return...\n\tif ( d > k ) {\n\t\treturn sgn * res;\n\t}\n\t/*\n\t* Let `N` equal the provided `n`.\n\t*\n\t* We want to calculate C(N,k), and, at this point, we have calculated\n\t*\n\t*   res = C(N,n) = C(N,N-n) = C(N,d-1)\n\t*\n\t* where `N-n = d-1` and, hence, `n = N - d + 1`.\n\t*\n\t* Given the following identity,\n\t*\n\t*   C(N,k) = C(N,d-1) * C(N-d+1,k-d+1) / C(k,k-d+1)\n\t*          = C(N,d-1) * C(n,k-d+1) / C(k,k-d+1)\n\t*\n\t* we can leverage recursion to perform argument reduction.\n\t*/\n\tb = binomcoef( n, k-d+1 );\n\tc = binomcoef( k, k-d+1 );\n\n\t/*\n\t* At this point, the result should be `res*b/c`.\n\t*\n\t* To help guard against overflow and precision loss, we calculate the greatest common divisor (gcd). In this case, we pick `b`, as `b` should be less than `res` in most (if not all) cases.\n\t*/\n\tg = gcd( b, c );\n\tb /= g;\n\tc /= g;\n\tres /= c;\n\treturn sgn * res * b;\n}\n\n\n// EXPORTS //\n\nexport default binomcoef;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ibetaPowerTerms from './ibeta_power_terms.js';\n\n\n// MAIN //\n\n/**\n* Computes the difference between `ibeta(a,b,x)` and `ibeta(a+k,b,x)`.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {Probability} y - probability equal to `1-x`\n* @param {NonNegativeInteger} k - function input\n* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function\n* @param {(Array|TypedArray|Object)} out - output array holding the derivative as the second element\n* @returns {number} difference between ibeta(a,b,x) and ibeta(a+k,b,x)\n*/\nfunction ibetaAStep( a, b, x, y, k, normalized, out ) {\n\tvar prefix;\n\tvar term;\n\tvar sum;\n\tvar i;\n\n\tprefix = ibetaPowerTerms( a, b, x, y, normalized );\n\tif ( out ) {\n\t\tout[ 1 ] = prefix;\n\t}\n\tprefix /= a;\n\tif ( prefix === 0.0 ) {\n\t\treturn prefix;\n\t}\n\tsum = 1.0;\n\tterm = 1.0;\n\n\t// Series summation from 0 to k-1:\n\tfor ( i = 0; i < k-1; ++i ) {\n\t\tterm *= (a+b+i) * x / (a+i+1.0);\n\t\tsum += term;\n\t}\n\tprefix *= sum;\n\treturn prefix;\n}\n\n\n// EXPORTS //\n\nexport default ibetaAStep;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport lanczosSumExpGScaled from '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled';\nimport sumSeries from '@stdlib/math-base-tools-sum-series';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport MIN_VALUE from '@stdlib/constants-float64-smallest-normal';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport MIN_LN from '@stdlib/constants-float64-min-ln';\nimport G from '@stdlib/constants-float64-gamma-lanczos-g';\nimport E from '@stdlib/constants-float64-e';\n\n\n// VARIABLES //\n\nvar opts = {\n\t'maxTerms': 100\n};\n\n\n// FUNCTIONS //\n\n/**\n* Series approximation to the incomplete beta.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {number} result - initial result value\n* @returns {Function} series function\n*/\nfunction ibetaSeriesT( a, b, x, result ) {\n\tvar poch = 1.0 - b;\n\tvar n = 1;\n\treturn next;\n\n\t/**\n\t* Calculate the next term of the series.\n\t*\n\t* @private\n\t* @returns {number} series expansion term\n\t*/\n\tfunction next() {\n\t\tvar r = result / a;\n\t\ta += 1.0;\n\t\tresult *= poch * x / n;\n\t\tn += 1;\n\t\tpoch += 1.0;\n\t\treturn r;\n\t}\n}\n\n\n// MAIN //\n\n/**\n* Incomplete beta series.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {NonNegativeInteger} s0 - initial value\n* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function\n* @param {(Array|TypedArray|Object)} out - output array holding the derivative as the second element\n* @param {Probability} y - probability equal to `1-x`\n* @returns {number} function value\n*/\nfunction ibetaSeries( a, b, x, s0, normalized, out, y ) {\n\tvar result;\n\tvar agh;\n\tvar bgh;\n\tvar cgh;\n\tvar l1;\n\tvar l2;\n\tvar c;\n\tvar s;\n\n\tif ( normalized ) {\n\t\tc = a + b;\n\n\t\t// Incomplete beta power term, combined with the Lanczos approximation:\n\t\tagh = a + G - 0.5;\n\t\tbgh = b + G - 0.5;\n\t\tcgh = c + G - 0.5;\n\t\tresult = lanczosSumExpGScaled( c ) / ( lanczosSumExpGScaled( a ) * lanczosSumExpGScaled( b ) ); // eslint-disable-line max-len\n\n\t\tl1 = ln( cgh / bgh ) * ( b - 0.5 );\n\t\tl2 = ln( x * cgh / agh ) * a;\n\n\t\t// Check for over/underflow in the power terms:\n\t\tif (\n\t\t\tl1 > MIN_LN &&\n\t\t\tl1 < MAX_LN &&\n\t\t\tl2 > MIN_LN &&\n\t\t\tl2 < MAX_LN\n\t\t) {\n\t\t\tif ( a * b < bgh * 10.0 ) {\n\t\t\t\tresult *= exp( ( b-0.5 ) * log1p( a / bgh ) );\n\t\t\t} else {\n\t\t\t\tresult *= pow( cgh / bgh, b - 0.5 );\n\t\t\t}\n\t\t\tresult *= pow( x * cgh / agh, a );\n\t\t\tresult *= sqrt( agh / E );\n\n\t\t\tif ( out ) {\n\t\t\t\tout[ 1 ] = result * pow( y, b );\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// We need logs, and this *will* cancel:\n\t\t\tresult = ln( result ) + l1 + l2 + ( ( ln( agh ) - 1.0 ) / 2.0 );\n\t\t\tif ( out ) {\n\t\t\t\tout[ 1 ] = exp( result + ( b * ln( y ) ) );\n\t\t\t}\n\t\t\tresult = exp( result );\n\t\t}\n\t}\n\telse {\n\t\t// Non-normalized, just compute the power:\n\t\tresult = pow( x, a );\n\t}\n\tif ( result < MIN_VALUE ) {\n\t\treturn s0; // Safeguard: series can't cope with denorms.\n\t}\n\ts = ibetaSeriesT( a, b, x, result );\n\topts.initialValue = s0;\n\treturn sumSeries( s, opts );\n}\n\n\n// EXPORTS //\n\nexport default ibetaSeries;\n","/* eslint-disable max-statements, max-lines */\n\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport floor from '@stdlib/math-base-special-floor';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport asin from '@stdlib/math-base-special-asin';\nimport beta from '@stdlib/math-base-special-beta';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\nimport MAX_FLOAT64 from '@stdlib/constants-float64-max';\nimport MIN_FLOAT64 from '@stdlib/constants-float64-smallest-normal';\nimport MAX_INT32 from '@stdlib/constants-int32-max';\nimport HALF_PI from '@stdlib/constants-float64-half-pi';\nimport PI from '@stdlib/constants-float64-pi';\nimport betaSmallBLargeASeries from './beta_small_b_large_a_series.js';\nimport risingFactorialRatio from './rising_factorial_ratio.js';\nimport ibetaPowerTerms from './ibeta_power_terms.js';\nimport ibetaFraction2 from './ibeta_fraction2.js';\nimport binomialCCDF from './binomial_ccdf.js';\nimport ibetaAStep from './ibeta_a_step.js';\nimport ibetaSeries from './ibeta_series.js';\n\n\n// VARIABLES //\n\nvar ONE_OVER_PI = 1.0 / PI;\n\n\n// MAIN //\n\n/**\n* Evaluates the incomplete beta function and its first derivative and assigns results to a provided output array.\n*\n* ## Notes\n*\n* -   This function divides up the input range and selects the right implementation method for each domain.\n*\n* @param {Probability} x - function input\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {boolean} regularized - boolean indicating if the function should evaluate the regularized boolean beta function\n* @param {boolean} upper - boolean indicating if the function should return the upper tail of the incomplete beta function instead\n* @param {(Array|TypedArray|Object)} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {(Array|TypedArray|Object)} function value and first derivative\n*\n* @example\n* var out = ibetaImp( 0.5, 2.0, 2.0, false, false, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ ~0.083, ~1.5 ]\n*\n* @example\n* var out = ibetaImp( 0.2, 1.0, 2.0, false, true, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ 0.32, 1.6 ]\n*\n* @example\n* var out = ibetaImp( 0.2, 1.0, 2.0, true, true, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ 0.64, 1.6 ]\n*/\nfunction ibetaImp( x, a, b, regularized, upper, out, stride, offset ) {\n\tvar lambda;\n\tvar prefix;\n\tvar fract;\n\tvar bbar;\n\tvar div;\n\tvar tmp;\n\tvar i0;\n\tvar i1;\n\tvar k;\n\tvar n;\n\tvar p;\n\tvar y;\n\n\ty = 1.0 - x;\n\ti0 = offset;\n\ti1 = offset + stride;\n\n\t// Derivative not set...\n\tout[ i1 ] = -1;\n\tif ( isnan( x ) || x < 0.0 || x > 1.0 ) {\n\t\tout[ i0 ] = NaN;\n\t\tout[ i1 ] = NaN;\n\t\treturn out;\n\t}\n\tif ( regularized ) {\n\t\tif ( a < 0.0 || b < 0.0 ) {\n\t\t\tout[ i0 ] = NaN;\n\t\t\tout[ i1 ] = NaN;\n\t\t\treturn out;\n\t\t}\n\t\t// Extend to a few very special cases...\n\t\tif ( a === 0.0 ) {\n\t\t\tif ( b === 0.0 ) {\n\t\t\t\tout[ i0 ] = NaN;\n\t\t\t\tout[ i1 ] = NaN;\n\t\t\t\treturn out;\n\t\t\t}\n\t\t\tif ( b > 0.0 ) {\n\t\t\t\tout[ i0 ] = ( upper ) ? 0.0 : 1.0;\n\t\t\t\treturn out;\n\t\t\t}\n\t\t} else if ( b === 0.0 ) {\n\t\t\tif ( a > 0.0 ) {\n\t\t\t\tout[ i0 ] = ( upper ) ? 1.0 : 0.0;\n\t\t\t\treturn out;\n\t\t\t}\n\t\t}\n\t} else if ( a <= 0.0 || b <= 0.0 ) {\n\t\tout[ i0 ] = NaN;\n\t\tout[ i1 ] = NaN;\n\t\treturn out;\n\t}\n\tif ( x === 0.0 ) {\n\t\tif ( a === 1.0 ) {\n\t\t\tout[ i1 ] = 1.0;\n\t\t} else {\n\t\t\tout[ i1 ] = ( a < 1.0 ) ? MAX_FLOAT64 / 2.0 : MIN_FLOAT64 * 2.0;\n\t\t}\n\t\tif ( upper ) {\n\t\t\tout[ i0 ] = ( regularized ) ? 1.0 : beta( a, b );\n\t\t\treturn out;\n\t\t}\n\t\tout[ i0 ] = 0.0;\n\t\treturn out;\n\t}\n\tif ( x === 1.0 ) {\n\t\tif ( b === 1.0 ) {\n\t\t\tout[ i1 ] = 1.0;\n\t\t} else {\n\t\t\tout[ i1 ] = ( b < 1.0 ) ? MAX_FLOAT64 / 2.0 : MIN_FLOAT64 * 2.0;\n\t\t}\n\t\tif ( upper ) {\n\t\t\tout[ i0 ] = 0.0;\n\t\t} else {\n\t\t\tout[ i0 ] = ( regularized ) ? 1.0 : beta( a, b );\n\t\t}\n\t\treturn out;\n\t}\n\tif ( a === 0.5 && b === 0.5 ) {\n\t\tout[ i1 ] = ONE_OVER_PI * sqrt( y * x );\n\n\t\t// We have an arcsine distribution:\n\t\tp = ( upper ) ? asin( sqrt(y) ) : asin( sqrt(x) );\n\t\tp /= HALF_PI;\n\t\tif ( !regularized ) {\n\t\t\tp *= PI;\n\t\t}\n\t\tout[ i0 ] = p;\n\t\treturn out;\n\t}\n\tif ( a === 1.0 ) {\n\t\ttmp = b;\n\t\tb = a;\n\t\ta = tmp;\n\n\t\ttmp = y;\n\t\ty = x;\n\t\tx = tmp;\n\n\t\tupper = !upper;\n\t}\n\tif ( b === 1.0 ) {\n\t\t// Special case see: http://functions.wolfram.com/GammaBetaErf/BetaRegularized/03/01/01/\n\t\tif ( a === 1.0 ) {\n\t\t\tout[ i0 ] = ( upper ) ? y : x;\n\t\t\tout[ i1 ] = 1.0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ i1 ] = a * pow( x, a - 1.0 );\n\t\tif ( y < 0.5 ) {\n\t\t\tp = ( upper ) ? -expm1( a * log1p(-y) ) : exp( a * log1p(-y) );\n\t\t} else {\n\t\t\tp = ( upper ) ? -( pow( x, a ) - 1.0 ) : pow( x, a );\n\t\t}\n\t\tif ( !regularized ) {\n\t\t\tp /= a;\n\t\t}\n\t\tout[ i0 ] = p;\n\t\treturn out;\n\t}\n\tif ( min( a, b ) <= 1.0 ) {\n\t\tif ( x > 0.5 ) {\n\t\t\ttmp = b;\n\t\t\tb = a;\n\t\t\ta = tmp;\n\n\t\t\ttmp = y;\n\t\t\ty = x;\n\t\t\tx = tmp;\n\n\t\t\tupper = !upper;\n\t\t}\n\t\tif ( max( a, b ) <= 1.0 ) {\n\t\t\t// Both a,b < 1:\n\t\t\tif ( (a >= min( 0.2, b ) ) || ( pow(x, a) <= 0.9 ) ) {\n\t\t\t\tif ( upper ) {\n\t\t\t\t\tfract = -( ( regularized ) ? 1.0 : beta( a, b ) );\n\t\t\t\t\tupper = false;\n\t\t\t\t\tfract = -ibetaSeries( a, b, x, fract, regularized, out, y );\n\t\t\t\t} else {\n\t\t\t\t\tfract = ibetaSeries( a, b, x, 0, regularized, out, y );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttmp = b;\n\t\t\t\tb = a;\n\t\t\t\ta = tmp;\n\n\t\t\t\ttmp = y;\n\t\t\t\ty = x;\n\t\t\t\tx = tmp;\n\n\t\t\t\tupper = !upper;\n\t\t\t\tif ( y >= 0.3 ) {\n\t\t\t\t\tif ( upper ) {\n\t\t\t\t\t\tfract = -( ( regularized ) ? 1.0 : beta( a, b ) );\n\t\t\t\t\t\tupper = false;\n\t\t\t\t\t\tfract = -ibetaSeries( a, b, x, fract, regularized, out, y ); // eslint-disable-line max-len\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfract = ibetaSeries( a, b, x, 0, regularized, out, y );\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Sidestep on a, and then use the series representation:\n\t\t\t\t\tif ( regularized ) {\n\t\t\t\t\t\tprefix = 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprefix = risingFactorialRatio( a + b, a, 20 );\n\t\t\t\t\t}\n\t\t\t\t\tfract = ibetaAStep( a, b, x, y, 20, regularized, out );\n\t\t\t\t\tif ( upper ) {\n\t\t\t\t\t\tfract -= ( ( regularized ) ? 1 : beta( a, b ) );\n\t\t\t\t\t\tupper = false;\n\t\t\t\t\t\tfract = -betaSmallBLargeASeries( a + 20.0, b, x, y, fract, prefix, regularized ); // eslint-disable-line max-len\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfract = betaSmallBLargeASeries( a + 20.0, b, x, y, fract, prefix, regularized ); // eslint-disable-line max-len\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( b <= 1.0 || ( x < 0.1 && ( pow( b * x, a ) <= 0.7 ) ) ) {\n\t\t\tif ( upper ) {\n\t\t\t\tfract = -( ( regularized ) ? 1 : beta( a, b ) );\n\t\t\t\tupper = false;\n\t\t\t\tfract = -ibetaSeries( a, b, x, fract, regularized, out, y );\n\t\t\t} else {\n\t\t\t\tfract = ibetaSeries( a, b, x, 0.0, regularized, out, y );\n\t\t\t}\n\t\t} else {\n\t\t\ttmp = b;\n\t\t\tb = a;\n\t\t\ta = tmp;\n\n\t\t\ttmp = y;\n\t\t\ty = x;\n\t\t\tx = tmp;\n\t\t\tupper = !upper;\n\n\t\t\tif ( y >= 0.3 ) {\n\t\t\t\tif (upper) {\n\t\t\t\t\tfract = -(( regularized ) ? 1.0 : beta( a, b ));\n\t\t\t\t\tupper = false;\n\t\t\t\t\tfract = -ibetaSeries( a, b, x, fract, regularized, out, y );\n\t\t\t\t} else {\n\t\t\t\t\tfract = ibetaSeries( a, b, x, 0.0, regularized, out, y );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( a >= 15.0 ) {\n\t\t\t\tif ( upper ) {\n\t\t\t\t\tfract = -(( regularized ) ? 1.0 : beta( a, b ));\n\t\t\t\t\tupper = false;\n\t\t\t\t\tfract = -betaSmallBLargeASeries( a, b, x, y, fract, 1.0, regularized ); // eslint-disable-line max-len\n\t\t\t\t} else {\n\t\t\t\t\tfract = betaSmallBLargeASeries( a, b, x, y, 0.0, 1.0, regularized ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif ( regularized ) {\n\t\t\t\t\tprefix = 1;\n\t\t\t\t} else {\n\t\t\t\t\t// Sidestep to improve errors:\n\t\t\t\t\tprefix = risingFactorialRatio( a + b, a, 20.0 );\n\t\t\t\t}\n\t\t\t\tfract = ibetaAStep( a, b, x, y, 20.0, regularized, out );\n\t\t\t\tif ( upper ) {\n\t\t\t\t\tfract -= ( ( regularized ) ? 1.0 : beta( a, b ) );\n\t\t\t\t\tupper = false;\n\t\t\t\t\tfract = -betaSmallBLargeASeries( a + 20.0, b, x, y, fract, prefix, regularized ); // eslint-disable-line max-len\n\t\t\t\t} else {\n\t\t\t\t\tfract = betaSmallBLargeASeries( a + 20.0, b, x, y, fract, prefix, regularized ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// Both a,b >= 1:\n\t\tif ( a < b ) {\n\t\t\tlambda = a - ( (a + b) * x );\n\t\t} else {\n\t\t\tlambda = ( (a + b) * y ) - b;\n\t\t}\n\t\tif ( lambda < 0.0 ) {\n\t\t\ttmp = b;\n\t\t\tb = a;\n\t\t\ta = tmp;\n\n\t\t\ttmp = y;\n\t\t\ty = x;\n\t\t\tx = tmp;\n\t\t\tupper = !upper;\n\t\t}\n\t\tif ( b < 40.0 ) {\n\t\t\tif (\n\t\t\t\tfloor(a) === a &&\n\t\t\t\tfloor(b) === b &&\n\t\t\t\ta < MAX_INT32 - 100\n\t\t\t) {\n\t\t\t\t// Relate to the binomial distribution and use a finite sum:\n\t\t\t\tk = a - 1.0;\n\t\t\t\tn = b + k;\n\t\t\t\tfract = binomialCCDF( n, k, x, y );\n\t\t\t\tif ( !regularized ) {\n\t\t\t\t\tfract *= beta( a, b );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( b * x <= 0.7 ) {\n\t\t\t\tif ( upper ) {\n\t\t\t\t\tfract = -( ( regularized ) ? 1.0 : beta( a, b ) );\n\t\t\t\t\tupper = false;\n\t\t\t\t\tfract = -ibetaSeries( a, b, x, fract, regularized, out, y );\n\t\t\t\t} else {\n\t\t\t\t\tfract = ibetaSeries( a, b, x, 0.0, regularized, out, y );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( a > 15.0 ) {\n\t\t\t\t// Sidestep so we can use the series representation:\n\t\t\t\tn = floor( b );\n\t\t\t\tif ( n === b ) {\n\t\t\t\t\tn -= 1;\n\t\t\t\t}\n\t\t\t\tbbar = b - n;\n\t\t\t\tif ( regularized ) {\n\t\t\t\t\tprefix = 1;\n\t\t\t\t} else {\n\t\t\t\t\tprefix = risingFactorialRatio( a + bbar, bbar, n );\n\t\t\t\t}\n\t\t\t\tfract = ibetaAStep( bbar, a, y, x, n, regularized );\n\t\t\t\tfract = betaSmallBLargeASeries( a, bbar, x, y, fract, 1.0, regularized ); // eslint-disable-line max-len\n\t\t\t\tfract /= prefix;\n\t\t\t}\n\t\t\telse if ( regularized ) {\n\t\t\t\tn = floor( b );\n\t\t\t\tbbar = b - n;\n\t\t\t\tif ( bbar <= 0 ) {\n\t\t\t\t\tn -= 1;\n\t\t\t\t\tbbar += 1;\n\t\t\t\t}\n\t\t\t\tfract = ibetaAStep( bbar, a, y, x, n, regularized );\n\t\t\t\tfract += ibetaAStep( a, bbar, x, y, 20.0, regularized );\n\t\t\t\tif ( upper ) {\n\t\t\t\t\tfract -= 1;\n\t\t\t\t}\n\t\t\t\tfract = betaSmallBLargeASeries( a + 20.0, bbar, x, y, fract, 1, regularized ); // eslint-disable-line max-len\n\t\t\t\tif ( upper ) {\n\t\t\t\t\tfract = -fract;\n\t\t\t\t\tupper = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfract = ibetaFraction2( a, b, x, y, regularized, out );\n\t\t\t}\n\t\t} else {\n\t\t\tfract = ibetaFraction2( a, b, x, y, regularized, out );\n\t\t}\n\t}\n\tif ( out[ i1 ] < 0.0 ) {\n\t\tout[ i1 ] = ibetaPowerTerms( a, b, x, y, true );\n\t}\n\tdiv = y * x;\n\tif ( out[ i1 ] !== 0.0 ) {\n\t\tif ( ( MAX_FLOAT64 * div < out[ i1 ] ) ) {\n\t\t\t// Overflow, return an arbitrarily large value:\n\t\t\tout[ i1 ] = MAX_FLOAT64 / 2.0;\n\t\t} else {\n\t\t\tout[ i1 ] /= div;\n\t\t}\n\t}\n\tout[ i0 ] = ( upper ) ? ( ( regularized ) ? 1.0 : beta( a, b ) ) - fract : fract; // eslint-disable-line max-len\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default ibetaImp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport binomcoef from '@stdlib/math-base-special-binomcoef';\nimport floor from '@stdlib/math-base-special-floor';\nimport pow from '@stdlib/math-base-special-pow';\nimport MIN_VALUE from '@stdlib/constants-float64-smallest-normal';\n\n\n// MAIN //\n\n/**\n* For integer arguments we can relate the incomplete beta to the complement of the binomial distribution cdf and use this finite sum.\n*\n* @private\n* @param {NonNegativeInteger} n - number of trials\n* @param {NonNegativeInteger} k - function input\n* @param {Probability} x - function input\n* @param {Probability} y - probability equal to `1-x`\n* @returns {number} sum\n*/\nfunction binomialCCDF( n, k, x, y ) {\n\tvar startTerm;\n\tvar result;\n\tvar start;\n\tvar term;\n\tvar i;\n\n\tresult = pow( x, n );\n\tif ( result > MIN_VALUE ) {\n\t\tterm = result;\n\t\tfor ( i = floor( n - 1 ); i > k; i-- ) {\n\t\t\tterm *= ((i + 1) * y) / ((n - i) * x);\n\t\t\tresult += term;\n\t\t}\n\t} else {\n\t\t// First term underflows so we need to start at the mode of the distribution and work outwards:\n\t\tstart = floor( n * x );\n\t\tif ( start <= k + 1 ) {\n\t\t\tstart = floor( k + 2 );\n\t\t}\n\t\tresult = pow( x, start ) * pow( y, n - start );\n\t\tresult *= binomcoef( floor(n), floor(start) );\n\t\tif ( result === 0.0 ) {\n\t\t\t// OK, starting slightly above the mode didn't work, we'll have to sum the terms the old fashioned way:\n\t\t\tfor ( i = start - 1; i > k; i-- ) {\n\t\t\t\tresult += pow( x, i ) * pow( y, n - i );\n\t\t\t\tresult *= binomcoef( floor(n), floor(i) );\n\t\t\t}\n\t\t} else {\n\t\t\tterm = result;\n\t\t\tstartTerm = result;\n\t\t\tfor ( i = start - 1; i > k; i-- ) {\n\t\t\t\tterm *= ((i + 1) * y) / ((n - i) * x);\n\t\t\t\tresult += term;\n\t\t\t}\n\t\t\tterm = startTerm;\n\t\t\tfor ( i = start + 1; i <= n; i++ ) {\n\t\t\t\tterm *= (n - i + 1) * x / (i * y);\n\t\t\t\tresult += term;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default binomialCCDF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport compute from './assign.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the incomplete beta function and its first derivative.\n*\n* @param {Probability} x - function input\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {boolean} regularized - boolean indicating if the function should evaluate the regularized boolean beta function\n* @param {boolean} upper - boolean indicating if the function should return the upper tail of the incomplete beta function instead\n* @returns {Array} function value and first derivative\n*\n* @example\n* var out = kernelBetainc( 0.5, 2.0, 2.0, false, false );\n* // returns [ ~0.083, ~1.5 ]\n*\n* @example\n* var out = kernelBetainc( 0.2, 1.0, 2.0, true, false );\n* // returns [ 0.36, 1.6 ]\n*/\nfunction kernelBetainc( x, a, b, regularized, upper ) {\n\treturn compute( x, a, b, regularized, upper, [ 0.0, 0.0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default kernelBetainc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { assign as kernelBetainc } from '@stdlib/math-base-special-kernel-betainc';\n\n\n// MAIN //\n\n/**\n* Evaluates the incomplete beta function.\n*\n* @param {Probability} x - function parameter\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {boolean} [regularized=true] - boolean indicating if the function should evaluate the regularized or non-regularized incomplete beta function\n* @param {boolean} [upper=false] - boolean indicating if the function should return the upper tail of the incomplete beta function\n* @returns {number} function value\n*\n* @example\n* var y = betainc( 0.5, 2.0, 2.0 );\n* // returns 0.5\n*\n* @example\n* var y = betainc( 0.5, 2.0, 2.0, false );\n* // returns ~0.083\n*\n* @example\n* var y = betainc( 0.2, 1.0, 2.0 );\n* // returns 0.36\n*/\nfunction betainc( x, a, b, regularized, upper ) {\n\tvar out = [ 0.0, 0.0 ];\n\tregularized = ( regularized === false ) ? false : true; // eslint-disable-line no-unneeded-ternary\n\tupper = ( upper === true ) ? true : false; // eslint-disable-line no-unneeded-ternary\n\tkernelBetainc( x, a, b, regularized, upper, out, 1, 0 );\n\treturn out[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default betainc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the incomplete beta function and its first derivative.\n*\n* @module @stdlib/math-base-special-kernel-betainc\n*\n* @example\n* import kernelBetainc from '@stdlib/math-base-special-kernel-betainc';\n*\n* var out = kernelBetainc( 0.5, 2.0, 2.0, false, false );\n* // returns [ ~0.083, ~1.5 ]\n*\n* out = kernelBetainc( 0.2, 1.0, 2.0, true, false );\n* // returns [ 0.36, 1.6 ]\n*\n* @example\n* import kernelBetainc from '@stdlib/math-base-special-kernel-betainc';\n*\n* var arr = [ 0.0, 0.0 ];\n* var out = kernelBetainc.assign( 0.2, 1.0, 2.0, true, true, arr, 1, 0 );\n* // returns [ 0.64, 1.6 ]\n*\n* var bool = ( arr === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_81_0/boost/math/special_functions/detail/erf_inv.hpp}. This implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport rationalFcnR1 from './rational_p1q1.js';\nimport rationalFcnR2 from './rational_p2q2.js';\nimport rationalFcnR3 from './rational_p3q3.js';\nimport rationalFcnR4 from './rational_p4q4.js';\nimport rationalFcnR5 from './rational_p5q5.js';\n\n\n// VARIABLES //\n\nvar Y1 = 8.91314744949340820313e-2;\nvar Y2 = 2.249481201171875;\nvar Y3 = 8.07220458984375e-1;\nvar Y4 = 9.3995571136474609375e-1;\nvar Y5 = 9.8362827301025390625e-1;\n\n\n// MAIN //\n\n/**\n* Evaluates the inverse complementary error function.\n*\n* Note that\n*\n* ```tex\n* \\operatorname{erfc^{-1}}(1-z) = \\operatorname{erf^{-1}}(z)\n* ```\n*\n* ## Method\n*\n* 1.  For \\\\(|x| \\leq 0.5\\\\), we evaluate the inverse error function using the rational approximation\n*\n*     ```tex\n*     \\operatorname{erf^{-1}}(x) = x(x+10)(\\mathrm{Y} + \\operatorname{R}(x))\n*     ```\n*\n*     where \\\\(Y\\\\) is a constant and \\\\(\\operatorname{R}(x)\\\\) is optimized for a low absolute error compared to \\\\(|Y|\\\\).\n*\n*     <!-- <note> -->\n*\n*     Max error \\\\(2.001849\\mbox{e-}18\\\\). Maximum deviation found (error term at infinite precision) \\\\(8.030\\mbox{e-}21\\\\).\n*\n*     <!-- </note> -->\n*\n* 2.  For \\\\(0.5 > 1-|x| \\geq 0\\\\), we evaluate the inverse error function using the rational approximation\n*\n*     ```tex\n*     \\operatorname{erf^{-1}} = \\frac{\\sqrt{-2 \\cdot \\ln(1-x)}}{\\mathrm{Y} + \\operatorname{R}(1-x)}\n*     ```\n*\n*     where \\\\(Y\\\\) is a constant, and \\\\(\\operatorname{R}(q)\\\\) is optimized for a low absolute error compared to \\\\(Y\\\\).\n*\n*     <!-- <note> -->\n*\n*     Max error \\\\(7.403372\\mbox{e-}17\\\\). Maximum deviation found (error term at infinite precision) \\\\(4.811\\mbox{e-}20\\\\).\n*\n*     <!-- </note> -->\n*\n* 3.  For \\\\(1-|x| < 0.25\\\\), we have a series of rational approximations all of the general form\n*\n*     ```tex\n*     p = \\sqrt{-\\ln(1-x)}\n*     ```\n*\n*     Accordingly, the result is given by\n*\n*     ```tex\n*     \\operatorname{erf^{-1}}(x) = p(\\mathrm{Y} + \\operatorname{R}(p-B))\n*     ```\n*\n*     where \\\\(Y\\\\) is a constant, \\\\(B\\\\) is the lowest value of \\\\(p\\\\) for which the approximation is valid, and \\\\(\\operatorname{R}(x-B)\\\\) is optimized for a low absolute error compared to \\\\(Y\\\\).\n*\n*     <!-- <note> -->\n*\n*     Almost all code will only go through the first or maybe second approximation.  After that we are dealing with very small input values.\n*\n*     -   If \\\\(p < 3\\\\), max error \\\\(1.089051\\mbox{e-}20\\\\).\n*     -   If \\\\(p < 6\\\\), max error \\\\(8.389174\\mbox{e-}21\\\\).\n*     -   If \\\\(p < 18\\\\), max error \\\\(1.481312\\mbox{e-}19\\\\).\n*     -   If \\\\(p < 44\\\\), max error \\\\(5.697761\\mbox{e-}20\\\\).\n*     -   If \\\\(p \\geq 44\\\\), max error \\\\(1.279746\\mbox{e-}20\\\\).\n*\n*     <!-- </note> -->\n*\n*     <!-- <note> -->\n*\n*     The Boost library can accommodate \\\\(80\\\\) and \\\\(128\\\\) bit long doubles. JavaScript only supports a \\\\(64\\\\) bit double (IEEE 754). Accordingly, the smallest \\\\(p\\\\) (in JavaScript at the time of this writing) is \\\\(\\sqrt{-\\ln(\\sim5\\mbox{e-}324)} = 27.284429111150214\\\\).\n*\n*     <!-- </note> -->\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var y = erfcinv( 0.5 );\n* // returns ~0.4769\n*\n* @example\n* var y = erfcinv( 0.8 );\n* // returns ~0.1791\n*\n* @example\n* var y = erfcinv( 0.0 );\n* // returns Infinity\n*\n* @example\n* var y = erfcinv( 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = erfcinv( NaN );\n* // returns NaN\n*/\nfunction erfcinv( x ) {\n\tvar sign;\n\tvar qs;\n\tvar q;\n\tvar g;\n\tvar r;\n\n\t// Special case: NaN\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\t// Special case: 0\n\tif ( x === 0.0 ) {\n\t\treturn PINF;\n\t}\n\t// Special case: 2\n\tif ( x === 2.0 ) {\n\t\treturn NINF;\n\t}\n\t// Special case: 1\n\tif ( x === 1.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x > 2.0 || x < 0.0 ) {\n\t\treturn NaN;\n\t}\n\t// Argument reduction (reduce to interval [0,1]). If `x` is outside [0,1], we can take advantage of the complementary error function reflection formula: `erfc(-z) = 2 - erfc(z)`, by negating the result once finished.\n\tif ( x > 1.0 ) {\n\t\tsign = -1.0;\n\t\tq = 2.0 - x;\n\t} else {\n\t\tsign = 1.0;\n\t\tq = x;\n\t}\n\tx = 1.0 - q;\n\n\t// x = 1-q <= 0.5\n\tif ( x <= 0.5 ) {\n\t\tg = x * ( x + 10.0 );\n\t\tr = rationalFcnR1( x );\n\t\treturn sign * ( (g*Y1) + (g*r) );\n\t}\n\t// q >= 0.25\n\tif ( q >= 0.25 ) {\n\t\tg = sqrt( -2.0 * ln(q) );\n\t\tq -= 0.25;\n\t\tr = rationalFcnR2( q );\n\t\treturn sign * ( g / (Y2+r) );\n\t}\n\tq = sqrt( -ln( q ) );\n\n\t// q < 3\n\tif ( q < 3.0 ) {\n\t\tqs = q - 1.125;\n\t\tr = rationalFcnR3( qs );\n\t\treturn sign * ( (Y3*q) + (r*q) );\n\t}\n\t// q < 6\n\tif ( q < 6.0 ) {\n\t\tqs = q - 3.0;\n\t\tr = rationalFcnR4( qs );\n\t\treturn sign * ( (Y4*q) + (r*q) );\n\t}\n\t// q < 18\n\tqs = q - 6.0;\n\tr = rationalFcnR5( qs );\n\treturn sign * ( (Y5*q) + (r*q) );\n}\n\n\n// EXPORTS //\n\nexport default erfcinv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function (i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\)).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.0005087819496582806;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.0005087819496582806 + (x * (-0.008368748197417368 + (x * (0.03348066254097446 + (x * (-0.012692614766297404 + (x * (-0.03656379714117627 + (x * (0.02198786811111689 + (x * (0.008226878746769157 + (x * (-0.005387729650712429 + (x * (0.0 + (x * 0.0))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (-0.9700050433032906 + (x * (-1.5657455823417585 + (x * (1.5622155839842302 + (x * (0.662328840472003 + (x * (-0.7122890234154284 + (x * (-0.05273963823400997 + (x * (0.07952836873415717 + (x * (-0.0023339375937419 + (x * 0.0008862163904564247))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (0.0 + (x * (-0.005387729650712429 + (x * (0.008226878746769157 + (x * (0.02198786811111689 + (x * (-0.03656379714117627 + (x * (-0.012692614766297404 + (x * (0.03348066254097446 + (x * (-0.008368748197417368 + (x * -0.0005087819496582806))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0008862163904564247 + (x * (-0.0023339375937419 + (x * (0.07952836873415717 + (x * (-0.05273963823400997 + (x * (-0.7122890234154284 + (x * (0.662328840472003 + (x * (1.5622155839842302 + (x * (-1.5657455823417585 + (x * (-0.9700050433032906 + (x * 1.0))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function (i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\)).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.20243350835593876;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.20243350835593876 + (x * (0.10526468069939171 + (x * (8.3705032834312 + (x * (17.644729840837403 + (x * (-18.851064805871424 + (x * (-44.6382324441787 + (x * (17.445385985570866 + (x * (21.12946554483405 + (x * -3.6719225470772936))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (6.242641248542475 + (x * (3.971343795334387 + (x * (-28.66081804998 + (x * (-20.14326346804852 + (x * (48.560921310873994 + (x * (10.826866735546016 + (x * (-22.643693341313973 + (x * 1.7211476576120028))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -3.6719225470772936 + (x * (21.12946554483405 + (x * (17.445385985570866 + (x * (-44.6382324441787 + (x * (-18.851064805871424 + (x * (17.644729840837403 + (x * (8.3705032834312 + (x * (0.10526468069939171 + (x * -0.20243350835593876))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.7211476576120028 + (x * (-22.643693341313973 + (x * (10.826866735546016 + (x * (48.560921310873994 + (x * (-20.14326346804852 + (x * (-28.66081804998 + (x * (3.971343795334387 + (x * (6.242641248542475 + (x * 1.0))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function (i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\)).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.1311027816799519;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.1311027816799519 + (x * (-0.16379404719331705 + (x * (0.11703015634199525 + (x * (0.38707973897260434 + (x * (0.3377855389120359 + (x * (0.14286953440815717 + (x * (0.029015791000532906 + (x * (0.0021455899538880526 + (x * (-6.794655751811263e-7 + (x * (2.8522533178221704e-8 + (x * -6.81149956853777e-10))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (3.4662540724256723 + (x * (5.381683457070069 + (x * (4.778465929458438 + (x * (2.5930192162362027 + (x * (0.848854343457902 + (x * (0.15226433829533179 + (x * (0.011059242293464892 + (x * (0.0 + (x * (0.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -6.81149956853777e-10 + (x * (2.8522533178221704e-8 + (x * (-6.794655751811263e-7 + (x * (0.0021455899538880526 + (x * (0.029015791000532906 + (x * (0.14286953440815717 + (x * (0.3377855389120359 + (x * (0.38707973897260434 + (x * (0.11703015634199525 + (x * (-0.16379404719331705 + (x * -0.1311027816799519))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0 + (x * (0.0 + (x * (0.0 + (x * (0.011059242293464892 + (x * (0.15226433829533179 + (x * (0.848854343457902 + (x * (2.5930192162362027 + (x * (4.778465929458438 + (x * (5.381683457070069 + (x * (3.4662540724256723 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function (i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\)).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.0350353787183178;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.0350353787183178 + (x * (-0.0022242652921344794 + (x * (0.018557330651423107 + (x * (0.009508047013259196 + (x * (0.0018712349281955923 + (x * (0.00015754461742496055 + (x * (0.00000460469890584318 + (x * (-2.304047769118826e-10 + (x * 2.6633922742578204e-12))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (1.3653349817554064 + (x * (0.7620591645536234 + (x * (0.22009110576413124 + (x * (0.03415891436709477 + (x * (0.00263861676657016 + (x * (0.00007646752923027944 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 2.6633922742578204e-12 + (x * (-2.304047769118826e-10 + (x * (0.00000460469890584318 + (x * (0.00015754461742496055 + (x * (0.0018712349281955923 + (x * (0.009508047013259196 + (x * (0.018557330651423107 + (x * (-0.0022242652921344794 + (x * -0.0350353787183178))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0 + (x * (0.0 + (x * (0.00007646752923027944 + (x * (0.00263861676657016 + (x * (0.03415891436709477 + (x * (0.22009110576413124 + (x * (0.7620591645536234 + (x * (1.3653349817554064 + (x * 1.0))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function (i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\)).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.016743100507663373;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.016743100507663373 + (x * (-0.0011295143874558028 + (x * (0.001056288621524929 + (x * (0.00020938631748758808 + (x * (0.000014962478375834237 + (x * (4.4969678992770644e-7 + (x * (4.625961635228786e-9 + (x * (-2.811287356288318e-14 + (x * 9.905570997331033e-17))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.5914293448864175 + (x * (0.1381518657490833 + (x * (0.016074608709367652 + (x * (0.0009640118070051656 + (x * (0.000027533547476472603 + (x * (2.82243172016108e-7 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 9.905570997331033e-17 + (x * (-2.811287356288318e-14 + (x * (4.625961635228786e-9 + (x * (4.4969678992770644e-7 + (x * (0.000014962478375834237 + (x * (0.00020938631748758808 + (x * (0.001056288621524929 + (x * (-0.0011295143874558028 + (x * -0.016743100507663373))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0 + (x * (0.0 + (x * (2.82243172016108e-7 + (x * (0.000027533547476472603 + (x * (0.0009640118070051656 + (x * (0.016074608709367652 + (x * (0.1381518657490833 + (x * (0.5914293448864175 + (x * 1.0))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of `2`.\n*\n* @module @stdlib/constants-float64-sqrt-two\n* @type {number}\n*\n* @example\n* import SQRT2 from '@stdlib/constants-float64-sqrt-two';\n* // returns 1.4142135623730951\n*/\n\n\n// MAIN //\n\n/**\n* Square root of `2`.\n*\n* ```tex\n* \\sqrt{2}\n* ```\n*\n* @constant\n* @type {number}\n* @default 1.4142135623730951\n*/\nvar SQRT2 = 1.41421356237309504880168872420969807856967187537694807317667973799073247846210703885038753432764157273501384623e+00; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default SQRT2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/t_distribution_inv.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006.\n* Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaDeltaRatio from '@stdlib/math-base-special-gamma-delta-ratio';\nimport evalpoly from '@stdlib/math-base-tools-evalpoly';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport PI from '@stdlib/constants-float64-pi';\nimport polyval1 from './polyval_co14.js';\nimport polyval2 from './polyval_co15.js';\nimport polyval3 from './polyval_co16.js';\nimport polyval4 from './polyval_co17.js';\nimport polyval5 from './polyval_co18.js';\nimport polyval6 from './polyval_co19.js';\nimport polyval7 from './polyval_co20.js';\nimport polyval8 from './polyval_co21.js';\nimport polyval9 from './polyval_co22.js';\n\n\n// VARIABLES //\n\nvar c0 = 0.0;\n\n// Workspace for the polynomial coefficients:\nvar c = [ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Evaluates Student's t quantiles via a body series expansion. Tail and body series are due to Shaw.\n*\n* ## References\n*\n* -   Shaw, William T. 2006. \"Sampling Student's T distribution – use of the inverse cumulative distribution function.\" _Journal of Computational Finance_ 9 (4): 37–73. [www.mth.kcl.ac.uk/~shaww/web\\_page/papers/Tdistribution06.pdf](www.mth.kcl.ac.uk/~shaww/web_page/papers/Tdistribution06.pdf).\n*\n* @private\n* @param {PositiveNumber} df - degrees of freedom\n* @param {Probability} u - input probability\n* @returns {number} function value\n*/\nfunction inverseStudentsTBodySeries( df, u ) {\n\tvar idf;\n\tvar v;\n\n\t// Body series for small N, start with Eq 56 of Shaw:\n\tv = gammaDeltaRatio( df/2, 0.5 ) * sqrt( df*PI ) * ( u-0.5 );\n\n\t// Figure out what the coefficients are. They depend only on the degrees of freedom (Eq 57 of Shaw):\n\tidf = 1.0 / df;\n\tc[ 1 ] = polyval1( idf );\n\tc[ 2 ] = polyval2( idf );\n\tc[ 3 ] = polyval3( idf );\n\tc[ 4 ] = polyval4( idf );\n\tc[ 5 ] = polyval5( idf );\n\tc[ 6 ] = polyval6( idf );\n\tc[ 7 ] = polyval7( idf );\n\tc[ 8 ] = polyval8( idf );\n\tc[ 9 ] = polyval9( idf );\n\n\t// Result is then an odd polynomial in v (see Eq 56 of Shaw)...\n\treturn c0 + ( v*evalpoly( c, v*v ) );\n}\n\n\n// EXPORTS //\n\nexport default inverseStudentsTBodySeries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.16666666666666666;\n\t}\n\treturn 0.16666666666666666 + (x * 0.16666666666666666);\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.058333333333333334;\n\t}\n\treturn 0.058333333333333334 + (x * (0.06666666666666667 + (x * 0.008333333333333333))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.0251984126984127;\n\t}\n\treturn 0.0251984126984127 + (x * (0.026785714285714284 + (x * (0.0017857142857142857 + (x * 0.0001984126984126984))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.012039792768959435;\n\t}\n\treturn 0.012039792768959435 + (x * (0.010559964726631394 + (x * (-0.0011078042328042327 + (x * (0.0003747795414462081 + (x * 0.0000027557319223985893))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.003837005972422639;\n\t}\n\treturn 0.003837005972422639 + (x * (0.00610392115600449 + (x * (-0.0016095979637646305 + (x * (0.0005945867404200738 + (x * (-0.00006270542728876062 + (x * 2.505210838544172e-8))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.0032177478835464946;\n\t}\n\treturn 0.0032177478835464946 + (x * (0.0010898206731540065 + (x * (-0.0012579159844784845 + (x * (0.0006908420797309686 + (x * (-0.00016376804137220805 + (x * (0.0000154012654012654 + (x * 1.6059043836821613e-10))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.001743826229834001;\n\t}\n\treturn 0.001743826229834001 + (x * (0.00003353097688001788 + (x * (-0.0007624513544032393 + (x * (0.0006451304695145635 + (x * (-0.000249472580470431 + (x * (0.000049255746366361444 + (x * (-0.0000039851014346715405 + (x * 7.647163731819816e-13))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.0009647274732138864;\n\t}\n\treturn 0.0009647274732138864 + (x * (-0.0003110108632631878 + (x * (-0.00036307660358786886 + (x * (0.0005140660578834113 + (x * (-0.00029133414466938067 + (x * (0.00009086710793521991 + (x * (-0.000015303004486655377 + (x * (0.0000010914179173496788 + (x * 2.8114572543455206e-15))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.0005422926281312969;\n\t}\n\treturn 0.0005422926281312969 + (x * (-0.0003694266780000966 + (x * (-0.00010230378073700413 + (x * (0.00035764655430568635 + (x * (-0.00028690924218514614 + (x * (0.00012645437628698076 + (x * (-0.000033202652391372056 + (x * (0.000004890304529197534 + (x * (-3.123956959982987e-7 + (x * 8.22063524662433e-18))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/detail/t_distribution_inv.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006.\n* Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaDeltaRatio from '@stdlib/math-base-special-gamma-delta-ratio';\nimport evalpoly from '@stdlib/math-base-tools-evalpoly';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport pow from '@stdlib/math-base-special-pow';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// VARIABLES //\n\n// Array for the coefficients d(k), these depend only on the number of degrees of freedom df, so at least in theory we could tabulate these for fixed df, see p15 of Shaw:\nvar d = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Evaluates Student's t quantiles via a tail series expansion. Tail and body series are due to Shaw.\n*\n* ## References\n*\n* -   Shaw, William T. 2006. \"Sampling Student's T distribution – use of the inverse cumulative distribution function.\" _Journal of Computational Finance_ 9 (4): 37–73. [www.mth.kcl.ac.uk/~shaww/web\\_page/papers/Tdistribution06.pdf](www.mth.kcl.ac.uk/~shaww/web_page/papers/Tdistribution06.pdf).\n*\n* @private\n* @param {number} df - degrees of freedom\n* @param {number} v - function value\n* @returns {number} tail value\n*/\nfunction inverseStudentsTTailSeries( df, v ) { // eslint-disable-line id-length\n\tvar result;\n\tvar power;\n\tvar div;\n\tvar np2;\n\tvar np4;\n\tvar np6;\n\tvar rn;\n\tvar w;\n\n\t// Tail series expansion, see section 6 of Shaw's paper. `w` is calculated using Eq 60:\n\tw = gammaDeltaRatio( df/2.0, 0.5 ) * sqrt( df*PI ) * v;\n\n\t// Define some variables:\n\tnp2 = df + 2.0;\n\tnp4 = df + 4.0;\n\tnp6 = df + 6.0;\n\n\td[ 0 ] = 1.0;\n\td[ 1 ] = -(df+1.0) / (2.0*np2);\n\tnp2 *= (df + 2.0);\n\td[ 2 ] = -df * (df+1.0) * (df+3.0) / (8.0*np2*np4);\n\tnp2 *= df + 2.0;\n\td[ 3 ] = -df * (df+1.0) * (df+5.0) * (((3.0*df) + 7.0) * df - 2.0) / (48.0*np2*np4*np6); // eslint-disable-line max-len, no-mixed-operators\n\tnp2 *= (df + 2.0);\n\tnp4 *= (df + 4.0);\n\td[ 4 ] = -df * (df+1.0) * (df+7.0) * ( (((((15.0*df) + 154.0) * df + 465.0) * df + 286.0) * df - 336.0) * df + 64.0) / (384.0*np2*np4*np6*(df+8.0)); // eslint-disable-line max-len, no-mixed-operators\n\tnp2 *= (df + 2.0);\n\td[ 5 ] = -df * (df+1.0) * (df+3.0) * (df+9.0) * (((((((35.0 * df + 452.0) * df+1573.0) * df + 600.0) * df - 2020.0) * df) + 928.0) * df - 128.0) / (1280.0*np2*np4*np6*(df+8.0) * (df+10.0)); // eslint-disable-line max-len, no-mixed-operators\n\tnp2 *= (df + 2.0);\n\tnp4 *= (df + 4.0);\n\tnp6 *= (df + 6.0);\n\td[ 6 ] = -df * (df+1.0) * (df+11.0) * ((((((((((((945.0*df) + 31506.0) * df + 425858.0) * df + 2980236.0) * df + 11266745.0) * df + 20675018.0) * df + 7747124.0) * df - 22574632.0) * df - 8565600.0) * df + 18108416.0) * df - 7099392.0) * df + 884736.0) / (46080.0*np2*np4*np6*(df+8.0) * (df+10.0) * (df+12.0)); // eslint-disable-line max-len, no-mixed-operators\n\n\t// Now bring everything together to provide the result this is Eq 62 of Shaw:\n\trn = sqrt( df );\n\tdiv = pow( rn*w, 1.0/df );\n\tpower = div * div;\n\tresult = evalpoly( d, power );\n\tresult *= rn;\n\tresult /= div;\n\treturn -result;\n}\n\n\n// EXPORTS //\n\nexport default inverseStudentsTTailSeries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/detail/t_distribution_inv.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006.\n* Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n/* eslint-disable no-mixed-operators */\n\n'use strict';\n\n// MODULES //\n\nimport erfcinv from '@stdlib/math-base-special-erfcinv';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport pow from '@stdlib/math-base-special-pow';\nimport HALF_PI from '@stdlib/constants-float64-half-pi';\nimport SQRT2 from '@stdlib/constants-float64-sqrt-two';\n\n\n// MAIN //\n\n/**\n* Evaluates Student's t quantiles via a method due to Hill.\n*\n* ## References\n*\n* -   Hill, G. W. 1970. \"Algorithm 396: Student's T-Quantiles.\" _Communications of the ACM_ 13 (10). New York, NY, USA: ACM: 619–20. doi:[10.1145/355598.355600](https://doi.org/10.1145/355598.355600).\n*\n* @private\n* @param {PositiveNumber} ndf - degrees of freedom\n* @param {Probability} u - input probability\n* @returns {number} function value\n*/\nfunction inverseStudentsTHill( ndf, u ) {\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar q;\n\tvar x;\n\tvar y;\n\n\tif ( ndf > 1e20 ) {\n\t\treturn -erfcinv( 2 * u ) * SQRT2;\n\t}\n\ta = 1.0 / ( ndf - 0.5 );\n\tb = 48.0 / (a * a);\n\tc = ( ( ( ( (20700.0*a/b) - 98.0 ) * a ) - 16.0 ) * a ) + 96.36;\n\td = ( ( ( (94.5/(b+c)) - 3.0 ) / b ) + 1.0 ) * sqrt( a * HALF_PI ) * ndf;\n\ty = pow( d * 2.0 * u, 2.0 / ndf );\n\n\tif ( y > ( 0.05 + a ) ) {\n\t\t// Asymptotic inverse expansion about normal:\n\t\tx = -erfcinv( 2.0 * u ) * SQRT2;\n\t\ty = x * x;\n\n\t\tif ( ndf < 5.0 ) {\n\t\t\tc += 0.3 * ( ndf-4.5 ) * ( x + 0.6 );\n\t\t}\n\t\tc += ( ( ( ( ( ( (0.05*d*x)-5.0 ) * x ) - 7.0 ) * x )- 2.0 ) * x ) + b;\n\t\ty = ((((((0.4*y+6.3)*y)+36.0) * y + 94.5) / c - y - 3.0) / b + 1.0) * x;\n\t\ty = expm1( a * y * y );\n\t} else {\n\t\ty = ((1.0 / ( ( (ndf+6.0) / (ndf*y) - 0.089 * d - 0.822 ) *\n\t\t(ndf+2.0) * 3.0 ) + 0.5 / (ndf+4.0)) * y - 1.0) *\n\t\t(ndf+1.0) / (ndf+2.0) + 1.0 / y;\n\t}\n\tq = sqrt( ndf * y );\n\treturn -q;\n}\n\n\n// EXPORTS //\n\nexport default inverseStudentsTHill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/t_distribution_inv.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006.\n* Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport inverseStudentsT from './inverse_students_t.js';\n\n\n// MAIN //\n\n/**\n* Returns the inverse of the incomplete beta function via the Student t distribution.\n*\n* @private\n* @param {PositiveNumber} a - function parameter\n* @param {Probability} p - probability value\n* @param {Object} py - placeholder object holding one minus the returned value\n* @returns {number} function value\n*/\nfunction findIBetaInvFromTDist( a, p, py ) {\n\tvar df;\n\tvar u;\n\tvar v;\n\tvar t;\n\n\tu = p / 2.0;\n\tv = 1.0 - u;\n\tdf = a * 2.0;\n\tt = inverseStudentsT( df, u, v );\n\tif ( py ) {\n\t\tpy.value = t * t / ( df + ( t*t ) );\n\t}\n\treturn df / ( df + ( t*t ) );\n}\n\n\n// EXPORTS //\n\nexport default findIBetaInvFromTDist;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/t_distribution_inv.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006.\n* Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport erfcinv from '@stdlib/math-base-special-erfcinv';\nimport floor from '@stdlib/math-base-special-floor';\nimport ldexp from '@stdlib/math-base-special-ldexp';\nimport round from '@stdlib/math-base-special-round';\nimport acos from '@stdlib/math-base-special-acos';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport cos from '@stdlib/math-base-special-cos';\nimport pow from '@stdlib/math-base-special-pow';\nimport sin from '@stdlib/math-base-special-sin';\nimport SQRT2 from '@stdlib/constants-float64-sqrt-two';\nimport PI from '@stdlib/constants-float64-pi';\nimport inverseStudentsTBodySeries from './inverse_students_t_body_series.js';\nimport inverseStudentsTTailSeries from './inverse_students_t_tail_series.js';\nimport inverseStudentsTHill from './inverse_students_t_hill.js';\n\n\n// VARIABLES //\n\nvar DF_THRESHOLD = 0x10000000; // 2^28\nvar ONE_THIRD = 1.0 / 3.0;\nvar EXP = ( 2.0 * 53.0 ) / 3.0;\nvar C = 0.85498797333834849467655443627193;\n\n\n// MAIN //\n\n/**\n* Evaluates Student's t quantiles.\n*\n* @private\n* @param {PositiveNumber} df - degrees of freedom\n* @param {Probability} u - input probability\n* @param {Probability} v - probability equal to `1-u`\n* @returns {number} function value\n*/\nfunction inverseStudentsT( df, u, v ) {\n\tvar crossover;\n\tvar tolerance;\n\tvar rootAlpha;\n\tvar invert;\n\tvar result;\n\tvar alpha;\n\tvar tmp;\n\tvar p0;\n\tvar p2;\n\tvar p4;\n\tvar p5;\n\tvar p;\n\tvar r;\n\tvar x;\n\tvar a;\n\tvar b;\n\n\tresult = 0;\n\tif ( u > v ) {\n\t\t// Function is symmetric, so invert it:\n\t\ttmp = v;\n\t\tv = u;\n\t\tu = tmp;\n\t\tinvert = true;\n\t} else {\n\t\tinvert = false;\n\t}\n\tif ( floor(df) === df && df < 20 ) {\n\t\t// We have integer degrees of freedom, try for the special cases first:\n\t\ttolerance = ldexp( 1.0, EXP );\n\n\t\tswitch ( floor( df ) ) {\n\t\tcase 1:\n\t\t\t// `df = 1` is the same as the Cauchy distribution, see Shaw Eq 35:\n\t\t\tif ( u === 0.5 ) {\n\t\t\t\tresult = 0.0;\n\t\t\t} else {\n\t\t\t\tresult = -cos( PI * u ) / sin( PI * u );\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\t// `df = 2` has an exact result, see Shaw Eq 36:\n\t\t\tresult = ( (2.0*u) - 1.0 ) / sqrt( 2.0 * u * v );\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\t// `df = 4` has an exact result, see Shaw Eq 38 & 39:\n\t\t\talpha = 4.0 * u * v;\n\t\t\trootAlpha = sqrt( alpha );\n\t\t\tr = 4 * cos( acos( rootAlpha ) / 3.0 ) / rootAlpha;\n\t\t\tx = sqrt( r - 4.0 );\n\t\t\tresult = ( u - 0.5 < 0.0 ) ? -x : x;\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\t// We get numeric overflow in this area:\n\t\t\tif ( u < 1.0e-150 ) {\n\t\t\t\treturn ( ( invert ) ? -1 : 1 ) * inverseStudentsTHill( df, u );\n\t\t\t}\n\t\t\t// Newton-Raphson iteration of a polynomial case, choice of seed value is taken from Shaw's online supplement:\n\t\t\ta = 4.0 * ( u - (u*u) ); // 1 - 4 * (u - 0.5f) * (u - 0.5f);\n\t\t\tb = pow( a, ONE_THIRD );\n\t\t\tp = 6.0 * ( 1.0 + ( C * ( (1.0/b) - 1.0 ) ) );\n\t\t\tdo {\n\t\t\t\tp2 = p * p;\n\t\t\t\tp4 = p2 * p2;\n\t\t\t\tp5 = p * p4;\n\t\t\t\tp0 = p;\n\n\t\t\t\t// Next term is given by Eq 41:\n\t\t\t\tp = 2.0 * ( (8.0*a*p5) - (270.0*p2) + 2187 ) /\n\t\t\t\t\t( 5.0 * ( (4.0*a*p4) - (216.0*p) - 243.0 ) );\n\t\t\t} while ( abs( (p - p0) / p ) > tolerance );\n\n\t\t\t// Use Eq 45 to extract the result:\n\t\t\tp = sqrt( p - df );\n\t\t\tresult = ( u - 0.5 < 0.0 ) ? -p : p;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif ( df > DF_THRESHOLD ) { // 2^28\n\t\t\t\tresult = erfcinv( 2.0 * u ) * SQRT2;\n\t\t\t} else if ( df < 3 ) {\n\t\t\t\t// Use a roughly linear scheme to choose between Shaw's tail series and body series:\n\t\t\t\tcrossover = 0.2742 - ( df * 0.0242143 );\n\t\t\t\tif ( u > crossover ) {\n\t\t\t\t\tresult = inverseStudentsTBodySeries( df, u );\n\t\t\t\t} else {\n\t\t\t\t\tresult = inverseStudentsTTailSeries( df, u );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Use Hill's method except in the extreme tails where we use Shaw's tail series. The crossover point is roughly exponential in -df:\n\t\t\t\tcrossover = ldexp( 1.0, round( df / -0.654 ) );\n\t\t\t\tif ( u > crossover ) {\n\t\t\t\t\tresult = inverseStudentsTHill( df, u );\n\t\t\t\t} else {\n\t\t\t\t\tresult = inverseStudentsTTailSeries( df, u );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else if ( df > DF_THRESHOLD ) {\n\t\tresult = -erfcinv( 2.0 * u ) * SQRT2;\n\t} else if ( df < 3 ) {\n\t\t// Use a roughly linear scheme to choose between Shaw's tail series and body series:\n\t\tcrossover = 0.2742 - ( df * 0.0242143 );\n\t\tif ( u > crossover ) {\n\t\t\tresult = inverseStudentsTBodySeries( df, u );\n\t\t} else {\n\t\t\tresult = inverseStudentsTTailSeries( df, u );\n\t\t}\n\t} else {\n\t\t// Use Hill's method except in the extreme tails where we use Shaw's tail series. The crossover point is roughly exponential in -df:\n\t\tcrossover = ldexp( 1.0, round( df / -0.654 ) );\n\t\tif ( u > crossover ) {\n\t\t\tresult = inverseStudentsTHill( df, u );\n\t\t} else {\n\t\t\tresult = inverseStudentsTTailSeries( df, u );\n\t\t}\n\t}\n\treturn ( invert ) ? -result : result;\n}\n\n\n// EXPORTS //\n\nexport default inverseStudentsT;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/ibeta_inverse.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006.\n* Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport evalpoly from '@stdlib/math-base-tools-evalpoly';\nimport erfcinv from '@stdlib/math-base-special-erfcinv';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport exp from '@stdlib/math-base-special-exp';\nimport SQRT2 from '@stdlib/constants-float64-sqrt-two';\n\n\n// VARIABLES //\n\n// Workspaces for the polynomial coefficients:\nvar workspace = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\nvar terms = [ 0.0, 0.0, 0.0, 0.0 ];\n\n\n// MAIN //\n\n/**\n* Carries out the first method by Temme (described in section 2).\n*\n* ## References\n*\n* -   Temme, N. M. 1992. \"Incomplete Laplace Integrals: Uniform Asymptotic Expansion with Application to the Incomplete Beta Function.\" _Journal of Computational and Applied Mathematics_ 41 (1–2): 1638–63. doi:[10.1016/0377-0427(92)90244-R](https://doi.org/10.1016/0377-0427(92)90244-R).\n*\n* @private\n* @param {PositiveNumber} a - function parameter\n* @param {PositiveNumber} b - function parameter\n* @param {Probability} z - function parameter\n* @returns {number} function value\n*/\nfunction temme1( a, b, z ) {\n\tvar eta0;\n\tvar eta2;\n\tvar eta;\n\tvar B2;\n\tvar B3;\n\tvar B;\n\tvar c;\n\n\t// Get the first approximation for eta from the inverse error function (Eq: 2.9 and 2.10):\n\teta0 = erfcinv( 2.0 * z );\n\teta0 /= -sqrt( a / 2.0 );\n\n\tterms[ 0 ] = eta0;\n\n\t// Calculate powers:\n\tB = b - a;\n\tB2 = B * B;\n\tB3 = B2 * B;\n\n\t// Calculate correction terms:\n\n\t// See eq following 2.15:\n\tworkspace[ 0 ] = -B * SQRT2 / 2;\n\tworkspace[ 1 ] = ( 1 - (2.0*B) ) / 8.0;\n\tworkspace[ 2 ] = -(B * SQRT2 / 48.0);\n\tworkspace[ 3 ] = -1.0 / 192.0;\n\tworkspace[ 4 ] = -B * SQRT2 / 3840.0;\n\tworkspace[ 5 ] = 0.0;\n\tworkspace[ 6 ] = 0.0;\n\tterms[ 1 ] = evalpoly( workspace, eta0 );\n\n\t// Eq Following 2.17:\n\tworkspace[ 0 ] = B * SQRT2 * ( (3.0*B) - 2.0) / 12.0;\n\tworkspace[ 1 ] = ( (20.0*B2) - (12.0*B) + 1.0 ) / 128.0;\n\tworkspace[ 2 ] = B * SQRT2 * ( (20.0*B) - 1.0) / 960.0;\n\tworkspace[ 3 ] = ( (16.0*B2) + (30.0*B) - 15.0) / 4608.0;\n\tworkspace[ 4 ] = B * SQRT2 * ( (21.0*B) + 32) / 53760.0;\n\tworkspace[ 5 ] = (-(32.0*B2) + 63.0) / 368640.0;\n\tworkspace[ 6 ] = -B * SQRT2 * ( (120.0*B) + 17.0) / 25804480.0;\n\tterms[ 2 ] = evalpoly( workspace, eta0 );\n\n\t// Eq Following 2.17:\n\tworkspace[ 0 ] = B * SQRT2 * ( (-75*B2) + (80.0*B) - 16.0) / 480.0;\n\tworkspace[ 1 ] = ( (-1080.0*B3) + (868.0*B2) - (90.0*B) - 45.0) / 9216.0;\n\tworkspace[ 2 ] = B * SQRT2 * ( (-1190.0*B2) + (84.0*B) + 373.0) / 53760.0;\n\tworkspace[ 3 ] = ( (-2240.0*B3)-(2508.0*B2)+(2100.0*B)-165.0 ) / 368640.0;\n\tworkspace[ 4 ] = 0.0;\n\tworkspace[ 5 ] = 0.0;\n\tworkspace[ 6 ] = 0.0;\n\tterms[ 3 ] = evalpoly( workspace, eta0 );\n\n\t// Bring them together to get a final estimate for eta:\n\teta = evalpoly( terms, 1.0/a );\n\n\t// Now we need to convert eta to the return value `x`, by solving the appropriate quadratic equation:\n\teta2 = eta * eta;\n\tc = -exp( -eta2 / 2.0 );\n\tif ( eta2 === 0.0 ) {\n\t\treturn 0.5;\n\t}\n\treturn ( 1.0 + ( eta * sqrt( ( 1.0+c ) / eta2 ) ) ) / 2.0;\n}\n\n\n// EXPORTS //\n\nexport default temme1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/ibeta_inverse.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006.\n* Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ln from '@stdlib/math-base-special-ln';\nimport MAX_VALUE from '@stdlib/constants-float64-max';\n\n\n// VARIABLES //\n\nvar BIG = MAX_VALUE / 4.0;\n\n\n// MAIN //\n\n/**\n* Helper function used by root finding code to convert `eta` to `x`.\n*\n* @private\n* @param {number} t - first parameter\n* @param {number} a - second parameter\n* @returns {Function} root function\n*/\nfunction temmeRootFinder( t, a ) {\n\treturn roots;\n\n\t/**\n\t* Calculates roots.\n\t*\n\t* @private\n\t* @param {number} x - function value\n\t* @returns {Array} function roots\n\t*/\n\tfunction roots( x ) {\n\t\tvar f1;\n\t\tvar f;\n\t\tvar y;\n\n\t\ty = 1.0 - x;\n\t\tif ( y === 0.0 ) {\n\t\t\treturn [ -BIG, -BIG ];\n\t\t}\n\t\tif ( x === 0.0 ) {\n\t\t\treturn [ -BIG, -BIG ];\n\t\t}\n\t\tf = ln( x ) + ( a * ln( y ) ) + t;\n\t\tf1 = ( 1.0 / x ) - ( a / y );\n\t\treturn [ f, f1 ];\n\t}\n}\n\n\n// EXPORTS //\n\nexport default temmeRootFinder;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the signum function for a double-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var sign = signum( -5.0 );\n* // returns -1.0\n*\n* @example\n* var sign = signum( 5.0 );\n* // returns 1.0\n*\n* @example\n* var sign = signum( -0.0 );\n* // returns -0.0\n*\n* @example\n* var sign = signum( 0.0 );\n* // returns 0.0\n*\n* @example\n* var sign = signum( NaN );\n* // returns NaN\n*/\nfunction signum( x ) {\n\tif ( x === 0.0 || isnan( x ) ) {\n\t\treturn x; // addresses both +-0\n\t}\n\treturn ( x < 0.0 ) ? -1.0 : 1.0;\n}\n\n\n// EXPORTS //\n\nexport default signum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/tools/roots.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sign from '@stdlib/math-base-special-signum';\nimport abs from '@stdlib/math-base-special-abs';\nimport ldexp from '@stdlib/math-base-special-ldexp';\nimport MAX_VALUE from '@stdlib/constants-float64-max';\n\n\n// MAIN //\n\n/**\n* Performs root finding via second order Newton-Raphson iteration.\n*\n* @private\n* @param {Array} fun - two-element array of the function and its first derivative\n* @param {number} guess - initial starting value.\n* @param {number} min - minimum possible value for the result,used as initial lower bracket.\n* @param {number} max - maximum possible value for the result, used as initial upper bracket.\n* @param {PositiveInteger} digits - desired number of binary digits\n* @param {PositiveInteger} maxIter - maximum number of iterations\n* @returns {number} function value\n*/\nfunction newtonRaphsonIterate( fun, guess, min, max, digits, maxIter ) {\n\tvar f0last;\n\tvar delta1;\n\tvar delta2;\n\tvar factor;\n\tvar result;\n\tvar count;\n\tvar delta;\n\tvar res;\n\tvar f0;\n\tvar f1;\n\n\tf0 = 0.0;\n\tf0last = 0.0;\n\tresult = guess;\n\n\tfactor = ldexp( 1.0, 1.0 - digits );\n\tdelta = MAX_VALUE;\n\tdelta1 = MAX_VALUE;\n\tdelta2 = MAX_VALUE;\n\n\tcount = maxIter;\n\tdo {\n\t\tf0last = f0;\n\t\tdelta2 = delta1;\n\t\tdelta1 = delta;\n\t\tres = fun(result);\n\t\tf0 = res[ 0 ];\n\t\tf1 = res[ 1 ];\n\t\tcount -= 1;\n\t\tif ( f0 === 0.0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tif ( f1 === 0.0 ) {\n\t\t\t// Oops zero derivative!!!\n\t\t\tif ( f0last === 0.0 ) {\n\t\t\t\t// Must be the first iteration, pretend that we had a previous one at either min or max:\n\t\t\t\tif ( result === min ) {\n\t\t\t\t\tguess = max;\n\t\t\t\t} else {\n\t\t\t\t\tguess = min;\n\t\t\t\t}\n\t\t\t\tf0last = fun( guess );\n\t\t\t\tdelta = guess - result;\n\t\t\t}\n\t\t\tif ( sign(f0last) * sign(f0) < 0 ) {\n\t\t\t\t// We've crossed over so move in opposite direction to last step:\n\t\t\t\tif ( delta < 0 ) {\n\t\t\t\t\tdelta = (result - min) / 2.0;\n\t\t\t\t} else {\n\t\t\t\t\tdelta = (result - max) / 2.0;\n\t\t\t\t}\n\t\t\t} else if ( delta < 0 ) {\n\t\t\t\tdelta = (result - max) / 2.0;\n\t\t\t} else {\n\t\t\t\tdelta = (result - min) / 2.0;\n\t\t\t}\n\t\t} else {\n\t\t\tdelta = f0 / f1;\n\t\t}\n\t\tif ( abs(delta * 2.0) > abs(delta2) ) {\n\t\t\t// Last two steps haven't converged, try bisection:\n\t\t\tdelta = ( delta > 0.0 ) ? (result-min) / 2.0 : (result-max) / 2.0;\n\t\t}\n\t\tguess = result;\n\t\tresult -= delta;\n\t\tif ( result <= min ) {\n\t\t\tdelta = 0.5 * (guess - min);\n\t\t\tresult = guess - delta;\n\t\t\tif ( result === min || result === max ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if ( result >= max ) {\n\t\t\tdelta = 0.5 * (guess - max);\n\t\t\tresult = guess - delta;\n\t\t\tif ( result === min || result === max ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Update brackets:\n\t\tif ( delta > 0.0 ) {\n\t\t\tmax = guess;\n\t\t} else {\n\t\t\tmin = guess;\n\t\t}\n\t}\n\twhile ( count && ( abs(result * factor) < abs(delta) ) );\n\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default newtonRaphsonIterate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/ibeta_inverse.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006.\n* Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport evalpoly from '@stdlib/math-base-tools-evalpoly';\nimport erfcinv from '@stdlib/math-base-special-erfcinv';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport sin from '@stdlib/math-base-special-sin';\nimport cos from '@stdlib/math-base-special-cos';\nimport temmeRootFinder from './root_finder.js';\nimport newtonRaphsonIterate from './newton_raphson.js';\nimport polyval1 from './polyval_co1.js';\nimport polyval2 from './polyval_co2.js';\nimport polyval3 from './polyval_co3.js';\nimport polyval4 from './polyval_co4.js';\nimport polyval5 from './polyval_co5.js';\nimport polyval6 from './polyval_co6.js';\nimport polyval7 from './polyval_co7.js';\nimport polyval8 from './polyval_co8.js';\nimport polyval9 from './polyval_co9.js';\nimport polyval10 from './polyval_co10.js';\nimport polyval11 from './polyval_co11.js';\nimport polyval12 from './polyval_co12.js';\nimport polyval13 from './polyval_co13.js';\n\n\n// VARIABLES //\n\n// Workspaces for polynomial coefficients:\nvar workspace = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\nvar terms = [ 0.0, 0.0, 0.0, 0.0 ];\n\n\n// MAIN //\n\n/**\n* Carries out the second method by Temme (described in section 3).\n*\n* ## References\n*\n* -   Temme, N. M. 1992. \"Incomplete Laplace Integrals: Uniform Asymptotic Expansion with Application to the Incomplete Beta Function.\" _Journal of Computational and Applied Mathematics_ 41 (1–2): 1638–63. doi:[10.1016/0377-0427(92)90244-R](https://doi.org/10.1016/0377-0427(92)90244-R).\n*\n* @private\n* @param {number} z - function parameter\n* @param {number} r - function parameter\n* @param {number} theta - function parameter\n* @returns {number} function value\n*/\nfunction temme2( z, r, theta ) {\n\tvar upper;\n\tvar lower;\n\tvar alpha;\n\tvar roots;\n\tvar eta0;\n\tvar eta;\n\tvar sc7;\n\tvar sc6;\n\tvar sc5;\n\tvar sc4;\n\tvar sc3;\n\tvar sc2;\n\tvar sc;\n\tvar lu;\n\tvar s2;\n\tvar c2;\n\tvar c;\n\tvar s;\n\tvar u;\n\tvar x;\n\n\t// Get first estimate for eta, see Eq 3.9 and 3.10, but note there is a typo in Eq 3.10:\n\teta0 = erfcinv( 2.0*z ) / (-sqrt( r/2.0 ));\n\n\ts = sin( theta );\n\tc = cos( theta );\n\n\t// Now we need to perturb eta0 to get eta, which we do by evaluating the polynomial in 1/r at the bottom of page 151, to do this we first need the error terms e1, e2 e3 which we'll fill into the array \"terms\".  Since these terms are themselves polynomials, we'll need another array \"workspace\" to calculate those...\n\tterms[ 0 ] = eta0;\n\n\t// Some powers of sin(theta) cos(theta) that we'll need later:\n\ts2 = s * s;\n\tc2 = c * c;\n\tsc = s * c;\n\tsc2 = sc * sc;\n\tsc3 = sc2 * sc;\n\tsc4 = sc2 * sc2;\n\tsc5 = sc2 * sc3;\n\tsc6 = sc3 * sc3;\n\tsc7 = sc4 * sc3;\n\n\t// Calculate e1 and put it in terms[1], see the middle of page 151:\n\tworkspace[ 0 ] = ((2.0*s2) - 1.0) / ( 3.0*sc );\n\tworkspace[ 1 ] = -polyval1( s2 ) / (36.0*sc2);\n\tworkspace[ 2 ] = polyval2( s2 ) / (1620.0*sc3);\n\tworkspace[ 3 ] = polyval3( s2 ) / (6480.0*sc4);\n\tworkspace[ 4 ] = polyval4( s2 ) / (90720.0*sc5);\n\tworkspace[ 5 ] = 0.0;\n\tterms[ 1 ] = evalpoly( workspace, eta0 );\n\n\t// Now evaluate e2 and put it in terms[2]:\n\tworkspace[ 0 ] = -polyval5( s2 ) / (405.0*sc3);\n\tworkspace[ 1 ] = polyval6( s2 ) / (2592.0*sc4);\n\tworkspace[ 2 ] = -polyval7( s2 ) / (204120.0*sc5);\n\tworkspace[ 3 ] = -polyval8( s2 ) / (2099520.0*sc6);\n\tworkspace[ 4 ] = 0.0;\n\tworkspace[ 5 ] = 0.0;\n\tterms[ 2 ] = evalpoly( workspace, eta0 );\n\n\t// And e3, and put it in terms[3]:\n\tworkspace[ 0 ] = polyval9( s2 ) / (102060.0*sc5);\n\tworkspace[ 1 ] = -polyval10( s2 ) / (20995200.0*sc6);\n\tworkspace[ 2 ] = polyval11( s2 ) / (36741600.0*sc7);\n\tworkspace[ 3 ] = 0.0;\n\tworkspace[ 4 ] = 0.0;\n\tworkspace[ 5 ] = 0.0;\n\tterms[ 3 ] = evalpoly( workspace, eta0 );\n\n\t// Bring the correction terms together to evaluate eta; this is the last equation on page 151:\n\teta = evalpoly( terms, 1.0/r );\n\n\t// Now that we have eta we need to back solve for x, we seek the value of x that gives eta in Eq 3.2. The two methods used are described in section 5. Begin by defining a few variables we'll need later:\n\talpha = c / s;\n\talpha *= alpha;\n\tlu = ( -( eta*eta )/( 2.0*s2 ) ) + ln(s2) + ( c2*ln(c2)/s2 );\n\n\t// Temme doesn't specify what value to switch on here, but this seems to work pretty well:\n\tif ( abs(eta) < 0.7 ) {\n\t\t// Small eta use the expansion Temme gives in the second equation of section 5, it's a polynomial in eta:\n\t\tworkspace[ 0 ] = s2;\n\t\tworkspace[ 1 ] = sc;\n\t\tworkspace[ 2 ] = (1.0-(2.0*s2)) / 3.0;\n\t\tworkspace[ 3 ] = polyval12( s2 ) / ( 36.0*sc );\n\t\tworkspace[ 4 ] = polyval13( s2 ) / ( 270.0*sc2 );\n\t\tworkspace[ 5 ] = 0.0;\n\t\tx = evalpoly( workspace, eta );\n\t} else {\n\t\t// If eta is large we need to solve Eq 3.2 more directly, begin by getting an initial approximation for x from the last equation on page 155, this is a polynomial in u:\n\t\tu = exp( lu );\n\t\tworkspace[ 0 ] = u;\n\t\tworkspace[ 1 ] = alpha;\n\t\tworkspace[ 2 ] = 0.0;\n\t\tworkspace[ 3 ] = 3.0 * alpha * ((3.0*alpha)+1.0) / 6.0;\n\t\tworkspace[ 4 ] = 4.0 * alpha * ((4.0*alpha)+1.0) * ((4.0*alpha)+2.0) / 24.0; // eslint-disable-line max-len\n\t\tworkspace[ 5 ] = 5.0 * alpha * ((5.0*alpha)+1.0) * ((5.0*alpha)+2.0) * ((5.0*alpha)+3.0) / 120.0; // eslint-disable-line max-len\n\t\tx = evalpoly( workspace, u );\n\n\t\t// At this point we may or may not have the right answer, Eq-3.2 has two solutions for x for any given eta, however the mapping in 3.2 is 1:1 with the sign of eta and x-sin^2(theta) being the same. So we can check if we have the right root of 3.2, and if not switch x for 1-x.  This transformation is motivated by the fact that the distribution is *almost* symmetric so 1-x will be in the right ball park for the solution:\n\t\tif ( (x-s2)*eta < 0.0 ) {\n\t\t\tx = 1.0 - x;\n\t\t}\n\t}\n\t// The final step is a few Newton-Raphson iterations to clean up our approximation for x, this is pretty cheap in general, and very cheap compared to an incomplete beta evaluation. The limits set on x come from the observation that the sign of eta and x-sin^2(theta) are the same.\n\tif ( eta < 0.0 ) {\n\t\tlower = 0.0;\n\t\tupper = s2;\n\t} else {\n\t\tlower = s2;\n\t\tupper = 1.0;\n\t}\n\t// If our initial approximation is out of bounds then bisect:\n\tif ( x < lower || x > upper ) {\n\t\tx = (lower+upper) / 2.0;\n\t}\n\troots = temmeRootFinder( -lu, alpha );\n\n\t// And iterate:\n\tx = newtonRaphsonIterate( roots, x, lower, upper, 32, 100 );\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default temme2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum single-precision floating-point number.\n*\n* @module @stdlib/constants-float32-max\n* @type {number}\n*\n* @example\n* import FLOAT32_MAX from '@stdlib/constants-float32-max';\n* // returns 3.4028234663852886e+38\n*/\n\n\n// MAIN //\n\n/**\n* Maximum single-precision floating-point number.\n*\n* ## Notes\n*\n* The maximum is given by\n*\n* ```tex\n* 2^{127} (2 - 2^{-23})\n* ```\n*\n* @constant\n* @type {number}\n* @default 3.4028234663852886e+38\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_MAX = 3.4028234663852886e+38;\n\n\n// EXPORTS //\n\nexport default FLOAT32_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nimport gammainc from '@stdlib/math-base-special-gammainc';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\nimport MAX_FLOAT32 from '@stdlib/constants-float32-max';\n\n\n// VARIABLES //\n\nvar debug = logger( 'gammaincinv:higher_newton' );\n\n\n// MAIN //\n\n/**\n* Implementation of the high order Newton-like method.\n*\n* @private\n* @param {number} x0 - initial value\n* @param {number} a - scale parameter\n* @param {number} m - indicator\n* @param {Probability} p - probability value\n* @param {Probability} q - probability value\n* @param {number} lgama - logarithm of scale parameter\n* @param {number} invfp - one over `fp`\n* @param {boolean} pcase - boolean indicating whether p < 0.5\n* @returns {number} function value of the inverse\n*/\nfunction higherNewton( x0, a, m, p, q, lgama, invfp, pcase ) {\n\tvar dlnr;\n\tvar xini;\n\tvar ck0;\n\tvar ck1;\n\tvar ck2;\n\tvar a2;\n\tvar x2;\n\tvar px;\n\tvar qx;\n\tvar xr;\n\tvar t;\n\tvar n;\n\tvar r;\n\tvar x;\n\n\tx = x0;\n\tt = 1;\n\tn = 1;\n\ta2 = a * a;\n\txini = x0;\n\tdo {\n\t\tx = x0;\n\t\tx2 = x * x;\n\t\tif ( m === 0 ) {\n\t\t\tdlnr = ( ( 1.0-a ) * ln( x ) ) + x + lgama;\n\t\t\tif ( dlnr > ln( MAX_FLOAT32 ) ) {\n\t\t\t\tdebug( 'Warning: overflow problems in one or more steps of the computation. The initial approximation to the root is returned.' );\n\t\t\t\treturn xini;\n\t\t\t}\n\t\t\tr = exp( dlnr );\n\t\t} else {\n\t\t\tr = -invfp * x;\n\t\t}\n\t\tif ( pcase ) {\n\t\t\t// Call: gammainc( x, s[, regularized = true ][, upper = false ] )\n\t\t\tpx = gammainc( x, a, true, false );\n\t\t\tck0 = -r * ( px - p );\n\t\t} else {\n\t\t\t// Call: gammainc( x, s[, regularized = true ][, upper = true ] )\n\t\t\tqx = gammainc( x, a, true, true );\n\t\t\tck0 = r * ( qx - q );\n\t\t}\n\t\tr = ck0;\n\t\tif ( ( p > 1e-120 ) || ( n > 1 ) ) {\n\t\t\tck1 = 0.5 * ( x - a + 1.0 ) / x;\n\t\t\tck2 = ( (2*x2) - (4*x*a) + (4*x) + (2*a2) - (3*a) + 1 ) / x2;\n\t\t\tck2 /= 6.0;\n\t\t\tx0 = x + ( r * ( 1.0 + ( r * ( ck1 + (r*ck2) ) ) ) );\n\t\t} else {\n\t\t\tx0 = x + r;\n\t\t}\n\t\tt = abs( ( x/x0 ) - 1.0 );\n\t\tn += 1;\n\t\tx = x0;\n\t\tif ( x < 0 ) {\n\t\t\tx = xini;\n\t\t\tn = 100;\n\t\t}\n\t} while ( ( ( t > 2e-14 ) && ( n < 35 ) ) );\n\tif ( ( t > 2e-14 ) || ( n > 99 ) ) {\n\t\tdebug( 'Warning: the number of iterations in the Newton method reached the upper limit N=35. The last value obtained for the root is given as output.' );\n\t}\n\txr = x || 0;\n\treturn xr;\n}\n\n\n// EXPORTS //\n\nexport default higherNewton;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\nimport evalpoly from '@stdlib/math-base-tools-evalpoly';\nimport polyvalAK1 from './polyval_ak1.js';\nimport polyvalAK2 from './polyval_ak2.js';\n\n\n// VARIABLES //\n\nvar THRESHOLD = 1.0e-8;\nvar ONEO12 = 0.0833333333333333333333333333333;\nvar ONEO120 = 0.00833333333333333333333333333333;\n\n// Polynomial coefficient workspace:\nvar AK = [ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Returns the positive number satisfying \\\\( \\eta^2/2=\\lambda-1-\\ln(\\lambda) \\\\) with \\\\( \\operatorname{sign}(\\lambda-1)=\\operatorname{sign}(\\eta) \\\\).\n*\n* @private\n* @param {number} eta - eta value\n* @returns {number} value satisfying equation\n*/\nfunction lambdaeta( eta ) {\n\tvar L2;\n\tvar L3;\n\tvar L4;\n\tvar L5;\n\tvar la;\n\tvar L;\n\tvar q;\n\tvar r;\n\tvar s;\n\n\ts = eta * eta * 0.5;\n\tif ( eta === 0.0 ) {\n\t\tla = 0.0;\n\t}\n\telse if ( eta < -1.0 ) {\n\t\tr = exp( -1.0 - s );\n\t\tla = polyvalAK1( r );\n\t}\n\telse if ( eta < 1.0 ) {\n\t\tr = eta;\n\t\tla = polyvalAK2( r );\n\t}\n\telse {\n\t\tr = 11.0 + s;\n\t\tL = ln( r );\n\t\tla = r + L;\n\t\tr = 1.0 / r;\n\t\tL2 = L * L;\n\t\tL3 = L2 * L;\n\t\tL4 = L3 * L;\n\t\tL5 = L4 * L;\n\t\tAK[ 1 ] = ( 2.0-L ) * 0.5;\n\t\tAK[ 2 ] = ( ( -9.0*L ) + 6.0 + ( 2.0*L2 ) ) / 6.0;\n\t\tAK[ 3 ] = -( (3*L3)+ (36*L) - (22*L2) - 12 ) * ONEO12;\n\t\tAK[ 4 ] = ( 60.0 + (350.0*L2) - (300.0*L) - (125.0*L3) + (12.0*L4) ) / 60.0; // eslint-disable-line max-len\n\t\tAK[ 5 ] = -(-120 - (274*L4) + (900*L) - (1700*L2) + (1125*L3) + (20*L5)) * ONEO120; // eslint-disable-line max-len\n\t\tla += ( L * r * evalpoly( AK, r ) );\n\t}\n\tr = 1.0;\n\tif (\n\t\t( eta > -3.5 && eta < -0.03 ) ||\n\t\t( eta > 0.03 && eta < 40.0 )\n\t) {\n\t\tr = 1.0;\n\t\tq = la;\n\t\tdo {\n\t\t\tla = q * ( s+ln(q) ) / ( q-1.0 );\n\t\t\tr = abs( ( q/la ) - 1.0 );\n\t\t\tq = la;\n\t\t} while ( r > THRESHOLD );\n\t}\n\treturn la;\n}\n\n\n// EXPORTS //\n\nexport default lambdaeta;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn 0.0 + (x * (1.0 + (x * (1.0 + (x * (1.5 + (x * (2.6666666666666665 + (x * (5.208333333333333 + (x * 10.8))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\treturn 1.0 + (x * (1.0 + (x * (0.3333333333333333 + (x * (0.027777777777777776 + (x * (-0.003703703703703704 + (x * (0.0002314814814814815 + (x * 0.00005878894767783657))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the square root of `2π`.\n*\n* @module @stdlib/constants-float64-ln-sqrt-two-pi\n* @type {number}\n*\n* @example\n* import LN_SQRT_TWO_PI from '@stdlib/constants-float64-ln-sqrt-two-pi';\n* // returns 0.9189385332046728\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of the square root of `2π`.\n*\n* ```tex\n* \\ln \\sqrt{2\\pi}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.9189385332046728\n*/\nvar LN_SQRT_TWO_PI = 9.18938533204672741780329736405617639861397473637783412817151540482765695927260397694743298635954197622005646625e-01; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default LN_SQRT_TWO_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\n// Chebyshev polynomial coefficients...\nvar A = [\n\t1.996379051590076518221,\n\t-0.17971032528832887213e-2,\n\t0.131292857963846713e-4,\n\t-0.2340875228178749e-6,\n\t0.72291210671127e-8,\n\t-0.3280997607821e-9,\n\t0.198750709010e-10,\n\t-0.15092141830e-11,\n\t0.1375340084e-12,\n\t-0.145728923e-13,\n\t0.17532367e-14,\n\t-0.2351465e-15,\n\t0.346551e-16,\n\t-0.55471e-17,\n\t0.9548e-18,\n\t-0.1748e-18,\n\t0.332e-19,\n\t-0.58e-20\n];\n\n\n// MAIN //\n\n/**\n* Computes the sum of a Chebyshev polynomial.\n*\n* @private\n* @param {PositiveInteger} n - degree of polynomial\n* @param {number} t - input value\n* @returns {number} Chebyshev sum\n*/\nfunction chepolsum( n, t ) {\n\tvar tt;\n\tvar u0;\n\tvar u1;\n\tvar u2;\n\tvar k;\n\n\tu0 = 0.0;\n\tu1 = 0.0;\n\ttt = t + t;\n\tk = n;\n\tdo {\n\t\tu2 = u1;\n\t\tu1 = u0;\n\t\tu0 = ( tt*u1 ) - u2 + A[ k ];\n\t\tk -= 1;\n\t} while ( k >= 0 );\n\treturn ( u0-u2 ) / 2.0;\n}\n\n\n// EXPORTS //\n\nexport default chepolsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport ln from '@stdlib/math-base-special-ln';\nimport LN_SQRT_TWO_PI from '@stdlib/constants-float64-ln-sqrt-two-pi';\nimport SMALLEST_FLOAT32 from '@stdlib/constants-float32-smallest-normal';\nimport MAX_FLOAT32 from '@stdlib/constants-float32-max';\nimport chepolsum from './chepolsum.js';\nimport polyvalC from './polyval_c.js';\nimport polyvalD from './polyval_d.js';\n\n\n// VARIABLES //\n\nvar C6 = 0.30865217988013567769;\n\n\n// MAIN //\n\n/**\n* Computes the Stirling series corresponding to asymptotic series for the logarithm of the gamma function.\n*\n* ```tex\n* \\frac{1}{12x}-\\frac{1}{360x^3}\\ldots; x \\ge 3\n* ```\n*\n* @private\n* @param {number} x - input value\n* @returns {number} function value\n*/\nfunction stirling( x ) {\n\tvar z;\n\tif ( x < SMALLEST_FLOAT32 ) {\n\t\treturn MAX_FLOAT32;\n\t}\n\tif ( x < 1.0 ) {\n\t\treturn gammaln( x+1.0 ) - ( (x+0.5) * ln(x) ) + x - LN_SQRT_TWO_PI;\n\t}\n\tif ( x < 2.0 ) {\n\t\treturn gammaln( x ) - ( (x-0.5) * ln(x) ) + x - LN_SQRT_TWO_PI;\n\t}\n\tif ( x < 3.0 ) {\n\t\treturn gammaln( x-1.0 ) - ( (x-0.5) * ln(x) ) + x - LN_SQRT_TWO_PI + ln( x-1.0 ); // eslint-disable-line max-len\n\t}\n\tif ( x < 12.0 ) {\n\t\tz = ( 18.0/( x*x ) ) - 1.0;\n\t\treturn chepolsum( 17, z ) / ( 12.0*x );\n\t}\n\tz = 1.0 / ( x * x );\n\tif ( x < 1000.0 ) {\n\t\treturn polyvalC( z ) / ( C6+z ) / x;\n\t}\n\treturn polyvalD( z ) / x;\n}\n\n\n// EXPORTS //\n\nexport default stirling;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.025721014990011306;\n\t}\n\treturn 0.025721014990011306 + (x * (0.08247596616699963 + (x * (-0.0025328157302663564 + (x * (0.0006099292666946337 + (x * (-0.00033543297638406 + (x * 0.000250505279903))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.08333333333333333;\n\t}\n\treturn 0.08333333333333333 + (x * (-0.002777777777777778 + (x * (0.0007936507936507937 + (x * -0.0005952380952380953))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport exp from '@stdlib/math-base-special-exp';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport ln from '@stdlib/math-base-special-ln';\nimport FLOAT32_MAX from '@stdlib/constants-float32-max';\nimport SQRT_TWO_PI from '@stdlib/constants-float64-sqrt-two-pi';\nimport stirling from './stirling.js';\n\n\n// MAIN //\n\n/**\n* Computes the regulated gamma function.\n*\n* @private\n* @param {number} x - input value\n* @returns {number} function value\n*/\nfunction gamstar( x ) {\n\tif ( x >= 3.0 ) {\n\t\treturn exp( stirling(x) );\n\t}\n\tif ( x > 0.0 ) {\n\t\treturn gamma(x) / ( exp( -x + ( ( x-0.5 ) * ln(x) ) ) * SQRT_TWO_PI );\n\t}\n\t// Case: x <= 0.0\n\treturn FLOAT32_MAX;\n}\n\n\n// EXPORTS //\n\nexport default gamstar;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nimport evalpoly from '@stdlib/math-base-tools-evalpoly';\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport erfcinv from '@stdlib/math-base-special-erfcinv';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport min from '@stdlib/math-base-special-min';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport SQRT_TWO_PI from '@stdlib/constants-float64-sqrt-two-pi';\nimport MAX_FLOAT32 from '@stdlib/constants-float32-max';\nimport TWO_PI from '@stdlib/constants-float64-two-pi';\nimport higherNewton from './higher_newton.js';\nimport lambdaeta from './lambdaeta.js';\nimport gamstar from './gamstar.js';\nimport eps1 from './eps1.js';\nimport eps2 from './eps2.js';\nimport eps3 from './eps3.js';\n\n\n// VARIABLES //\n\nvar debug = logger( 'gammaincinv:compute' );\nvar HALF = 0.5;\nvar ONEO3 = 0.333333333333333333333333333333;\nvar ONEO4 = 0.25;\nvar ONEO5 = 0.2;\nvar ONEO6 = 0.166666666666666666666666666667;\nvar ONEO12 = 0.0833333333333333333333333333333;\nvar ONEO24 = 0.0416666666666666666666666666667;\n\n// Coefficient workspace:\nvar CK = [ 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Computes `x` in the equations `P(a,xr) = p` and `Q(a,xr) = q`, where `a` is a positive parameter and `p` and `q` satisfy `p+q = 1`.\n*\n* ## Notes\n*\n* -   The equation is inverted with `min(p,q)`.\n*\n* @private\n* @param {number} a - scale value of incomplete gamma function\n* @param {Probability} p - probability value\n* @param {Probability} q - probability value\n* @returns {number} solution of the equations `P(a,xr) = p` and `Q(a,xr) = q` where `a` is a positive parameter\n*/\nfunction compute( a, p, q ) {\n\tvar ap1inv;\n\tvar invfp;\n\tvar lgama;\n\tvar pcase;\n\tvar porq;\n\tvar ainv;\n\tvar logr;\n\tvar ap22;\n\tvar ap14;\n\tvar ap13;\n\tvar ap12;\n\tvar vgam;\n\tvar vmin;\n\tvar xini;\n\tvar ap1;\n\tvar ap2;\n\tvar ap3;\n\tvar eta;\n\tvar p6;\n\tvar p5;\n\tvar x0;\n\tvar a2;\n\tvar L2;\n\tvar L3;\n\tvar L4;\n\tvar b2;\n\tvar b3;\n\tvar p3;\n\tvar a4;\n\tvar fp;\n\tvar p4;\n\tvar p2;\n\tvar a3;\n\tvar xr;\n\tvar ck;\n\tvar b;\n\tvar L;\n\tvar i;\n\tvar k;\n\tvar m;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar y;\n\n\tif ( p < HALF ) {\n\t\tpcase = true;\n\t\tporq = p;\n\t\ts = -1.0;\n\t} else {\n\t\tpcase = false;\n\t\tporq = q;\n\t\ts = 1.0;\n\t}\n\tk = 0;\n\tif ( abs( a-1.0 ) < 1.0e-4 ) {\n\t\tm = 0;\n\t\tif ( pcase ) {\n\t\t\tif ( p < 1.0e-3 ) {\n\t\t\t\tp2 = p * p;\n\t\t\t\tp3 = p2 * p;\n\t\t\t\tp4 = p3 * p;\n\t\t\t\tp5 = p4 * p;\n\t\t\t\tp6 = p5 * p;\n\t\t\t\tx0 = p + ( p2*HALF ) + ( p3*(ONEO3) ) + ( p4*ONEO4 ) + ( p5*ONEO5 ) + ( p6*(ONEO6) ); // eslint-disable-line max-len\n\t\t\t} else {\n\t\t\t\tx0 = -ln( 1.0-p );\n\t\t\t}\n\t\t} else {\n\t\t\tx0 = -ln( q );\n\t\t}\n\t\tif ( a === 1.0 ) {\n\t\t\tk = 2;\n\t\t\txr = x0;\n\t\t} else {\n\t\t\tlgama = gammaln( a );\n\t\t\tk = 1;\n\t\t}\n\t}\n\tif ( q < 1.0e-30 && a < HALF ) {\n\t\tm = 0;\n\t\tx0 = -ln( q*gamma(a) ) + ( ( a-1.0 ) * ln( -ln( q*gamma(a) ) ));\n\t\tk = 1;\n\t\tlgama = gammaln( a );\n\t}\n\tif ( a > 1.0 && a < 500.0 && p < 1.0e-80 ) {\n\t\tm = 0;\n\t\tainv = 1.0 / a;\n\t\tap1inv = 1.0 / ( a+1.0 );\n\t\tx0 = ( gammaln( a+1.0 ) + ln( p ) ) * ainv;\n\t\tx0 = exp( x0 );\n\t\txini = x0;\n\t\tfor ( i = 0; i < 10; i++ ) {\n\t\t\tx0 = xini * exp( x0*ainv ) * pow( 1.0-( x0*ap1inv ), ainv );\n\t\t}\n\t\tk = 1;\n\t\tlgama = gammaln( a );\n\t}\n\n\tlogr = (1.0/a) * ( ln(p) + gammaln( a+1.0 ) );\n\tif ( ( logr < ln( ONEO5 * ( 1.0+a ) ) ) && ( k === 0 ) ) {\n\t\tr = exp( logr );\n\t\tm = 0;\n\t\ta2 = a * a;\n\t\ta3 = a2 * a;\n\t\ta4 = a3 * a;\n\t\tap1 = a + 1.0;\n\t\tap12 = ap1 * ap1;\n\t\tap13 = ap1 * ap12;\n\t\tap14 = ap12 * ap12;\n\t\tap2 = a + 2.0;\n\t\tap22 = ap2 * ap2;\n\t\tap3 = a + 3.0;\n\t\tCK[ 0 ] = 1.0;\n\t\tCK[ 1 ] = 1.0 / ap1;\n\t\tCK[ 2 ] = HALF * ( ( 3.0*a ) + 5.0 ) / ( ap12*ap2 );\n\t\tCK[ 3 ] = ONEO3 * ( 31.0 + (8.0*a2) + (33.0*a) ) / ( ap13*ap2*ap3 );\n\t\tCK[ 4 ] = ONEO24 * ( 2888.0 + (1179.0*a3) + (125.0*a4) + (3971.0*a2) + (5661.0*a) ) / ( ap14*ap22*ap3*( a+4.0 ) ); // eslint-disable-line max-len\n\t\tx0 = r * evalpoly( CK, r );\n\t\tlgama = gammaln( a );\n\t\tk = 1;\n\t}\n\tif ( ( a < 10.0 ) && ( k === 0 ) ) {\n\t\tvgam = sqrt( a ) / ( gamstar(a)*SQRT_TWO_PI );\n\t\tvmin = min( 0.02, vgam );\n\t\tif ( q < vmin ) {\n\t\t\tm = 0;\n\t\t\tb = 1.0 - a;\n\t\t\tb2 = b * b;\n\t\t\tb3 = b2 * b;\n\t\t\teta = sqrt( -2.0/a * ln( q/vgam ) );\n\t\t\tx0 = a * lambdaeta( eta );\n\t\t\tL = ln( x0 );\n\t\t\tif ( x0 > 5.0 ) {\n\t\t\t\tL2 = L * L;\n\t\t\t\tL3 = L2 * L;\n\t\t\t\tL4 = L3 * L;\n\t\t\t\tr = 1.0 / x0;\n\t\t\t\tCK[ 0 ] = L - 1.0;\n\t\t\t\tCK[ 1 ] = ( (3.0*b) - (2.0*b*L) + L2 - ( 2.0*L ) + 2.0 ) * HALF;\n\t\t\t\tCK[ 2 ] =( (24.0*b*L) - (11.0*b2) - (24.0*b) - (6.0*L2) + (12.0*L) - 12.0 - (9.0*b*L2) + (6.0*b2*L) + (2.0*L3) ) * ONEO6; // eslint-disable-line max-len\n\t\t\t\tCK[ 3 ] = ( (-12.0*b3*L) + (8.04*b*L2) - (114.0*b2*L) + (72.0+(36.0*L2)) + (((3.0*L4)-(72.0*L)+162.0) * (b-(168.0*b*L))) - ((12.0*L3)+(25.0*b3)) - ( (22.0*b*L3)+(36.0*b2*L2)+(120.0*b2) ) ) * ONEO12; // eslint-disable-line max-len\n\t\t\t\tCK[ 4 ] = 0.0;\n\t\t\t\tx0 = x0 - L + ( b*r*evalpoly( CK, r ) );\n\t\t\t} else {\n\t\t\t\tr = 1.0 / x0;\n\t\t\t\tL2 = L * L;\n\t\t\t\tck = L - 1.0;\n\t\t\t\tt = L - (b*r*ck);\n\t\t\t\tif ( t < x0 ) {\n\t\t\t\t\tx0 -= t;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlgama = gammaln( a );\n\t\t\tk = 1;\n\t\t}\n\t}\n\tif ( ( abs( porq-HALF ) < 1.0e-5 ) && ( k === 0 ) ) {\n\t\tm = 0;\n\t\tainv = 1.0 / a;\n\t\tx0 = a - ONEO3 + ( ( 0.0197530864197530864197530864198 +\n\t\t\t( 0.00721144424848128551832255535959*ainv ) ) * ainv );\n\t\tlgama = gammaln( a );\n\t\tk = 1;\n\t}\n\tif ( ( a < 1.0 ) && ( k === 0 ) ) {\n\t\tm = 0;\n\t\tif (pcase) {\n\t\t\tx0 = exp( (1.0/a) * ( ln(porq) + gammaln(a+1.0) ) );\n\t\t} else {\n\t\t\tx0 = exp( (1.0/a) * ( ln(1.0-porq) + gammaln(a+1.0) ) );\n\t\t}\n\t\tlgama = gammaln( a );\n\t\tk = 1;\n\t}\n\tif ( k === 0 ) {\n\t\tm = 1;\n\t\tainv = 1.0 / a;\n\t\tr = erfcinv( 2.0 * porq );\n\t\teta = s * r / sqrt( a*HALF );\n\t\tif ( r < MAX_FLOAT32 ) {\n\t\t\teta += ( eps1(eta) + ( (eps2(eta)+(eps3(eta)*ainv))*ainv ) ) * ainv;\n\t\t\tx0 = a * lambdaeta(eta);\n\t\t\ty = eta;\n\t\t\tfp = -sqrt( a/TWO_PI ) * exp( -HALF*a*y*y ) / ( gamstar(a) );\n\t\t\tinvfp = 1.0 / fp;\n\t\t} else {\n\t\t\tdebug( 'Warning: Overflow problems in one or more steps of the computation.' );\n\t\t\treturn NaN;\n\t\t}\n\t}\n\tif ( k < 2 ) {\n\t\txr = higherNewton( x0, a, m, p, q, lgama, invfp, pcase );\n\t}\n\treturn xr;\n}\n\n\n// EXPORTS //\n\nexport default compute;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport ln from '@stdlib/math-base-special-ln';\nimport lambdaeta from './lambdaeta.js';\nimport rateval from './rational_ak0bk0.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the `eps1` function.\n*\n* @private\n* @param {number} eta - eta value\n* @returns {number} function value\n*/\nfunction eps1( eta ) {\n\tvar la;\n\tif ( abs( eta ) < 1.0 ) {\n\t\treturn rateval( eta );\n\t}\n\tla = lambdaeta( eta );\n\treturn ln( eta / ( la - 1.0 ) ) / eta;\n}\n\n\n// EXPORTS //\n\nexport default eps1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.3333333333438;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.3333333333438 + (x * (-0.2070740359969 + (x * (-0.05041806657154 + (x * (-0.004923635739372 + (x * -0.00004293658292782))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.7045554412463 + (x * (0.2118190062224 + (x * (0.03048648397436 + (x * 0.001605037988091))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.00004293658292782 + (x * (-0.004923635739372 + (x * (-0.05041806657154 + (x * (-0.2070740359969 + (x * -0.3333333333438))))))); // eslint-disable-line max-len\n\t\ts2 = 0.001605037988091 + (x * (0.03048648397436 + (x * (0.2118190062224 + (x * (0.7045554412463 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ln from '@stdlib/math-base-special-ln';\nimport rateval1 from './rational_ak1bk1.js';\nimport rateval2 from './rational_ak2bk2.js';\nimport rateval3 from './rational_ak3bk3.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the `eps2` function.\n*\n* @private\n* @param {number} eta - eta value\n* @returns {number} function value\n*/\nfunction eps2( eta ) {\n\tvar lnmeta;\n\tvar x;\n\tif ( eta < -5.0 ) {\n\t\tx = eta * eta;\n\t\tlnmeta = ln( -eta );\n\t\treturn ( 12.0 - x - ( 6.0*( lnmeta*lnmeta ) ) ) / ( 12.0*x*eta );\n\t}\n\tif ( eta < -2.0 ) {\n\t\treturn rateval1( eta );\n\t}\n\tif ( eta < 2.0 ) {\n\t\treturn rateval2( eta );\n\t}\n\tif ( eta < 1000.0 ) {\n\t\tx = 1.0 / eta;\n\t\treturn rateval3( eta ) / ( -12.0*eta );\n\t}\n\treturn -1.0 / ( 12.0 * eta );\n}\n\n\n// EXPORTS //\n\nexport default eps2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.0172847633523;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.0172847633523 + (x * (-0.0159372646475 + (x * (-0.00464910887221 + (x * (-0.00060683488776 + (x * -0.00000614830384279))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.764050615669 + (x * (0.297143406325 + (x * (0.0579490176079 + (x * 0.00574558524851))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.00000614830384279 + (x * (-0.00060683488776 + (x * (-0.00464910887221 + (x * (-0.0159372646475 + (x * -0.0172847633523))))))); // eslint-disable-line max-len\n\t\ts2 = 0.00574558524851 + (x * (0.0579490176079 + (x * (0.297143406325 + (x * (0.764050615669 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.0172839517431;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.0172839517431 + (x * (-0.0146362417966 + (x * (-0.00357406772616 + (x * (-0.000391032032692 + (x * 0.00000249634036069))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.690560400696 + (x * (0.249962384741 + (x * (0.0443843438769 + (x * 0.00424073217211))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.00000249634036069 + (x * (-0.000391032032692 + (x * (-0.00357406772616 + (x * (-0.0146362417966 + (x * -0.0172839517431))))))); // eslint-disable-line max-len\n\t\ts2 = 0.00424073217211 + (x * (0.0443843438769 + (x * (0.249962384741 + (x * (0.690560400696 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.99994466948;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.99994466948 + (x * (104.649839762 + (x * (857.204033806 + (x * (731.901559577 + (x * 45.5174411671))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (104.526456943 + (x * (823.313447808 + (x * (3119.93802124 + (x * 3970.03311219))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 45.5174411671 + (x * (731.901559577 + (x * (857.204033806 + (x * (104.649839762 + (x * 0.99994466948))))))); // eslint-disable-line max-len\n\t\ts2 = 3970.03311219 + (x * (3119.93802124 + (x * (823.313447808 + (x * (104.526456943 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ln from '@stdlib/math-base-special-ln';\nimport rational1 from './rational_ak4bk4.js';\nimport rational2 from './rational_ak5bk5.js';\nimport rational3 from './rational_ak6bk6.js';\nimport rational4 from './rational_ak7bk7.js';\nimport rational5 from './rational_ak8bk8.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the `eps3` function.\n*\n* @private\n* @param {number} eta - eta value\n* @returns {number} function value\n*/\nfunction eps3( eta ) {\n\tvar x;\n\tvar y;\n\n\tif ( eta < -8.0 ) {\n\t\tx = eta * eta;\n\t\ty = ln( -eta ) / eta;\n\t\treturn ( -30.0 + ( eta*y*( (6.0*x*y*y)-12.0+x ) ) ) / ( 12.0*eta*x*x );\n\t}\n\tif ( eta < -4.0 ) {\n\t\treturn rational1( eta ) / ( eta*eta );\n\t}\n\tif ( eta < -2.0 ) {\n\t\treturn rational2( eta );\n\t}\n\tif ( eta < 2.0 ) {\n\t\treturn rational3( eta );\n\t}\n\tif ( eta < 10.0 ) {\n\t\tx = 1.0 / eta;\n\t\treturn rational4( x ) / ( eta*eta );\n\t}\n\tif ( eta < 100.0 ) {\n\t\tx = 1.0 / eta;\n\t\treturn rational5( x ) / ( eta*eta );\n\t}\n\treturn -ln( eta ) / ( 12.0*eta*eta*eta );\n}\n\n\n// EXPORTS //\n\nexport default eps3;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.0495346498136;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.0495346498136 + (x * (0.0299521337141 + (x * (0.00688296911516 + (x * (0.000512634846317 + (x * -0.0000201411722031))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.759803615283 + (x * (0.261547111595 + (x * (0.0464854522477 + (x * 0.00403751193496))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.0000201411722031 + (x * (0.000512634846317 + (x * (0.00688296911516 + (x * (0.0299521337141 + (x * 0.0495346498136))))))); // eslint-disable-line max-len\n\t\ts2 = 0.00403751193496 + (x * (0.0464854522477 + (x * (0.261547111595 + (x * (0.759803615283 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.00452313583942;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.00452313583942 + (x * (0.00120744920113 + (x * (-0.0000789724156582 + (x * (-0.0000504476066942 + (x * -0.00000535770949796))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.912203410349 + (x * (0.405368773071 + (x * (0.0901638932349 + (x * 0.00948935714996))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.00000535770949796 + (x * (-0.0000504476066942 + (x * (-0.0000789724156582 + (x * (0.00120744920113 + (x * 0.00452313583942))))))); // eslint-disable-line max-len\n\t\ts2 = 0.00948935714996 + (x * (0.0901638932349 + (x * (0.405368773071 + (x * (0.912203410349 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.00439937562904;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.00439937562904 + (x * (0.000487225670639 + (x * (-0.000128470657374 + (x * (0.00000529110969589 + (x * 1.5716677175e-7))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.794435257415 + (x * (0.333094721709 + (x * (0.0703527806143 + (x * 0.00806110846078))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 1.5716677175e-7 + (x * (0.00000529110969589 + (x * (-0.000128470657374 + (x * (0.000487225670639 + (x * 0.00439937562904))))))); // eslint-disable-line max-len\n\t\ts2 = 0.00806110846078 + (x * (0.0703527806143 + (x * (0.333094721709 + (x * (0.794435257415 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.0011481191232;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.0011481191232 + (x * (-0.112850923276 + (x * (1.51623048511 + (x * (-0.218472031183 + (x * 0.0730002451555))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (14.2482206905 + (x * (69.7360396285 + (x * (218.938950816 + (x * 277.067027185))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0730002451555 + (x * (-0.218472031183 + (x * (1.51623048511 + (x * (-0.112850923276 + (x * -0.0011481191232))))))); // eslint-disable-line max-len\n\t\ts2 = 277.067027185 + (x * (218.938950816 + (x * (69.7360396285 + (x * (14.2482206905 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.000145727889667;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.000145727889667 + (x * (-0.290806748131 + (x * (-13.308504545 + (x * (199.722374056 + (x * -11.4311378756))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (139.612587808 + (x * (2189.01116348 + (x * (7115.24019009 + (x * 45574.6081453))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -11.4311378756 + (x * (199.722374056 + (x * (-13.308504545 + (x * (-0.290806748131 + (x * -0.000145727889667))))))); // eslint-disable-line max-len\n\t\ts2 = 45574.6081453 + (x * (7115.24019009 + (x * (2189.01116348 + (x * (139.612587808 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* Translated from the Fortran module by\n* ----------------------------------------------------------------------\n* Authors:\n*  Amparo Gil    (U. Cantabria, Santander, Spain)\n*                 e-mail: amparo.gil@unican.es\n*  Javier Segura (U. Cantabria, Santander, Spain)\n*                 e-mail: javier.segura@unican.es\n*  Nico M. Temme (CWI, Amsterdam, The Netherlands)\n*                 e-mail: nico.temme@cwi.nl\n* ---------------------------------------------------------------------\n*/\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport FLOAT32_SMALLEST from '@stdlib/constants-float32-smallest-normal';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport compute from './compute.js';\n\n\n// MAIN //\n\n/**\n* Inverts the lower gamma function; i.e., computes `xr` such that `P(a,xr) = p`.\n*\n* ## Method\n*\n* The present code uses different methods of computation depending on the values of the input values: Taylor, asymptotic expansions and high-order Newton methods.\n*\n* ## Notes\n*\n* -   The claimed accuracy obtained using this inversion routine is near `1e-12`.\n*\n* ## References\n*\n* -   A. Gil, J. Segura and N.M. Temme, GammaCHI: a package for the inversion and computation of the gamma and chi-square distribution functions (central and noncentral). Computer Physics Commun\n* -   A. Gil, J. Segura and N.M. Temme. Efficient and accurate algorithms for the computation and inversion of the incomplete gamma function ratios. SIAM J Sci Comput. (2012) 34(6), A2965-A2981\n*\n* @param {Probability} p - probability value\n* @param {number} a - scale parameter\n* @param {boolean} [upper=false] - boolean indicating if the function should invert the upper tail of the incomplete gamma function instead; i.e., compute `xr` such that `Q(a,xr) = p`.\n* @returns {number} function value of the inverse\n*/\nfunction gammaincinv( p, a, upper ) {\n\tif ( isnan( p ) || isnan( a ) ) {\n\t\treturn NaN;\n\t}\n\tif ( a < FLOAT32_SMALLEST ) {\n\t\treturn NaN;\n\t}\n\tif ( p > 1.0 || p < 0.0 ) {\n\t\treturn NaN;\n\t}\n\t// Case: invert upper gamma function\n\tif ( upper === true ) {\n\t\tif ( p === 0.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tif ( p === 1.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn compute( a, 1.0-p, p );\n\t}\n\t// Default: invert lower gamma function\n\tif ( p === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( p === 1.0 ) {\n\t\treturn PINF;\n\t}\n\treturn compute( a, p, 1.0-p );\n}\n\n\n// EXPORTS //\n\nexport default gammaincinv;\n","/* eslint-disable max-statements, max-lines */\n\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/ibeta_inverse.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006.\n* Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport evalpoly from '@stdlib/math-base-tools-evalpoly';\nimport betainc from '@stdlib/math-base-special-betainc';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport asin from '@stdlib/math-base-special-asin';\nimport beta from '@stdlib/math-base-special-beta';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport sin from '@stdlib/math-base-special-sin';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\nimport ln from '@stdlib/math-base-special-ln';\nimport FLOAT64_MIN_NORM from '@stdlib/constants-float64-smallest-normal';\nimport HALF_PI from '@stdlib/constants-float64-half-pi';\nimport EPSILON from '@stdlib/constants-float64-eps';\nimport findIBetaInvFromTDist from './find_ibeta_inv_from_t_dist.js';\nimport temme1 from './temme1.js';\nimport temme2 from './temme2.js';\nimport temme3 from './temme3.js';\nimport halleyIterate from './halley_iterate.js';\nimport ibetaRoots from './ibeta_roots.js';\n\n\n// VARIABLES //\n\nvar DIGITS = 32;\nvar MAX_ITERATIONS = 1000;\n\n// Workspace for the polynomial coefficients:\nvar terms = [ 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Calculates the inverse of the incomplete beta function.\n*\n* @private\n* @param {PositiveNumber} a - function parameter\n* @param {PositiveNumber} b - function parameter\n* @param {Probability} p - function parameter\n* @param {Probability} q - probability equal to `1 - p`\n* @returns {Array} two-element array holding function value `y` and `1-y`\n*/\nfunction ibetaInvImp( a, b, p, q ) {\n\tvar digits;\n\tvar invert;\n\tvar lambda;\n\tvar lower;\n\tvar theta;\n\tvar upper;\n\tvar roots;\n\tvar maxv;\n\tvar minv;\n\tvar bet;\n\tvar ppa;\n\tvar tmp;\n\tvar xs2;\n\tvar ap1;\n\tvar bm1;\n\tvar fs;\n\tvar lx;\n\tvar ps;\n\tvar xg;\n\tvar xs;\n\tvar yp;\n\tvar a2;\n\tvar a3;\n\tvar b2;\n\tvar r;\n\tvar l;\n\tvar u;\n\tvar x;\n\tvar y;\n\n\t// The flag invert is set to true if we swap a for b and p for q, in which case the result has to be subtracted from 1:\n\tinvert = false;\n\n\t// Handle trivial cases first...\n\tif ( q === 0.0 ) {\n\t\treturn [ 1.0, 0.0 ];\n\t}\n\tif ( p === 0.0 ) {\n\t\treturn [ 0.0, 1.0 ];\n\t}\n\tif ( a === 1.0 ) {\n\t\tif ( b === 1.0 ) {\n\t\t\treturn [ p, 1.0-p ];\n\t\t}\n\t\t// Change things around so we can handle as b == 1 special case below:\n\t\ttmp = b;\n\t\tb = a;\n\t\ta = tmp;\n\n\t\ttmp = q;\n\t\tq = p;\n\t\tp = tmp;\n\n\t\tinvert = true;\n\t}\n\t// Depending upon which approximation method we use, we may end up calculating either x or y initially (where y = 1-x):\n\tx = 0.0; // Set to a safe zero to avoid a\n\n\t// For some of the methods we can put tighter bounds on the result than simply [0,1]:\n\tlower = 0.0;\n\tupper = 1.0;\n\n\t// Student's T with b = 0.5 gets handled as a special case, swap around if the arguments are in the \"wrong\" order:\n\tif ( a === 0.5 ) {\n\t\tif ( b === 0.5 ) {\n\t\t\tx = sin( p*HALF_PI );\n\t\t\tx *= x;\n\t\t\ty = sin( q*HALF_PI );\n\t\t\ty *= y;\n\t\t\treturn [ x, y ];\n\t\t}\n\t\tif ( b > 0.5 ) {\n\t\t\ttmp = b;\n\t\t\tb = a;\n\t\t\ta = tmp;\n\n\t\t\ttmp = q;\n\t\t\tq = p;\n\t\t\tp = tmp;\n\n\t\t\tinvert = !invert;\n\t\t}\n\t}\n\t// Select calculation method for the initial estimate:\n\tif ( b === 0.5 && a >= 0.5 && p !== 1.0 ) {\n\t\t// We have a Student's T distribution:\n\t\typ = {};\n\t\tx = findIBetaInvFromTDist( a, p, yp );\n\t\ty = yp.value;\n\t}\n\telse if ( b === 1.0 ) {\n\t\tif ( p < q ) {\n\t\t\tif ( a > 1.0 ) {\n\t\t\t\tx = pow( p, 1.0/a );\n\t\t\t\ty = -expm1( ln(p) / a );\n\t\t\t} else {\n\t\t\t\tx = pow( p, 1.0/a );\n\t\t\t\ty = 1.0 - x;\n\t\t\t}\n\t\t} else {\n\t\t\tx = exp( log1p(-q) / a );\n\t\t\ty = -expm1( log1p(-q) / a );\n\t\t}\n\t\tif ( invert ) {\n\t\t\ttmp = y;\n\t\t\ty = x;\n\t\t\tx = tmp;\n\t\t}\n\t\treturn [ x, y ];\n\t}\n\telse if ( a+b > 5.0 ) {\n\t\t// When a+b is large then we can use one of Prof Temme's asymptotic expansions, begin by swapping things around so that p < 0.5, we do this to avoid cancellations errors when p is large.\n\t\tif ( p > 0.5 ) {\n\t\t\ttmp = b;\n\t\t\tb = a;\n\t\t\ta = tmp;\n\n\t\t\ttmp = q;\n\t\t\tq = p;\n\t\t\tp = tmp;\n\n\t\t\tinvert = !invert;\n\t\t}\n\t\tminv = min( a, b );\n\t\tmaxv = max( a, b );\n\t\tif ( ( sqrt(minv) > (maxv-minv) ) && minv > 5.0 ) {\n\t\t\t// When a and b differ by a small amount the curve is quite symmetrical and we can use an error function to approximate the inverse. This is the cheapest of the three Temme expansions, and the calculated value for x will never be much larger than p, so we don't have to worry about cancellation as long as p is small.\n\t\t\tx = temme1( a, b, p );\n\t\t\ty = 1.0 - x;\n\t\t} else {\n\t\t\tr = a + b;\n\t\t\ttheta = asin( sqrt( a/r ) );\n\t\t\tlambda = minv / r;\n\t\t\tif (\n\t\t\t\tlambda >= 0.2 &&\n\t\t\t\tlambda <= 0.8 &&\n\t\t\t\tr >= 10\n\t\t\t) {\n\t\t\t\t// The second error function case is the next cheapest to use, it breaks down when the result is likely to be very small, if `a+b` is also small, but we can use a cheaper expansion there in any case. As before `x` won't be much larger than `p`, so as long as `p` is small we should be free of cancellation error.\n\t\t\t\tppa = pow( p, 1.0/a );\n\t\t\t\tif ( ppa < 0.0025 && ( a+b ) < 200.0 ) {\n\t\t\t\t\tx = ppa * pow( a*beta( a, b ), 1.0/a );\n\t\t\t\t} else {\n\t\t\t\t\tx = temme2( p, r, theta );\n\t\t\t\t}\n\t\t\t\ty = 1.0 - x;\n\t\t\t} else {\n\t\t\t\t// If we get here then a and b are very different in magnitude and we need to use the third of Temme's methods which involves inverting the incomplete gamma.  This is much more expensive than the other methods.  We also can only use this method when a > b, which can lead to cancellation errors if we really want y (as we will when x is close to 1), so a different expansion is used in that case.\n\t\t\t\tif ( a < b ) {\n\t\t\t\t\ttmp = b;\n\t\t\t\t\tb = a;\n\t\t\t\t\ta = tmp;\n\n\t\t\t\t\ttmp = q;\n\t\t\t\t\tq = p;\n\t\t\t\t\tp = tmp;\n\t\t\t\t\tinvert = !invert;\n\t\t\t\t}\n\t\t\t\t// Try and compute the easy way first:\n\t\t\t\tbet = 0.0;\n\t\t\t\tif ( b < 2.0 ) {\n\t\t\t\t\tbet = beta( a, b );\n\t\t\t\t}\n\t\t\t\tif ( bet === 0.0 ) {\n\t\t\t\t\ty = 1.0;\n\t\t\t\t} else {\n\t\t\t\t\ty = pow( b*q*bet, 1.0/b );\n\t\t\t\t\tx = 1.0 - y;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( y > 1.0e-5 ) {\n\t\t\t\tx = temme3( a, b, p, q );\n\t\t\t\ty = 1.0 - x;\n\t\t\t}\n\t\t}\n\t}\n\telse if ( a < 1.0 && b < 1.0 ) {\n\t\t// Both a and b less than 1, there is a point of inflection at xs:\n\t\txs = ( 1.0-a ) / ( 2.0-a-b );\n\n\t\t// Now we need to ensure that we start our iteration from the right side of the inflection point:\n\t\tfs = betainc( xs, a, b ) - p;\n\t\tif ( abs(fs)/p < EPSILON*3.0 ) {\n\t\t\t// The result is at the point of inflection, best just return it:\n\t\t\tif ( invert ) {\n\t\t\t\treturn [ 1.0-xs, xs ];\n\t\t\t}\n\t\t\treturn [ xs, 1.0-xs ];\n\t\t}\n\t\tif ( fs < 0.0 ) {\n\t\t\ttmp = b;\n\t\t\tb = a;\n\t\t\ta = tmp;\n\n\t\t\ttmp = q;\n\t\t\tq = p;\n\t\t\tp = tmp;\n\n\t\t\tinvert = !invert;\n\t\t\txs = 1.0 - xs;\n\t\t}\n\t\txg = pow( a*p*beta( a, b ), 1.0/a );\n\t\tx = xg / ( 1.0+xg );\n\t\ty = 1.0 / ( 1.0+xg );\n\n\t\t// And finally we know that our result is below the inflection point, so set an upper limit on our search:\n\t\tif ( x > xs ) {\n\t\t\tx = xs;\n\t\t}\n\t\tupper = xs;\n\t}\n\telse if ( a > 1.0 && b > 1.0 ) {\n\t\t// Small a and b, both greater than 1, there is a point of inflection at xs, and it's complement is xs2, we must always start our iteration from the right side of the point of inflection.\n\t\txs = ( a-1.0 ) / ( a+b-2.0 );\n\t\txs2 = ( b-1.0 ) / ( a+b-2.0 );\n\t\tps = betainc( xs, a, b ) - p;\n\n\t\tif ( ps < 0.0 ) {\n\t\t\ttmp = b;\n\t\t\tb = a;\n\t\t\ta = tmp;\n\n\t\t\ttmp = q;\n\t\t\tq = p;\n\t\t\tp = tmp;\n\n\t\t\ttmp = xs2;\n\t\t\txs2 = xs;\n\t\t\txs = tmp;\n\n\t\t\tinvert = !invert;\n\t\t}\n\t\t// Estimate x and y, using expm1 to get a good estimate for y when it's very small:\n\t\tlx = ln( p*a*beta( a, b ) ) / a;\n\t\tx = exp( lx );\n\t\ty = ( x < 0.9 ) ? 1.0-x : -expm1(lx);\n\n\t\tif ( b < a && x < 0.2 ) {\n\t\t\t// Under a limited range of circumstances we can improve our estimate for x...\n\t\t\tap1 = a - 1.0;\n\t\t\tbm1 = b - 1.0;\n\t\t\ta2 = a * a;\n\t\t\ta3 = a * a2;\n\t\t\tb2 = b * b;\n\t\t\tterms[ 0 ] = 0.0;\n\t\t\tterms[ 1 ] = 1.0;\n\t\t\tterms[ 2 ] = bm1 / ap1;\n\t\t\tap1 *= ap1;\n\t\t\tterms[ 3 ] = bm1 * (3.0*a*b + 5.0*b + a2 - a - 4.0) / (2.0 * (a+2.0) * ap1); // eslint-disable-line max-len, no-mixed-operators\n\t\t\tap1 *= (a + 1.0);\n\t\t\tterms[ 4 ] = bm1 * (33.0*a*b2 + 31.0*b2 + 8.0*a2*b2 - 30.0*a*b - 47.0*b + 11.0*a2*b + 6.0*a3*b + 18.0 + 4.0*a - a3 + a2*a2 - 10.0*a2); // eslint-disable-line max-len, no-mixed-operators\n\t\t\tterms[ 4 ] /= (3.0 * (a+3.0) * (a+2.0) * ap1);\n\t\t\tx = evalpoly( terms, x );\n\t\t}\n\t\t// Know that result is below the inflection point, so set an upper limit on search...\n\t\tif ( x > xs ) {\n\t\t\tx = xs;\n\t\t}\n\t\tupper = xs;\n\t} else {\n\t\t// Case: ( a <= 1 ) != ( b <= 1 ). If all else fails we get here, only one of a and b is above 1, and a+b is small.  Start by swapping things around so that we have a concave curve with b > a and no points of inflection in [0,1].  As long as we expect x to be small then we can use the simple (and cheap) power term to estimate x, but when we expect x to be large then this greatly underestimates x and leaves us trying to iterate \"round the corner\" which may take almost forever. We could use Temme's inverse gamma function case in that case, this works really rather well (albeit expensively) even though strictly speaking we're outside it's defined range. However it's expensive to compute, and an alternative approach which models the curve as a distorted quarter circle is much cheaper to compute, and still keeps the number of iterations required down to a reasonable level. With thanks to Prof. Temme for this suggestion.\n\t\tif ( b < a ) {\n\t\t\ttmp = b;\n\t\t\tb = a;\n\t\t\ta = tmp;\n\n\t\t\ttmp = q;\n\t\t\tq = p;\n\t\t\tp = tmp;\n\t\t\tinvert = !invert;\n\t\t}\n\t\tif ( pow( p, 1.0/a ) < 0.5 ) {\n\t\t\tx = pow( p*a*beta( a, b ), 1.0/a );\n\t\t\tif ( x === 0.0 ) {\n\t\t\t\tx = FLOAT64_MIN_NORM;\n\t\t\t}\n\t\t\ty = 1.0 - x;\n\t\t}\n\t\t// Case: pow(q, 1/b) < 0.1\n\t\telse {\n\t\t\t// Model a distorted quarter circle:\n\t\t\ty = pow( 1.0-pow( p, b*beta( a, b ) ), 1.0/b );\n\t\t\tif ( y === 0 ) {\n\t\t\t\ty = FLOAT64_MIN_NORM;\n\t\t\t}\n\t\t\tx = 1.0 - y;\n\t\t}\n\t}\n\t// Now we have a guess for x (and for y) we can set things up for iteration.  If x > 0.5 it pays to swap things round:\n\tif ( x > 0.5 ) {\n\t\ttmp = b;\n\t\tb = a;\n\t\ta = tmp;\n\n\t\ttmp = q;\n\t\tq = p;\n\t\tp = tmp;\n\n\t\ttmp = y;\n\t\ty = x;\n\t\tx = tmp;\n\n\t\tinvert = !invert;\n\t\tl = 1.0 - upper;\n\t\tu = 1.0 - lower;\n\t\tlower = l;\n\t\tupper = u;\n\t}\n\t// Lower bound for our search:  We're not interested in denormalized answers as these tend to take up lots of iterations, given that we can't get accurate derivatives in this area (they tend to be infinite).\n\tif ( lower === 0 ) {\n\t\tif ( invert ) {\n\t\t\t// We're not interested in answers smaller than machine epsilon:\n\t\t\tlower = EPSILON;\n\t\t\tif ( x < lower ) {\n\t\t\t\tx = lower;\n\t\t\t}\n\t\t} else {\n\t\t\tlower = FLOAT64_MIN_NORM;\n\t\t}\n\t\tif ( x < lower ) {\n\t\t\tx = lower;\n\t\t}\n\t}\n\t// Figure out how many digits to iterate towards:\n\tdigits = DIGITS;\n\tif ( x < 1.0e-50 && ( a < 1.0 || b < 1.0 ) ) {\n\t\t// If we're in a region where the first derivative is very large, then we have to take care that the root-finder doesn't terminate prematurely.  We'll bump the precision up to avoid this, but we have to take care not to set the precision too high or the last few iterations will just thrash around and convergence may be slow in this case. Try 3/4 of machine epsilon:\n\t\tdigits *= 3;\n\t\tdigits /= 2;\n\t}\n\t// Now iterate, we can use either p or q as the target here depending on which is smaller:\n\troots = ibetaRoots( a, b, ( (p < q) ? p : q ), p >= q );\n\tx = halleyIterate( roots, x, lower, upper, digits, MAX_ITERATIONS );\n\n\t// Tidy up, if we \"lower\" was too high then zero is the best answer we have:\n\tif ( x === lower ) {\n\t\tx = 0.0;\n\t}\n\tif ( invert ) {\n\t\treturn [ 1.0-x, x ];\n\t}\n\treturn [ x, 1.0-x ];\n}\n\n\n// EXPORTS //\n\nexport default ibetaInvImp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -1.0;\n\t}\n\treturn -1.0 + (x * (-5.0 + (x * 5.0)));\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\treturn 1.0 + (x * (21.0 + (x * (-69.0 + (x * 46.0)))));\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 7.0;\n\t}\n\treturn 7.0 + (x * (-2.0 + (x * (33.0 + (x * (-62.0 + (x * 31.0)))))));\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 25.0;\n\t}\n\treturn 25.0 + (x * (-52.0 + (x * (-17.0 + (x * (88.0 + (x * (-115.0 + (x * 46.0))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 7.0;\n\t}\n\treturn 7.0 + (x * (12.0 + (x * (-78.0 + (x * 52.0)))));\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -7.0;\n\t}\n\treturn -7.0 + (x * (2.0 + (x * (183.0 + (x * (-370.0 + (x * 185.0)))))));\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -533.0;\n\t}\n\treturn -533.0 + (x * (776.0 + (x * (-1835.0 + (x * (10240.0 + (x * (-13525.0 + (x * 5410.0))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -1579.0;\n\t}\n\treturn -1579.0 + (x * (3747.0 + (x * (-3372.0 + (x * (-15821.0 + (x * (45588.0 + (x * (-45213.0 + (x * 15071.0))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 449.0;\n\t}\n\treturn 449.0 + (x * (-1259.0 + (x * (-769.0 + (x * (6686.0 + (x * (-9260.0 + (x * 3704.0))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 63149.0;\n\t}\n\treturn 63149.0 + (x * (-151557.0 + (x * (140052.0 + (x * (-727469.0 + (x * (2239932.0 + (x * (-2251437.0 + (x * 750479.0))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 29233.0;\n\t}\n\treturn 29233.0 + (x * (-78755.0 + (x * (105222.0 + (x * (146879.0 + (x * (-1602610.0 + (x * (3195183.0 + (x * (-2554139.0 + (x * 729754.0))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\treturn 1.0 + (x * (-13.0 + (x * 13.0)));\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\treturn 1.0 + (x * (21.0 + (x * (-69.0 + (x * 46.0)))));\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/ibeta_inverse.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006.\n* Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n/* eslint-disable no-mixed-operators, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport gammaincinv from '@stdlib/math-base-special-gammaincinv';\nimport ln from '@stdlib/math-base-special-ln';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport SMALLEST_SUBNORMAL from '@stdlib/constants-float64-smallest-subnormal';\nimport temmeRootFinder from './root_finder.js';\nimport newtonRaphsonIterate from './newton_raphson.js';\n\n\n// MAIN //\n\n/**\n* Carries out the third method by Temme (described in section 4).\n*\n* ## References\n*\n* -   Temme, N. M. 1992. \"Incomplete Laplace Integrals: Uniform Asymptotic Expansion with Application to the Incomplete Beta Function.\" _Journal of Computational and Applied Mathematics_ 41 (1–2): 1638–63. doi:[10.1016/0377-0427(92)90244-R](https://doi.org/10.1016/0377-0427(92)90244-R).\n*\n* @private\n* @param {PositiveNumber} a - function parameter\n* @param {PositiveNumber} b - function parameter\n* @param {Probability} p - function parameter\n* @param {Probability} q - probability equal to `1-p`\n* @returns {number} function value\n*/\nfunction temme3( a, b, p, q ) {\n\tvar cross;\n\tvar roots;\n\tvar lower;\n\tvar upper;\n\tvar eta0;\n\tvar eta;\n\tvar w10;\n\tvar w12;\n\tvar w13;\n\tvar w14;\n\tvar e1;\n\tvar e2;\n\tvar e3;\n\tvar mu;\n\tvar d2;\n\tvar d3;\n\tvar d4;\n\tvar w2;\n\tvar w3;\n\tvar w4;\n\tvar w5;\n\tvar w6;\n\tvar w7;\n\tvar w8;\n\tvar w9;\n\tvar w1;\n\tvar d;\n\tvar w;\n\tvar u;\n\tvar x;\n\n\t// Begin by getting an initial approximation for the quantity eta from the dominant part of the incomplete beta:\n\tif ( p < q ) {\n\t\teta0 = gammaincinv( p, b, true );\n\t} else {\n\t\teta0 = gammaincinv( q, b, false );\n\t}\n\teta0 /= a;\n\n\t// Define the variables and powers we'll need later on:\n\tmu = b / a;\n\tw = sqrt( 1.0+mu );\n\tw2 = w * w;\n\tw3 = w2 * w;\n\tw4 = w2 * w2;\n\tw5 = w3 * w2;\n\tw6 = w3 * w3;\n\tw7 = w4 * w3;\n\tw8 = w4 * w4;\n\tw9 = w5 * w4;\n\tw10 = w5 * w5;\n\td = eta0 - mu;\n\td2 = d * d;\n\td3 = d2 * d;\n\td4 = d2 * d2;\n\tw1 = w + 1.0;\n\tw12 = w1 * w1;\n\tw13 = w1 * w12;\n\tw14 = w12 * w12;\n\n\t// Now we need to compute the perturbation error terms that convert eta0 to eta, these are all polynomials of polynomials. Probably these should be re-written to use tabulated data (see examples above), but it's less of a win in this case as we need to calculate the individual powers for the denominator terms anyway, so we might as well use them for the numerator-polynomials as well. Refer to p154-p155 for the details of these expansions:\n\te1 = (w+2.0) * (w-1.0) / (3.0*w);\n\te1 += (w3 + 9.0*w2 + 21.0*w + 5.0) * d / (36.0*w2*w1);\n\te1 -= (w4 - 13.0*w3 + 69.0*w2 + 167.0*w + 46.0) * d2 / (1620.0*w12*w3);\n\te1 -= (7.0*w5 + 21.0*w4 + 70.0*w3 + 26.0*w2 - 93.0*w - 31.0) * d3 / (6480.0*w13*w4);\n\te1 -= (75.0*w6 + 202.0*w5 + 188.0*w4 - 888.0*w3 - 1345.0*w2 + 118.0*w + 138.0) * d4 / (272160.0*w14*w5);\n\n\te2 = (28.0*w4 + 131.0*w3 + 402.0*w2 + 581.0*w + 208.0) * (w-1.0) / (1620.0*w1*w3);\n\te2 -= (35.0*w6 - 154.0*w5 - 623.0*w4 - 1636.0*w3 - 3983.0*w2 - 3514.0*w - 925.0) * d / (12960.0*w12*w4);\n\te2 -= (2132.0*w7 + 7915.0*w6 + 16821.0*w5 + 35066.0*w4 + 87490.0*w3 + 141183.0*w2 + 95993.0*w + 21640.0) * d2 / (816480.0*w5*w13);\n\te2 -= (11053.0*w8 + 53308.0*w7 + 117010.0*w6 + 163924.0*w5 + 116188.0*w4 - 258428.0*w3 - 677042.0*w2 - 481940.0*w - 105497.0) * d3 / (14696640.0*w14*w6);\n\n\te3 = -((3592.0*w7 + 8375.0*w6 - 1323.0*w5 - 29198.0*w4 - 89578.0*w3 - 154413.0*w2 - 116063.0*w - 29632.0) * (w-1.0)) / (816480.0*w5*w12);\n\te3 -= (442043.0*w9 + 2054169.0*w8 + 3803094.0*w7 + 3470754.0*w6 + 2141568.0*w5 - 2393568.0*w4 - 19904934.0*w3 - 34714674.0*w2 - 23128299.0*w - 5253353.0) * d / (146966400.0*w6*w13);\n\te3 -= (116932.0*w10 + 819281.0*w9 + 2378172.0*w8 + 4341330.0*w7 + 6806004.0*w6 + 10622748.0*w5 + 18739500.0*w4 + 30651894.0*w3 + 30869976.0*w2 + 15431867.0*w + 2919016.0) * d2 / (146966400.0*w14*w7);\n\n\t// Combine eta0 and the error terms to compute eta (Second equation p155):\n\teta = eta0 + (e1/a) + (e2/(a*a)) + (e3/(a*a*a));\n\n\t/*\n\t\tNow we need to solve Eq 4.2 to obtain x.  For any given value of\n\t\teta there are two solutions to this equation, and since the distribution\n\t\tmay be very skewed, these are not related by x ~ 1-x we used when\n\t\timplementing section 3 above.  However we know that:\n\n\t\t\tcross < x <= 1       ; iff eta < mu\n\t\t\t\tx == cross   ; iff eta == mu\n\t\t\t\t0 <= x < cross    ; iff eta > mu\n\n\t\tWhere cross == 1 / (1 + mu)\n\t\tMany thanks to Prof Temme for clarifying this point. Therefore we'll just jump straight into Newton iterations to solve Eq 4.2 using these bounds, and simple bisection as the first guess, in practice this converges pretty quickly and we only need a few digits correct anyway:\n\t*/\n\tif ( eta <= 0 ) {\n\t\teta = SMALLEST_SUBNORMAL;\n\t}\n\tu = eta - ( mu*ln(eta) ) + ( ( 1.0+mu ) * ln( 1.0+mu ) ) - mu;\n\tcross = 1.0 / ( 1.0+mu );\n\tlower = (eta < mu) ? cross : 0.0;\n\tupper = (eta < mu) ? 1.0 : cross;\n\tx = (lower+upper) / 2.0;\n\troots = temmeRootFinder( u, mu );\n\treturn newtonRaphsonIterate( roots, x, lower, upper, 32, 100 );\n}\n\n\n// EXPORTS //\n\nexport default temme3;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Smallest positive double-precision floating-point subnormal number.\n*\n* @module @stdlib/constants-float64-smallest-subnormal\n* @type {number}\n*\n* @example\n* import FLOAT64_SMALLEST_SUBNORMAL from '@stdlib/constants-float64-smallest-subnormal';\n* // returns 4.940656458412465e-324\n*/\n\n\n// MAIN //\n\n/**\n* The smallest positive double-precision floating-point subnormal number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* \\frac{1}{2^{1023-1} 2^{52}}\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000000000 00000000000000000000 00000000000000000000000000000001\n* ```\n*\n* @constant\n* @type {number}\n* @default 4.940656458412465e-324\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_SMALLEST_SUBNORMAL = 4.940656458412465e-324;\n\n\n// EXPORTS //\n\nexport default FLOAT64_SMALLEST_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/ibeta_inverse.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006.\n* Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { assign as kernelBetainc } from '@stdlib/math-base-special-kernel-betainc';\nimport abs from '@stdlib/math-base-special-abs';\nimport FLOAT64_MAX from '@stdlib/constants-float64-max';\nimport FLOAT64_MIN_NORM from '@stdlib/constants-float64-smallest-normal';\n\n\n// MAIN //\n\n/**\n* Returns a root finding function.\n*\n* @private\n* @param {PositiveNumber} a - function parameter\n* @param {PositiveNumber} b - function parameter\n* @param {Probability} target - probability value\n* @param {boolean} invert - boolean indicating whether to find the roots of the upper or lower incomplete beta function\n* @returns {Function} root finding function\n*/\nfunction ibetaRoots( a, b, target, invert ) {\n\treturn roots;\n\n\t/**\n\t* Calculates roots.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Array} roots\n\t*/\n\tfunction roots( x ) {\n\t\tvar buf;\n\t\tvar f1;\n\t\tvar f2;\n\t\tvar f;\n\t\tvar y;\n\n\t\ty = 1.0 - x;\n\n\t\tbuf = [ 0.0, 0.0 ];\n\t\tkernelBetainc( x, a, b, true, invert, buf, 1, 0 );\n\t\tf = buf[ 0 ] - target;\n\t\tf1 = buf[ 1 ];\n\t\tif ( invert ) {\n\t\t\tf1 = -f1;\n\t\t}\n\t\tif ( y === 0.0 ) {\n\t\t\ty = FLOAT64_MIN_NORM * 64.0;\n\t\t}\n\t\tif ( x === 0.0 ) {\n\t\t\tx = FLOAT64_MIN_NORM * 64.0;\n\t\t}\n\t\tf2 = f1 * ( -(y*a) + ( ( b-2.0 ) * x ) + 1.0 );\n\t\tif ( abs( f2 ) < y * x * FLOAT64_MAX ) {\n\t\t\tf2 /= (y * x);\n\t\t}\n\t\tif ( invert ) {\n\t\t\tf2 = -f2;\n\t\t}\n\t\t// Make sure we don't have a zero derivative:\n\t\tif ( f1 === 0.0 ) {\n\t\t\tf1 = ( ( invert ) ? -1.0 : 1.0 ) * FLOAT64_MIN_NORM * 64.0;\n\t\t}\n\t\treturn [ f, f1, f2 ];\n\t}\n}\n\n\n// EXPORTS //\n\nexport default ibetaRoots;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/tools/roots.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport ldexp from '@stdlib/math-base-special-ldexp';\nimport sign from '@stdlib/math-base-special-signum';\nimport max from '@stdlib/math-base-special-max';\nimport MAX_VALUE from '@stdlib/constants-float64-max';\n\n\n// MAIN //\n\n/**\n* Performs root finding via third order Halley iteration.\n*\n* @private\n* @param {Array} fun - array of function and its first two derivatives\n* @param {number} guess - initial starting value\n* @param {number} minimum - minimum possible value for the result, used as initial lower bracket\n* @param {number} maximum - maximum possible value for the result, used as initial upper bracket\n* @param {PositiveInteger} digits - desired number of binary digits\n* @param {PositiveInteger} maxIter - maximum number of iterations\n* @returns {number} function value\n*/\nfunction halleyIterate( fun, guess, minimum, maximum, digits, maxIter ) {\n\tvar convergence;\n\tvar outOfBounds;\n\tvar delta1;\n\tvar delta2;\n\tvar factor;\n\tvar result;\n\tvar f0Last;\n\tvar count;\n\tvar delta;\n\tvar denom;\n\tvar diff;\n\tvar num;\n\tvar res;\n\tvar f0;\n\tvar f1;\n\tvar f2;\n\n\tf0 = 0.0;\n\toutOfBounds = false;\n\tresult = guess;\n\tfactor = ldexp( 1.0, 1.0-digits );\n\tdelta = max( 10000000*guess, 10000000 );  // Arbitrarily large delta...\n\tf0Last = 0;\n\tdelta1 = delta;\n\tdelta2 = delta;\n\n\tcount = maxIter;\n\tdo {\n\t\tf0Last = f0;\n\t\tdelta2 = delta1;\n\t\tdelta1 = delta;\n\t\tres = fun( result);\n\t\tf0 = res[ 0 ];\n\t\tf1 = res[ 1 ];\n\t\tf2 = res[ 2 ];\n\t\tcount -= 1;\n\n\t\tif ( f0 === 0.0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tif ( f1 === 0.0 ) {\n\t\t\t// Oops zero derivative!!!\n\t\t\tif ( f0Last === 0.0 ) {\n\t\t\t\t// Must be the first iteration, pretend that we had a previous one at either min or max:\n\t\t\t\tif ( result === minimum ) {\n\t\t\t\t\tguess = maximum;\n\t\t\t\t} else {\n\t\t\t\t\tguess = minimum;\n\t\t\t\t}\n\t\t\t\tf0Last = fun( guess );\n\t\t\t\tdelta = guess - result;\n\t\t\t}\n\t\t\tif ( sign( f0Last ) * sign( f0 ) < 0 ) {\n\t\t\t\t// We've crossed over so move in opposite direction to last step:\n\t\t\t\tif ( delta < 0 ) {\n\t\t\t\t\tdelta = ( result-minimum ) / 2.0;\n\t\t\t\t} else {\n\t\t\t\t\tdelta = ( result-maximum ) / 2.0;\n\t\t\t\t}\n\t\t\t// Move in same direction as last step:\n\t\t\t} else if ( delta < 0 ) {\n\t\t\t\tdelta = (result-maximum) / 2.0;\n\t\t\t} else {\n\t\t\t\tdelta = (result-minimum) / 2.0;\n\t\t\t}\n\t\t} else if ( f2 === 0.0 ) {\n\t\t\tdelta = f0 / f1;\n\t\t} else {\n\t\t\tdenom = 2.0 * f0;\n\t\t\tnum = ( 2.0 * f1 ) - ( f0 * ( f2 / f1 ) );\n\t\t\tif ( abs(num) < 1.0 && ( abs(denom) >= abs(num) * MAX_VALUE ) ) {\n\t\t\t\t// Possible overflow, use Newton step:\n\t\t\t\tdelta = f0 / f1;\n\t\t\t} else {\n\t\t\t\tdelta = denom / num;\n\t\t\t}\n\t\t\tif ( delta * f1 / f0 < 0.0 ) {\n\t\t\t\t// Probably cancellation error, try a Newton step instead:\n\t\t\t\tdelta = f0 / f1;\n\t\t\t\tif ( abs(delta) > 2.0 * abs(guess) ) {\n\t\t\t\t\tdelta = ( (delta < 0.0) ? -1.0 : 1.0 ) * 2.0 * abs( guess );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconvergence = abs( delta / delta2 );\n\t\tif ( convergence > 0.8 && convergence < 2.0 ) {\n\t\t\t// Last two steps haven't converged, try bisection:\n\t\t\tdelta = ( delta > 0.0 ) ? ( result-minimum )/2.0 : ( result-maximum )/2.0; // eslint-disable-line max-len\n\t\t\tif ( abs(delta) > result ) {\n\t\t\t\tdelta = sign( delta ) * result; // Protect against huge jumps!\n\t\t\t}\n\t\t\t// Reset delta2 so that this branch will *not* be taken on the next iteration:\n\t\t\tdelta2 = delta * 3.0;\n\t\t}\n\t\tguess = result;\n\t\tresult -= delta;\n\n\t\t// Check for out of bounds step:\n\t\tif ( result < minimum ) {\n\t\t\tif (\n\t\t\t\tabs(minimum) < 1 &&\n\t\t\t\tabs(result) > 1 &&\n\t\t\t\t( MAX_VALUE / abs(result) < abs(minimum) )\n\t\t\t) {\n\t\t\t\tdiff = 1000.0;\n\t\t\t} else {\n\t\t\t\tdiff = result / minimum;\n\t\t\t}\n\t\t\tif ( abs(diff) < 1.0 ) {\n\t\t\t\tdiff = 1.0 / diff;\n\t\t\t}\n\t\t\tif ( !outOfBounds && diff > 0.0 && diff < 3.0 ) {\n\t\t\t\t// Only a small out of bounds step, let's assume that the result is probably approximately at minimum:\n\t\t\t\tdelta = 0.99 * (guess - minimum);\n\t\t\t\tresult = guess - delta;\n\t\t\t\toutOfBounds = true; // Only take this branch once!\n\t\t\t} else {\n\t\t\t\tdelta = (guess - minimum) / 2.0;\n\t\t\t\tresult = guess - delta;\n\t\t\t\tif ( result === minimum || result === maximum ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( result > maximum ) {\n\t\t\tif (\n\t\t\t\tabs(maximum) < 1.0 &&\n\t\t\t\tabs(result) > 1.0 &&\n\t\t\t\tMAX_VALUE / abs(result) < abs(maximum)\n\t\t\t) {\n\t\t\t\tdiff = 1000.0;\n\t\t\t} else {\n\t\t\t\tdiff = result / maximum;\n\t\t\t}\n\t\t\tif ( abs(diff) < 1.0 ) {\n\t\t\t\tdiff = 1.0 / diff;\n\t\t\t}\n\t\t\tif ( !outOfBounds && diff > 0.0 && diff < 3.0 ) {\n\t\t\t\t// Only a small out of bounds step, let's assume that the result is probably approximately at minimum:\n\t\t\t\tdelta = 0.99 * (guess - maximum);\n\t\t\t\tresult = guess - delta;\n\t\t\t\toutOfBounds = true; // Only take this branch once!\n\t\t\t} else {\n\t\t\t\tdelta = ( guess - maximum ) / 2.0;\n\t\t\t\tresult = guess - delta;\n\t\t\t\tif ( result === minimum || result === maximum ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Update brackets:\n\t\tif ( delta > 0.0 ) {\n\t\t\tmaximum = guess;\n\t\t} else {\n\t\t\tminimum = guess;\n\t\t}\n\t} while ( count && ( abs(result * factor) < abs(delta) ) );\n\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default halleyIterate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The code is adapted from the Fortran routine from the FNLIB library of the [SLATEC Common Mathematical Library]{@link http://www.netlib.no/netlib/slatec/fnlib/}.\n*\n* The original code was developed by W. Fullerton of Los Alamos Scientific Laboratory, a governmental institution, and is therefore public domain.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar ALGMCS = [\n\t+0.1276642195630062933333333333333e-30,\n\t-0.3401102254316748799999999999999e-29,\n\t+0.1025680058010470912000000000000e-27,\n\t-0.3547598158101070547199999999999e-26,\n\t+0.1429227355942498147573333333333e-24,\n\t-0.6831888753985766870111999999999e-23,\n\t+0.3962837061046434803679306666666e-21,\n\t-0.2868042435334643284144622399999e-19,\n\t+0.2683181998482698748957538846666e-17,\n\t-0.3399615005417721944303330599666e-15,\n\t+0.6221098041892605227126015543416e-13,\n\t-0.1809129475572494194263306266719e-10,\n\t+0.9810825646924729426157171547487e-8,\n\t-0.1384948176067563840732986059135e-4,\n\t+0.1666389480451863247205729650822e+0\n];\nvar LEN = ALGMCS.length;\n\n\n// MAIN //\n\n/**\n* Evaluate the n-term Chebyshev series at `x`.\n*\n* ## References\n*\n* -   Broucke, Roger. 1973. \"Algorithm: Ten Subroutines for the Manipulation of Chebyshev Series.\" _Communications of the ACM_ 16 (4). New York, NY, USA: ACM: 254–56. doi:[10.1145/362003.362037](https://doi.org/10.1145/362003.362037).\n* -   Fox, Leslie, and Ian Bax Parker. 1968. _Chebyshev polynomials in numerical analysis_. Oxford Mathematical Handbooks. London, United Kingdom: Oxford University Press. <https://books.google.com/books?id=F8NzsEtJCD0C>.\n*\n* @private\n* @param {number} x - value at which the series is to be evaluated\n* @returns {number} series value\n*/\nfunction dcseval( x ) {\n\tvar twox;\n\tvar b2;\n\tvar b1;\n\tvar b0;\n\tvar i;\n\n\tif ( x < -1.1 || x > 1.1 ) {\n\t\treturn NaN;\n\t}\n\tb1 = 0.0;\n\tb0 = 0.0;\n\ttwox = 2.0 * x;\n\tfor ( i = 0; i < LEN; i++ ) {\n\t\tb2 = b1;\n\t\tb1 = b0;\n\t\tb0 = (twox*b1) - b2 + ALGMCS[ i ];\n\t}\n\treturn ( b0-b2 ) * 0.5;\n}\n\n\n// EXPORTS //\n\nexport default dcseval;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The code is adapted from the Fortran routine from the FNLIB library of the [SLATEC Common Mathematical Library]{@link http://www.netlib.no/netlib/fn/d9lgmc.f}.\n*\n* The original code was developed by W. Fullerton of Los Alamos Scientific Laboratory, a governmental institution, and is therefore public domain.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport pow from '@stdlib/math-base-special-pow';\nimport dceval from './dceval.js';\n\n\n// VARIABLES //\n\nvar XBIG = 94906265.62425156;\nvar XMAX = 3.745194030963158e306;\n\n\n// MAIN //\n\n/**\n* Compute the log gamma correction factor for `x >= 10`.\n*\n* ```tex\n* \\log(\\gamma(x)) = \\log(\\sqrt{2*\\Pi}) + (x-0.5) \\cdot \\log(x) - x \\operatorname{R9LGMC}(x).\n* ```\n*\n* @private\n* @param {number} x - input value\n* @returns {number} correction value\n*/\nfunction gammaCorrection( x ) {\n\tif ( x < 10.0 ) {\n\t\treturn NaN;\n\t}\n\t// Check for underflow...\n\tif ( x >= XMAX ) {\n\t\treturn 0.0;\n\t}\n\tif ( x < XBIG ) {\n\t\treturn dceval( (2.0*pow( 10.0/x, 2.0 )) - 1.0 ) / x;\n\t}\n\treturn 1.0 / (x * 12.0);\n}\n\n\n// EXPORTS //\n\nexport default gammaCorrection;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The code is adapted from the Fortran routine from the FNLIB library of the [SLATEC Common Mathematical Library]{@link http://www.netlib.no/netlib/slatec/fnlib/albeta.f}.\n*\n* The original code was developed by W. Fullerton of Los Alamos Scientific Laboratory, a governmental institution, and is therefore public domain.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\nimport ln from '@stdlib/math-base-special-ln';\nimport LN_SQRT_TWO_PI from '@stdlib/constants-float64-ln-sqrt-two-pi';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport correction from './gamma_correction.js';\n\n\n// MAIN //\n\n/**\n* Evaluate the natural logarithm of the beta function.\n*\n* @param {NonNegativeNumber} a - first input value\n* @param {NonNegativeNumber} b - second input value\n* @returns {number} natural logarithm of beta function\n*\n* @example\n* var v = betaln( 0.0, 0.0 );\n* // returns Infinity\n*\n* @example\n* var v = betaln( 1.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = betaln( -1.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = betaln( 5.0, 0.2 );\n* // returns ~1.218\n*\n* @example\n* var v = betaln( 4.0, 1.0 );\n* // returns ~-1.386\n*\n* @example\n* var v = betaln( NaN, 2.0 );\n* // returns NaN\n*/\nfunction betaln( a, b ) {\n\tvar corr;\n\tvar p;\n\tvar q;\n\n\tp = min( a, b );\n\tq = max( a, b );\n\n\tif ( p < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( p === 0.0 ) {\n\t\treturn PINF;\n\t}\n\tif ( q === PINF ) {\n\t\treturn NINF;\n\t}\n\t// Case: p and q are big\n\tif ( p >= 10.0 ) {\n\t\tcorr = correction( p ) + correction( q ) - correction( p+q );\n\t\treturn ( -0.5*ln( q ) ) + LN_SQRT_TWO_PI + corr + ( (p-0.5) * ln( p/(p+q) ) ) + ( q*log1p( -p/(p+q) ) ); // eslint-disable-line max-len\n\t}\n\t// Case: p is small, but q is big\n\tif ( q >= 10.0 ) {\n\t\tcorr = correction( q ) - correction( p+q );\n\t\treturn gammaln( p ) + corr + p - (p*ln( p+q )) + ( (q-0.5)*log1p( -p/(p+q) ) ); // eslint-disable-line max-len\n\t}\n\t// Case: p and q are small\n\treturn ln( gamma( p ) * ( gamma( q ) / gamma( p+q ) ) );\n}\n\n\n// EXPORTS //\n\nexport default betaln;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* Notes:\n*\t=> cos(-x) = cos(x)\n*\t=> sin(-x) = -sin(x)\n*\t=> cos(π/2) = 0\n*\t=> cos(0) = 1\n*\t=> cos(π) = -1\n*/\n\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport abs from '@stdlib/math-base-special-abs';\nimport cos from '@stdlib/math-base-special-cos';\nimport sin from '@stdlib/math-base-special-sin';\nimport floor from '@stdlib/math-base-special-floor';\nimport PI from '@stdlib/constants-float64-pi';\nimport MAX_INTEGER from '@stdlib/constants-float64-max-safe-integer';\n\n\n// VARIABLES //\n\nvar MAX_INTEGER_P1 = MAX_INTEGER + 1;\n\n\n// MAIN //\n\n/**\n* Computes the value of `cos(πx)`.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var y = cospi( 0.0 );\n* // returns 1.0\n*\n* @example\n* var y = cospi( 0.5 );\n* // returns 0.0\n*\n* @example\n* var y = cospi( 0.1 );\n* // returns ~0.951\n*\n* @example\n* var y = cospi( NaN );\n* // returns NaN\n*/\nfunction cospi( x ) {\n\tvar ax;\n\tvar ix;\n\tvar rx;\n\tvar y;\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( isInfinite( x ) ) {\n\t\treturn NaN;\n\t}\n\tax = abs( x );\n\tif ( ax > MAX_INTEGER_P1 ) {\n\t\t// Always even integer...\n\t\treturn 1.0;\n\t}\n\t// Argument reduction (reduce to [0,1))...\n\tix = floor( ax );\n\trx = ax - ix;\n\tif ( rx === 0.5 ) {\n\t\treturn 0.0;\n\t}\n\tif ( rx < 0.25 ) {\n\t\ty = cos( PI*rx );\n\t}\n\telse if ( rx < 0.75 ) {\n\t\trx = 0.5 - rx;\n\t\ty = sin( PI*rx ); // recall sin(-x) = -sin(x), thus returned result will be properly signed\n\t}\n\telse {\n\t\trx = 1.0 - rx;\n\t\ty = -cos( PI*rx );\n\t}\n\t// If the integer of `x` is odd, we need to flip the sign...\n\treturn ( ix%2 === 1 ) ? -y : y;\n}\n\n\n// EXPORTS //\n\nexport default cospi;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Golden ratio.\n*\n* @module @stdlib/constants-float64-phi\n* @type {number}\n*\n* @example\n* import PHI from '@stdlib/constants-float64-phi';\n* // returns 1.618033988749895\n*/\n\n\n// MAIN //\n\n/**\n* Golden ratio.\n*\n* @constant\n* @type {number}\n* @default 1.618033988749895\n* @see [OEIS]{@link http://oeis.org/A001622}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Golden_ratio}\n*/\nvar PHI = 1.61803398874989484820458683436563811772030917980576286213544862;\n\n\n// EXPORTS //\n\nexport default PHI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Computes the hypotenuse avoiding overflow and underflow.\n*\n* @param {number} x - number\n* @param {number} y - number\n* @returns {number} hypotenuse\n*\n* @example\n* var h = hypot( -5.0, 12.0 );\n* // returns 13.0\n*\n* @example\n* var h = hypot( NaN, 12.0 );\n* // returns NaN\n*\n* @example\n* var h = hypot( -0.0, -0.0 );\n* // returns 0.0\n*/\nfunction hypot( x, y ) {\n\tvar tmp;\n\tif ( isnan( x ) || isnan( y ) ) {\n\t\treturn NaN;\n\t}\n\tif ( isInfinite( x ) || isInfinite( y ) ) {\n\t\treturn PINF;\n\t}\n\tif ( x < 0.0 ) {\n\t\tx = -x;\n\t}\n\tif ( y < 0.0 ) {\n\t\ty = -y;\n\t}\n\tif ( x < y ) {\n\t\ttmp = y;\n\t\ty = x;\n\t\tx = tmp;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\ty /= x;\n\treturn x * sqrt( 1.0 + (y*y) );\n}\n\n\n// EXPORTS //\n\nexport default hypot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hypot from '@stdlib/math-base-special-hypot';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\n\n\n// MAIN //\n\n/**\n* Computes the absolute value of a double-precision complex floating-point number.\n*\n* @param {Complex128} z - complex number\n* @returns {number} absolute value\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n*\n* var v = cabs( new Complex128( 5.0, 3.0 ) );\n* // returns ~5.83\n*/\nfunction cabs( z ) {\n\t// TODO: consider whether to use C99 rules for special cases involving infinities and nans (see https://github.com/python/cpython/blob/f4c03484da59049eb62a9bf7777b963e2267d187/Objects/complexobject.c#L191)\n\treturn hypot( real( z ), imag( z ) );\n}\n\n\n// EXPORTS //\n\nexport default cabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\nimport isInfinitef from '@stdlib/math-base-assert-is-infinitef';\nimport PINF from '@stdlib/constants-float32-pinf';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Computes the hypotenuse avoiding overflow and underflow (single-precision).\n*\n* @param {number} x - number\n* @param {number} y - number\n* @returns {number} hypotenuse\n*\n* @example\n* var h = hypotf( -5.0, 12.0 );\n* // returns 13.0\n*\n* @example\n* var h = hypotf( NaN, 12.0 );\n* // returns NaN\n*\n* @example\n* var h = hypotf( -0.0, -0.0 );\n* // returns 0.0\n*/\nfunction hypotf( x, y ) {\n\tvar tmp;\n\tif ( isnanf( x ) || isnanf( y ) ) {\n\t\treturn NaN;\n\t}\n\tif ( isInfinitef( x ) || isInfinitef( y ) ) {\n\t\treturn PINF;\n\t}\n\tx = float64ToFloat32( x );\n\ty = float64ToFloat32( y );\n\tif ( x < 0.0 ) {\n\t\tx = -x;\n\t}\n\tif ( y < 0.0 ) {\n\t\ty = -y;\n\t}\n\tif ( x < y ) {\n\t\ttmp = y;\n\t\ty = x;\n\t\tx = tmp;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\ty = float64ToFloat32( y / x );\n\treturn float64ToFloat32( x * float64ToFloat32( sqrt( float64ToFloat32( 1.0 + float64ToFloat32(y*y) ) ) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default hypotf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_cbrt.c?view=markup}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n*\n* Optimized by Bruce D. Evans.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport FLOAT64_SMALLEST_NORMAL from '@stdlib/constants-float64-smallest-normal';\nimport SIGN_MASK from '@stdlib/constants-float64-high-word-sign-mask';\nimport ABS_MASK from '@stdlib/constants-float64-high-word-abs-mask';\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport setHighWord from '@stdlib/number-float64-base-set-high-word';\nimport isinfinite from '@stdlib/math-base-assert-is-infinite';\nimport fromWords from '@stdlib/number-float64-base-from-words';\nimport toWords from '@stdlib/number-float64-base-to-words';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport polyval from './polyval_p.js';\n\n\n// VARIABLES //\n\n// 2**32 - 1 = 4294967295 => 11111111111111111111111111111111\nvar HIGH_WORD_MASK = 4294967295>>>0; // asm type annotation\n\n// 2**31 + 2**30 = 3221225472 => 11000000000000000000000000000000\nvar LOW_WORD_MASK = 3221225472>>>0; // asm type annotation\n\n// 2**54\nvar TWO_54 = 18014398509481984.0;\n\n// 2**31 = 0x80000000 = 2147483648 => 1 00000000000 00000000000000000000\nvar TWO_31 = 0x80000000>>>0; // asm type annotation\n\n// 0x00000001 = 1 => 0 00000000000 00000000000000000001\nvar ONE = 0x00000001>>>0; // asm type annotation\n\n// B1 = (1023-1023/3-0.03306235651)*2**20\nvar B1 = 715094163>>>0; // asm type annotation\n\n// B2 = (1023-1023/3-54/3-0.03306235651)*2**20\nvar B2 = 696219795>>>0; // asm type annotation\n\n// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000\nvar FLOAT64_SMALLEST_NORMAL_HIGH_WORD = getHighWord( FLOAT64_SMALLEST_NORMAL ); // eslint-disable-line id-length\n\n// Words workspace:\nvar WORDS = [ 0>>>0, 0>>>0 ]; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Computes the cube root of a double-precision floating-point number.\n*\n* ## Method\n*\n* 1.  Rough cube root to \\\\( 5 \\\\) bits:\n*\n*     ```tex\n*     \\sqrt\\[3\\]{2^e (1+m)} \\approx 2^(e/3) \\biggl(1 + \\frac{(e \\mathrm{mod}\\ 3) + m}{3}\\biggr)\n*     ```\n*\n*     where \\\\( e \\\\) is a nonnegative integer, \\\\( m \\\\) is real and in \\\\( \\[0, 1) \\\\), and \\\\( / \\\\) and \\\\( \\mathrm{mod} \\\\) are integer division and modulus with rounding toward \\\\( -\\infty \\\\).\n*\n*     The RHS is always greater than or equal to the LHS and has a maximum relative error of about \\\\( 1 \\\\) in \\\\( 16 \\\\).\n*\n*     Adding a bias of \\\\( -0.03306235651 \\\\) to the \\\\( (e \\mathrm{mod} 3+ m )/ 3 \\\\) term reduces the error to about \\\\( 1 \\\\) in \\\\( 32 \\\\).\n*\n*     With the IEEE floating point representation, for finite positive normal values, ordinary integer division of the value in bits magically gives almost exactly the RHS of the above provided we first subtract the exponent bias (\\\\( 1023 \\\\) for doubles) and later add it back.\n*\n*     We do the subtraction virtually to keep \\\\( e \\geq 0 \\\\) so that ordinary integer division rounds toward \\\\( -\\infty \\\\); this is also efficient.\n*\n* 2.  New cube root to \\\\( 23 \\\\) bits:\n*\n*     ```tex\n*     \\sqrt[3]{x} = t \\cdot \\sqrt\\[3\\]{x/t^3} \\approx t \\mathrm{P}(t^3/x)\n*     ```\n*\n*     where \\\\( \\mathrm{P}(r) \\\\) is a polynomial of degree \\\\( 4 \\\\) that approximates \\\\( 1 / \\sqrt\\[3\\]{r} \\\\) to within \\\\( 2^{-23.5} \\\\) when \\\\( |r - 1| < 1/10 \\\\).\n*\n*     The rough approximation has produced \\\\( t \\\\) such than \\\\( |t/sqrt\\[3\\]{x} - 1| \\lesssim 1/32 \\\\), and cubing this gives us bounds for \\\\( r = t^3/x \\\\).\n*\n* 3.  Round \\\\( t \\\\) away from \\\\( 0 \\\\) to \\\\( 23 \\\\) bits (sloppily except for ensuring that the result is larger in magnitude than \\\\( \\sqrt\\[3\\]{x} \\\\) but not much more than \\\\( 2 \\\\) 23-bit ulps larger).\n*\n*     With rounding toward zero, the error bound would be \\\\( \\approx 5/6 \\\\) instead of \\\\( \\approx 4/6 \\\\).\n*\n*     With a maximum error of \\\\( 2 \\\\) 23-bit ulps in the rounded \\\\( t \\\\), the infinite-precision error in the Newton approximation barely affects the third digit in the final error \\\\( 0.667 \\\\); the error in the rounded \\\\( t \\\\) can be up to about \\\\( 3 \\\\) 23-bit ulps before the final error is larger than \\\\( 0.667 \\\\) ulps.\n*\n* 4.  Perform one step of a Newton iteration to get \\\\( 53 \\\\) bits with an error of \\\\( < 0.667 \\\\) ulps.\n*\n* @param {number} x - input value\n* @returns {number} cube root\n*\n* @example\n* var v = cbrt( 64.0 );\n* // returns 4.0\n*\n* @example\n* var v = cbrt( 27.0 );\n* // returns 3.0\n*\n* @example\n* var v = cbrt( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = cbrt( -9.0 );\n* // returns ~-2.08\n*\n* @example\n* var v = cbrt( NaN );\n* // returns NaN\n*/\nfunction cbrt( x ) {\n\tvar sgn;\n\tvar hx;\n\tvar hw;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar w;\n\tif (\n\t\tx === 0.0 || // handles +-0\n\t\tisnan( x ) ||\n\t\tisinfinite( x )\n\t) {\n\t\treturn x;\n\t}\n\thx = getHighWord( x )>>>0;\n\tsgn = (hx & SIGN_MASK)>>>0;\n\thx &= ABS_MASK;\n\n\t// Rough cbrt...\n\tif ( hx < FLOAT64_SMALLEST_NORMAL_HIGH_WORD ) {\n\t\tt = TWO_54 * x;\n\t\thw = ( getHighWord( t )&ABS_MASK )>>>0;\n\t\thw = ( ( (hw/3)>>>0 ) + B2 )>>>0;\n\t\tt = fromWords( sgn|hw, 0 );\n\t} else {\n\t\tt = 0.0;\n\t\thw = ( ( (hx/3)>>>0 ) + B1 )>>>0;\n\t\tt = setHighWord( t, sgn|hw );\n\t}\n\t// New cbrt...\n\tr = ( t*t ) * ( t/x );\n\tt *= polyval( r );\n\n\t// Round `t` away from `0` to `23` bits...\n\ttoWords.assign( t, WORDS, 1, 0 );\n\tif ( WORDS[ 1 ]&TWO_31 ) {\n\t\t// Perform manual addition, since we are split across two words...\n\t\tWORDS[ 0 ] += ONE;  // carry the one\n\t\tWORDS[ 1 ] &= ~TWO_31; // clear the bit\n\t} else {\n\t\tWORDS[ 1 ] |= TWO_31;\n\t}\n\tt = fromWords( WORDS[0]&HIGH_WORD_MASK, WORDS[1]&LOW_WORD_MASK );\n\n\t// Newton iteration...\n\ts = t * t; // `t*t` is exact\n\tr = x / s; // error `<= 0.5` ulps; `|r| < |t|`\n\tw = t + t; // `t+t` is exact\n\tr = ( r-t ) / ( w+r ); // `r-t` is exact; `w+r ~= 3*t`\n\tt += t * r; // error `<= 0.5 + 0.5/3 + eps`\n\n\treturn t;\n}\n\n\n// EXPORTS //\n\nexport default cbrt;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.87595182427177;\n\t}\n\treturn 1.87595182427177 + (x * (-1.8849797954337717 + (x * (1.6214297201053545 + (x * (-0.758397934778766 + (x * 0.14599619288661245))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: implementation (?)\n\n/**\n* Rounds a single-precision floating-point number toward positive infinity.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = ceilf( -4.2 );\n* // returns -4.0\n*\n* @example\n* var v = ceilf( 9.99999 );\n* // returns 10.0\n*\n* @example\n* var v = ceilf( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = ceilf( NaN );\n* // returns NaN\n*/\nvar ceilf = Math.ceil; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default ceilf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum base 10 exponent for a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-max-base10-exponent\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MAX_BASE10_EXPONENT from '@stdlib/constants-float64-max-base10-exponent';\n* // returns 308\n*/\n\n\n// MAIN //\n\n/**\n* The maximum base 10 exponent for a double-precision floating-point number.\n*\n* @constant\n* @type {integer32}\n* @default 308\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_BASE10_EXPONENT = 308|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_BASE10_EXPONENT;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport pow from '@stdlib/math-base-special-pow';\nimport abs from '@stdlib/math-base-special-abs';\nimport ceil from '@stdlib/math-base-special-ceil';\nimport MAX_SAFE_INTEGER from '@stdlib/constants-float64-max-safe-integer';\nimport MAX_EXP from '@stdlib/constants-float64-max-base10-exponent';\nimport MIN_EXP from '@stdlib/constants-float64-min-base10-exponent';\nimport MIN_EXP_SUBNORMAL from '@stdlib/constants-float64-min-base10-exponent-subnormal';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// VARIABLES //\n\nvar MAX_INT = MAX_SAFE_INTEGER + 1;\nvar HUGE = 1.0e+308;\n\n\n// MAIN //\n\n/**\n* Rounds a numeric value to the nearest multiple of \\\\(10^n\\\\) toward positive infinity.\n*\n* ## Method\n*\n* 1.  If \\\\(|x| <= 2^{53}\\\\) and \\\\(|n| <= 308\\\\), we can use the formula\n*\n*     ```tex\n*     \\operatorname{ceiln}(x,n) = \\frac{\\operatorname{ceil}(x \\cdot 10^{-n})}{10^{-n}}\n*     ```\n*\n*     which shifts the decimal to the nearest multiple of \\\\(10^n\\\\), performs a standard \\\\(\\mathrm{ceil}\\\\) operation, and then shifts the decimal to its original position.\n*\n*     <!-- <note> -->\n*\n*     If \\\\(x \\cdot 10^{-n}\\\\) overflows, \\\\(x\\\\) lacks a sufficient number of decimal digits to have any effect when rounding. Accordingly, the rounded value is \\\\(x\\\\).\n*\n*     <!-- </note> -->\n*\n*     <!-- <note> -->\n*\n*     Note that rescaling \\\\(x\\\\) can result in unexpected behavior. For instance, the result of \\\\(\\operatorname{ceiln}(0.2+0.1,-16)\\\\) is \\\\(0.3000000000000001\\\\) and not \\\\(0.3\\\\). While possibly unexpected, this is not a bug. The behavior stems from the fact that most decimal fractions cannot be exactly represented as floating-point numbers. And further, rescaling can lead to slightly different fractional values, which, in turn, affects the result of \\\\(\\mathrm{ceil}\\\\).\n*\n*     <!-- </note> -->\n*\n* 2.  If \\\\(n > 308\\\\), we recognize that the maximum absolute double-precision floating-point number is \\\\(\\approx 1.8\\mbox{e}308\\\\) and, thus, the result of rounding any possible positive finite number \\\\(x\\\\) to the nearest \\\\(10^n\\\\) is \\\\(\\infty\\\\) and any possible negative finite number \\\\(x\\\\) is \\\\(-0\\\\). To ensure consistent behavior with \\\\(\\operatorname{ceil}(x)\\\\), if \\\\(x < 0\\\\), the sign of \\\\(x\\\\) is preserved.\n*\n* 3.  If \\\\(n < -324\\\\), \\\\(n\\\\) exceeds the maximum number of possible decimal places (such as with subnormal numbers), and, thus, the rounded value is \\\\(x\\\\).\n*\n* 4.  If \\\\(x > 2^{53}\\\\), \\\\(x\\\\) is **always** an integer (i.e., \\\\(x\\\\) has no decimal digits). If \\\\(n <= 0\\\\), the rounded value is \\\\(x\\\\).\n*\n* 5.  If \\\\(n < -308\\\\), we let \\\\(m = n + 308\\\\) and modify the above formula to avoid overflow.\n*\n*     ```tex\n*     \\operatorname{ceiln}(x,n) = \\frac{\\biggl(\\frac{\\operatorname{ceil}( (x \\cdot 10^{308}) 10^{-m})}{10^{308}}\\biggr)}{10^{-m}}\n*     ```\n*\n*     If overflow occurs, the rounded value is \\\\(x\\\\).\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{ceiln}(\\mathrm{NaN}, n) &= \\mathrm{NaN} \\\\\n* \\operatorname{ceiln}(x, \\mathrm{NaN}) &= \\mathrm{NaN} \\\\\n* \\operatorname{ceiln}(x, \\pm\\infty) &= \\mathrm{NaN} \\\\\n* \\operatorname{ceiln}(\\pm\\infty, n) &= \\pm\\infty \\\\\n* \\operatorname{ceiln}(\\pm 0, n) &= \\pm 0\n* \\end{align*}\n* ```\n*\n* @param {number} x - input value\n* @param {integer} n - integer power of 10\n* @returns {number} rounded value\n*\n* @example\n* // Round a value to 2 decimal places:\n* var v = ceiln( 3.141592653589793, -2 );\n* // returns 3.15\n*\n* @example\n* // If n = 0, `ceiln` behaves like `ceil`:\n* var v = ceiln( 3.141592653589793, 0 );\n* // returns 4.0\n*\n* @example\n* // Round a value to the nearest thousand:\n* var v = ceiln( 12368.0, 3 );\n* // returns 13000.0\n*/\nfunction ceiln( x, n ) {\n\tvar s;\n\tvar y;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( n ) ||\n\t\tisInfinite( n )\n\t) {\n\t\treturn NaN;\n\t}\n\tif (\n\t\t// Handle infinities...\n\t\tisInfinite( x ) ||\n\n\t\t// Handle +-0...\n\t\tx === 0.0 ||\n\n\t\t// If `n` exceeds the maximum number of feasible decimal places (such as with subnormal numbers), nothing to round...\n\t\tn < MIN_EXP_SUBNORMAL ||\n\n\t\t// If `|x|` is large enough, no decimals to round...\n\t\t( abs( x ) > MAX_INT && n <= 0 )\n\t) {\n\t\treturn x;\n\t}\n\t// The maximum absolute double is ~1.8e308. Accordingly, any possible positive finite `x` rounded to the nearest >=10^309 is infinity and any negative finite `x` is zero.\n\tif ( n > MAX_EXP ) {\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn -0.0; // preserve the sign (same behavior as ceil)\n\t\t}\n\t\treturn PINF;\n\t}\n\t// If we overflow, return `x`, as the number of digits to the right of the decimal is too small (i.e., `x` is too large / lacks sufficient fractional precision) for there to be any effect when rounding...\n\tif ( n < MIN_EXP ) {\n\t\ts = pow( 10.0, -(n + MAX_EXP) );\n\t\ty = (x*HUGE) * s; // order of operation matters!\n\t\tif ( isInfinite( y ) ) {\n\t\t\treturn x;\n\t\t}\n\t\treturn ( ceil(y)/HUGE ) / s;\n\t}\n\ts = pow( 10.0, -n );\n\ty = x * s;\n\tif ( isInfinite( y ) ) {\n\t\treturn x;\n\t}\n\treturn ceil( y ) / s;\n}\n\n\n// EXPORTS //\n\nexport default ceiln;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The minimum base 10 exponent for a subnormal double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-min-base10-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL from '@stdlib/constants-float64-min-base10-exponent-subnormal';\n* // returns -324\n*/\n\n\n// MAIN //\n\n/**\n* The minimum base 10 exponent for a subnormal double-precision floating-point number.\n*\n* @constant\n* @type {integer32}\n* @default -324\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL = -324|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The minimum base 10 exponent for a normal double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-min-base10-exponent\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MIN_BASE10_EXPONENT from '@stdlib/constants-float64-min-base10-exponent';\n* // returns -308\n*/\n\n\n// MAIN //\n\n/**\n* The minimum base 10 exponent for a normal double-precision floating-point number.\n*\n* ```text\n* 2^-1022 = 2.2250738585072014e-308 => -308\n* ```\n*\n* @constant\n* @type {integer32}\n* @default -308\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_BASE10_EXPONENT = -308|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MIN_BASE10_EXPONENT;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { assign as sincos } from '@stdlib/math-base-special-sincos';\nimport exp from '@stdlib/math-base-special-exp';\nimport Complex128 from '@stdlib/complex-float64';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\n\n\n// VARIABLES //\n\n// Pre-allocate workspace array:\nvar WORKSPACE = [ 0.0, 0.0 ];\n\n\n// MAIN //\n\n/**\n* Evaluates the cis function for a double-precision complex floating-point number.\n*\n* @param {Complex128} z - complex number\n* @returns {Complex128} result\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var z = new Complex128( 0.0, 0.0 );\n* // returns <Complex128>\n*\n* var out = ccis( z );\n* // returns <Complex128>\n*\n* var re = real( out );\n* // returns 1.0\n*\n* var im = imag( out );\n* // returns 0.0\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var z = new Complex128( 1.0, 0.0 );\n* // returns <Complex128>\n*\n* var out = ccis( z );\n* // returns <Complex128>\n*\n* var re = real( out );\n* // returns ~0.54\n*\n* var im = imag( out );\n* // returns ~0.841\n*/\nfunction ccis( z ) {\n\tvar re;\n\tvar im;\n\tvar e;\n\n\tre = real( z );\n\tim = imag( z );\n\n\tsincos( re, WORKSPACE, 1, 0 );\n\tif ( im !== 0.0 ) {\n\t\te = exp( -im );\n\t\tWORKSPACE[ 0 ] *= e;\n\t\tWORKSPACE[ 1 ] *= e;\n\t}\n\treturn new Complex128( WORKSPACE[ 1 ], WORKSPACE[ 0 ] );\n}\n\n\n// EXPORTS //\n\nexport default ccis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log2.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport setHighWord from '@stdlib/number-float64-base-set-high-word';\nimport setLowWord from '@stdlib/number-float64-base-set-low-word';\nimport toWords from '@stdlib/number-float64-base-to-words';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ABS_MASK from '@stdlib/constants-float64-high-word-abs-mask';\nimport HIGH_SIGNIFICAND_MASK from '@stdlib/constants-float64-high-word-significand-mask';\nimport BIAS from '@stdlib/constants-float64-exponent-bias';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport klog from './klog.js';\n\n\n// VARIABLES //\n\nvar TWO54 = 1.80143985094819840000e+16;   // 0x43500000, 0x00000000\nvar IVLN2HI = 1.44269504072144627571e+00; // 0x3ff71547, 0x65200000\nvar IVLN2LO = 1.67517131648865118353e-10; // 0x3de705fc, 0x2eefa200\n\n// 0x7ff00000 = 2146435072 => 0 11111111111 00000000000000000000 => biased exponent: 2047 = 1023+1023 => 2^1023\nvar HIGH_MAX_NORMAL_EXP = 0x7ff00000|0; // asm type annotation\n\n// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022\nvar HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation\n\n// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1\nvar HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation\n\n// High/low words workspace:\nvar WORDS = [ 0|0, 0|0 ];\n\n\n// MAIN //\n\n/**\n* Evaluates the binary logarithm (base two).\n*\n* @param {NonNegativeNumber} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = log2( 4.0 );\n* // returns 2.0\n*\n* @example\n* var v = log2( 8.0 );\n* // returns 3.0\n*\n* @example\n* var v = log2( 0.0 );\n* // returns -Infinity\n*\n* @example\n* var v = log2( Infinity );\n* // returns Infinity\n*\n* @example\n* var v = log2( NaN );\n* // returns NaN\n*\n* @example\n* var v = log2( -4.0 );\n* // returns NaN\n*/\nfunction log2( x ) {\n\tvar hi;\n\tvar lo;\n\tvar hx;\n\tvar lx;\n\tvar f;\n\tvar i;\n\tvar k;\n\n\tif ( isnan( x ) || x < 0.0 ) {\n\t\treturn NaN;\n\t}\n\ttoWords.assign( x, WORDS, 1, 0 );\n\thx = WORDS[ 0 ];\n\tlx = WORDS[ 1 ];\n\tk = 0|0; // asm type annotation\n\tif ( hx < HIGH_MIN_NORMAL_EXP ) {\n\t\t// Case: x < 2**-1022\n\t\tif ( ( (hx&ABS_MASK) | lx ) === 0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tk -= 54|0; // asm type annotation\n\n\t\t// Subnormal number, scale up x:\n\t\tx *= TWO54;\n\t\thx = getHighWord( x );\n\t}\n\tif ( hx >= HIGH_MAX_NORMAL_EXP ) {\n\t\treturn x + x;\n\t}\n\tk += ( (hx>>20) - BIAS )|0; // asm type annotation\n\thx &= HIGH_SIGNIFICAND_MASK;\n\ti = ( ( hx+0x95f64 ) & 0x100000 )|0; // asm type annotation\n\n\t// Normalize x or x/2...\n\tx = setHighWord( x, hx|(i^HIGH_BIASED_EXP_0) );\n\tk += (i>>20)|0; // asm type annotation\n\tf = klog( x );\n\tx -= 1;\n\thi = setLowWord( x, 0 );\n\tlo = x - hi;\n\treturn ( (x+f)*IVLN2LO ) + ( (lo+f)*IVLN2HI ) + ( hi*IVLN2HI ) + k;\n}\n\n\n// EXPORTS //\n\nexport default log2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_log.h}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport polyvalP from './polyval_p.js';\nimport polyvalQ from './polyval_q.js';\n\n\n// VARIABLES //\n\n// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111\nvar HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation\n\n// 1/3\nvar ONE_THIRD = 0.33333333333333333;\n\n\n// MAIN //\n\n/**\n* Return `log(x) - (x-1)` for `x` in `~[sqrt(2)/2, sqrt(2)]`.\n*\n* @private\n* @param {number} x - input value\n* @returns {number} function value\n*/\nfunction klog( x ) {\n\tvar hfsq;\n\tvar t1;\n\tvar t2;\n\tvar hx;\n\tvar f;\n\tvar s;\n\tvar z;\n\tvar R;\n\tvar w;\n\tvar i;\n\tvar j;\n\n\thx = getHighWord( x );\n\tf = x - 1.0;\n\tif ( ( HIGH_SIGNIFICAND_MASK & (2+hx) ) < 3 ) {\n\t\t// Case: -2**-20 <= f < 2**-20\n\t\tif ( f === 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn f * f * ( ( ONE_THIRD*f )- 0.5 );\n\t}\n\ts = f / ( 2.0 + f );\n\tz = s * s;\n\thx &= HIGH_SIGNIFICAND_MASK;\n\ti = ( hx - 0x6147a )|0; // asm type annotation\n\tw = z * z;\n\tj = ( 0x6b851 - hx )|0; // asm type annotation\n\tt1 = w * polyvalP( w );\n\tt2 = z * polyvalQ( w );\n\ti |= j;\n\tR = t2 + t1;\n\tif ( i > 0 ) {\n\t\thfsq = 0.5 * f * f;\n\t\treturn ( s * (hfsq+R) ) - hfsq;\n\t}\n\treturn s * (R-f);\n}\n\n\n// EXPORTS //\n\nexport default klog;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.3999999999940942;\n\t}\n\treturn 0.3999999999940942 + (x * (0.22222198432149784 + (x * 0.15313837699209373))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.6666666666666735;\n\t}\n\treturn 0.6666666666666735 + (x * (0.2857142874366239 + (x * (0.1818357216161805 + (x * 0.14798198605116586))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log10.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport setHighWord from '@stdlib/number-float64-base-set-high-word';\nimport setLowWord from '@stdlib/number-float64-base-set-low-word';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport BIAS from '@stdlib/constants-float64-exponent-bias';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport klog from './klog.js';\n\n\n// VARIABLES //\n\nvar TWO54 = 1.80143985094819840000e+16;     // 0x43500000, 0x00000000\nvar IVLN10HI = 4.34294481878168880939e-01;  // 0x3fdbcb7b, 0x15200000\nvar IVLN10LO = 2.50829467116452752298e-11;  // 0x3dbb9438, 0xca9aadd5\nvar LOG10_2HI = 3.01029995663611771306e-01; // 0x3FD34413, 0x509F6000\nvar LOG10_2LO = 3.69423907715893078616e-13; // 0x3D59FEF3, 0x11F12B36\n\n// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111\nvar HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation\n\n// 0x7ff00000 = 2146435072 => 0 11111111111 00000000000000000000 => biased exponent: 2047 = 1023+1023 => 2^1023\nvar HIGH_MAX_NORMAL_EXP = 0x7ff00000|0; // asm type annotation\n\n// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022\nvar HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation\n\n// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1\nvar HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Evaluates the common logarithm (base ten).\n*\n* @param {NonNegativeNumber} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = log10( 4.0 );\n* // returns ~0.602\n*\n* @example\n* var v = log10( 8.0 );\n* // returns ~0.903\n*\n* @example\n* var v = log10( 0.0 );\n* // returns -Infinity\n*\n* @example\n* var v = log10( Infinity );\n* // returns Infinity\n*\n* @example\n* var v = log10( NaN );\n* // returns NaN\n*\n* @example\n* var v = log10( -4.0 );\n* // returns NaN\n*/\nfunction log10( x ) {\n\tvar hi;\n\tvar hx;\n\tvar lo;\n\tvar f;\n\tvar i;\n\tvar k;\n\tvar y;\n\tvar z;\n\n\tif ( isnan( x ) || x < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn NINF;\n\t}\n\thx = getHighWord( x );\n\tk = 0|0; // asm type annotation\n\n\t// Case: 0 < x < 2**-1022\n\tif ( hx < HIGH_MIN_NORMAL_EXP ) {\n\t\t// Subnormal number, scale up `x`...\n\t\tk -= 54|0; // asm type annotation\n\t\tx *= TWO54;\n\t\thx = getHighWord( x );\n\t}\n\tif ( hx >= HIGH_MAX_NORMAL_EXP ) {\n\t\treturn x + x;\n\t}\n\tk += ((hx>>20) - BIAS)|0; // asm type annotation\n\thx &= HIGH_SIGNIFICAND_MASK;\n\ti = ( (hx+0x95f64)&0x100000 )|0; // asm type annotation\n\n\t// Normalize `x` or `x/2`...\n\tx = setHighWord( x, hx|(i^HIGH_BIASED_EXP_0) );\n\tk += (i>>20)|0; // asm type annotation\n\ty = k;\n\tf = klog( x );\n\tx -= 1;\n\thi = setLowWord( x, 0.0 );\n\tlo = x - hi;\n\tz = (y*LOG10_2LO) + ( (x+f)*IVLN10LO );\n\tz += ( (lo+f)*IVLN10HI ) + ( hi*IVLN10HI );\n\treturn z + ( y*LOG10_2HI );\n}\n\n\n// EXPORTS //\n\nexport default log10;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_log.h}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport polyvalP from './polyval_p.js';\nimport polyvalQ from './polyval_q.js';\n\n\n// VARIABLES //\n\n// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111\nvar HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation\n\n// 1/3\nvar ONE_THIRD = 0.33333333333333333;\n\n\n// MAIN //\n\n/**\n* Return `log(x) - (x-1)` for `x` in `~[sqrt(2)/2, sqrt(2)]`.\n*\n* @private\n* @param {number} x - input value\n* @returns {number} function value\n*/\nfunction klog( x ) {\n\tvar hfsq;\n\tvar t1;\n\tvar t2;\n\tvar hx;\n\tvar f;\n\tvar s;\n\tvar z;\n\tvar R;\n\tvar w;\n\tvar i;\n\tvar j;\n\n\thx = getHighWord( x );\n\tf = x - 1.0;\n\tif ( ( HIGH_SIGNIFICAND_MASK & (2+hx) ) < 3 ) {\n\t\t// Case: -2**-20 <= f < 2**-20\n\t\tif ( f === 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn f * f * ( (ONE_THIRD*f) - 0.5 );\n\t}\n\ts = f / ( 2.0 + f );\n\tz = s * s;\n\thx &= HIGH_SIGNIFICAND_MASK;\n\ti = (hx - 0x6147a)|0; // asm type annotation\n\tw = z * z;\n\tj = (0x6b851 - hx)|0; // asm type annotation\n\tt1 = w * polyvalP( w );\n\tt2 = z * polyvalQ( w );\n\ti |= j;\n\tR = t2 + t1;\n\tif ( i > 0 ) {\n\t\thfsq = 0.5 * f * f;\n\t\treturn ( s * (hfsq+R) ) - hfsq;\n\t}\n\treturn s * (R-f);\n}\n\n\n// EXPORTS //\n\nexport default klog;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.3999999999940942;\n\t}\n\treturn 0.3999999999940942 + (x * (0.22222198432149784 + (x * 0.15313837699209373))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.6666666666666735;\n\t}\n\treturn 0.6666666666666735 + (x * (0.2857142874366239 + (x * (0.1818357216161805 + (x * 0.14798198605116586))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport pow from '@stdlib/math-base-special-pow';\nimport abs from '@stdlib/math-base-special-abs';\nimport floor from '@stdlib/math-base-special-floor';\nimport MAX_SAFE_INTEGER from '@stdlib/constants-float64-max-safe-integer';\nimport MAX_EXP from '@stdlib/constants-float64-max-base10-exponent';\nimport MIN_EXP from '@stdlib/constants-float64-min-base10-exponent';\nimport MIN_EXP_SUBNORMAL from '@stdlib/constants-float64-min-base10-exponent-subnormal';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// VARIABLES //\n\nvar MAX_INT = MAX_SAFE_INTEGER + 1;\nvar HUGE = 1.0e+308;\n\n\n// MAIN //\n\n/**\n* Rounds a double-precision floating-point number to the nearest multiple of `10^n` toward negative infinity.\n*\n* ## Method\n*\n* 1.  If \\\\(|x| <= 2^{53}\\\\) and \\\\(|n| <= 308\\\\), we can use the formula\n*\n*     ```tex\n*     \\operatorname{floorn}(x,n) = \\frac{\\operatorname{floor}(x \\cdot 10^{-n})}{10^{-n}}\n*     ```\n*\n*     which shifts the decimal to the nearest multiple of \\\\(10^n\\\\), performs a standard \\\\(\\mathrm{floor}\\\\) operation, and then shifts the decimal to its original position.\n*\n*     <!-- <note> -->\n*\n*     If \\\\(x \\cdot 10^{-n}\\\\) overflows, \\\\(x\\\\) lacks a sufficient number of decimal digits to have any effect when rounding. Accordingly, the rounded value is \\\\(x\\\\).\n*\n*     <!-- </note> -->\n*\n*     <!-- <note> -->\n*\n*     Note that rescaling \\\\(x\\\\) can result in unexpected behavior. For instance, the result of \\\\(\\operatorname{floorn}(-0.2-0.1,-16)\\\\) is \\\\(-0.3000000000000001\\\\) and not \\\\(-0.3\\\\). While possibly unexpected, this is not a bug. The behavior stems from the fact that most decimal fractions cannot be exactly represented as floating-point numbers. And further, rescaling can lead to slightly different fractional values, which, in turn, affects the result of \\\\(\\mathrm{floor}\\\\).\n*\n*     <!-- </note> -->\n*\n* 2.  If \\\\(n > 308\\\\), we recognize that the maximum absolute double-precision floating-point number is \\\\(\\approx 1.8\\mbox{e}308\\\\) and, thus, the result of rounding any possible negative finite number \\\\(x\\\\) to the nearest \\\\(10^n\\\\) is \\\\(-\\infty\\\\) and any possible positive finite number \\\\(x\\\\) is \\\\(+0\\\\). To ensure consistent behavior with \\\\(\\operatorname{floor}(x)\\\\), if \\\\(x > 0\\\\), the sign of \\\\(x\\\\) is preserved.\n*\n* 3.  If \\\\(n < -324\\\\), \\\\(n\\\\) exceeds the maximum number of possible decimal places (such as with subnormal numbers), and, thus, the rounded value is \\\\(x\\\\).\n*\n* 4.  If \\\\(x > 2^{53}\\\\), \\\\(x\\\\) is **always** an integer (i.e., \\\\(x\\\\) has no decimal digits). If \\\\(n <= 0\\\\), the rounded value is \\\\(x\\\\).\n*\n* 5.  If \\\\(n < -308\\\\), we let \\\\(m = n + 308\\\\) and modify the above formula to avoid overflow.\n*\n*     ```tex\n*     \\operatorname{floorn}(x,n) = \\frac{\\biggl(\\frac{\\operatorname{floor}( (x \\cdot 10^{308}) 10^{-m})}{10^{308}}\\biggr)}{10^{-m}}\n*     ```\n*\n*     If overflow occurs, the rounded value is \\\\(x\\\\).\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{floorn}(\\mathrm{NaN}, n) &= \\mathrm{NaN} \\\\\n* \\operatorname{floorn}(x, \\mathrm{NaN}) &= \\mathrm{NaN} \\\\\n* \\operatorname{floorn}(x, \\pm\\infty) &= \\mathrm{NaN} \\\\\n* \\operatorname{floorn}(\\pm\\infty, n) &= \\pm\\infty \\\\\n* \\operatorname{floorn}(\\pm 0, n) &= \\pm 0\n* \\end{align*}\n* ```\n*\n* @param {number} x - input value\n* @param {integer} n - integer power of 10\n* @returns {number} rounded value\n*\n* @example\n* // Round a value to 4 decimal places:\n* var v = floorn( 3.141592653589793, -4 );\n* // returns 3.1415\n*\n* @example\n* // If n = 0, `floorn` behaves like `floor`:\n* var v = floorn( 3.141592653589793, 0 );\n* // returns 3.0\n*\n* @example\n* // Round a value to the nearest thousand:\n* var v = floorn( 12368.0, 3 );\n* // returns 12000.0\n*/\nfunction floorn( x, n ) {\n\tvar s;\n\tvar y;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( n ) ||\n\t\tisInfinite( n )\n\t) {\n\t\treturn NaN;\n\t}\n\tif (\n\t\t// Handle infinities...\n\t\tisInfinite( x ) ||\n\n\t\t// Handle +-0...\n\t\tx === 0.0 ||\n\n\t\t// If `n` exceeds the maximum number of feasible decimal places (such as with subnormal numbers), nothing to round...\n\t\tn < MIN_EXP_SUBNORMAL ||\n\n\t\t// If `|x|` is large enough, no decimals to round...\n\t\t( abs( x ) > MAX_INT && n <= 0 )\n\t) {\n\t\treturn x;\n\t}\n\t// The maximum absolute double is ~1.8e308. Accordingly, any possible positive finite `x` rounded to the nearest >=10^309 is infinity and any negative finite `x` is zero.\n\tif ( n > MAX_EXP ) {\n\t\tif ( x >= 0.0 ) {\n\t\t\treturn 0.0; // preserve the sign (same behavior as floor)\n\t\t}\n\t\treturn NINF;\n\t}\n\t// If we overflow, return `x`, as the number of digits to the right of the decimal is too small (i.e., `x` is too large / lacks sufficient fractional precision) for there to be any effect when rounding...\n\tif ( n < MIN_EXP ) {\n\t\ts = pow( 10.0, -(n + MAX_EXP) );\n\t\ty = (x*HUGE) * s; // order of operation matters!\n\t\tif ( isInfinite( y ) ) {\n\t\t\treturn x;\n\t\t}\n\t\treturn ( floor(y)/HUGE ) / s;\n\t}\n\ts = pow( 10.0, -n );\n\ty = x * s;\n\tif ( isInfinite( y ) ) {\n\t\treturn x;\n\t}\n\treturn floor( y ) / s;\n}\n\n\n// EXPORTS //\n\nexport default floorn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport max from '@stdlib/math-base-special-max';\nimport FLOAT64_BIGGEST from '@stdlib/constants-float64-max';\nimport FLOAT64_SMALLEST from '@stdlib/constants-float64-smallest-normal';\nimport EPS from '@stdlib/constants-float64-eps';\nimport Complex128 from '@stdlib/complex-float64';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\n\n\n// VARIABLES //\n\nvar LARGE_THRESHOLD = FLOAT64_BIGGEST * 0.5;\nvar SMALL_THRESHOLD = FLOAT64_SMALLEST * ( 2.0 / EPS );\nvar RECIP_EPS_SQR = 2.0 / ( EPS * EPS );\n\n\n// MAIN //\n\n/**\n* Computes the inverse of a double-precision complex floating-point number.\n*\n* ## References\n*\n* -   Baudin, Michael, and Robert L. Smith. 2012. \"A Robust Complex Division in Scilab.\" _arXiv_ abs/1210.4539 \\[cs.MS\\] (October): 1–25. <https://arxiv.org/abs/1210.4539>.\n*\n* @param {Complex128} z - complex number\n* @returns {Complex128} result\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var v = cinv( new Complex128( 2.0, 4.0 ) );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns 0.1\n*\n* var im = imag( v );\n* // returns -0.2\n*/\nfunction cinv( z ) {\n\tvar ab;\n\tvar re;\n\tvar im;\n\tvar s;\n\tvar r;\n\tvar t;\n\n\tre = real( z );\n\tim = imag( z );\n\tab = max( abs(re), abs(im) );\n\ts = 1.0;\n\tif ( ab >= LARGE_THRESHOLD ) {\n\t\tre *= 0.5;\n\t\tim *= 0.5;\n\t\ts *= 0.5;\n\t} else if ( ab <= SMALL_THRESHOLD ) {\n\t\tre *= RECIP_EPS_SQR;\n\t\tim *= RECIP_EPS_SQR;\n\t\ts *= RECIP_EPS_SQR;\n\t}\n\tif ( abs( im ) <= abs( re ) ) {\n\t\tr = im / re;\n\t\tt = 1.0 / ( re + (im*r) );\n\t\tre = t;\n\t\tim = -r * t;\n\t} else {\n\t\tr = re / im;\n\t\tt = 1.0 / ( im + (re*r) );\n\t\tre = r * t;\n\t\tim = -t;\n\t}\n\tre *= s;\n\tim *= s;\n\treturn new Complex128( re, im);\n}\n\n\n// EXPORTS //\n\nexport default cinv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Mask for the sign bit of a single-precision floating-point number.\n*\n* @module @stdlib/constants-float32-sign-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT32_SIGN_MASK from '@stdlib/constants-float32-sign-mask';\n* // returns 2147483648\n*/\n\n\n// MAIN //\n\n/**\n* Mask for the sign bit of a single-precision floating-point number.\n*\n* ## Notes\n*\n* The mask for the sign bit of a single-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2147483648 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 1 00000000 00000000000000000000000\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x80000000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_SIGN_MASK = 0x80000000>>>0;\n\n\n// EXPORTS //\n\nexport default FLOAT32_SIGN_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Float32Array from '@stdlib/array-float32';\nimport Uint32Array from '@stdlib/array-uint32';\n\n\n// VARIABLES //\n\nvar FLOAT32_VIEW = new Float32Array( 1.0 );\nvar UINT32_VIEW = new Uint32Array( FLOAT32_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Returns an unsigned 32-bit integer corresponding to the IEEE 754 binary representation of a single-precision floating-point number.\n*\n* @param {number} x - single-precision floating-point number\n* @returns {unsigned32} unsigned 32-bit integer\n*\n* @example\n* import float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\n*\n* var f32 = float64ToFloat32( 1.337 );\n* // returns 1.3370000123977661\n*\n* var w = toWordf( f32 ); // => 0 01111111 01010110010001011010001\n* // returns 1068180177\n*/\nfunction toWordf( x ) {\n\tFLOAT32_VIEW[ 0 ] = x;\n\treturn UINT32_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default toWordf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float32Array from '@stdlib/array-float32';\n\n\n// VARIABLES //\n\nvar UINT32_VIEW = new Uint32Array( 1 );\nvar FLOAT32_VIEW = new Float32Array( UINT32_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Creates a single-precision floating-point number from an unsigned integer corresponding to an IEEE 754 binary representation.\n*\n* @param {uinteger32} word - unsigned integer\n* @returns {number} single-precision floating-point number\n*\n* @example\n* var word = 1068180177; // => 0 01111111 01010110010001011010001\n*\n* var f32 = fromWordf( word ); // when printed, implicitly promoted to float64\n* // returns 1.3370000123977661\n*/\nfunction fromWordf( word ) {\n\tUINT32_VIEW[ 0 ] = word;\n\treturn FLOAT32_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default fromWordf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1985, 1995, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Computes the hyperbolic cosine of a double-precision floating-point number.\n*\n* ## Method\n*\n* ```tex\n* \\operatorname{cosh}(x) = \\frac{ \\exp(x) + \\exp(-x) }{2}\n* ```\n*\n* ## Notes\n*\n* -   Relative error:\n*\n*     | arithmetic | domain   | # trials | peak    | rms     |\n*     |:----------:|:--------:|:--------:|:-------:|:-------:|\n*     | DEC        | +- 88    | 50000    | 4.0e-17 | 7.7e-18 |\n*     | IEEE       | +-MAXLOG | 30000    | 2.6e-16 | 5.7e-17 |\n*\n* @param {number} x - input value\n* @returns {number} hyperbolic cosine\n*\n* @example\n* var v = cosh( 0.0 );\n* // returns 1.0\n*\n* @example\n* var v = cosh( 2.0 );\n* // returns ~3.762\n*\n* @example\n* var v = cosh( -2.0 );\n* // returns ~3.762\n*\n* @example\n* var v = cosh( NaN );\n* // returns NaN\n*/\nfunction cosh( x ) {\n\tif ( isnan( x ) ) {\n\t\treturn x;\n\t}\n\tif ( x < 0.0 ) {\n\t\tx = -x;\n\t}\n\tif ( x > 21.0 ) {\n\t\treturn exp( x ) / 2.0;\n\t}\n\treturn ( exp(x) + exp(-x) ) / 2.0;\n}\n\n\n// EXPORTS //\n\nexport default cosh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/12.2.0/lib/msun/src/k_tan.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport setLowWord from '@stdlib/number-float64-base-set-low-word';\nimport polyvalOdd from './polyval_t_odd.js';\nimport polyvalEven from './polyval_t_even.js';\n\n\n// VARIABLES //\n\nvar PIO4 = 7.85398163397448278999e-01;\nvar PIO4LO = 3.06161699786838301793e-17;\nvar T0 = 3.33333333333334091986e-01; // 3FD55555, 55555563\n\n// Absolute value mask: 2147483647 => 0x7fffffff => 01111111111111111111111111111111\nvar HIGH_WORD_ABS_MASK = 0x7fffffff|0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Computes the tangent on \\\\( \\approx\\[-\\pi/4, \\pi/4] \\\\) (except on -0), \\\\( \\pi/4 \\approx 0.7854 \\\\).\n*\n* ## Method\n*\n* -   Since \\\\( \\tan(-x) = -\\tan(x) \\\\), we need only to consider positive \\\\( x \\\\).\n*\n* -   Callers must return \\\\( \\tan(-0) = -0 \\\\) without calling here since our odd polynomial is not evaluated in a way that preserves \\\\( -0 \\\\). Callers may do the optimization \\\\( \\tan(x) \\approx x \\\\) for tiny \\\\( x \\\\).\n*\n* -   \\\\( \\tan(x) \\\\) is approximated by a odd polynomial of degree 27 on \\\\( \\[0, 0.67434] \\\\)\n*\n*     ```tex\n*     \\tan(x) \\approx x + T_1 x^3 + \\ldots + T_{13} x^{27}\n*     ```\n*     where\n*\n*     ```tex\n*     \\left| \\frac{\\tan(x)}{x} - \\left( 1 + T_1 x^2 + T_2 x^4 + \\ldots + T_{13} x^{26} \\right) \\right|  \\le 2^{-59.2}\n*     ```\n*\n* -   Note: \\\\( \\tan(x+y) = \\tan(x) + \\tan'(x) \\cdot y \\approx \\tan(x) + ( 1 + x \\cdot x ) \\cdot y \\\\). Therefore, for better accuracy in computing \\\\( \\tan(x+y) \\\\), let\n*\n*     ```tex\n*     r = x^3 \\cdot \\left( T_2+x^2 \\cdot (T_3+x^2 \\cdot (\\ldots+x^2 \\cdot (T_{12}+x^2 \\cdot T_{13}))) \\right)\n*     ```\n*\n*     then\n*\n*     ```tex\n*     \\tan(x+y) = x^3 + \\left( T_1 \\cdot x^2 + (x \\cdot (r+y)+y) \\right)\n*     ```\n*\n* -   For \\\\( x \\\\) in \\\\( \\[0.67434, \\pi/4] \\\\),  let \\\\( y = \\pi/4 - x \\\\), then\n*\n*     ```tex\n*     \\tan(x) = \\tan\\left(\\tfrac{\\pi}{4}-y\\right) = \\frac{1-\\tan(y)}{1+\\tan(y)} \\\\\n*     = 1 - 2 \\cdot \\left( \\tan(y) - \\tfrac{\\tan(y)^2}{1+\\tan(y)} \\right)\n*     ```\n*\n* @param {number} x - input value (in radians, assumed to be bounded by ~π/4 in magnitude)\n* @param {number} y - tail of `x`\n* @param {integer} k - indicates whether tan (if k = 1) or -1/tan (if k = -1) is returned\n* @returns {number} tangent\n*\n* @example\n* var out = kernelTan( 3.141592653589793/4.0, 0.0, 1 );\n* // returns ~1.0\n*\n* @example\n* var out = kernelTan( 3.141592653589793/4.0, 0.0, -1 );\n* // returns ~-1.0\n*\n* @example\n* var out = kernelTan( 3.141592653589793/6.0, 0.0, 1 );\n* // returns ~0.577\n*\n* @example\n* var out = kernelTan( 0.664, 5.288e-17, 1 );\n* // returns ~0.783\n*\n* @example\n* var out = kernelTan( NaN, 0.0, 1 );\n* // returns NaN\n*\n* @example\n* var out = kernelTan( 3.0, NaN, 1 );\n* // returns NaN\n*\n* @example\n* var out = kernelTan( NaN, NaN, 1 );\n* // returns NaN\n*/\nfunction kernelTan( x, y, k ) {\n\tvar hx;\n\tvar ix;\n\tvar a;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar v;\n\tvar w;\n\tvar z;\n\n\thx = getHighWord( x );\n\n\t// High word of |x|:\n\tix = (hx & HIGH_WORD_ABS_MASK)|0; // asm type annotation\n\n\t// Case: |x| >= 0.6744\n\tif ( ix >= 0x3FE59428 ) {\n\t\tif ( x < 0 ) {\n\t\t\tx = -x;\n\t\t\ty = -y;\n\t\t}\n\t\tz = PIO4 - x;\n\t\tw = PIO4LO - y;\n\t\tx = z + w;\n\t\ty = 0.0;\n\t}\n\tz = x * x;\n\tw = z * z;\n\n\t// Break x^5*(T[1]+x^2*T[2]+...) into x^5(T[1]+x^4*T[3]+...+x^20*T[11]) + x^5(x^2*(T[2]+x^4*T[4]+...+x^22*T[12]))...\n\tr = polyvalOdd( w );\n\tv = z * polyvalEven( w );\n\ts = z * x;\n\tr = y + (z * ((s * (r + v)) + y));\n\tr += T0 * s;\n\tw = x + r;\n\tif ( ix >= 0x3FE59428 ) {\n\t\tv = k;\n\t\treturn ( 1.0 - ( (hx >> 30) & 2 ) ) * ( v - (2.0 * (x - ((w * w / (w + v)) - r)) )); // eslint-disable-line max-len\n\t}\n\tif ( k === 1 ) {\n\t\treturn w;\n\t}\n\t// Compute -1/(x+r) accurately...\n\tz = setLowWord( w, 0 );\n\tv = r - (z - x); // z + v = r + x\n\ta = -1.0 / w; // a = -1/w\n\tt = setLowWord( a, 0 );\n\ts = 1.0 + (t * z);\n\treturn t + (a * (s + (t * v)));\n}\n\n\n// EXPORTS //\n\nexport default kernelTan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.13333333333320124;\n\t}\n\treturn 0.13333333333320124 + (x * (0.021869488294859542 + (x * (0.0035920791075913124 + (x * (0.0005880412408202641 + (x * (0.00007817944429395571 + (x * -0.000018558637485527546))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.05396825397622605;\n\t}\n\treturn 0.05396825397622605 + (x * (0.0088632398235993 + (x * (0.0014562094543252903 + (x * (0.0002464631348184699 + (x * (0.00007140724913826082 + (x * 0.00002590730518636337))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_tan.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport kernelTan from '@stdlib/math-base-special-kernel-tan';\nimport rempio2 from '@stdlib/math-base-special-rempio2';\n\n\n// VARIABLES //\n\n// Scratch buffer:\nvar buffer = [ 0.0, 0.0 ]; // WARNING: not thread safe\n\n// High word absolute value mask: 0x7fffffff => 01111111111111111111111111111111\nvar HIGH_WORD_ABS_MASK = 0x7fffffff|0; // asm type annotation\n\n// High word for pi/4: 0x3fe921fb => 00111111111010010010000111111011\nvar HIGH_WORD_PIO4 = 0x3fe921fb|0; // asm type annotation\n\n// High word exponent mask: 0x7ff00000 => 01111111111100000000000000000000\nvar HIGH_WORD_EXPONENT_MASK = 0x7ff00000|0; // asm type annotation\n\n// High word for a small value: 2^-27 = 7.450580596923828e-9 => high word => 0x3e400000 => 00111110010000000000000000000000\nvar HIGH_WORD_TWO_NEG_27 = 0x3e400000|0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Evaluates the tangent of a number.\n*\n* ## Method\n*\n* -   Let \\\\(S\\\\), \\\\(C\\\\), and \\\\(T\\\\) denote the \\\\(\\sin\\\\), \\\\(\\cos\\\\), and \\\\(\\tan\\\\), respectively, on \\\\(\\[-\\pi/4, +\\pi/4\\]\\\\).\n*\n* -   Reduce the argument \\\\(x\\\\) to \\\\(y1+y2 = x-k\\pi/2\\\\) in \\\\(\\[-\\pi/4, +\\pi/4\\]\\\\), and let \\\\(n = k \\mod 4\\\\).\n*\n* -   We have\n*\n*     | n | sin(x) | cos(x) | tan(x) |\n*     | - | ------ | ------ | ------ |\n*     | 0 |    S   |    C   |   T    |\n*     | 1 |    C   |   -S   |  -1/T  |\n*     | 2 |   -S   |   -C   |   T    |\n*     | 3 |   -C   |    S   |  -1/T  |\n*\n* @param {number} x - input value (in radians)\n* @returns {number} tangent\n*\n* @example\n* var v = tan( 0.0 );\n* // returns ~0.0\n*\n* @example\n* var v = tan( -3.141592653589793/4.0 );\n* // returns ~-1.0\n*\n* @example\n* var v = tan( 3.141592653589793/4.0 );\n* // returns ~1.0\n*\n* @example\n* var v = tan( NaN );\n* // returns NaN\n*/\nfunction tan( x ) {\n\tvar ix;\n\tvar n;\n\n\tix = getHighWord( x );\n\tix &= HIGH_WORD_ABS_MASK;\n\n\t// Case: |x| ~< π/4\n\tif ( ix <= HIGH_WORD_PIO4 ) {\n\t\t// Case: |x| < 2**-27\n\t\tif ( ix < HIGH_WORD_TWO_NEG_27 ) {\n\t\t\treturn x;\n\t\t}\n\t\treturn kernelTan( x, 0.0, 1 );\n\t}\n\t// Case: tan(Inf or NaN) is NaN\n\tif ( ix >= HIGH_WORD_EXPONENT_MASK ) {\n\t\treturn NaN;\n\t}\n\t// Argument reduction needed...\n\tn = rempio2( x, buffer );\n\treturn kernelTan( buffer[ 0 ], buffer[ 1 ], 1-((n&1)<<1) );\n}\n\n\n// EXPORTS //\n\nexport default tan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1995, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport ratval from './rational_pq.js';\n\n\n// VARIABLES //\n\n// log(2**127)\nvar MAXLOG = 8.8029691931113054295988e+01;\n\n\n// MAIN //\n\n/**\n* Computes the hyperbolic tangent of a double-precision floating-point number.\n*\n* ## Method\n*\n* For \\\\( |x| < 0.625 \\\\), we use a rational function of the form (Cody and Waite)\n*\n* ```tex\n* x + x^3 \\frac{\\mathrm{P}(x)}{\\mathrm{Q}(x)}\n* ```\n*\n* Otherwise,\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{tanh}(x) &= \\frac{\\operatorname{sinh}(x)}{\\operatorname{cosh(x)}} \\\\\n* &= 1 - \\frac{2}{e^{2x} + 1}\n* \\end{align*}\n* ```\n*\n* ## Notes\n*\n* -   Relative error:\n*\n*     | arithmetic | domain | # trials | peak    | rms     |\n*     |:----------:|:------:|:--------:|:-------:|:-------:|\n*     | DEC        | -2,2   | 50000    | 3.3e-17 | 6.4e-18 |\n*     | IEEE       | -2,2   | 30000    | 2.5e-16 | 5.8e-17 |\n*\n* @param {number} x - input value\n* @returns {number} hyperbolic tangent\n*\n* @example\n* var v = tanh( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = tanh( 2.0 );\n* // returns ~0.964\n*\n* @example\n* var v = tanh( -2.0 );\n* // returns ~-0.964\n*\n* @example\n* var v = tanh( NaN );\n* // returns NaN\n*/\nfunction tanh( x ) {\n\tvar s;\n\tvar z;\n\tz = abs( x );\n\tif ( z > 0.5*MAXLOG ) {\n\t\treturn ( x < 0.0 ) ? -1.0 : 1.0;\n\t}\n\tif ( z >= 0.625 ) {\n\t\ts = exp( 2.0 * z );\n\t\tz = 1.0 - ( 2.0/(s+1.0) );\n\t\tif ( x < 0.0 ) {\n\t\t\tz = -z;\n\t\t}\n\t} else {\n\t\tif ( x === 0.0 ) {\n\t\t\treturn x; // Handle `+-0`\n\t\t}\n\t\ts = x * x;\n\t\tz = x + ( x*s*ratval( s ) );\n\t}\n\treturn z;\n}\n\n\n// EXPORTS //\n\nexport default tanh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function (i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\)).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.3333333333333332;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -1614.6876844170845 + (x * (-99.28772310019185 + (x * (-0.9643991794250523 + (x * 0.0))))); // eslint-disable-line max-len\n\t\ts2 = 4844.063053251255 + (x * (2235.4883906010045 + (x * (112.81167849163293 + (x * 1.0))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (-0.9643991794250523 + (x * (-99.28772310019185 + (x * -1614.6876844170845))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (112.81167849163293 + (x * (2235.4883906010045 + (x * 4844.063053251255))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport atan2 from '@stdlib/math-base-special-atan2';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\n\n\n// MAIN //\n\n/**\n* Computes the argument of a double-precision complex floating-point number in radians.\n*\n* @param {Complex128} z - complex number\n* @returns {number} argument\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n*\n* var phi = cphase( new Complex128( 5.0, 3.0 ) );\n* // returns ~0.5404\n*/\nfunction cphase( z ) {\n\treturn atan2( imag( z ), real( z ) );\n}\n\n\n// EXPORTS //\n\nexport default cphase;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cphase from '@stdlib/math-base-special-cphase';\nimport cabs from '@stdlib/math-base-special-cabs';\n\n\n// MAIN //\n\n/**\n* Computes the absolute value and the phase of a double-precision complex floating-point number.\n*\n* @param {Complex128} z - complex number\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} absolute value and phase (in radians)\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n*\n* var o = cpolar( new Complex128( 5.0, 3.0 ), [ 0.0, 0.0 ], 1, 0 );\n* // returns [ ~5.83, ~0.5404 ]\n*/\nfunction cpolar( z, out, stride, offset ) {\n\tout[ offset ] = cabs( z );\n\tout[ offset+stride ] = cphase( z );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default cpolar;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport assign from './assign.js';\n\n\n// MAIN //\n\n/**\n* Computes the absolute value and the phase of a double-precision complex floating-point number.\n*\n* @param {Complex128} z - complex number\n* @returns {Array<number>} absolute value and phase (in radians)\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n*\n* var o = cpolar( new Complex128( 5.0, 3.0 ) );\n* // returns [ ~5.83, ~0.5404 ]\n*/\nfunction cpolar( z ) {\n\treturn assign( z, [ 0.0, 0.0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default cpolar;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the absolute value and the phase of a double-precision complex floating-point number.\n*\n* @module @stdlib/math-base-special-cpolar\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import cpolar from '@stdlib/math-base-special-cpolar';\n*\n* var o = cpolar( new Complex128( 5.0, 3.0 ) );\n* // returns [ ~5.83, ~0.5404 ]\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import Float64Array from '@stdlib/array-float64';\n* import cpolar from '@stdlib/math-base-special-cpolar';\n*\n* var out = new Float64Array( 2 );\n*\n* var v = cpolar.assign( new Complex128( 5.0, 3.0 ), out, 1, 0 );\n* // returns <Float64Array>[ ~5.83, ~0.5404 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport assign from './assign.js';\nimport main from './main.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport pow from '@stdlib/math-base-special-pow';\nimport abs from '@stdlib/math-base-special-abs';\nimport round from '@stdlib/math-base-special-round';\nimport MAX_SAFE_INTEGER from '@stdlib/constants-float64-max-safe-integer';\nimport MAX_EXP from '@stdlib/constants-float64-max-base10-exponent';\nimport MIN_EXP from '@stdlib/constants-float64-min-base10-exponent';\nimport MIN_EXP_SUBNORMAL from '@stdlib/constants-float64-min-base10-exponent-subnormal';\n\n\n// VARIABLES //\n\nvar MAX_INT = MAX_SAFE_INTEGER + 1;\nvar HUGE = 1.0e+308;\n\n\n// MAIN //\n\n/**\n* Rounds a double-precision floating-point number to the nearest multiple of \\\\(10^n\\\\).\n*\n* ## Method\n*\n* 1.  If \\\\(|x| <= 2^{53}\\\\) and \\\\(|n| <= 308\\\\), we can use the formula\n*\n*     ```tex\n*     \\operatorname{roundn}(x,n) = \\frac{\\operatorname{round}(x \\cdot 10^{-n})}{10^{-n}}\n*     ```\n*\n*     which shifts the decimal to the nearest multiple of \\\\(10^n\\\\), performs a standard \\\\(\\mathrm{round}\\\\) operation, and then shifts the decimal to its original position.\n*\n*     <!-- <note> -->\n*\n*     If \\\\(x \\cdot 10^{-n}\\\\) overflows, \\\\(x\\\\) lacks a sufficient number of decimal digits to have any effect when rounding. Accordingly, the rounded value is \\\\(x\\\\).\n*\n*     <!-- </note> -->\n*\n*     <!-- <note> -->\n*\n*     Note that rescaling \\\\(x\\\\) can result in unexpected behavior. For instance, the result of \\\\(\\operatorname{roundn}(0.2+0.1,-16)\\\\) is \\\\(0.3000000000000001\\\\) and not \\\\(0.3\\\\). While possibly unexpected, this is not a bug. The behavior stems from the fact that most decimal fractions cannot be exactly represented as floating-point numbers. And further, rescaling can lead to slightly different fractional values, which, in turn, affects the result of \\\\(\\mathrm{round}\\\\).\n*\n*     <!-- </note> -->\n*\n* 2.  If \\\\(n > 308\\\\), we recognize that the maximum absolute double-precision floating-point number is \\\\(\\approx 1.8\\mbox{e}308\\\\) and, thus, the result of rounding any possible finite number \\\\(x\\\\) to the nearest \\\\(10^n\\\\) is \\\\(0.0\\\\). To ensure consistent behavior with \\\\(\\operatorname{round}(x)\\\\), the sign of \\\\(x\\\\) is preserved.\n*\n* 3.  If \\\\(n < -324\\\\), \\\\(n\\\\) exceeds the maximum number of possible decimal places (such as with subnormal numbers), and, thus, the rounded value is \\\\(x\\\\).\n*\n* 4.  If \\\\(x > 2^{53}\\\\), \\\\(x\\\\) is **always** an integer (i.e., \\\\(x\\\\) has no decimal digits). If \\\\(n <= 0\\\\), the rounded value is \\\\(x\\\\).\n*\n* 5.  If \\\\(n < -308\\\\), we let \\\\(m = n + 308\\\\) and modify the above formula to avoid overflow.\n*\n*     ```tex\n*     \\operatorname{roundn}(x,n) = \\frac{\\biggl(\\frac{\\operatorname{round}( (x \\cdot 10^{308}) 10^{-m})}{10^{308}}\\biggr)}{10^{-m}}\n*     ```\n*\n*     If overflow occurs, the rounded value is \\\\(x\\\\).\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{roundn}(\\mathrm{NaN}, n) &= \\mathrm{NaN} \\\\\n* \\operatorname{roundn}(x, \\mathrm{NaN}) &= \\mathrm{NaN} \\\\\n* \\operatorname{roundn}(x, \\pm\\infty) &= \\mathrm{NaN} \\\\\n* \\operatorname{roundn}(\\pm\\infty, n) &= \\pm\\infty \\\\\n* \\operatorname{roundn}(\\pm 0, n) &= \\pm 0\n* \\end{align*}\n* ```\n*\n* ## Notes\n*\n* 1.  Alternative algorithms:\n*\n*     -   Round by [casting][1] \\\\(x\\\\) to an exponential string.\n*     -   Native Python implementation [1][2] and [2][3].\n*\n* [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\n* [2]: https://hg.python.org/releasing/2.7.9/file/tip/Objects/floatobject.c#l1082\n* [3]: https://hg.python.org/releasing/2.7.9/file/tip/Objects/floatobject.c#l1226\n*\n* @param {number} x - input value\n* @param {integer} n - integer power of `10`\n* @returns {number} rounded value\n*\n* @example\n* // Round a value to 2 decimal places:\n* var v = roundn( 3.141592653589793, -2 );\n* // returns 3.14\n*\n* @example\n* // If n = 0, `roundn` behaves like `round`:\n* var v = roundn( 3.141592653589793, 0 );\n* // returns 3.0\n*\n* @example\n* // Round a value to the nearest thousand:\n* var v = roundn( 12368.0, 3 );\n* // returns 12000.0\n*/\nfunction roundn( x, n ) {\n\tvar s;\n\tvar y;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( n ) ||\n\t\tisInfinite( n )\n\t) {\n\t\treturn NaN;\n\t}\n\tif (\n\t\t// Handle infinities...\n\t\tisInfinite( x ) ||\n\n\t\t// Handle +-0...\n\t\tx === 0.0 ||\n\n\t\t// If `n` exceeds the maximum number of feasible decimal places (such as with subnormal numbers), nothing to round...\n\t\tn < MIN_EXP_SUBNORMAL ||\n\n\t\t// If `|x|` is large enough, no decimals to round...\n\t\t( abs( x ) > MAX_INT && n <= 0 )\n\t) {\n\t\treturn x;\n\t}\n\t// The maximum absolute double is ~1.8e308. Accordingly, any possible finite `x` rounded to the nearest >=10^309 is 0.0.\n\tif ( n > MAX_EXP ) {\n\t\treturn 0.0 * x; // preserve the sign (same behavior as round)\n\t}\n\t// If we overflow, return `x`, as the number of digits to the right of the decimal is too small (i.e., `x` is too large / lacks sufficient fractional precision) for there to be any effect when rounding...\n\tif ( n < MIN_EXP ) {\n\t\ts = pow( 10.0, -(n + MAX_EXP) );\n\t\ty = (x*HUGE) * s; // order of operation matters!\n\t\tif ( isInfinite( y ) ) {\n\t\t\treturn x;\n\t\t}\n\t\treturn ( round(y)/HUGE ) / s;\n\t}\n\ts = pow( 10.0, -n );\n\ty = x * s;\n\tif ( isInfinite( y ) ) {\n\t\treturn x;\n\t}\n\treturn round( y ) / s;\n}\n\n\n// EXPORTS //\n\nexport default roundn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1995, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport LN2 from '@stdlib/constants-float64-ln-two';\nimport rateval from './rational_pq.js';\n\n\n// VARIABLES //\n\n// ln(2^1024)\nvar MAXLOG = 7.09782712893383996843e2;\n\n// ln(2^-1022)\nvar MINLOG = -7.08396418532264106224e2;\n\nvar POS_OVERFLOW = MAXLOG + LN2;\nvar NEG_OVERFLOW = MINLOG - LN2;\n\nvar LARGE = MAXLOG - LN2;\n\n\n// MAIN //\n\n/**\n* Computes the hyperbolic sine of a double-precision floating-point number.\n*\n* ## Method\n*\n* The range is partitioned into two segments. If \\\\( |x| \\le 1 \\\\), we use a rational function of the form\n*\n* ```tex\n* x + x^3 \\frac{\\mathrm{P}(x)}{\\mathrm{Q}(x)}\n* ```\n*\n* Otherwise, the calculation is\n*\n* ```tex\n* \\operatorname{sinh}(x) = \\frac{ e^x - e^{-x} }{2}.\n* ```\n*\n* ## Notes\n*\n* -   Relative error:\n*\n*     | arithmetic | domain   | # trials | peak    | rms     |\n*     |:----------:|:--------:|:--------:|:-------:|:-------:|\n*     | DEC        | +- 88    | 50000    | 4.0e-17 | 7.7e-18 |\n*     | IEEE       | +-MAXLOG | 30000    | 2.6e-16 | 5.7e-17 |\n*\n* @param {number} x - input value\n* @returns {number} hyperbolic sine\n*\n* @example\n* var v = sinh( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = sinh( 2.0 );\n* // returns ~3.627\n*\n* @example\n* var v = sinh( -2.0 );\n* // returns ~-3.627\n*\n* @example\n* var v = sinh( NaN );\n* // returns NaN\n*/\nfunction sinh( x ) {\n\tvar a;\n\tif ( x === 0.0 ) {\n\t\treturn x; // handles `+-0`\n\t}\n\tif ( x > POS_OVERFLOW || x < NEG_OVERFLOW ) {\n\t\treturn ( x > 0.0 ) ? PINF : NINF;\n\t}\n\ta = abs( x );\n\tif ( a > 1.0 ) {\n\t\tif ( a >= LARGE ) {\n\t\t\ta = exp( 0.5*a );\n\t\t\ta *= 0.5 * a;\n\t\t\tif ( x < 0.0 ) {\n\t\t\t\ta = -a;\n\t\t\t}\n\t\t\treturn a;\n\t\t}\n\t\ta = exp( a );\n\t\ta = (0.5*a) - (0.5/a);\n\t\tif ( x < 0.0 ) {\n\t\t\ta = -a;\n\t\t}\n\t\treturn a;\n\t}\n\ta *= a;\n\treturn x + ( x*a*rateval( a ) );\n}\n\n\n// EXPORTS //\n\nexport default sinh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function (i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\)).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.16666666666666666;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -351754.9648081514 + (x * (-11561.443576500522 + (x * (-163.72585752598383 + (x * -0.789474443963537))))); // eslint-disable-line max-len\n\t\ts2 = -2110529.7888489086 + (x * (36157.827983443196 + (x * (-277.7110814206028 + (x * 1.0))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.789474443963537 + (x * (-163.72585752598383 + (x * (-11561.443576500522 + (x * -351754.9648081514))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (-277.7110814206028 + (x * (36157.827983443196 + (x * -2110529.7888489086))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\n\n\n// VARIABLES //\n\n// π / 180.0\nvar PI_DIV_180 = float64ToFloat32( 1.7453292519943295e-2 );\n\n\n// MAIN //\n\n/**\n* Converts an angle from degrees to radians (single-precision).\n*\n* @param {number} x - angle in degrees\n* @returns {number} angle in radians\n*\n* @example\n* var r = deg2radf( 90.0 );\n* // returns ~1.571\n*\n* @example\n* var r = deg2radf( -45.0 );\n* // returns ~-0.785\n*\n* @example\n* var r = deg2radf( NaN );\n* // returns NaN\n*/\nfunction deg2radf( x ) {\n\treturn float64ToFloat32( float64ToFloat32( x ) * PI_DIV_180 );\n}\n\n\n// EXPORTS //\n\nexport default deg2radf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_53_0/libs/math/doc/sf_and_dist/html/math_toolkit/special/sf_gamma/digamma.html}. The implementation follows the original but has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\nimport tan from '@stdlib/math-base-special-tan';\nimport PI from '@stdlib/constants-float64-pi';\nimport asymptoticApprox from './asymptotic_expansion.js';\nimport rationalApprox from './rational_approximation.js';\n\n\n// VARIABLES //\n\nvar MIN_SAFE_ASYMPTOTIC = 10.0; // BIG!\n\n\n// MAIN //\n\n/**\n* Evaluates the digamma function.\n*\n* ## Method\n*\n* 1.  For \\\\(x < 0\\\\), we use the reflection formula\n*\n*     ```tex\n*     \\psi(1-x) = \\psi(x) + \\frac{\\pi}{\\tan(\\pi x)}\n*     ```\n*\n*     to make \\\\(x\\\\) positive.\n*\n* 2.  For \\\\(x \\in \\[0,1]\\\\), we use the recurrence relation\n*\n*     ```tex\n*     \\psi(x) = \\psi(x+1) - \\frac{1}{x}\n*     ```\n*\n*     to shift the evaluation range to \\\\(\\[1,2]\\\\).\n*\n* 3.  For \\\\(x \\in \\[1,2]\\\\), we use a rational approximation of the form\n*\n*     ```tex\n*     \\psi(x) = (x - \\mathrm{root})(Y + \\operatorname{R}(x-1))\n*     ```\n*\n*     where \\\\(\\mathrm{root}\\\\) is the location of the positive root of \\\\(\\psi\\\\), \\\\(Y\\\\) is a constant, and \\\\(R\\\\) is optimized for low absolute error compared to \\\\(Y\\\\).\n*\n*     <!-- <note>-->\n*\n*     Note that, since \\\\(\\mathrm{root}\\\\) is irrational, we need twice as many digits in \\\\(\\mathrm{root}\\\\) as in \\\\(x\\\\) in order to avoid cancellation error during subtraction, assuming \\\\(x\\\\) has an exact value. This means that, even if \\\\(x\\\\) is rounded to the next representable value, the result of \\\\(\\psi(x)\\\\) will not be zero.\n*\n*     <!-- </note> -->\n*\n*     <!-- <note> -->\n*\n*     This approach gives 17-digit precision.\n*\n*     <!-- </note> -->\n*\n* 4.  For \\\\(x \\in \\[2,\\mathrm{BIG}]\\\\), we use the recurrence relation\n*\n*     ```tex\n*     \\psi(x+1) = \\psi(x) + \\frac{1}{x}\n*     ```\n*\n*     to shift the evaluation range to \\\\(\\[1,2]\\\\).\n*\n* 5.  For \\\\(x > \\mathrm{BIG}\\\\), we use the asymptotic expression\n*\n*     ```tex\n*     \\psi(x) = \\ln(x) + \\frac{1}{2x} - \\biggl( \\frac{B_{21}}{2x^2} + \\frac{B_{22}}{4x^4} + \\frac{B_{23}}{6x^6} + \\ldots \\biggr)\n*     ```\n*\n*     This expansion, however, is divergent after a few terms. The number of terms depends on \\\\(x\\\\). Accordingly, we must choose a value of \\\\(\\mathrm{BIG}\\\\) which allows us to truncate the series at a term that is too small to have an effect on the result. Setting \\\\(\\mathrm{BIG} = 10\\\\), allows us to truncate the series early and evaluate as \\\\(1/x^2\\\\).\n*\n*     <!-- <note> -->\n*\n*     This approach gives 17-digit precision for \\\\(x \\geq 10\\\\).\n*\n*     <!-- </note> -->\n*\n* ## Notes\n*\n* -   Maximum deviation found: \\\\(1.466\\\\mbox{e-}18\\\\)\n* -   Max error found: \\\\(2.452\\mbox{e-}17\\\\) (double precision)\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = digamma( -2.5 );\n* // returns ~1.103\n*\n* @example\n* var v = digamma( 1.0 );\n* // returns ~-0.577\n*\n* @example\n* var v = digamma( 10.0 );\n* // returns ~2.252\n*\n* @example\n* var v = digamma( NaN );\n* // returns NaN\n*\n* @example\n* var v = digamma( -1.0 );\n* // returns NaN\n*/\nfunction digamma( x ) {\n\tvar rem;\n\tvar tmp;\n\tif ( isnan( x ) || x === 0.0 ) {\n\t\treturn NaN;\n\t}\n\t// If `x` is negative, use reflection...\n\tif ( x <= -1.0 ) {\n\t\t// Reflect:\n\t\tx = 1.0 - x;\n\n\t\t// Argument reduction for tan:\n\t\trem = x - floor(x);\n\n\t\t// Shift to negative if > 0.5:\n\t\tif ( rem > 0.5 ) {\n\t\t\trem -= 1.0;\n\t\t}\n\t\t// Check for evaluation at a negative pole:\n\t\tif ( rem === 0.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\ttmp = PI / tan( PI * rem );\n\t} else {\n\t\ttmp = 0.0;\n\t}\n\t// If we're above the lower-limit for the asymptotic expansion, then use it...\n\tif ( x >= MIN_SAFE_ASYMPTOTIC ) {\n\t\ttmp += asymptoticApprox( x );\n\t\treturn tmp;\n\t}\n\t// If x > 2, reduce to the interval [1,2]...\n\twhile ( x > 2.0 ) {\n\t\tx -= 1.0;\n\t\ttmp += 1.0/x;\n\t}\n\t// If x < 1, use recurrence to shift to > 1..\n\twhile ( x < 1.0 ) {\n\t\ttmp -= 1.0/x;\n\t\tx += 1.0;\n\t}\n\ttmp += rationalApprox( x );\n\treturn tmp;\n}\n\n\n// EXPORTS //\n\nexport default digamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_53_0/libs/math/doc/sf_and_dist/html/math_toolkit/special/sf_gamma/digamma.html}. The implementation follows the original but has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ln from '@stdlib/math-base-special-ln';\nimport polyval from './polyval_p.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the digamma function via asymptotic expansion.\n*\n* @private\n* @param {number} x - input value\n* @returns {number} function value\n*/\nfunction digamma( x ) {\n\tvar y;\n\tvar z;\n\tx -= 1.0;\n\ty = ln(x) + ( 1.0 / (2.0*x) );\n\tz = 1.0 / (x*x);\n\treturn y - ( z*polyval( z ) );\n}\n\n\n// EXPORTS //\n\nexport default digamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.08333333333333333;\n\t}\n\treturn 0.08333333333333333 + (x * (-0.008333333333333333 + (x * (0.003968253968253968 + (x * (-0.004166666666666667 + (x * (0.007575757575757576 + (x * (-0.021092796092796094 + (x * (0.08333333333333333 + (x * -0.4432598039215686))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport rateval from './rational_pq.js';\n\n\n// VARIABLES //\n\nvar root1 = 1569415565.0 / 1073741824.0;\nvar root2 = ( 381566830.0 / 1073741824.0 ) / 1073741824.0;\nvar root3 = 0.9016312093258695918615325266959189453125e-19;\nvar Y = 0.99558162689208984;\n\n\n// MAIN //\n\n/**\n* Evaluates the digamma function over interval `[1,2]`.\n*\n* @private\n* @param {number} x - input value\n* @returns {number} function value\n*/\nfunction digamma( x ) {\n\tvar g;\n\tvar r;\n\tg = x - root1;\n\tg -= root2;\n\tg -= root3;\n\tr = rateval( x-1.0 );\n\treturn (g*Y) + (g*r);\n}\n\n\n// EXPORTS //\n\nexport default digamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.25479851061131553;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.25479851061131553 + (x * (-0.3255503118680449 + (x * (-0.6503185377089651 + (x * (-0.28919126444774784 + (x * (-0.04525132144873906 + (x * (-0.002071332116774595 + (x * 0.0))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (2.076711702373047 + (x * (1.4606242909763516 + (x * (0.43593529692665967 + (x * (0.054151797245674226 + (x * (0.0021284987017821146 + (x * -5.578984132167551e-7))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (-0.002071332116774595 + (x * (-0.04525132144873906 + (x * (-0.28919126444774784 + (x * (-0.6503185377089651 + (x * (-0.3255503118680449 + (x * 0.25479851061131553))))))))))); // eslint-disable-line max-len\n\t\ts2 = -5.578984132167551e-7 + (x * (0.0021284987017821146 + (x * (0.054151797245674226 + (x * (0.43593529692665967 + (x * (1.4606242909763516 + (x * (2.076711702373047 + (x * 1.0))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_60_0/boost/math/special_functions/zeta.hpp}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport floor from '@stdlib/math-base-special-floor';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport sinpi from '@stdlib/math-base-special-sinpi';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport TWO_PI from '@stdlib/constants-float64-two-pi';\nimport SQRT_EPSILON from '@stdlib/constants-float64-sqrt-eps';\nimport LN_SQRT_TWO_PI from '@stdlib/constants-float64-ln-sqrt-two-pi';\nimport ODD_POSITIVE_INTEGERS from './odd_positive_integers.json';\nimport EVEN_NONNEGATIVE_INTEGERS from './even_nonnegative_integers.json';\nimport BERNOULLI from './bernoulli.json';\nimport rateval1 from './rational_p1q1.js';\nimport rateval2 from './rational_p2q2.js';\nimport rateval3 from './rational_p3q3.js';\nimport rateval4 from './rational_p4q4.js';\nimport rateval5 from './rational_p5q5.js';\nimport rateval6 from './rational_p6q6.js';\n\n\n// VARIABLES //\n\nvar MAX_BERNOULLI_2N = 129;\nvar MAX_FACTORIAL = 170; // TODO: consider making external constant\nvar MAX_LN = 709; // TODO: consider making external constant\nvar Y1 = 1.2433929443359375;\nvar Y3 = 0.6986598968505859375;\n\n\n// MAIN //\n\n/**\n* Evaluates the Riemann zeta function.\n*\n* ## Method\n*\n* 1.  First, we use the reflection formula\n*\n*     ```tex\n*     \\zeta(1-s) = 2 \\sin\\biggl(\\frac{\\pi(1-s)}{2}\\biggr)(2\\pi^{-s})\\Gamma(s)\\zeta(s)\n*     ```\n*\n*     to make \\\\(s\\\\) positive.\n*\n* 2.  For \\\\(s \\in (0,1)\\\\), we use the approximation\n*\n*     ```tex\n*     \\zeta(s) = \\frac{C + \\operatorname{R}(1-s) - s}{1-s}\n*     ```\n*\n*     with rational approximation \\\\(\\operatorname{R}(1-z)\\\\) and constant \\\\(C\\\\).\n*\n* 3.  For \\\\(s \\in (1,4)\\\\), we use the approximation\n*\n*     ```tex\n*     \\zeta(s) = C + \\operatorname{R}(s-n) + \\frac{1}{s-1}\n*     ```\n*\n*     with rational approximation \\\\(\\operatorname{R}(z-n)\\\\), constant \\\\(C\\\\), and integer \\\\(n\\\\).\n*\n* 4.  For \\\\(s > 4\\\\), we use the approximation\n*\n*     ```tex\n*     \\zeta(s) = 1 + e^{\\operatorname{R}(z-n)}\n*     ```\n*\n*     with rational approximation \\\\(\\operatorname{R}(z-n)\\\\) and integer \\\\(n\\\\).\n*\n* 5.  For negative odd integers, we use the closed form\n*\n*     ```tex\n*     \\zeta(-n) = \\frac{(-1)^n}{n+1} B_{n+1}\n*     ```\n*\n*     where \\\\(B_{n+1}\\\\) is a Bernoulli number.\n*\n* 6.  For negative even integers, we use the closed form\n*\n*     ```tex\n*     \\zeta(-2n) = 0\n*     ```\n*\n* 7.  For nonnegative even integers, we could use the closed form\n*\n*     ```tex\n*     \\zeta(2n) = \\frac{(-1)^{n-1}2^{2n-1}\\pi^{2n}}{(2n)!} B_{2n}\n*     ```\n*\n*     where \\\\(B_{2n}\\\\) is a Bernoulli number. However, to speed computation, we use precomputed values (Wolfram Alpha).\n*\n* 8.  For positive negative integers, we use precomputed values (Wolfram Alpha), as these values are useful for certain infinite series calculations.\n*\n* ## Notes\n*\n* -   \\\\(\\[\\approx 1.5\\mbox{e-}8, 1)\\\\)\n*\n*     -   max deviation: \\\\(2.020\\mbox{e-}18\\\\)\n*     -   expected error: \\\\(-2.020\\mbox{e-}18\\\\)\n*     -   max error found (double): \\\\(3.994987\\mbox{e-}17\\\\)\n*\n* -   \\\\(\\[1,2\\]\\\\)\n*\n*     -   max deviation: \\\\(9.007\\mbox{e-}20\\\\)\n*     -   expected error: \\\\(9.007\\mbox{e-}20\\\\)\n*\n* -   \\\\((2,4\\]\\\\)\n*\n*     -   max deviation: \\\\(5.946\\mbox{e-}22\\\\)\n*     -   expected error: \\\\(-5.946\\mbox{e-}22\\\\)\n*\n* -   \\\\((4,7\\]\\\\)\n*\n*     -   max deviation: \\\\(2.955\\mbox{e-}17\\\\)\n*     -   expected error: \\\\(2.955\\mbox{e-}17\\\\)\n*     -   max error found (double): \\\\(2.009135\\mbox{e-}16\\\\)\n*\n* -   \\\\((7,15)\\\\)\n*\n*     -   max deviation: \\\\(7.117\\mbox{e-}16\\\\)\n*     -   expected error: \\\\(7.117\\mbox{e-}16\\\\)\n*     -   max error found (double): \\\\(9.387771\\mbox{e-}16\\\\)\n*\n* -   \\\\(\\[15,36)\\\\)\n*\n*     -   max error (in interpolated form): \\\\(1.668\\mbox{e-}17\\\\)\n*     -   max error found (long double): \\\\(1.669714\\mbox{e-}17\\\\)\n*\n* @param {number} s - input value\n* @returns {number} function value\n*\n* @example\n* var v = zeta( 1.1 );\n* // returns ~10.584\n*\n* @example\n* var v = zeta( -4.0 );\n* // returns 0.0\n*\n* @example\n* var v = zeta( 70.0 );\n* // returns 1.0\n*\n* @example\n* var v = zeta( 0.5 );\n* // returns ~-1.46\n*\n* @example\n* var v = zeta( 1.0 ); // pole\n* // returns NaN\n*\n* @example\n* var v = zeta( NaN );\n* // returns NaN\n*/\nfunction zeta( s ) {\n\tvar tmp;\n\tvar sc;\n\tvar as;\n\tvar is;\n\tvar r;\n\tvar n;\n\n\t// Check for `NaN`:\n\tif ( isnan( s ) ) {\n\t\treturn NaN;\n\t}\n\t// Check for a pole:\n\tif ( s === 1.0 ) {\n\t\treturn NaN;\n\t}\n\t// Check for large value:\n\tif ( s >= 56.0 ) {\n\t\treturn 1.0;\n\t}\n\t// Check for a closed form (integers):\n\tif ( isInteger( s ) ) {\n\t\t// Cast `s` to a 32-bit signed integer:\n\t\tis = s|0; // asm type annotation\n\n\t\t// Check that `s` does not exceed MAX_INT32:\n\t\tif ( is === s ) {\n\t\t\tif ( is < 0 ) {\n\t\t\t\tas = (-is)|0; // asm type annotation\n\n\t\t\t\t// Check if even negative integer:\n\t\t\t\tif ( (as&1) === 0 ) {\n\t\t\t\t\treturn 0.0;\n\t\t\t\t}\n\t\t\t\tn = ( (as+1) / 2 )|0; // asm type annotation\n\n\t\t\t\t// Check if less than max Bernoulli number:\n\t\t\t\tif ( n <= MAX_BERNOULLI_2N ) {\n\t\t\t\t\treturn -BERNOULLI[ n ] / (as+1.0);\n\t\t\t\t}\n\t\t\t\t// Fall through...\n\t\t\t}\n\t\t\t// Check if even nonnegative integer:\n\t\t\telse if ( (is&1) === 0 ) {\n\t\t\t\treturn EVEN_NONNEGATIVE_INTEGERS[ is/2 ];\n\t\t\t}\n\t\t\t// Must be a odd positive integer:\n\t\t\telse {\n\t\t\t\treturn ODD_POSITIVE_INTEGERS[ (is-3)/2 ];\n\t\t\t}\n\t\t}\n\t\t// Fall through...\n\t}\n\tif ( abs(s) < SQRT_EPSILON ) {\n\t\treturn -0.5 - (LN_SQRT_TWO_PI * s);\n\t}\n\tsc = 1.0 - s;\n\tif ( s < 0.0 ) {\n\t\t// Check if even negative integer:\n\t\tif ( floor(s/2.0) === s/2.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\t// Swap `s` and `sc`:\n\t\ttmp = s;\n\t\ts = sc;\n\t\tsc = tmp;\n\n\t\t// Determine if computation will overflow:\n\t\tif ( s > MAX_FACTORIAL ) {\n\t\t\ttmp = sinpi( 0.5*sc ) * 2.0 * zeta( s );\n\t\t\tr = gammaln( s );\n\t\t\tr -= s * ln( TWO_PI );\n\t\t\tif ( r > MAX_LN ) {\n\t\t\t\treturn ( tmp < 0.0 ) ? NINF : PINF;\n\t\t\t}\n\t\t\treturn tmp * exp( r );\n\t\t}\n\t\treturn sinpi( 0.5*sc ) * 2.0 * pow( TWO_PI, -s ) * gamma( s ) * zeta( s ); // eslint-disable-line max-len\n\t}\n\tif ( s < 1.0 ) {\n\t\ttmp = rateval1( sc );\n\t\ttmp -= Y1;\n\t\ttmp += sc;\n\t\ttmp /= sc;\n\t\treturn tmp;\n\t}\n\tif ( s <= 2.0 ) {\n\t\tsc = -sc;\n\t\ttmp = 1.0 / sc;\n\t\treturn tmp + rateval2( sc );\n\t}\n\tif ( s <= 4.0 ) {\n\t\ttmp = Y3 + ( 1.0 / (-sc) );\n\t\treturn tmp + rateval3( s-2.0 );\n\t}\n\tif ( s <= 7.0 ) {\n\t\ttmp = rateval4( s-4.0 );\n\t\treturn 1.0 + exp( tmp );\n\t}\n\tif ( s < 15.0 ) {\n\t\ttmp = rateval5( s-7.0 );\n\t\treturn 1.0 + exp( tmp );\n\t}\n\tif ( s < 36.0 ) {\n\t\ttmp = rateval6( s-15.0 );\n\t\treturn 1.0 + exp( tmp );\n\t}\n\t// s < 56\n\treturn 1.0 + pow( 2.0, -s );\n}\n\n\n// EXPORTS //\n\nexport default zeta;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.2433929443359375;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.2433929443359375 + (x * (-0.4909247051635357 + (x * (0.055761621477604675 + (x * (-0.003209124988790859 + (x * (0.0004515345286457964 + (x * -0.000009332412703570615))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (-0.27996033431034445 + (x * (0.04196762233099861 + (x * (-0.00413421406552171 + (x * (0.00024978985622317937 + (x * -0.000010185578841856403))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.000009332412703570615 + (x * (0.0004515345286457964 + (x * (-0.003209124988790859 + (x * (0.055761621477604675 + (x * (-0.4909247051635357 + (x * 0.2433929443359375))))))))); // eslint-disable-line max-len\n\t\ts2 = -0.000010185578841856403 + (x * (0.00024978985622317937 + (x * (-0.00413421406552171 + (x * (0.04196762233099861 + (x * (-0.27996033431034445 + (x * 1.0))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.5772156649015329;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.5772156649015329 + (x * (0.24321064694010716 + (x * (0.04173646739882165 + (x * (0.003902520870728433 + (x * (0.0002496063671518772 + (x * 0.00001101084409767329))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.29520127712663174 + (x * (0.043460910607305496 + (x * (0.004349305820858264 + (x * (0.0002557842261404885 + (x * 0.000010991819782396113))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.00001101084409767329 + (x * (0.0002496063671518772 + (x * (0.003902520870728433 + (x * (0.04173646739882165 + (x * (0.24321064694010716 + (x * 0.5772156649015329))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.000010991819782396113 + (x * (0.0002557842261404885 + (x * (0.004349305820858264 + (x * (0.043460910607305496 + (x * (0.29520127712663174 + (x * 1.0))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.053725830002359504;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.053725830002359504 + (x * (0.04451634732923656 + (x * (0.012867767353451996 + (x * (0.0009754177045739176 + (x * (0.00007698751015736541 + (x * (0.000003280325100003831 + (x * 0.0))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.3338319455303405 + (x * (0.048779843129140764 + (x * (0.0047903970857355845 + (x * (0.00027077670395633634 + (x * (0.000010695186753205734 + (x * 2.3627662397497864e-8))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (0.000003280325100003831 + (x * (0.00007698751015736541 + (x * (0.0009754177045739176 + (x * (0.012867767353451996 + (x * (0.04451634732923656 + (x * -0.053725830002359504))))))))))); // eslint-disable-line max-len\n\t\ts2 = 2.3627662397497864e-8 + (x * (0.000010695186753205734 + (x * (0.00027077670395633634 + (x * (0.0047903970857355845 + (x * (0.048779843129140764 + (x * (0.3338319455303405 + (x * 1.0))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -2.497101906022594;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -2.497101906022594 + (x * (-2.600133018094757 + (x * (-0.9392604353771099 + (x * (-0.13844861799574154 + (x * (-0.007017212405498024 + (x * (-0.000022925731059489392 + (x * (0.0 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.7060390259377451 + (x * (0.15739599649558628 + (x * (0.010611795097684508 + (x * (-0.000036910273311764616 + (x * (0.0000049340956392759 + (x * (-2.3405548702528722e-7 + (x * (7.188337293654598e-9 + (x * -1.1292001134749475e-10))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (0.0 + (x * (0.0 + (x * (-0.000022925731059489392 + (x * (-0.007017212405498024 + (x * (-0.13844861799574154 + (x * (-0.9392604353771099 + (x * (-2.600133018094757 + (x * -2.497101906022594))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = -1.1292001134749475e-10 + (x * (7.188337293654598e-9 + (x * (-2.3405548702528722e-7 + (x * (0.0000049340956392759 + (x * (-0.000036910273311764616 + (x * (0.010611795097684508 + (x * (0.15739599649558628 + (x * (0.7060390259377451 + (x * 1.0))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -4.785580284951356;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -4.785580284951356 + (x * (-1.8919736488197254 + (x * (-0.21140713487441282 + (x * (-0.0001892047582600767 + (x * (0.0011514092388917874 + (x * (0.00006399492042131645 + (x * (0.000001393489324453249 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.24434533737818856 + (x * (0.008733707544922887 + (x * (-0.0011759276533443448 + (x * (-0.00007437436828999331 + (x * (-0.0000021750464515767985 + (x * (4.710012640030765e-9 + (x * (-8.333784406253855e-11 + (x * 6.998415452048457e-13))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (0.0 + (x * (0.000001393489324453249 + (x * (0.00006399492042131645 + (x * (0.0011514092388917874 + (x * (-0.0001892047582600767 + (x * (-0.21140713487441282 + (x * (-1.8919736488197254 + (x * -4.785580284951356))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 6.998415452048457e-13 + (x * (-8.333784406253855e-11 + (x * (4.710012640030765e-9 + (x * (-0.0000021750464515767985 + (x * (-0.00007437436828999331 + (x * (-0.0011759276533443448 + (x * (0.008733707544922887 + (x * (0.24434533737818856 + (x * 1.0))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -10.39489505733089;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -10.39489505733089 + (x * (-2.858272196711067 + (x * (-0.34772826653924577 + (x * (-0.025115606465534634 + (x * (-0.001194591734169687 + (x * (-0.00003825293235079675 + (x * (-7.855236337967234e-7 + (x * -8.214657090954655e-9))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.2081963335726719 + (x * (0.019568765731720502 + (x * (0.0011107963810248593 + (x * (0.000040850774626603926 + (x * (9.555611230656935e-7 + (x * (1.185071534740229e-8 + (x * 2.226094836273526e-15))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -8.214657090954655e-9 + (x * (-7.855236337967234e-7 + (x * (-0.00003825293235079675 + (x * (-0.001194591734169687 + (x * (-0.025115606465534634 + (x * (-0.34772826653924577 + (x * (-2.858272196711067 + (x * -10.39489505733089))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 2.226094836273526e-15 + (x * (1.185071534740229e-8 + (x * (9.555611230656935e-7 + (x * (0.000040850774626603926 + (x * (0.0011107963810248593 + (x * (0.019568765731720502 + (x * (0.2081963335726719 + (x * 1.0))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original Julia code and copyright notice are from the [Julia library]{@link https://github.com/JuliaMath/SpecialFunctions.jl/blob/master/src/ellip.jl}. The implementation has been modified for JavaScript.\n*\n* ```text\n* The MIT License (MIT)\n*\n* Copyright (c) 2017 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and others:\n*\n* https://github.com/JuliaMath/SpecialFunctions.jl/graphs/contributors\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport HALF_PI from '@stdlib/constants-float64-half-pi';\nimport poly1 from './poly_p1.js';\nimport poly2 from './poly_p2.js';\nimport poly3 from './poly_p3.js';\nimport poly4 from './poly_p4.js';\nimport poly5 from './poly_p5.js';\nimport poly6 from './poly_p6.js';\nimport poly7 from './poly_p7.js';\nimport poly8 from './poly_p8.js';\nimport poly9 from './poly_p9.js';\nimport poly10 from './poly_p10.js';\nimport poly11 from './poly_p11.js';\nimport poly12 from './poly_p12.js';\n\n\n// VARIABLES //\n\nvar ONE_DIV_PI = 0.3183098861837907;\n\n\n// MAIN //\n\n/**\n* Computes the complete elliptic integral of the first kind.\n*\n* ## Method\n*\n* -   The function computes the complete elliptic integral of the first kind in terms of parameter \\\\( m \\\\), instead of the elliptic modulus \\\\( k \\\\).\n*\n*     ```tex\n*     K(m) = \\int_0^{\\pi/2} \\frac{1}{\\sqrt{1 - m sin^2\\theta}} d\\theta\n*     ```\n*\n* -   The function uses a piecewise approximation polynomial as given in Fukushima (2009).\n*\n* -   For \\\\( m < 0 \\\\), the implementation follows Fukushima (2015). Namely, we use Equation 17.4.17 from the _Handbook of Mathematical Functions_ (Abramowitz and Stegun) to compute the function for \\\\( m < 0 \\\\) in terms of the piecewise polynomial representation of \\\\( m > 0 )).\n*\n*     ```tex\n*     F(\\phi|-m) = (1+m)^(-1/2) K(m/(1+m)) - (1+m)^(-1/2) F(\\pi/2-\\phi|m/(1+m))\n*     ```\n*\n*     Since \\\\( K(m) \\\\) is equivalent to \\\\( F(\\phi|m) \\\\), the above reduces to\n*\n*     ```tex\n*     F(\\phi|-m) = (1+m)^(-1/2) K(m/(1+m))\n*     ```\n*\n* ## References\n*\n* -   Fukushima, Toshio. 2009. \"Fast computation of complete elliptic integrals and Jacobian elliptic functions.\" _Celestial Mechanics and Dynamical Astronomy_ 105 (4): 305. doi:[10.1007/s10569-009-9228-z](https://doi.org/10.1007/s10569-009-9228-z).\n* -   Fukushima, Toshio. 2015. \"Precise and fast computation of complete elliptic integrals by piecewise minimax rational function approximation.\" _Journal of Computational and Applied Mathematics_ 282 (July): 71–76. doi:[10.1016/j.cam.2014.12.038](https://doi.org/10.1016/j.cam.2014.12.038).\n*\n* @param {number} m - input value\n* @returns {number} evaluated elliptic integral\n*\n* @example\n* var v = ellipk( 0.5 );\n* // returns ~1.854\n*\n* v = ellipk( 2.0 );\n* // returns NaN\n*\n* v = ellipk( -1.0 );\n* // returns ~1.311\n*\n* v = ellipk( Infinity );\n* // returns NaN\n*\n* v = ellipk( -Infinity );\n* // returns NaN\n*\n* v = ellipk( NaN );\n* // returns NaN\n*/\nfunction ellipk( m ) {\n\tvar FLG;\n\tvar kdm;\n\tvar td;\n\tvar qd;\n\tvar t;\n\tvar x;\n\n\tx = m;\n\tif ( m < 0.0 ) {\n\t\tx = m / ( m - 1.0 );\n\t\tFLG = true;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn HALF_PI;\n\t}\n\tif ( x === 1.0 ) {\n\t\treturn PINF;\n\t}\n\tif ( x > 1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.1 ) {\n\t\tt = poly1( x - 0.05 );\n\t} else if ( x < 0.2 ) {\n\t\tt = poly2( x - 0.15 );\n\t} else if ( x < 0.3 ) {\n\t\tt = poly3( x - 0.25 );\n\t} else if ( x < 0.4 ) {\n\t\tt = poly4( x - 0.35 );\n\t} else if ( x < 0.5 ) {\n\t\tt = poly5( x - 0.45 );\n\t} else if ( x < 0.6 ) {\n\t\tt = poly6( x - 0.55 );\n\t} else if ( x < 0.7 ) {\n\t\tt = poly7( x - 0.65 );\n\t} else if ( x < 0.8 ) {\n\t\tt = poly8( x - 0.75 );\n\t} else if ( x < 0.85 ) {\n\t\tt = poly9( x - 0.825 );\n\t} else if ( x < 0.9 ) {\n\t\tt = poly10( x - 0.875 );\n\t} else {\n\t\ttd = 1.0 - x;\n\t\tqd = poly11( td );\n\t\tkdm = poly12( td - 0.05 );\n\t\tt = -ln( qd ) * ( kdm * ONE_DIV_PI );\n\t}\n\tif ( FLG ) {\n\t\t// Complete the transformation mentioned above for m < 0:\n\t\treturn t / sqrt( 1.0 - m );\n\t}\n\treturn t;\n}\n\n\n// EXPORTS //\n\nexport default ellipk;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.5910034537907922;\n\t}\n\treturn 1.5910034537907922 + (x * (0.41600074399178694 + (x * (0.24579151426410342 + (x * (0.17948148291490615 + (x * (0.14455605708755515 + (x * (0.12320099331242772 + (x * (0.10893881157429353 + (x * (0.09885340987159291 + (x * (0.09143962920174975 + (x * (0.0858425915954139 + (x * 0.08154111871830322))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.63525673226458;\n\t}\n\treturn 1.63525673226458 + (x * (0.4711906261487323 + (x * (0.3097284108314996 + (x * (0.2522083117731357 + (x * (0.22672562321968465 + (x * (0.21577444672958598 + (x * (0.21310877187734892 + (x * (0.21602912460518828 + (x * (0.2232558316330579 + (x * (0.23418050129420992 + (x * (0.24855768297226408 + (x * 0.26636380989261754))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.685750354812596;\n\t}\n\treturn 1.685750354812596 + (x * (0.5417318486132803 + (x * (0.40152443839069024 + (x * (0.3696424734208891 + (x * (0.37606071535458363 + (x * (0.4052358870851259 + (x * (0.45329438175399905 + (x * (0.5205189476511842 + (x * (0.609426039204995 + (x * (0.7242635222829089 + (x * (0.8710138477098124 + (x * 1.057652872753547))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.7443505972256133;\n\t}\n\treturn 1.7443505972256133 + (x * (0.6348642753719353 + (x * (0.5398425641644455 + (x * (0.5718927051937874 + (x * (0.6702951362654062 + (x * (0.8325865900109772 + (x * (1.0738574482479333 + (x * (1.4220914606754977 + (x * (1.9203871834023047 + (x * (2.6325525483316543 + (x * (3.6521097473190394 + (x * (5.115867135558866 + (x * 7.224080007363877))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.8138839368169826;\n\t}\n\treturn 1.8138839368169826 + (x * (0.7631632457005573 + (x * (0.7619286053215958 + (x * (0.9510746536684279 + (x * (1.315180671703161 + (x * (1.9285606934774109 + (x * (2.9375093425313787 + (x * (4.594894405442878 + (x * (7.33007122188172 + (x * (11.871512597425301 + (x * (19.45851374822938 + (x * (32.20638657246427 + (x * (53.73749198700555 + (x * 90.27388602941))))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.8989249102715535;\n\t}\n\treturn 1.8989249102715535 + (x * (0.9505217946182445 + (x * (1.1510775899590158 + (x * (1.7502391069863006 + (x * (2.952676812636875 + (x * (5.285800396121451 + (x * (9.83248571665998 + (x * (18.787148683275596 + (x * (36.61468615273698 + (x * (72.45292395127771 + (x * (145.1079577347069 + (x * (293.4786396308497 + (x * (598.385181505501 + (x * (1228.4200130758634 + (x * 2536.5297553827645))))))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 2.0075983984243764;\n\t}\n\treturn 2.0075983984243764 + (x * (1.2484572312123474 + (x * (1.9262346570764797 + (x * (3.7512896400875877 + (x * (8.119944554932045 + (x * (18.665721308735552 + (x * (44.603924842914374 + (x * (109.50920543094983 + (x * (274.2779548232414 + (x * (697.5598008606327 + (x * (1795.7160145002472 + (x * (4668.38171679039 + (x * (12235.762468136643 + (x * (32290.17809718321 + (x * (85713.07608195965 + (x * (228672.1890493117 + (x * 612757.2711915852))))))))))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 2.1565156474996434;\n\t}\n\treturn 2.1565156474996434 + (x * (1.7918056418494632 + (x * (3.8267512874657132 + (x * (10.386724683637972 + (x * (31.403314054680703 + (x * (100.92370394986955 + (x * (337.3268282632273 + (x * (1158.7079305678278 + (x * (4060.9907421936323 + (x * (14454.001840343448 + (x * (52076.661075994045 + (x * (189493.65914621568 + (x * (695184.5762413896 + (x * (2567994.048255285 + (x * (9541921.966748387 + (x * (35634927.44218076 + (x * (133669298.46120408 + (x * (503352186.68662846 + (x * (1901975729.53866 + (x * 7208915015.330104))))))))))))))))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 2.3181226217125106;\n\t}\n\treturn 2.3181226217125106 + (x * (2.6169201502912327 + (x * (7.897935075731356 + (x * (30.502397154466724 + (x * (131.48693655235286 + (x * (602.9847637356492 + (x * (2877.024617809973 + (x * (14110.519919151804 + (x * (70621.4408815654 + (x * (358977.266582531 + (x * (1847238.2637239718 + (x * (9600515.416049214 + (x * (50307677.08502367 + (x * (265444188.6527128 + (x * (1408862325.0287027 + (x * 7515687935.373775))))))))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 2.473596173751344;\n\t}\n\treturn 2.473596173751344 + (x * (3.727624244118099 + (x * (15.607393035549306 + (x * (84.12850842805888 + (x * (506.98181970406137 + (x * (3252.2770581451236 + (x * (21713.242419574344 + (x * (149037.04518909327 + (x * (1043999.3310899908 + (x * (7427974.817042039 + (x * (53503839.67558661 + (x * (389249886.99487084 + (x * (2855288351.1008105 + (x * (21090077038.76684 + (x * (156699833947.7902 + (x * (1170222242422.44 + (x * (8777948323668.9375 + (x * (66101242752484.95 + (x * (499488053713388.8 + (x * 37859743397240296.0))))))))))))))))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn 0.0 + (x * (0.0625 + (x * (0.03125 + (x * (0.0205078125 + (x * (0.01513671875 + (x * (0.011934280395507812 + (x * (0.009816169738769531 + (x * (0.008315593004226685 + (x * (0.007199153304100037 + (x * (0.00633745662344154 + (x * (0.00565311038371874 + (x * (0.005097046040418718 + (x * (0.004636680381850056 + (x * (0.004249547423822886 + (x * 0.003919665602267974))))))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.5910034537907922;\n\t}\n\treturn 1.5910034537907922 + (x * (0.41600074399178694 + (x * (0.24579151426410342 + (x * (0.17948148291490615 + (x * (0.14455605708755515 + (x * (0.12320099331242772 + (x * (0.10893881157429353 + (x * (0.09885340987159291 + (x * (0.09143962920174975 + (x * (0.0858425915954139 + (x * 0.08154111871830322))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nimport { assign as sincos } from '@stdlib/math-base-special-sincos';\nimport ellipk from '@stdlib/math-base-special-ellipk';\nimport floor from '@stdlib/math-base-special-floor';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport cosh from '@stdlib/math-base-special-cosh';\nimport sinh from '@stdlib/math-base-special-sinh';\nimport tanh from '@stdlib/math-base-special-tanh';\nimport atan from '@stdlib/math-base-special-atan';\nimport asin from '@stdlib/math-base-special-asin';\nimport sin from '@stdlib/math-base-special-sin';\nimport cos from '@stdlib/math-base-special-cos';\nimport abs from '@stdlib/math-base-special-abs';\nimport SQRT_EPS from '@stdlib/constants-float64-sqrt-eps';\nimport EPS from '@stdlib/constants-float64-eps';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// VARIABLES //\n\nvar debug = logger( 'elilpj:assign' );\nvar tmp4 = [ 0.0, 0.0, 0.0, 0.0 ];\nvar tmp2 = [ 0.0, 0.0 ];\nvar ca = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n\n\n// MAIN //\n\n/**\n* Computes the Jacobi elliptic functions sn, cn, dn, and Jacobi amplitude am.\n*\n* @param {number} u - input value\n* @param {number} m - modulus `m`, equivalent to `k²`\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var v = ellipj( 0.3, 0.5, [ 0.0, 0.0, 0.0, 0.0 ], 1, 0 );\n* // returns [ ~0.293, ~0.956, ~0.978, ~0.298 ]\n*\n* @example\n* v = ellipj( 0.0, 0.0, [ 0.0, 0.0, 0.0, 0.0 ], 1, 0 );\n* // returns [ ~0.0, ~1.0, ~1.0, ~0.0 ]\n*\n* @example\n* v = ellipj( Infinity, 1.0, [ 0.0, 0.0, 0.0, 0.0 ], 1, 0 );\n* // returns [ ~1.0, ~0.0, ~0.0, ~1.571 ]\n*\n* @example\n* v = ellipj( 0.0, -2.0, [ 0.0, 0.0, 0.0, 0.0 ], 1, 0 );\n* // returns [ ~0.0, ~1.0, ~1.0, NaN ]\n*\n* @example\n* v = ellipj( NaN, NaN, [ 0.0, 0.0, 0.0, 0.0 ], 1, 0 );\n* // returns [ NaN, NaN, NaN, NaN ]\n*/\nfunction assign(u, m, out, stride, offset) {\n\tvar dnDenom;\n\tvar NANFLG;\n\tvar uK2cen;\n\tvar k1inv;\n\tvar sechu;\n\tvar sinhu;\n\tvar tanhu;\n\tvar phi0;\n\tvar phi1;\n\tvar atmp;\n\tvar FLG;\n\tvar gdu;\n\tvar uK2;\n\tvar uK4;\n\tvar mu;\n\tvar K2;\n\tvar K4;\n\tvar u0;\n\tvar sn;\n\tvar cn;\n\tvar dn;\n\tvar am;\n\tvar k;\n\tvar s;\n\tvar c;\n\tvar f;\n\tvar a;\n\tvar b;\n\tvar N;\n\n\tif ( m < 0.0 ) {\n\t\t// A&S 16.10.1 for a negative parameter, mapping -m to 0 < mu < 1\n\t\tmu = -m / ( 1.0 - m );\n\t\tk1inv = sqrt( 1.0 - m );\n\t\tassign( u * k1inv, mu, tmp4, 1, 0 );\n\t\tsn = ( tmp4[ 0 ] / tmp4[ 2 ] ) / k1inv;\n\t\tcn = tmp4[ 1 ] / tmp4[ 2 ];\n\t\tdn = 1.0 / tmp4[ 2 ];\n\t\tam = NaN;\n\t} else if ( m > 1.0 ) {\n\t\t// A&S 16.11.1 for reciprocal parameter, mapping m > 1 to 0 < mu < 1\n\t\tk = sqrt( m );\n\t\tassign( u * k, 1.0 / m, tmp4, 1, 0 );\n\t\tsn = tmp4[ 0 ] / k;\n\t\tcn = tmp4[ 2 ];\n\t\tdn = tmp4[ 1 ];\n\t\tam = NaN;\n\t} else if ( m === 0.0 ) {\n\t\t// A&S table 16.6, limiting case m = 0: circular trigonometric functions\n\t\tsincos( u, tmp2, 1, 0 );\n\t\tsn = tmp2[ 0 ];\n\t\tcn = tmp2[ 1 ];\n\t\tdn = 1.0;\n\t\tam = u;\n\t} else if ( m === 1.0 ) {\n\t\t// A&S table 16.6: limiting case m = 1: hyperbolic functions\n\t\tsn = tanh( u );\n\t\tcn = 1.0 / cosh( u );\n\t\tdn = cn;\n\t\tam = atan( sinh( u ) );\n\t} else if ( m < SQRT_EPS ) {\n\t\t// A&S 16.13.1 for small-u approximations. Additionally, compute K at extra cost in order to ensure returned values are correct outside the range [0, K].\n\t\tK4 = 4.0 * ellipk( m );\n\t\tu0 = ( ( u % K4 ) + K4 ) % K4;\n\t\tsincos( u0, tmp2, 1, 0 );\n\t\ts = tmp2[ 0 ];\n\t\tc = tmp2[ 1 ];\n\t\tf = 0.25 * m * ( u0 - ( s * c ) );\n\t\tsn = s - ( f * c );\n\t\tcn = c + ( f * s );\n\t\tdn = 1.0 - ( 0.5 * m * s * s );\n\t\tam = u - ( 0.25 * m * ( u - ( s * c ) ) );\n\t} else if ( m > 1.0 - SQRT_EPS ) {\n\t\t// A&S 16.15.1 - 16.15.4 for near-unity approximations. Additionally, compute K at extra cost so that we may reflect as needed to ensure the returned values are correct.\n\n\t\t// Reduce by the half-period 2K, centered about u = 0\n\t\tK2 = ellipk( m ) * 2.0;\n\t\tuK2cen = ( u / K2 ) + 0.5;\n\t\tuK2 = K2 * ( ( uK2cen % 1.0 ) - 0.5 );\n\n\t\t// Flip sn and cn in this range to get the reflections correct. We must be careful about precisely reusing uK2cen in order to get the edge cases correct.\n\t\tuK4 = uK2cen % 4;\n\t\tFLG = uK4 >= 1.0 && uK4 < 2.0;\n\n\t\tsinhu = sinh( uK2 );\n\t\tsechu = 1.0 / cosh( uK2 );\n\t\ttanhu = tanh( uK2 );\n\t\tgdu = ( floor( uK2cen ) * PI ) + atan( sinhu );\n\n\t\ta = 0.25 * ( 1.0 - m );\n\t\tb = a * ( sinhu - ( uK2 * sechu ) );\n\t\tsn = tanhu + ( b * sechu );\n\t\tcn = sechu - ( b * tanhu );\n\t\tdn = sechu + ( a * ( sinhu + ( uK2 * sechu ) ) * tanhu );\n\t\tam = gdu + b;\n\n\t\tif (FLG) {\n\t\t\tsn = -sn;\n\t\t\tcn = -cn;\n\t\t}\n\t} else {\n\t\t// A&S 16.4.1. Compute using the arithmetic-geometric mean.\n\t\ta = 1.0;\n\t\tb = sqrt( 1.0 - m );\n\t\tN = -1;\n\t\tNANFLG = false;\n\t\tdo {\n\t\t\tN += 1;\n\t\t\tif ( N > 8 ) {\n\t\t\t\tNANFLG = true;\n\t\t\t\tsn = NaN;\n\t\t\t\tcn = NaN;\n\t\t\t\tdn = NaN;\n\t\t\t\tam = NaN;\n\n\t\t\t\tdebug( 'Warning: Overflow encountered in iteration. Returning NaN for all output values.' );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tatmp = ( a + b ) * 0.5;\n\t\t\tc = ( a - b ) * 0.5;\n\t\t\tb = sqrt( a * b );\n\t\t\ta = atmp;\n\t\t\tca[ N ] = c / a;\n\t\t} while ( ca[ N ] >= EPS );\n\n\t\tif ( !NANFLG ) {\n\t\t\t// A&S 16.4.3:\n\t\t\tphi1 = ( 1 << N ) * ( u * a );\n\t\t\twhile ( N > 1 ) {\n\t\t\t\tN -= 1;\n\t\t\t\tphi1 = 0.5 * ( phi1 + asin( ca[ N ] * sin( phi1 ) ) );\n\t\t\t}\n\t\t\tphi0 = 0.5 * ( phi1 + asin( ca[ 0 ] * sin( phi1 ) ) );\n\n\t\t\tam = phi0;\n\t\t\tsincos( am, tmp2, 1, 0 );\n\t\t\tsn = tmp2[ 0 ];\n\t\t\tcn = tmp2[ 1 ];\n\n\t\t\t// When the denominator is small, switch to the definition of dn in terms of sn. Otherwise compute dn from the last two iterates.\n\t\t\tdnDenom = cos( phi1 - phi0 );\n\t\t\tif ( abs( dnDenom ) < 0.1 ) {\n\t\t\t\tdn = sqrt( 1.0 - ( m * sn * sn ) );\n\t\t\t} else {\n\t\t\t\tdn = cn / dnDenom;\n\t\t\t}\n\t\t}\n\t}\n\n\tout[ offset ] = sn;\n\tout[ offset + stride ] = cn;\n\tout[ offset + ( stride * 2 ) ] = dn;\n\tout[ offset + ( stride * 3 ) ] = am;\n\n\treturn out;\n}\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport assign from './assign.js';\n\n\n// MAIN //\n\n/**\n* Simultaneously computes the Jacobi elliptic functions sn, cn, and dn, and am.\n*\n* ## Notes\n*\n* -   Values are computed using the arithmetic-geometric from Abramowitz and Stegun 16.4.\n* -   When m < 0 or m > 1, `sn`, `cn`, and `dn` are computed in terms of elliptic functions with 0 < m < 1 using the transformations from Abramowitz and Stegun 16.10 and 16.11, respectively. Thus the domain of m is any real number. When m < 0 or m > 1, `am` is not computed and will be returned as NaN.\n* -   Values for small m (m < SQRT_EPS) are computed using the approximations of Abramowitz and Stegun 16.13. For each evaluation, the complete elliptic integral of the first kind, K(m), is computed in order to reduce the period and ensure valid output for all u.\n* -   Values for m near unity (m > 1 - SQRT_EPS) are computed using the approximations of Abramowitz and Stegun 16.15. For each evaluation, the complete elliptic integral of the first kind, K(m), is computed in order to reduce the period and ensure valid output for all u.\n*\n* @param {number} u - input value\n* @param {number} m - modulus `m`, equivalent to `k²`\n* @returns {Array<number>} sn, cn, dn, and Jacobi amplitude am\n*\n* @example\n* var v = ellipj( 0.3, 0.5 );\n* // returns [ ~0.293, ~0.956, ~0.978, ~0.298 ]\n*\n* @example\n* v = ellipj( 0.0, 0.0 );\n* // returns [ ~0.0, ~1.0, ~1.0, ~0.0 ]\n*\n* @example\n* v = ellipj( Infinity, 1.0 );\n* // returns [ ~1.0, ~0.0, ~0.0, ~1.571 ]\n*\n* @example\n* v = ellipj( 0.0, -2.0 );\n* // returns [ ~0.0, ~1.0, ~1.0, NaN ]\n*\n* @example\n* v = ellipj( NaN, NaN );\n* // returns [ NaN, NaN, NaN, NaN ]\n*\n*/\nfunction ellipj( u, m ) {\n\treturn assign( u, m, [ 0.0, 0.0, 0.0, 0.0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default ellipj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport assign from './assign.js';\n\n\n// VARIABLES //\n\nvar tmp = [ 0.0, 0.0, 0.0, 0.0 ];\n\n\n// MAIN //\n\n/**\n* Compute the Jacobi elliptic function sn(u, m) of number u with modulus m.\n*\n* @param {number} u - input value\n* @param {number} m - modulus `m`, equivalent to `k²`\n* @returns {number} sn(u, m)\n*\n* @example\n* import { sn as sn } from '@stdlib/math-base-special-ellipj';\n* var v = sn( 0.3, 0.5 );\n* // returns ~0.293\n*\n* @example\n* v = sn( 0.0, 0.0 );\n* // returns ~0.0\n*\n* @example\n* v = sn( Infinity, 1.0 );\n* // returns ~1.0\n*\n* @example\n* v = sn( 0.0, -2.0 );\n* // returns ~0.0\n*\n* @example\n* v = sn( NaN, NaN );\n* // returns NaN\n*\n*/\nfunction sn( u, m ) {\n\tassign( u, m, tmp, 1, 0 );\n\treturn tmp[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default sn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport assign from './assign.js';\n\n\n// VARIABLES //\n\nvar tmp = [ 0.0, 0.0, 0.0, 0.0 ];\n\n\n// MAIN //\n\n/**\n* Compute the Jacobi elliptic function cn(u, m) of number u with modulus m.\n*\n* @param {number} u - input value\n* @param {number} m - modulus `m`, equivalent to `k²`\n* @returns {number} cn(u, m)\n*\n* @example\n* var v = cn( 0.3, 0.5 );\n* // returns ~0.956\n*\n* @example\n* v = cn( 0.0, 0.0 );\n* // returns ~1.0\n*\n* @example\n* v = cn( Infinity, 1.0 );\n* // returns ~0.0\n*\n* @example\n* v = cn( 0.0, -2.0 );\n* // returns ~1.0\n*\n* @example\n* v = cn( NaN, NaN );\n* // returns NaN\n*\n*/\nfunction cn( u, m ) {\n\tassign( u, m, tmp, 1, 0 );\n\treturn tmp[ 1 ];\n}\n\n\n// EXPORTS //\n\nexport default cn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport assign from './assign.js';\n\n\n// VARIABLES //\n\nvar tmp = [ 0.0, 0.0, 0.0, 0.0 ];\n\n\n// MAIN //\n\n/**\n* Compute the Jacobi elliptic function dn(u, m) of number u with modulus m.\n*\n* @param {number} u - input value\n* @param {number} m - modulus `m`, equivalent to `k²`\n* @returns {number} dn(u, m)\n*\n* @example\n* var v = dn( 0.3, 0.5 );\n* // returns ~0.978\n*\n* @example\n* v = dn( 0.0, 0.0 );\n* // returns ~1.0\n*\n* @example\n* v = dn( Infinity, 1.0 );\n* // returns ~0.0\n*\n* @example\n* v = dn( 0.0, -2.0 );\n* // returns ~1.0\n*\n* @example\n* v = dn( NaN, NaN );\n* // returns NaN\n*\n*/\nfunction dn( u, m ) {\n\tassign( u, m, tmp, 1, 0 );\n\treturn tmp[ 2 ];\n}\n\n\n// EXPORTS //\n\nexport default dn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport assign from './assign.js';\n\n\n// VARIABLES //\n\nvar tmp = [ 0.0, 0.0, 0.0, 0.0 ];\n\n\n// MAIN //\n\n/**\n* Compute the Jacobi modulus, am(u, m), of number u with modulus m.\n*\n* @param {number} u - input value\n* @param {number} m - modulus `m`, equivalent to `k²`\n* @returns {number} Jacobi amplitude, `am`\n*\n* @example\n* var v = am( 0.3, 0.5 );\n* // returns ~0.298\n*\n* @example\n* v = am( 0.0, 0.0 );\n* // returns ~0.0\n*\n* @example\n* v = am( Infinity, 1.0 );\n* // returns ~1.571\n*\n* @example\n* v = am( 0.0, -2.0 );\n* // returns NaN\n*\n* @example\n* v = am( NaN, NaN );\n* // returns NaN\n*\n*/\nfunction am( u, m ) {\n\tassign( u, m, tmp, 1, 0 );\n\treturn tmp[ 3 ];\n}\n\n\n// EXPORTS //\n\nexport default am;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the Jacobi elliptic functions sn, cn, dn, and Jacobi amplitude am.\n*\n* @module @stdlib/math-base-special-ellipj\n*\n* @example\n* import ellipj from '@stdlib/math-base-special-ellipj';\n*\n* var v = ellipj( 0.3, 0.5 );\n* // returns [ ~0.293, ~0.956, ~0.978, ~0.298 ]\n*\n* v = ellipj( 0.0, 0.0 );\n* // returns [ ~0.0, ~1.0, ~1.0, ~0.0 ]\n*\n* v = ellipj( Infinity, 1.0 );\n* // returns [ ~1.0, ~0.0, ~0.0, ~1.571 ]\n*\n* v = ellipj( 0.0, -2.0 );\n* // returns [ ~0.0, ~1.0, ~1.0, NaN ]\n*\n* v = ellipj( NaN, NaN );\n* // returns [ NaN, NaN, NaN, NaN ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport assign from './assign.js';\nimport main from './main.js';\nimport sn from './sn.js';\nimport cn from './cn.js';\nimport dn from './dn.js';\nimport am from './am.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\nsetReadOnly( main, 'sn', sn );\nsetReadOnly( main, 'cn', cn );\nsetReadOnly( main, 'dn', dn );\nsetReadOnly( main, 'am', am );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_erf.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport setLowWord from '@stdlib/number-float64-base-set-low-word';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport polyvalPP from './polyval_pp.js';\nimport polyvalQQ from './polyval_qq.js';\nimport polyvalPA from './polyval_pa.js';\nimport polyvalQA from './polyval_qa.js';\nimport polyvalRA from './polyval_ra.js';\nimport polyvalSA from './polyval_sa.js';\nimport polyvalRB from './polyval_rb.js';\nimport polyvalSB from './polyval_sb.js';\n\n\n// VARIABLES //\n\nvar TINY = 1.0e-300;\nvar VERY_TINY = 2.848094538889218e-306; // 0x00800000, 0x00000000\n\n// 2**-28 = 1/(1<<28) = 1/268435456\nvar SMALL = 3.725290298461914e-9;\n\nvar ERX = 8.45062911510467529297e-1;  // 0x3FEB0AC1, 0x60000000\n\nvar EFX = 1.28379167095512586316e-1;  // 0x3FC06EBA, 0x8214DB69\nvar EFX8 = 1.02703333676410069053;    // 0x3FF06EBA, 0x8214DB69\n\nvar PPC = 1.28379167095512558561e-1;  // 0x3FC06EBA, 0x8214DB68\nvar QQC = 1.0;\n\nvar PAC = -2.36211856075265944077e-3; // 0xBF6359B8, 0xBEF77538\nvar QAC = 1.0;\n\nvar RAC = -9.86494403484714822705e-3; // 0xBF843412, 0x600D6435\nvar SAC = 1.0;\n\nvar RBC = -9.86494292470009928597e-3; // 0xBF843412, 0x39E86F4A\nvar SBC = 1.0;\n\n\n// MAIN //\n\n/**\n* Evaluates the error function.\n*\n* ```tex\n* \\operatorname{erf}(x) = \\frac{2}{\\sqrt{\\pi}} \\int^{x}_{0} e^{-t^2}\\ \\mathrm{dt}\n* ```\n*\n* Note that\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{erfc}(x) &= 1 - \\operatorname{erf}(x) \\\\\n* \\operatorname{erf}(-x) &= -\\operatorname{erf}(x) \\\\\n* \\operatorname{erfc}(-x) &= 2 - \\operatorname{erfc}(x)\n* \\end{align*}\n* ```\n*\n* ## Method\n*\n* 1.  For \\\\(|x| \\in [0, 0.84375)\\\\),\n*\n*     ```tex\n*     \\operatorname{erf}(x) = x + x \\cdot \\operatorname{R}(x^2)\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\operatorname{erfc}(x) = \\begin{cases}\n*     1 - \\operatorname{erf}(x) & \\textrm{if}\\ x \\in (-.84375,0.25) \\\\\n*     0.5 + ((0.5-x)-x \\mathrm{R}) & \\textrm{if}\\ x \\in [0.25,0.84375)\n*     \\end{cases}\n*     ```\n*\n*     where \\\\(R = P/Q\\\\) and where \\\\(P\\\\) is an odd polynomial of degree \\\\(8\\\\) and \\\\(Q\\\\) is an odd polynomial of degree \\\\(10\\\\).\n*\n*     ```tex\n*     \\biggl| \\mathrm{R} - \\frac{\\operatorname{erf}(x)-x}{x} \\biggr| \\leq 2^{-57.90}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     The formula is derived by noting\n*\n*     ```tex\n*     \\operatorname{erf}(x) = \\frac{2}{\\sqrt{\\pi}}\\biggl(x - \\frac{x^3}{3} + \\frac{x^5}{10} - \\frac{x^7}{42} + \\ldots \\biggr)\n*     ```\n*\n*     and that\n*\n*     ```tex\n*     \\frac{2}{\\sqrt{\\pi}} = 1.128379167095512573896158903121545171688\n*     ```\n*\n*     is close to unity. The interval is chosen because the fix point of \\\\(\\operatorname{erf}(x)\\\\) is near \\\\(0.6174\\\\) (i.e., \\\\(\\operatorname{erf(x)} = x\\\\) when \\\\(x\\\\) is near \\\\(0.6174\\\\)), and, by some experiment, \\\\(0.84375\\\\) is chosen to guarantee the error is less than one ulp for \\\\(\\operatorname{erf}(x)\\\\).\n*\n*     <!-- </note> -->\n*\n* 2.  For \\\\(|x| \\in [0.84375,1.25)\\\\), let \\\\(s = |x|-1\\\\), and \\\\(c = 0.84506291151\\\\) rounded to single (\\\\(24\\\\) bits)\n*\n*     ```tex\n*     \\operatorname{erf}(x) = \\operatorname{sign}(x) \\cdot \\biggl(c + \\frac{\\operatorname{P1}(s)}{\\operatorname{Q1}(s)}\\biggr)\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\operatorname{erfc}(x) = \\begin{cases}\n*     (1-c) - \\frac{\\operatorname{P1}(s)}{\\operatorname{Q1}(s)} & \\textrm{if}\\ x > 0 \\\\\n*     1 + \\biggl(c + \\frac{\\operatorname{P1}(s)}{\\operatorname{Q1}(s)}\\biggr) & \\textrm{if}\\ x < 0\n*     \\end{cases}\n*     ```\n*\n*     where\n*\n*     ```tex\n*     \\biggl|\\frac{\\mathrm{P1}}{\\mathrm{Q1}} - (\\operatorname{erf}(|x|)-c)\\biggr| \\leq 2^{-59.06}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     Here, we use the Taylor series expansion at \\\\(x = 1\\\\)\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{erf}(1+s) &= \\operatorname{erf}(1) + s\\cdot \\operatorname{poly}(s) \\\\\n*     &= 0.845.. + \\frac{\\operatorname{P1}(s)}{\\operatorname{Q1}(s)}\n*     \\end{align*}\n*     ```\n*\n*     using a rational approximation to approximate\n*\n*     ```tex\n*     \\operatorname{erf}(1+s) - (c = (\\mathrm{single})0.84506291151)\n*     ```\n*\n*     <!-- </note> -->\n*\n*     Note that, for \\\\(x \\in [0.84375,1.25)\\\\), \\\\(|\\mathrm{P1}/\\mathrm{Q1}| < 0.078\\\\), where\n*\n*     -   \\\\(\\operatorname{P1}(s)\\\\) is a degree \\\\(6\\\\) polynomial in \\\\(s\\\\)\n*     -   \\\\(\\operatorname{Q1}(s)\\\\) is a degree \\\\(6\\\\) polynomial in \\\\(s\\\\)\n*\n* 3.  For \\\\(x \\in [1.25,1/0.35)\\\\),\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{erfc}(x) &= \\frac{1}{x}e^{-x^2-0.5625+(\\mathrm{R1}/\\mathrm{S1})} \\\\\n*     \\operatorname{erf}(x) &= 1 - \\operatorname{erfc}(x)\n*     \\end{align*}\n*     ```\n*\n*     where\n*\n*     -   \\\\(\\operatorname{R1}(z)\\\\) is a degree \\\\(7\\\\) polynomial in \\\\(z\\\\), where \\\\(z = 1/x^2\\\\)\n*     -   \\\\(\\operatorname{S1}(z)\\\\) is a degree \\\\(8\\\\) polynomial in \\\\(z\\\\)\n*\n* 4.  For \\\\(x \\in [1/0.35,28)\\\\),\n*\n*     ```tex\n*     \\operatorname{erfc}(x) = \\begin{cases}\n*     \\frac{1}{x} e^{-x^2-0.5625+(\\mathrm{R2}/\\mathrm{S2})} & \\textrm{if}\\ x > 0 \\\\\n*     2.0 - \\frac{1}{x} e^{-x^2-0.5625+(\\mathrm{R2}/\\mathrm{S2})} & \\textrm{if}\\ -6 < x < 0 \\\\\n*     2.0 - \\mathrm{tiny} & \\textrm{if}\\ x \\leq -6\n*     \\end{cases}\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\operatorname{erf}(x) = \\begin{cases}\n*     \\operatorname{sign}(x) \\cdot (1.0 - \\operatorname{erfc}(x)) & \\textrm{if}\\ x < 6 \\\\\n*     \\operatorname{sign}(x) \\cdot (1.0 - \\mathrm{tiny}) & \\textrm{otherwise}\n*     \\end{cases}\n*     ```\n*\n*     where\n*\n*     -   \\\\(\\operatorname{R2}(z)\\\\) is a degree \\\\(6\\\\) polynomial in \\\\(z\\\\), where \\\\(z = 1/x^2\\\\)\n*     -   \\\\(\\operatorname{S2}(z)\\\\) is a degree \\\\(7\\\\) polynomial in \\\\(z\\\\)\n*\n* 5.  For \\\\(x \\in [28, \\infty)\\\\),\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{erf}(x) &= \\operatorname{sign}(x) \\cdot (1 - \\mathrm{tiny}) & \\textrm{(raise inexact)}\n*     \\end{align*}\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\operatorname{erfc}(x) = \\begin{cases}\n*     \\mathrm{tiny} \\cdot \\mathrm{tiny} & \\textrm{if}\\ x > 0\\ \\textrm{(raise underflow)} \\\\\n*     2 - \\mathrm{tiny} & \\textrm{if}\\ x < 0\n*     \\end{cases}\n*     ```\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{erf}(0) &= 0 \\\\\n* \\operatorname{erf}(-0) &= -0 \\\\\n* \\operatorname{erf}(\\infty) &= 1 \\\\\n* \\operatorname{erf}(-\\infty) &= -1 \\\\\n* \\operatorname{erfc}(0) &= 1 \\\\\n* \\operatorname{erfc}(\\infty) &= 0 \\\\\n* \\operatorname{erfc}(-\\infty) &= 2 \\\\\n* \\operatorname{erf}(\\mathrm{NaN}) &= \\mathrm{NaN} \\\\\n* \\operatorname{erfc}(\\mathrm{NaN}) &= \\mathrm{NaN}\n* \\end{align*}\n* ```\n*\n* ## Notes\n*\n* -   To compute \\\\(\\exp(-x^2-0.5625+(\\mathrm{R}/\\mathrm{S}))\\\\), let \\\\(s\\\\) be a single precision number and \\\\(s := x\\\\); then\n*\n*     ```tex\n*     -x^2 = -s^2 + (s-x)(s+x)\n*     ```\n*\n*     and\n*\n*     ```tex\n*     e^{-x^2-0.5626+(\\mathrm{R}/\\mathrm{S})} = e^{-s^2-0.5625} e^{(s-x)(s+x)+(\\mathrm{R}/\\mathrm{S})}\n*     ```\n*\n* -   `#4` and `#5` make use of the asymptotic series\n*\n*     ```tex\n*     \\operatorname{erfc}(x) \\approx \\frac{e^{-x^2}}{x\\sqrt{\\pi}} (1 + \\operatorname{poly}(1/x^2))\n*     ```\n*\n*     We use a rational approximation to approximate\n*\n*     ```tex\n*     g(s) = f(1/x^2) = \\ln(\\operatorname{erfc}(x) \\cdot x) - x^2 + 0.5625\n*     ```\n*\n* -   The error bound for \\\\(\\mathrm{R1}/\\mathrm{S1}\\\\) is\n*\n*     ```tex\n*     |\\mathrm{R1}/\\mathrm{S1} - f(x)| < 2^{-62.57}\n*     ```\n*\n*     and for \\\\(\\mathrm{R2}/\\mathrm{S2}\\\\) is\n*\n*     ```tex\n*     |\\mathrm{R2}/\\mathrm{S2} - f(x)| < 2^{-61.52}\n*     ```\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var y = erf( 2.0 );\n* // returns ~0.9953\n*\n* @example\n* var y = erf( -1.0 );\n* // returns ~-0.8427\n*\n* @example\n* var y = erf( -0.0 );\n* // returns -0.0\n*\n* @example\n* var y = erf( NaN );\n* // returns NaN\n*/\nfunction erf( x ) {\n\tvar sign;\n\tvar ax;\n\tvar z;\n\tvar r;\n\tvar s;\n\tvar y;\n\tvar p;\n\tvar q;\n\n\t// Special case: NaN\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\t// Special case: +infinity\n\tif ( x === PINF ) {\n\t\treturn 1.0;\n\t}\n\t// Special case: -infinity\n\tif ( x === NINF ) {\n\t\treturn -1.0;\n\t}\n\t// Special case: +-0\n\tif ( x === 0.0 ) {\n\t\treturn x;\n\t}\n\tif ( x < 0.0 ) {\n\t\tsign = true;\n\t\tax = -x;\n\t} else {\n\t\tsign = false;\n\t\tax = x;\n\t}\n\t// |x| < 0.84375\n\tif ( ax < 0.84375 ) {\n\t\tif ( ax < SMALL ) {\n\t\t\tif ( ax < VERY_TINY ) {\n\t\t\t\t// Avoid underflow:\n\t\t\t\treturn 0.125 * ( (8.0*x) + (EFX8*x) );\n\t\t\t}\n\t\t\treturn x + (EFX*x);\n\t\t}\n\t\tz = x * x;\n\t\tr = PPC + ( z*polyvalPP( z ) );\n\t\ts = QQC + ( z*polyvalQQ( z ) );\n\t\ty = r / s;\n\t\treturn x + (x*y);\n\t}\n\t// 0.84375 <= |x| < 1.25\n\tif ( ax < 1.25 ) {\n\t\ts = ax - 1.0;\n\t\tp = PAC + ( s*polyvalPA( s ) );\n\t\tq = QAC + ( s*polyvalQA( s ) );\n\t\tif ( sign ) {\n\t\t\treturn -ERX - (p/q);\n\t\t}\n\t\treturn ERX + (p/q);\n\t}\n\t// +inf > |x| >= 6\n\tif ( ax >= 6.0 ) {\n\t\tif ( sign ) {\n\t\t\treturn TINY - 1.0; // raise inexact\n\t\t}\n\t\treturn 1.0 - TINY; // raise inexact\n\t}\n\ts = 1.0 / (ax*ax);\n\n\t// |x| < 1/0.35 ~ 2.857143\n\tif ( ax < 2.857142857142857 ) {\n\t\tr = RAC + ( s*polyvalRA( s ) );\n\t\ts = SAC + ( s*polyvalSA( s ) );\n\t}\n\t// |x| >= 1/0.35 ~ 2.857143\n\telse {\n\t\tr = RBC + ( s*polyvalRB( s ) );\n\t\ts = SBC + ( s*polyvalSB( s ) );\n\t}\n\tz = setLowWord( ax, 0 ); // pseudo-single (20-bit) precision x\n\tr = exp( -(z*z) - 0.5625 ) * exp( ( (z-ax) * (z+ax) ) + (r/s) );\n\tif ( sign ) {\n\t\treturn (r/ax) - 1.0;\n\t}\n\treturn 1.0 - (r/ax);\n}\n\n\n// EXPORTS //\n\nexport default erf;\n","/* eslint-disable max-len, no-mixed-operators, max-lines */\n\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [SciPy]{@link https://github.com/scipy/scipy/blob/ed14bf0a66440a4d164581499fda662121963a56/scipy/special/Faddeeva.cc}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (c) 2012 Massachusetts Institute of Technology\n*\n* Permission is hereby granted, free of charge, to any person obtaining\n* a copy of this software and associated documentation files (the\n* \"Software\"), to deal in the Software without restriction, including\n* without limitation the rights to use, copy, modify, merge, publish,\n* distribute, sublicense, and/or sell copies of the Software, and to\n* permit persons to whom the Software is furnished to do so, subject to\n* the following conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n* LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n* OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n* WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// VARIABLES //\n\nvar table = [ p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54, p55, p56, p57, p58, p59, p60, p61, p62, p63, p64, p65, p66, p67, p68, p69, p70, p71, p72, p73, p74, p75, p76, p77, p78, p79, p80, p81, p82, p83, p84, p85, p86, p87, p88, p89, p90, p91, p92, p93, p94, p95, p96, p97, p98, p99, p100 ];\n\n\n// FUNCTIONS //\n\n/**\n* Chebyshev polynomial for \\[0, 0.01).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p0( t ) {\n\treturn 0.70878032454106438663e-3 + (0.71234091047026302958e-3 + (0.35779077297597742384e-5 + (0.17403143962587937815e-7 + (0.81710660047307788845e-10 + (0.36885022360434957634e-12 + 0.15917038551111111111e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.01, 0.02).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p1( t ) {\n\treturn 0.21479143208285144230e-2 + (0.72686402367379996033e-3 + (0.36843175430938995552e-5 + (0.18071841272149201685e-7 + (0.85496449296040325555e-10 + (0.38852037518534291510e-12 + 0.16868473576888888889e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.02, 0.03).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p2( t ) {\n\treturn 0.36165255935630175090e-2 + (0.74182092323555510862e-3 + (0.37948319957528242260e-5 + (0.18771627021793087350e-7 + (0.89484715122415089123e-10 + (0.40935858517772440862e-12 + 0.17872061464888888889e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.03, 0.04).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p3( t ) {\n\treturn 0.51154983860031979264e-2 + (0.75722840734791660540e-3 + (0.39096425726735703941e-5 + (0.19504168704300468210e-7 + (0.93687503063178993915e-10 + (0.43143925959079664747e-12 + 0.18939926435555555556e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.04, 0.05).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p4( t ) {\n\treturn 0.66457513172673049824e-2 + (0.77310406054447454920e-3 + (0.40289510589399439385e-5 + (0.20271233238288381092e-7 + (0.98117631321709100264e-10 + (0.45484207406017752971e-12 + 0.20076352213333333333e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.05, 0.06).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p5( t ) {\n\treturn 0.82082389970241207883e-2 + (0.78946629611881710721e-3 + (0.41529701552622656574e-5 + (0.21074693344544655714e-7 + (0.10278874108587317989e-9 + (0.47965201390613339638e-12 + 0.21285907413333333333e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.06, 0.07).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p6( t ) {\n\treturn 0.98039537275352193165e-2 + (0.80633440108342840956e-3 + (0.42819241329736982942e-5 + (0.21916534346907168612e-7 + (0.10771535136565470914e-9 + (0.50595972623692822410e-12 + 0.22573462684444444444e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.07, 0.08).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p7( t ) {\n\treturn 0.11433927298290302370e-1 + (0.82372858383196561209e-3 + (0.44160495311765438816e-5 + (0.22798861426211986056e-7 + (0.11291291745879239736e-9 + (0.53386189365816880454e-12 + 0.23944209546666666667e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.08, 0.09).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p8( t ) {\n\treturn 0.13099232878814653979e-1 + (0.84167002467906968214e-3 + (0.45555958988457506002e-5 + (0.23723907357214175198e-7 + (0.11839789326602695603e-9 + (0.56346163067550237877e-12 + 0.25403679644444444444e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.09, 0.10).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p9( t ) {\n\treturn 0.14800987015587535621e-1 + (0.86018092946345943214e-3 + (0.47008265848816866105e-5 + (0.24694040760197315333e-7 + (0.12418779768752299093e-9 + (0.59486890370320261949e-12 + 0.26957764568888888889e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.10, 0.11).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p10( t ) {\n\treturn 0.16540351739394069380e-1 + (0.87928458641241463952e-3 + (0.48520195793001753903e-5 + (0.25711774900881709176e-7 + (0.13030128534230822419e-9 + (0.62820097586874779402e-12 + 0.28612737351111111111e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.11, 0.12).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p11( t ) {\n\treturn 0.18318536789842392647e-1 + (0.89900542647891721692e-3 + (0.50094684089553365810e-5 + (0.26779777074218070482e-7 + (0.13675822186304615566e-9 + (0.66358287745352705725e-12 + 0.30375273884444444444e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.12, 0.13).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p12( t ) {\n\treturn 0.20136801964214276775e-1 + (0.91936908737673676012e-3 + (0.51734830914104276820e-5 + (0.27900878609710432673e-7 + (0.14357976402809042257e-9 + (0.70114790311043728387e-12 + 0.32252476000000000000e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.13, 0.14).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p13( t ) {\n\treturn 0.21996459598282740954e-1 + (0.94040248155366777784e-3 + (0.53443911508041164739e-5 + (0.29078085538049374673e-7 + (0.15078844500329731137e-9 + (0.74103813647499204269e-12 + 0.34251892320000000000e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.14, 0.15).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p14( t ) {\n\treturn 0.23898877187226319502e-1 + (0.96213386835900177540e-3 + (0.55225386998049012752e-5 + (0.30314589961047687059e-7 + (0.15840826497296335264e-9 + (0.78340500472414454395e-12 + 0.36381553564444444445e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.15, 0.16).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p15( t ) {\n\treturn 0.25845480155298518485e-1 + (0.98459293067820123389e-3 + (0.57082915920051843672e-5 + (0.31613782169164830118e-7 + (0.16646478745529630813e-9 + (0.82840985928785407942e-12 + 0.38649975768888888890e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.16, 0.17).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p16( t ) {\n\treturn 0.27837754783474696598e-1 + (0.10078108563256892757e-2 + (0.59020366493792212221e-5 + (0.32979263553246520417e-7 + (0.17498524159268458073e-9 + (0.87622459124842525110e-12 + 0.41066206488888888890e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.17, 0.18).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p17( t ) {\n\treturn 0.29877251304899307550e-1 + (0.10318204245057349310e-2 + (0.61041829697162055093e-5 + (0.34414860359542720579e-7 + (0.18399863072934089607e-9 + (0.92703227366365046533e-12 + 0.43639844053333333334e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.18, 0.19).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p18( t ) {\n\treturn 0.31965587178596443475e-1 + (0.10566560976716574401e-2 + (0.63151633192414586770e-5 + (0.35924638339521924242e-7 + (0.19353584758781174038e-9 + (0.98102783859889264382e-12 + 0.46381060817777777779e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.19, 0.20).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p19( t ) {\n\treturn 0.34104450552588334840e-1 + (0.10823541191350532574e-2 + (0.65354356159553934436e-5 + (0.37512918348533521149e-7 + (0.20362979635817883229e-9 + (0.10384187833037282363e-11 + 0.49300625262222222221e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.20, 0.21).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p20( t ) {\n\treturn 0.36295603928292425716e-1 + (0.11089526167995268200e-2 + (0.67654845095518363577e-5 + (0.39184292949913591646e-7 + (0.21431552202133775150e-9 + (0.10994259106646731797e-11 + 0.52409949102222222221e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.21, 0.22).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p21( t ) {\n\treturn 0.38540888038840509795e-1 + (0.11364917134175420009e-2 + (0.70058230641246312003e-5 + (0.40943644083718586939e-7 + (0.22563034723692881631e-9 + (0.11642841011361992885e-11 + 0.55721092871111111110e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.22, 0.23).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p22( t ) {\n\treturn 0.40842225954785960651e-1 + (0.11650136437945673891e-2 + (0.72569945502343006619e-5 + (0.42796161861855042273e-7 + (0.23761401711005024162e-9 + (0.12332431172381557035e-11 + 0.59246802364444444445e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.23, 0.24).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p23( t ) {\n\treturn 0.43201627431540222422e-1 + (0.11945628793917272199e-2 + (0.75195743532849206263e-5 + (0.44747364553960993492e-7 + (0.25030885216472953674e-9 + (0.13065684400300476484e-11 + 0.63000532853333333334e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.24, 0.25).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p24( t ) {\n\treturn 0.45621193513810471438e-1 + (0.12251862608067529503e-2 + (0.77941720055551920319e-5 + (0.46803119830954460212e-7 + (0.26375990983978426273e-9 + (0.13845421370977119765e-11 + 0.66996477404444444445e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.25, 0.26).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p25( t ) {\n\treturn 0.48103121413299865517e-1 + (0.12569331386432195113e-2 + (0.80814333496367673980e-5 + (0.48969667335682018324e-7 + (0.27801515481905748484e-9 + (0.14674637611609884208e-11 + 0.71249589351111111110e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.26, 0.27).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p26( t ) {\n\treturn 0.50649709676983338501e-1 + (0.12898555233099055810e-2 + (0.83820428414568799654e-5 + (0.51253642652551838659e-7 + (0.29312563849675507232e-9 + (0.15556512782814827846e-11 + 0.75775607822222222221e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.27, 0.28).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p27( t ) {\n\treturn 0.53263363664388864181e-1 + (0.13240082443256975769e-2 + (0.86967260015007658418e-5 + (0.53662102750396795566e-7 + (0.30914568786634796807e-9 + (0.16494420240828493176e-11 + 0.80591079644444444445e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.28, 0.29).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p28( t ) {\n\treturn 0.55946601353500013794e-1 + (0.13594491197408190706e-2 + (0.90262520233016380987e-5 + (0.56202552975056695376e-7 + (0.32613310410503135996e-9 + (0.17491936862246367398e-11 + 0.85713381688888888890e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.29, 0.30).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p29( t ) {\n\treturn 0.58702059496154081813e-1 + (0.13962391363223647892e-2 + (0.93714365487312784270e-5 + (0.58882975670265286526e-7 + (0.34414937110591753387e-9 + (0.18552853109751857859e-11 + 0.91160736711111111110e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.30, 0.31).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p30( t ) {\n\treturn 0.61532500145144778048e-1 + (0.14344426411912015247e-2 + (0.97331446201016809696e-5 + (0.61711860507347175097e-7 + (0.36325987418295300221e-9 + (0.19681183310134518232e-11 + 0.96952238400000000000e-14 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.31, 0.32).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p31( t ) {\n\treturn 0.64440817576653297993e-1 + (0.14741275456383131151e-2 + (0.10112293819576437838e-4 + (0.64698236605933246196e-7 + (0.38353412915303665586e-9 + (0.20881176114385120186e-11 + 0.10310784480000000000e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.32, 0.33).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p32( t ) {\n\treturn 0.67430045633130393282e-1 + (0.15153655418916540370e-2 + (0.10509857606888328667e-4 + (0.67851706529363332855e-7 + (0.40504602194811140006e-9 + (0.22157325110542534469e-11 + 0.10964842115555555556e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.33, 0.34).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p33( t ) {\n\treturn 0.70503365513338850709e-1 + (0.15582323336495709827e-2 + (0.10926868866865231089e-4 + (0.71182482239613507542e-7 + (0.42787405890153386710e-9 + (0.23514379522274416437e-11 + 0.11659571751111111111e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.34, 0.35).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p34( t ) {\n\treturn 0.73664114037944596353e-1 + (0.16028078812438820413e-2 + (0.11364423678778207991e-4 + (0.74701423097423182009e-7 + (0.45210162777476488324e-9 + (0.24957355004088569134e-11 + 0.12397238257777777778e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.35, 0.36).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p35( t ) {\n\treturn 0.76915792420819562379e-1 + (0.16491766623447889354e-2 + (0.11823685320041302169e-4 + (0.78420075993781544386e-7 + (0.47781726956916478925e-9 + (0.26491544403815724749e-11 + 0.13180196462222222222e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.36, 0.37).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p36( t ) {\n\treturn 0.80262075578094612819e-1 + (0.16974279491709504117e-2 + (0.12305888517309891674e-4 + (0.82350717698979042290e-7 + (0.50511496109857113929e-9 + (0.28122528497626897696e-11 + 0.14010889635555555556e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.37, 0.38).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p37( t ) {\n\treturn 0.83706822008980357446e-1 + (0.17476561032212656962e-2 + (0.12812343958540763368e-4 + (0.86506399515036435592e-7 + (0.53409440823869467453e-9 + (0.29856186620887555043e-11 + 0.14891851591111111111e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.38, 0.39).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p38( t ) {\n\treturn 0.87254084284461718231e-1 + (0.17999608886001962327e-2 + (0.13344443080089492218e-4 + (0.90900994316429008631e-7 + (0.56486134972616465316e-9 + (0.31698707080033956934e-11 + 0.15825697795555555556e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.39, 0.40).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p39( t ) {\n\treturn 0.90908120182172748487e-1 + (0.18544478050657699758e-2 + (0.13903663143426120077e-4 + (0.95549246062549906177e-7 + (0.59752787125242054315e-9 + (0.33656597366099099413e-11 + 0.16815130613333333333e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.40, 0.41).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p40( t ) {\n\treturn 0.94673404508075481121e-1 + (0.19112284419887303347e-2 + (0.14491572616545004930e-4 + (0.10046682186333613697e-6 + (0.63221272959791000515e-9 + (0.35736693975589130818e-11 + 0.17862931591111111111e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.41, 0.42).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p41( t ) {\n\treturn 0.98554641648004456555e-1 + (0.19704208544725622126e-2 + (0.15109836875625443935e-4 + (0.10567036667675984067e-6 + (0.66904168640019354565e-9 + (0.37946171850824333014e-11 + 0.18971959040000000000e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.42, 0.43).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p42( t ) {\n\treturn 0.10255677889470089531e0 + (0.20321499629472857418e-2 + (0.15760224242962179564e-4 + (0.11117756071353507391e-6 + (0.70814785110097658502e-9 + (0.40292553276632563925e-11 + 0.20145143075555555556e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.43, 0.44).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p43( t ) {\n\treturn 0.10668502059865093318e0 + (0.20965479776148731610e-2 + (0.16444612377624983565e-4 + (0.11700717962026152749e-6 + (0.74967203250938418991e-9 + (0.42783716186085922176e-11 + 0.21385479360000000000e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.44, 0.45).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p44( t ) {\n\treturn 0.11094484319386444474e0 + (0.21637548491908170841e-2 + (0.17164995035719657111e-4 + (0.12317915750735938089e-6 + (0.79376309831499633734e-9 + (0.45427901763106353914e-11 + 0.22696025653333333333e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.45, 0.46).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p45( t ) {\n\treturn 0.11534201115268804714e0 + (0.22339187474546420375e-2 + (0.17923489217504226813e-4 + (0.12971465288245997681e-6 + (0.84057834180389073587e-9 + (0.48233721206418027227e-11 + 0.24079890062222222222e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.46, 0.47).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p46( t ) {\n\treturn 0.11988259392684094740e0 + (0.23071965691918689601e-2 + (0.18722342718958935446e-4 + (0.13663611754337957520e-6 + (0.89028385488493287005e-9 + (0.51210161569225846701e-11 + 0.25540227111111111111e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.47, 0.48).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p47( t ) {\n\treturn 0.12457298393509812907e0 + (0.23837544771809575380e-2 + (0.19563942105711612475e-4 + (0.14396736847739470782e-6 + (0.94305490646459247016e-9 + (0.54366590583134218096e-11 + 0.27080225920000000000e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.48, 0.49).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p48( t ) {\n\treturn 0.12941991566142438816e0 + (0.24637684719508859484e-2 + (0.20450821127475879816e-4 + (0.15173366280523906622e-6 + (0.99907632506389027739e-9 + (0.57712760311351625221e-11 + 0.28703099555555555556e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.49, 0.50).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p49( t ) {\n\treturn 0.13443048593088696613e0 + (0.25474249981080823877e-2 + (0.21385669591362915223e-4 + (0.15996177579900443030e-6 + (0.10585428844575134013e-8 + (0.61258809536787882989e-11 + 0.30412080142222222222e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.50, 0.51).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p50( t ) {\n\treturn 0.13961217543434561353e0 + (0.26349215871051761416e-2 + (0.22371342712572567744e-4 + (0.16868008199296822247e-6 + (0.11216596910444996246e-8 + (0.65015264753090890662e-11 + 0.32210394506666666666e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.51, 0.52).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p51( t ) {\n\treturn 0.14497287157673800690e0 + (0.27264675383982439814e-2 + (0.23410870961050950197e-4 + (0.17791863939526376477e-6 + (0.11886425714330958106e-8 + (0.68993039665054288034e-11 + 0.34101266222222222221e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.52, 0.53).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p52( t ) {\n\treturn 0.15052089272774618151e0 + (0.28222846410136238008e-2 + (0.24507470422713397006e-4 + (0.18770927679626136909e-6 + (0.12597184587583370712e-8 + (0.73203433049229821618e-11 + 0.36087889048888888890e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.53, 0.54).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p53( t ) {\n\treturn 0.15626501395774612325e0 + (0.29226079376196624949e-2 + (0.25664553693768450545e-4 + (0.19808568415654461964e-6 + (0.13351257759815557897e-8 + (0.77658124891046760667e-11 + 0.38173420035555555555e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.54, 0.55).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p54( t ) {\n\treturn 0.16221449434620737567e0 + (0.30276865332726475672e-2 + (0.26885741326534564336e-4 + (0.20908350604346384143e-6 + (0.14151148144240728728e-8 + (0.82369170665974313027e-11 + 0.40360957457777777779e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.55, 0.56).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p55( t ) {\n\treturn 0.16837910595412130659e0 + (0.31377844510793082301e-2 + (0.28174873844911175026e-4 + (0.22074043807045782387e-6 + (0.14999481055996090039e-8 + (0.87348993661930809254e-11 + 0.42653528977777777779e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.56, 0.57).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p56( t ) {\n\treturn 0.17476916455659369953e0 + (0.32531815370903068316e-2 + (0.29536024347344364074e-4 + (0.23309632627767074202e-6 + (0.15899007843582444846e-8 + (0.92610375235427359475e-11 + 0.45054073102222222221e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.57, 0.58).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p57( t ) {\n\treturn 0.18139556223643701364e0 + (0.33741744168096996041e-2 + (0.30973511714709500836e-4 + (0.24619326937592290996e-6 + (0.16852609412267750744e-8 + (0.98166442942854895573e-11 + 0.47565418097777777779e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.58, 0.59).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p58( t ) {\n\treturn 0.18826980194443664549e0 + (0.35010775057740317997e-2 + (0.32491914440014267480e-4 + (0.26007572375886319028e-6 + (0.17863299617388376116e-8 + (0.10403065638343878679e-10 + 0.50190265831111111110e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.59, 0.60).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p59( t ) {\n\treturn 0.19540403413693967350e0 + (0.36342240767211326315e-2 + (0.34096085096200907289e-4 + (0.27479061117017637474e-6 + (0.18934228504790032826e-8 + (0.11021679075323598664e-10 + 0.52931171733333333334e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.60, 0.61).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p60( t ) {\n\treturn 0.20281109560651886959e0 + (0.37739673859323597060e-2 + (0.35791165457592409054e-4 + (0.29038742889416172404e-6 + (0.20068685374849001770e-8 + (0.11673891799578381999e-10 + 0.55790523093333333334e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.61, 0.62).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p61( t ) {\n\treturn 0.21050455062669334978e0 + (0.39206818613925652425e-2 + (0.37582602289680101704e-4 + (0.30691836231886877385e-6 + (0.21270101645763677824e-8 + (0.12361138551062899455e-10 + 0.58770520160000000000e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.62, 0.63).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p62( t ) {\n\treturn 0.21849873453703332479e0 + (0.40747643554689586041e-2 + (0.39476163820986711501e-4 + (0.32443839970139918836e-6 + (0.22542053491518680200e-8 + (0.13084879235290858490e-10 + 0.61873153262222222221e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.63, 0.64).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p63( t ) {\n\treturn 0.22680879990043229327e0 + (0.42366354648628516935e-2 + (0.41477956909656896779e-4 + (0.34300544894502810002e-6 + (0.23888264229264067658e-8 + (0.13846596292818514601e-10 + 0.65100183751111111110e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.64, 0.65).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p64( t ) {\n\treturn 0.23545076536988703937e0 + (0.44067409206365170888e-2 + (0.43594444916224700881e-4 + (0.36268045617760415178e-6 + (0.25312606430853202748e-8 + (0.14647791812837903061e-10 + 0.68453122631111111110e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.65, 0.66).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p65( t ) {\n\treturn 0.24444156740777432838e0 + (0.45855530511605787178e-2 + (0.45832466292683085475e-4 + (0.38352752590033030472e-6 + (0.26819103733055603460e-8 + (0.15489984390884756993e-10 + 0.71933206364444444445e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.66, 0.67).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p66( t ) {\n\treturn 0.25379911500634264643e0 + (0.47735723208650032167e-2 + (0.48199253896534185372e-4 + (0.40561404245564732314e-6 + (0.28411932320871165585e-8 + (0.16374705736458320149e-10 + 0.75541379822222222221e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.67, 0.68).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p67( t ) {\n\treturn 0.26354234756393613032e0 + (0.49713289477083781266e-2 + (0.50702455036930367504e-4 + (0.42901079254268185722e-6 + (0.30095422058900481753e-8 + (0.17303497025347342498e-10 + 0.79278273368888888890e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.68, 0.69).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p68( t ) {\n\treturn 0.27369129607732343398e0 + (0.51793846023052643767e-2 + (0.53350152258326602629e-4 + (0.45379208848865015485e-6 + (0.31874057245814381257e-8 + (0.18277905010245111046e-10 + 0.83144182364444444445e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.69, 0.70).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p69( t ) {\n\treturn 0.28426714781640316172e0 + (0.53983341916695141966e-2 + (0.56150884865255810638e-4 + (0.48003589196494734238e-6 + (0.33752476967570796349e-8 + (0.19299477888083469086e-10 + 0.87139049137777777779e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.70, 0.71).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p70( t ) {\n\treturn 0.29529231465348519920e0 + (0.56288077305420795663e-2 + (0.59113671189913307427e-4 + (0.50782393781744840482e-6 + (0.35735475025851713168e-8 + (0.20369760937017070382e-10 + 0.91262442613333333334e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.71, 0.72).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p71( t ) {\n\treturn 0.30679050522528838613e0 + (0.58714723032745403331e-2 + (0.62248031602197686791e-4 + (0.53724185766200945789e-6 + (0.37827999418960232678e-8 + (0.21490291930444538307e-10 + 0.95513539182222222221e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.72, 0.73).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p72( t ) {\n\treturn 0.31878680111173319425e0 + (0.61270341192339103514e-2 + (0.65564012259707640976e-4 + (0.56837930287837738996e-6 + (0.40035151353392378882e-8 + (0.22662596341239294792e-10 + 0.99891109760000000000e-13 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.73, 0.74).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p73( t ) {\n\treturn 0.33130773722152622027e0 + (0.63962406646798080903e-2 + (0.69072209592942396666e-4 + (0.60133006661885941812e-6 + (0.42362183765883466691e-8 + (0.23888182347073698382e-10 + 0.10439349811555555556e-12 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.74, 0.75).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p74( t ) {\n\treturn 0.34438138658041336523e0 + (0.66798829540414007258e-2 + (0.72783795518603561144e-4 + (0.63619220443228800680e-6 + (0.44814499336514453364e-8 + (0.25168535651285475274e-10 + 0.10901861383111111111e-12 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.75, 0.76).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p75( t ) {\n\treturn 0.35803744972380175583e0 + (0.69787978834882685031e-2 + (0.76710543371454822497e-4 + (0.67306815308917386747e-6 + (0.47397647975845228205e-8 + (0.26505114141143050509e-10 + 0.11376390933333333333e-12 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.76, 0.77).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p76( t ) {\n\treturn 0.37230734890119724188e0 + (0.72938706896461381003e-2 + (0.80864854542670714092e-4 + (0.71206484718062688779e-6 + (0.50117323769745883805e-8 + (0.27899342394100074165e-10 + 0.11862637614222222222e-12 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.77, 0.78).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p77( t ) {\n\treturn 0.38722432730555448223e0 + (0.76260375162549802745e-2 + (0.85259785810004603848e-4 + (0.75329383305171327677e-6 + (0.52979361368388119355e-8 + (0.29352606054164086709e-10 + 0.12360253370666666667e-12 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.78, 0.79).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p78( t ) {\n\treturn 0.40282355354616940667e0 + (0.79762880915029728079e-2 + (0.89909077342438246452e-4 + (0.79687137961956194579e-6 + (0.55989731807360403195e-8 + (0.30866246101464869050e-10 + 0.12868841946666666667e-12 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.79, 0.80).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p79( t ) {\n\treturn 0.41914223158913787649e0 + (0.83456685186950463538e-2 + (0.94827181359250161335e-4 + (0.84291858561783141014e-6 + (0.59154537751083485684e-8 + (0.32441553034347469291e-10 + 0.13387957943111111111e-12 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.80, 0.81).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p80( t ) {\n\treturn 0.43621971639463786896e0 + (0.87352841828289495773e-2 + (0.10002929142066799966e-3 + (0.89156148280219880024e-6 + (0.62480008150788597147e-8 + (0.34079760983458878910e-10 + 0.13917107176888888889e-12 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.81, 0.82).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p81( t ) {\n\treturn 0.45409763548534330981e0 + (0.91463027755548240654e-2 + (0.10553137232446167258e-3 + (0.94293113464638623798e-6 + (0.65972492312219959885e-8 + (0.35782041795476563662e-10 + 0.14455745872000000000e-12 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.82, 0.83).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p82( t ) {\n\treturn 0.47282001668512331468e0 + (0.95799574408860463394e-2 + (0.11135019058000067469e-3 + (0.99716373005509038080e-6 + (0.69638453369956970347e-8 + (0.37549499088161345850e-10 + 0.15003280712888888889e-12 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.83, 0.84).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p83( t ) {\n\treturn 0.49243342227179841649e0 + (0.10037550043909497071e-1 + (0.11750334542845234952e-3 + (0.10544006716188967172e-5 + (0.73484461168242224872e-8 + (0.39383162326435752965e-10 + 0.15559069118222222222e-12 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.84, 0.85).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p84( t ) {\n\treturn 0.51298708979209258326e0 + (0.10520454564612427224e-1 + (0.12400930037494996655e-3 + (0.11147886579371265246e-5 + (0.77517184550568711454e-8 + (0.41283980931872622611e-10 + 0.16122419680000000000e-12 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.85, 0.86).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p85( t ) {\n\treturn 0.53453307979101369843e0 + (0.11030120618800726938e-1 + (0.13088741519572269581e-3 + (0.11784797595374515432e-5 + (0.81743383063044825400e-8 + (0.43252818449517081051e-10 + 0.16692592640000000000e-12 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.86, 0.87).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p86( t ) {\n\treturn 0.55712643071169299478e0 + (0.11568077107929735233e-1 + (0.13815797838036651289e-3 + (0.12456314879260904558e-5 + (0.86169898078969313597e-8 + (0.45290446811539652525e-10 + 0.17268801084444444444e-12 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.87, 0.88).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p87( t ) {\n\treturn 0.58082532122519320968e0 + (0.12135935999503877077e-1 + (0.14584223996665838559e-3 + (0.13164068573095710742e-5 + (0.90803643355106020163e-8 + (0.47397540713124619155e-10 + 0.17850211608888888889e-12 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.88, 0.89).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p88( t ) {\n\treturn 0.60569124025293375554e0 + (0.12735396239525550361e-1 + (0.15396244472258863344e-3 + (0.13909744385382818253e-5 + (0.95651595032306228245e-8 + (0.49574672127669041550e-10 + 0.18435945564444444444e-12 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.89, 0.90).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p89( t ) {\n\treturn 0.63178916494715716894e0 + (0.13368247798287030927e-1 + (0.16254186562762076141e-3 + (0.14695084048334056083e-5 + (0.10072078109604152350e-7 + (0.51822304995680707483e-10 + 0.19025081422222222222e-12 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.90, 0.91).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p90( t ) {\n\treturn 0.65918774689725319200e0 + (0.14036375850601992063e-1 + (0.17160483760259706354e-3 + (0.15521885688723188371e-5 + (0.10601827031535280590e-7 + (0.54140790105837520499e-10 + 0.19616655146666666667e-12 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.91, 0.92).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p91( t ) {\n\treturn 0.68795950683174433822e0 + (0.14741765091365869084e-1 + (0.18117679143520433835e-3 + (0.16392004108230585213e-5 + (0.11155116068018043001e-7 + (0.56530360194925690374e-10 + 0.20209663662222222222e-12 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.92, 0.93).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p92( t ) {\n\treturn 0.71818103808729967036e0 + (0.15486504187117112279e-1 + (0.19128428784550923217e-3 + (0.17307350969359975848e-5 + (0.11732656736113607751e-7 + (0.58991125287563833603e-10 + 0.20803065333333333333e-12 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.93, 0.94).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p93( t ) {\n\treturn 0.74993321911726254661e0 + (0.16272790364044783382e-1 + (0.20195505163377912645e-3 + (0.18269894883203346953e-5 + (0.12335161021630225535e-7 + (0.61523068312169087227e-10 + 0.21395783431111111111e-12 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.94, 0.95).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p94( t ) {\n\treturn 0.78330143531283492729e0 + (0.17102934132652429240e-1 + (0.21321800585063327041e-3 + (0.19281661395543913713e-5 + (0.12963340087354341574e-7 + (0.64126040998066348872e-10 + 0.21986708942222222222e-12 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.95, 0.96).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p95( t ) {\n\treturn 0.81837581041023811832e0 + (0.17979364149044223802e-1 + (0.22510330592753129006e-3 + (0.20344732868018175389e-5 + (0.13617902941839949718e-7 + (0.66799760083972474642e-10 + 0.22574701262222222222e-12 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.96, 0.97).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p96( t ) {\n\treturn 0.85525144775685126237e0 + (0.18904632212547561026e-1 + (0.23764237370371255638e-3 + (0.21461248251306387979e-5 + (0.14299555071870523786e-7 + (0.69543803864694171934e-10 + 0.23158593688888888889e-12 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.97, 0.98).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p97( t ) {\n\treturn 0.89402868170849933734e0 + (0.19881418399127202569e-1 + (0.25086793128395995798e-3 + (0.22633402747585233180e-5 + (0.15008997042116532283e-7 + (0.72357609075043941261e-10 + 0.23737194737777777778e-12 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.98, 0.99).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p98( t ) {\n\treturn 0.93481333942870796363e0 + (0.20912536329780368893e-1 + (0.26481403465998477969e-3 + (0.23863447359754921676e-5 + (0.15746923065472184451e-7 + (0.75240468141720143653e-10 + 0.24309291271111111111e-12 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for \\[0.99, 1.00).\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p99( t ) {\n\treturn 0.97771701335885035464e0 + (0.22000938572830479551e-1 + (0.27951610702682383001e-3 + (0.25153688325245314530e-5 + (0.16514019547822821453e-7 + (0.78191526829368231251e-10 + 0.24873652355555555556e-12 * t) * t) * t) * t) * t) * t;\n}\n\n/**\n* Chebyshev polynomial for `1.0`.\n*\n* @private\n* @param {number} t - scaled value\n* @returns {number} result\n*/\nfunction p100() {\n\t// We only get here if y = 1; i.e., |x| < 4*eps, in which case `erfcx` is within `1e-15` of 1...\n\treturn 1.0;\n}\n\n\n// MAIN //\n\n/**\n* Given `y100 = 100*y`, where `y = 4/(4+x)` for `x >= 0`, compute `erfc(x)`.\n*\n* ## Notes\n*\n* -   Uses a look-up table of 100 different Chebyshev polynomials or y intervals \\[0,0.01\\], \\[0.01,0.02\\], ..., \\[0.99,1\\], generated with the help of Maple and a little shell script.\n* -   This allows the Chebyshev polynomials to be of significantly lower degree (about 1/4) compared to fitting the whole \\[0,1\\] interval with a single polynomial.\n*\n* @private\n* @param {number} y100 - scaled argument\n* @returns {number} complementary error function\n*/\nfunction erfcxY100( y100 ) {\n\tvar t = floor( y100 );\n\tvar f = table[ t ];\n\treturn f( 2*y100 - ((2*t) + 1) );\n}\n\n\n// EXPORTS //\n\nexport default erfcxY100;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/factorials.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006, 2010.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport gammaDeltaRatio from '@stdlib/math-base-special-gamma-delta-ratio';\nimport floor from '@stdlib/math-base-special-floor';\nimport abs from '@stdlib/math-base-special-abs';\nimport FLOAT64_MAX from '@stdlib/constants-float64-max';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// VARIABLES //\n\nvar MAX_FACTORIAL = 170; // TODO: consider packaging as constant\n\n\n// FUNCTIONS //\n\n/**\n* Computes the rising factorial of `x` and `n`.\n*\n* ## Notes\n*\n* -   The rising factorial is defined as\n*\n*     ```tex\n*     \\operatorname{risingFactorial}(x, n) = x (x-1) (x-2) (x-3) \\ldots (x-n+1)\n*     ```\n*\n*     or equivalently\n*\n*     ```tex\n*     \\operatorname{risingFactorial}(x, n) = \\frac{ \\Gamma(x + n) }{ \\Gamma(x) };\n*     ```\n*\n* @param {number} x - first function parameter\n* @param {integer} n - second function parameter\n* @returns {number} function value\n*\n* @example\n* var v = risingFactorial( 0.9, 5 );\n* // returns ~94.766\n*\n* @example\n* var v = risingFactorial( -9.0, 3 );\n* // returns -504.0\n*\n* @example\n* var v = risingFactorial( 0.0, 2 );\n* // returns 0.0\n*\n* @example\n* var v = risingFactorial( 3.0, -2 );\n* // returns 0.5\n*/\nfunction risingFactorial( x, n ) {\n\tvar result;\n\tvar inv;\n\n\tif ( isnan( x ) || !isInteger( n ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\t// For `x < 0`, we really have a falling factorial, modulo a possible change of sign. Note that the falling factorial isn't defined for negative `n`, so we'll get rid of that case first:\n\t\tif ( n < 0.0 ) {\n\t\t\tx += n;\n\t\t\tn = -n;\n\t\t\tinv = true;\n\t\t}\n\t\tresult = ( (n&1) ? -1.0 : 1.0 ) * fallingFactorial( -x, n );\n\t\tif ( inv ) {\n\t\t\tresult = 1.0 / result;\n\t\t}\n\t\treturn result;\n\t}\n\tif ( n === 0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x === 0.0 ) {\n\t\tif ( n < 0 ) {\n\t\t\treturn -gammaDeltaRatio( x+1.0, -n );\n\t\t}\n\t\treturn 0.0;\n\t}\n\tif ( x < 1.0 && x+n < 0.0 ) {\n\t\tresult = gammaDeltaRatio( 1.0-x, -n );\n\t\treturn ( n&1 ) ? -result : result;\n\t}\n\t// We don't optimize this for small `n`, because `gammaDeltaRatio` is already optimized for that use case:\n\treturn 1.0 / gammaDeltaRatio( x, n );\n}\n\n\n// MAIN //\n\n/**\n* Computes the falling factorial of `x` and `n`.\n*\n* ## Notes\n*\n* -   The falling factorial is defined as\n*\n*     ```tex\n*     \\operatorname{fallingFactorial}(x, n) = x (x-1) (x-2) (x-3) \\ldots (x-n+1)\n*     ```\n*\n* @param {number} x - first function parameter\n* @param {NonNegativeInteger} n - second function parameter\n* @returns {number} function value\n*\n* @example\n* var v = fallingFactorial( 0.9, 5 );\n* // returns ~0.644\n*\n* @example\n* var v = fallingFactorial( -9.0, 3 );\n* // returns -990.0\n*\n* @example\n* var v = fallingFactorial( 0.0, 2 );\n* // returns 0.0\n*\n* @example\n* var v = fallingFactorial( 3.0, -2 );\n* // returns NaN\n*/\nfunction fallingFactorial( x, n ) {\n\tvar result;\n\tvar xp1;\n\tvar n2;\n\tvar t1;\n\tvar t2;\n\n\tif ( isnan( x ) || !isNonNegativeInteger( n ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x < 0.0 ) {\n\t\t// For `x < 0`, we really have a rising factorial modulo a possible change of sign:\n\t\treturn ( ( n&1 ) ? -1.0 : 1.0 ) * risingFactorial( -x, n );\n\t}\n\tif ( n === 0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x < 0.5 ) {\n\t\t// Computing `1 + x` will throw away digits, so split up calculation...\n\t\tif ( n > MAX_FACTORIAL-2 ) {\n\t\t\t// Given a ratio of two very large numbers, we need to split the calculation up into two blocks:\n\t\t\tt1 = x * fallingFactorial( x-1.0, MAX_FACTORIAL-2 );\n\t\t\tt2 = fallingFactorial( x-MAX_FACTORIAL+1.0, n-MAX_FACTORIAL+1 );\n\t\t\tif ( FLOAT64_MAX/abs(t1) < abs(t2) ) {\n\t\t\t\treturn PINF;\n\t\t\t}\n\t\t\treturn t1 * t2;\n\t\t}\n\t\treturn x * fallingFactorial( x-1.0, n-1.0 );\n\t}\n\tif ( x <= n-1.0 ) {\n\t\t// `x+1-n` will be negative and computing the ratio of two gammas will not work, so split the product up into three parts:\n\t\txp1 = x + 1.0;\n\t\tn2 = abs( floor( xp1 ) );\n\t\tif ( n2 === xp1 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tresult = gammaDeltaRatio( xp1, -n2 );\n\t\tx -= n2;\n\t\tresult *= x;\n\t\tn2 += 1.0;\n\t\tif ( n2 < n ) {\n\t\t\tresult *= fallingFactorial( x-1.0, n-n2 );\n\t\t}\n\t\treturn result;\n\t}\n\t// Simple case: just the ratio of two (positive argument) gamma functions. Note that we don't optimize this for small `n`, because `gammaDeltaRatio` is already optimized for that use case:\n\treturn gammaDeltaRatio( x+1.0, -n );\n}\n\n\n// EXPORTS //\n\nexport default fallingFactorial;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Computes the absolute value of `x`.\n*\n* @param {number} x - input value\n* @returns {number} absolute value\n*\n* @example\n* var v = abs( -1.0 );\n* // returns 1.0\n*\n* @example\n* var v = abs( 2.0 );\n* // returns 2.0\n*\n* @example\n* var v = abs( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = abs( -0.0 );\n* // returns -0.0\n*\n* @example\n* var v = abs( NaN );\n* // returns NaN\n*/\nfunction abs( x ) {\n\tif ( x < 0.0 ) {\n\t\treturn -x;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default abs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-fast-abs';\n\n\n// VARIABLES //\n\n// 2*cos(pi/8)/(1+cos(pi/8)):\nvar ALPHA = 0.96043387010342;\n\n// 2*sin(pi/8)/(1+cos(pi/8)):\nvar BETA = 0.397824734759316;\n\n\n// MAIN //\n\n/**\n* Computes the hypotenuse using the alpha max plus beta min algorithm.\n*\n* @param {number} x - number\n* @param {number} y - number\n* @returns {number} hypotenuse\n*\n* @example\n* var h = hypot( -5.0, 12.0 );\n* // returns ~13.5\n*/\nfunction hypot( x, y ) {\n\tx = abs( x );\n\ty = abs( y );\n\tif ( x > y ) {\n\t\treturn (ALPHA*x) + (BETA*y);\n\t}\n\treturn (ALPHA*y) + (BETA*x);\n}\n\n\n// EXPORTS //\n\nexport default hypot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Computes the hypotenuse using the alpha max plus beta min algorithm, where `alpha = 1` and `beta = 1/2`.\n*\n* @private\n* @param {uinteger32} x - integer\n* @param {uinteger32} y - integer\n* @returns {number} hypotenuse\n*\n* @example\n* var h = hypot( 5.0, 12.0 );\n* // returns <number>\n*/\nfunction hypot( x, y ) {\n\tif ( x > y ) {\n\t\treturn x + (y>>>1);\n\t}\n\treturn (x>>>1) + y;\n}\n\n\n// EXPORTS //\n\nexport default hypot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes an absolute value of a signed 32-bit integer in two's complement format.\n*\n* ## Method\n*\n* -   Assume two's complement format.\n* -   Create a mask by applying a sign propagating right-shift. For negative integers, this results in all `1`'s. For nonnegative integers, this results in all `0`'s.\n* -   XOR the mask with `x`. For negative integers, this is the equivalent of a NOT. For nonnegative integers, this is a no-op.\n* -   Subtract the mask to recover the absolute value. For negative integers, this adds `1`, which is `-x` when using two's complement. For nonnegative integers, this subtracts `0`.\n*\n* @param {integer32} x - integer\n* @returns {integer32} absolute value\n*\n* @example\n* var v = labs( -10|0 );\n* // returns 10\n*/\nfunction labs( x ) {\n\tvar mask;\n\tvar y;\n\n\ty = x|0; // asm type annotation\n\tmask = ( y >> 31 )|0; // asm type annotation\n\treturn ((y ^ mask) - mask)|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nexport default labs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-labs';\n\n\n// MAIN //\n\n/**\n* Computes the hypotenuse using the alpha max plus beta min algorithm, where `alpha = 1` and `beta = 1/2`.\n*\n* @private\n* @param {integer32} x - integer\n* @param {integer32} y - integer\n* @returns {number} hypotenuse\n*\n* @example\n* var h = hypot( 5.0, 12.0 );\n* // returns <number>\n*/\nfunction hypot( x, y ) {\n\tx = abs( x );\n\ty = abs( y );\n\tif ( x > y ) {\n\t\treturn x + (y>>>1);\n\t}\n\treturn (x>>>1) + y;\n}\n\n\n// EXPORTS //\n\nexport default hypot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Computes the hypotenuse using the alpha max plus beta min algorithm, where `alpha = 1` and `beta = 1/4`.\n*\n* @private\n* @param {uinteger32} x - integer\n* @param {uinteger32} y - integer\n* @returns {number} hypotenuse\n*\n* @example\n* var h = hypot( 5.0, 12.0 );\n* // returns <number>\n*/\nfunction hypot( x, y ) {\n\tif ( x > y ) {\n\t\treturn x + (y>>>2);\n\t}\n\treturn (x>>>2) + y;\n}\n\n\n// EXPORTS //\n\nexport default hypot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-labs';\n\n\n// MAIN //\n\n/**\n* Computes the hypotenuse using the alpha max plus beta min algorithm, where `alpha = 1` and `beta = 1/4`.\n*\n* @private\n* @param {integer32} x - integer\n* @param {integer32} y - integer\n* @returns {number} hypotenuse\n*\n* @example\n* var h = hypot( 5.0, 12.0 );\n* // returns <number>\n*/\nfunction hypot( x, y ) {\n\tx = abs( x );\n\ty = abs( y );\n\tif ( x > y ) {\n\t\treturn x + (y>>>2);\n\t}\n\treturn (x>>>2) + y;\n}\n\n\n// EXPORTS //\n\nexport default hypot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the hypotenuse.\n*\n* @module @stdlib/math-base-special-fast-alpha-max-plus-beta-min\n*\n* @example\n* import hypot from '@stdlib/math-base-special-fast-alpha-max-plus-beta-min';\n*\n* var h = hypot( 5.0, 12.0 );\n* // returns ~13.5\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hypot1a from './hypot1a.js';\nimport hypot1b from './hypot1b.js';\nimport hypot2a from './hypot2a.js';\nimport hypot2b from './hypot2b.js';\nimport closure1a from './closure1a.js';\nimport closure1b from './closure1b.js';\n\n\n// MAIN //\n\n/**\n* Returns a function to compute a hypotenuse using the alpha max plus beta min algorithm.\n*\n* @param {number} alpha - alpha\n* @param {number} beta - beta\n* @param {boolean} [nonnegative] - boolean indicating whether input values are always nonnegative\n* @param {boolean} [ints] - boolean indicating whether input values are always 32-bit integers\n* @returns {Function} function to compute a hypotenuse\n*\n* @example\n* var hypot = factory( 1.0, 0.5 );\n* // returns <Function>\n*/\nfunction factory( alpha, beta, nonnegative, ints ) {\n\tif ( ints ) {\n\t\tif ( alpha === 1.0 && beta === 0.5 ) {\n\t\t\tif ( nonnegative ) {\n\t\t\t\treturn hypot1a;\n\t\t\t}\n\t\t\treturn hypot1b;\n\t\t}\n\t\tif ( alpha === 1.0 && beta === 0.25 ) {\n\t\t\tif ( nonnegative ) {\n\t\t\t\treturn hypot2a;\n\t\t\t}\n\t\t\treturn hypot2b;\n\t\t}\n\t}\n\tif ( nonnegative ) {\n\t\treturn closure1a( alpha, beta );\n\t}\n\treturn closure1b( alpha, beta );\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns a function to compute the hypotenuse using the alpha max plus beta min algorithm.\n*\n* @private\n* @param {number} alpha - alpha\n* @param {number} beta - beta\n* @returns {Function} function to compute the hypotenuse\n*\n* @example\n* var fcn = wrap( 1.0, 0.5 );\n* // returns <Function>\n*/\nfunction wrap( alpha, beta ) {\n\treturn hypot;\n\n\t/**\n\t* Computes the hypotenuse using the alpha max plus beta min algorithm.\n\t*\n\t* @private\n\t* @param {NonNegativeNumber} x - number\n\t* @param {NonNegativeNumber} y - number\n\t* @returns {number} hypotenuse\n\t*\n\t* @example\n\t* var h = hypot( 5.0, 12.0 );\n\t* // returns <number>\n\t*/\n\tfunction hypot( x, y ) {\n\t\tif ( x > y ) {\n\t\t\treturn (alpha*x) + (beta*y);\n\t\t}\n\t\treturn (beta*x) + (alpha*y);\n\t}\n}\n\n\n// EXPORTS //\n\nexport default wrap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-fast-abs';\n\n\n// MAIN //\n\n/**\n* Returns a function to compute the hypotenuse using the alpha max plus beta min algorithm.\n*\n* @private\n* @param {number} alpha - alpha\n* @param {number} beta - beta\n* @returns {Function} function to compute the hypotenuse\n*\n* @example\n* var fcn = wrap( 1.0, 0.5 );\n* // returns <Function>\n*/\nfunction wrap( alpha, beta ) {\n\treturn hypot;\n\n\t/**\n\t* Computes the hypotenuse using the alpha max plus beta min algorithm.\n\t*\n\t* @private\n\t* @param {number} x - number\n\t* @param {number} y - number\n\t* @returns {number} hypotenuse\n\t*\n\t* @example\n\t* var h = hypot( 5.0, 12.0 );\n\t* // returns <number>\n\t*/\n\tfunction hypot( x, y ) {\n\t\tx = abs( x );\n\t\ty = abs( y );\n\t\tif ( x > y ) {\n\t\t\treturn (alpha*x) + (beta*y);\n\t\t}\n\t\treturn (beta*x) + (alpha*y);\n\t}\n}\n\n\n// EXPORTS //\n\nexport default wrap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace fast.special\n*/\nvar ns = {};\n\n/**\n* @name abs\n* @memberof fast.special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/fast/abs}\n*/\nimport abs from '@stdlib/math-base-special-fast-abs';\nsetReadOnly( ns, 'abs', abs );\n\n/**\n* @name acosh\n* @memberof fast.special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/fast/acosh}\n*/\nimport acosh from '@stdlib/math-base-special-fast-acosh';\nsetReadOnly( ns, 'acosh', acosh );\n\n/**\n* @name ampbm\n* @memberof fast.special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/fast/alpha-max-plus-beta-min}\n*/\nimport ampbm from '@stdlib/math-base-special-fast-alpha-max-plus-beta-min';\nsetReadOnly( ns, 'ampbm', ampbm );\n\n/**\n* @name asinh\n* @memberof fast.special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/fast/asinh}\n*/\nimport asinh from '@stdlib/math-base-special-fast-asinh';\nsetReadOnly( ns, 'asinh', asinh );\n\n/**\n* @name atanh\n* @memberof fast.special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/fast/atanh}\n*/\nimport atanh from '@stdlib/math-base-special-fast-atanh';\nsetReadOnly( ns, 'atanh', atanh );\n\n/**\n* @name hypot\n* @memberof fast.special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/fast/hypot}\n*/\nimport hypot from '@stdlib/math-base-special-fast-hypot';\nsetReadOnly( ns, 'hypot', hypot );\n\n/**\n* @name max\n* @memberof fast.special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/fast/max}\n*/\nimport max from '@stdlib/math-base-special-fast-max';\nsetReadOnly( ns, 'max', max );\n\n/**\n* @name min\n* @memberof fast.special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/fast/min}\n*/\nimport min from '@stdlib/math-base-special-fast-min';\nsetReadOnly( ns, 'min', min );\n\n/**\n* @name powint\n* @memberof fast.special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/fast/pow-int}\n*/\nimport powint from '@stdlib/math-base-special-fast-pow-int';\nsetReadOnly( ns, 'powint', powint );\n\n/**\n* @name log2Uint32\n* @memberof fast.special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/fast/uint32-log2}\n*/\nimport log2Uint32 from '@stdlib/math-base-special-fast-uint32-log2';\nsetReadOnly( ns, 'log2Uint32', log2Uint32 );\n\n/**\n* @name sqrtUint32\n* @memberof fast.special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/fast/uint32-sqrt}\n*/\nimport sqrtUint32 from '@stdlib/math-base-special-fast-uint32-sqrt';\nsetReadOnly( ns, 'sqrtUint32', sqrtUint32 );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isinfinite from '@stdlib/math-base-assert-is-infinite';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Computes the hyperbolic arccosine of a number.\n*\n* @param {number} x - input value\n* @returns {number} hyperbolic arccosine (in radians)\n*\n* @example\n* var v = acosh( 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = acosh( 2.0 );\n* // returns ~1.317\n*\n* @example\n* var v = acosh( NaN );\n* // returns NaN\n*/\nfunction acosh( x ) {\n\tif ( x < 1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( isnan( x ) || isinfinite( x ) ) {\n\t\treturn x;\n\t}\n\treturn ln( x + (sqrt( x+1.0 )*sqrt( x-1.0 )) );\n}\n\n\n// EXPORTS //\n\nexport default acosh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isinfinite from '@stdlib/math-base-assert-is-infinite';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Computes the hyperbolic arcsine of a number.\n*\n* @param {number} x - input value\n* @returns {number} hyperbolic arcsine (in radians)\n*\n* @example\n* var v = asinh( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = asinh( 2.0 );\n* // returns ~1.444\n*\n* @example\n* var v = asinh( -2.0 );\n* // returns ~-1.444\n*\n* @example\n* var v = asinh( NaN );\n* // returns NaN\n*/\nfunction asinh( x ) {\n\tif (\n\t\tx === 0.0 || // +-0.0\n\t\tisnan( x ) ||\n\t\tisinfinite( x )\n\t) {\n\t\treturn x;\n\t}\n\tif ( x > 0 ) {\n\t\treturn ln( x + sqrt( (x*x) + 1 ) );\n\t}\n\t// Better precision for large negative `x`:\n\treturn -ln( -x + sqrt( (x*x) + 1 ) );\n}\n\n\n// EXPORTS //\n\nexport default asinh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isinfinite from '@stdlib/math-base-assert-is-infinite';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Computes the hyperbolic arctangent of a number.\n*\n* @param {number} x - input value\n* @returns {number} hyperbolic arctangent (in radians)\n*\n* @example\n* var v = atanh( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = atanh( 0.9 );\n* // returns ~1.472\n*\n* @example\n* var v = atanh( 1.0 );\n* // returns Infinity\n*\n* @example\n* v = atanh( -1.0 );\n* // returns -Infinity\n*\n* @example\n* var v = atanh( NaN );\n* // returns NaN\n*/\nfunction atanh( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn x;\n\t}\n\tif (\n\t\tisnan( x ) ||\n\t\tisinfinite( x )\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 0.5 * ln( (1.0+x) / (1.0-x) );\n}\n\n\n// EXPORTS //\n\nexport default atanh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Computes the hypotenuse.\n*\n* @param {number} x - number\n* @param {number} y - number\n* @returns {number} hypotenuse\n*\n* @example\n* var h = hypot( -5.0, 12.0 );\n* // returns 13.0\n*/\nfunction hypot( x, y ) {\n\treturn sqrt( (x*x) + (y*y) );\n}\n\n\n// EXPORTS //\n\nexport default hypot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the maximum value.\n*\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {number} maximum value\n*\n* @example\n* var v = max( 3.14, 4.2 );\n* // returns 4.2\n*\n* @example\n* var v = max( 3.14, NaN );\n* // returns NaN\n*\n* @example\n* var v = max( NaN, 3.14 );\n* // returns 3.14\n*\n* @example\n* var v = max( -0.0, +0.0 );\n* // returns +0.0\n*\n* @example\n* var v = max( +0.0, -0.0 );\n* // returns -0.0\n*/\nfunction max( x, y ) {\n\tif ( x > y ) {\n\t\treturn x;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default max;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the minimum value.\n*\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {number} minimum value\n*\n* @example\n* var v = min( 3.14, 4.2 );\n* // returns 3.14\n*\n* @example\n* var v = min( 3.14, NaN );\n* // returns NaN\n*\n* @example\n* var v = min( NaN, 3.14 );\n* // returns 3.14\n*\n* @example\n* var v = min( -0.0, +0.0 );\n* // returns +0.0\n*\n* @example\n* var v = min( +0.0, -0.0 );\n* // returns -0.0\n*/\nfunction min( x, y ) {\n\tif ( x < y ) {\n\t\treturn x;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default min;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// VARIABLES //\n\nvar ZERO = 0|0; // asm type annotation\nvar ONE = 1|0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Evaluates the exponential function.\n*\n* ## Method\n*\n* -   The exponential function is given by\n*\n*     ```tex\n*     z = x^y\n*     ```\n*\n*     where \\\\(x\\\\) is the base and \\\\(y\\\\) the exponent.\n*\n* -   First observe that a naive approach for exponentiation\n*\n*     ```tex\n*     5^5 = 5 \\cdot 5 \\cdot 5 \\cdot 5 \\cdot 5\n*     ```\n*\n*     requires \\\\(y-1\\\\) multiplications.\n*\n* -   We can reduce the number of multiplications by first computing \\\\(x2 = x \\cdot x\\\\).\n*\n*     ```tex\n*     5^5 = x2 \\cdot x2 \\cdot x\n*     ```\n*\n*     thus requiring only three multiplications.\n*\n* -   This observation may be generalized, such that, for a positive exponent \\\\(y\\\\),\n*\n*     ```tex\n*     x^y = \\begin{cases}\n*           x (x^2)^{\\frac{y-1}{2}}, & \\text{if $y$ is odd} \\\\\n*           (x^2)^{\\frac{y}{2}}, & \\text{if $y$ is even}\n*     \\end{cases}\n*     ```\n*\n* -   Note that the above generalization only involves powers of two. For example, in our working example, the powers are \\\\(1\\\\) and \\\\(4\\\\). To determine these powers, we observe that integer values, when stored in binary format, are simply sums of powers of two. For example, the integer \\\\(5\\\\) has the bit sequence\n*\n*     ```binarystring\n*     00000000000000000000000000000101\n*     ```\n*\n*     where \\\\(101\\\\) translates to\n*\n*     ```tex\n*     2^2 + 2^0 = 4 + 1 = 5\n*     ```\n*\n*     Thus, rather conveniently, the powers of two needed for exponentiation are easily derived from the binary representation of the integer exponent.\n*\n* -   The previous observation lends itself readily to an iterative exponentiation algorithm, referred to as **right-to-left binary exponentiation**. The algorithm is as follows:\n*\n*     ```text\n*     1. Examine the least significant bit to determine if we have a power of 2.\n*     2. If yes, compute an intermediate result.\n*     3. Square the base.\n*     4. Shift off the least significant bit (LSB).\n*     5. If the exponent is greater than 0, repeat steps 1-4.\n*     6. Return the intermediate result.\n*     ```\n*\n*     For example, consider \\\\(5^5 = 3125\\\\).\n*\n*     ```text\n*     Initialization: r = 1\n*     Iteration 1: y = 101 => r = 1*5, x = 5*5 = 25\n*     Iteration 2: y = 10 => x = 25*25 = 625\n*     Iteration 3: y = 1 => r = 5*625 = 3125, x = 625*625\n*     Return: r\n*     ```\n*\n* ## Notes\n*\n* -   The above algorithm involves \\\\(\\lfloor \\log_2(y) \\rfloor\\\\) square operations and at most \\\\(\\lfloor \\log_2(y) \\rfloor\\\\) multiplications.\n*\n* -   The above algorithm may not return precise results due to an accumulation of error. For example,\n*\n*     ```javascript\n*     var y = pow( 10.0, 308 );\n*     // returns 1.0000000000000006e+308\n*     // expected 1.0e+308\n*     ```\n*\n*     If we compare the bit sequence of the returned value\n*\n*     ```binarystring\n*     0111111111100001110011001111001110000101111010111100100010100011\n*     ```\n*\n*     with the expected value\n*\n*     ```binarystring\n*     0111111111100001110011001111001110000101111010111100100010100000\n*     ```\n*\n*     we observe that the returned value differs in its last two bits.\n*\n* @param {number} x - base\n* @param {integer32} y - exponent\n* @returns {number} function value\n*\n* @example\n* var v = pow( 2.0, 3 );\n* // returns 8.0\n*\n* @example\n* var v = pow( 3.14, 0 );\n* // returns 1.0\n*\n* @example\n* var v = pow( 2.0, -2 );\n* // returns 0.25\n*\n* @example\n* var v = pow( 0.0, 0 );\n* // returns 1.0\n*\n* @example\n* var v = pow( -3.14, 1 );\n* // returns -3.14\n*\n* @example\n* var v = pow( NaN, 0 );\n* // returns NaN\n*/\nfunction pow( x, y ) {\n\tvar v;\n\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\t// If the exponent is negative, use the reciprocal...\n\tif ( y < ZERO ) {\n\t\ty = -y;\n\t\tif ( x === 0.0 ) {\n\t\t\tx = 1.0 / x; // +-infinity\n\t\t\tif ( ( y & ONE ) === ONE ) {\n\t\t\t\t// Exponent is odd, so `x` keeps its sign:\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Exponent is even, so result is always positive:\n\t\t\treturn PINF;\n\t\t}\n\t\tx = 1.0 / x;\n\t}\n\t// If the exponent is zero, the result is always unity...\n\telse if ( y === ZERO ) {\n\t\treturn 1.0;\n\t}\n\tv = 1;\n\twhile ( y !== ZERO ) {\n\t\t// Check the least significant bit (LSB) to determine if \"on\" (if so, we have a power of 2)...\n\t\tif ( ( y & ONE ) === ONE ) {\n\t\t\tv *= x;\n\t\t}\n\t\tx *= x; // possible overflow\n\t\ty >>= ONE;\n\t}\n\treturn v;\n}\n\n\n// EXPORTS //\n\nexport default pow;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\n// 4294901760 => 0xFFFF0000 => 11111111111111110000000000000000\nvar B4 = 0xFFFF0000 >>> 0; // asm type annotation\n\n// 65280 => 0xFF00 => 00000000000000001111111100000000\nvar B3 = 0xFF00 >>> 0; // asm type annotation\n\n// 240 => 0xF0 => 00000000000000000000000011110000\nvar B2 = 0xF0 >>> 0; // asm type annotation\n\n// 12 => 0xC => 00000000000000000000000000001100\nvar B1 = 0xC >>> 0; // asm type annotation\n\n// 2 => 0x2 => 00000000000000000000000000000010\nvar B0 = 0x2 >>> 0; // asm type annotation\n\n// 16 => 00000000000000000000000000010000\nvar S4 = 16 >>> 0; // asm type annotation\n\n// 8 => 00000000000000000000000000001000\nvar S3 = 8 >>> 0; // asm type annotation\n\n// 4 => 00000000000000000000000000000100\nvar S2 = 4 >>> 0; // asm type annotation\n\n// 2 => 00000000000000000000000000000010\nvar S1 = 2 >>> 0; // asm type annotation\n\n// 1 => 00000000000000000000000000000001\nvar S0 = 1 >>> 0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Computes an integer binary logarithm (base two).\n*\n* ## Method\n*\n* 1.  Note that the largest unsigned 32-bit integer is `4294967295`, which is `2^{32}-1`. Hence, the integer binary logarithm cannot exceed `31` (i.e., `16 + 8 + 4 + 2 + 1`), which corresponds to the bit sequence\n*\n*     ```binarystring\n*     00000000000000000000000000011111\n*     ```\n*\n* 2.  Initialize a return variable with the value zero.\n*\n* 3.  If at least one of the first sixteen most significant bits of the input 32-bit integer `x` is turned on, we know that the power to which the number `2` must be raised to obtain `x` is at least `16` (i.e., `x > 65536`). Hence, activate the corresponding bit of the return variable. Mutate `x` by shifting sixteen bits to the right, discarding the bits shifted off.\n*\n* 4.  Carry out the following steps with `B` in `[ 8, 4, 2, 1 ]`:\n*\n*     -   If at least one of the next `B` most significant bits of the current `x` is turned on, we know that the power to which the number `2` must be raised to obtain `x` has to be increased by `B`.\n*     -   Activate the bit of the return variable that corresponds to `B`.\n*     -   Mutate `x` by shifting `B` bits to the right, discarding the bits shifted off.\n*\n* 5.  The final value of the return variable is the integer binary logarithm of `x`.\n*\n* @param {uinteger32} x - input value\n* @returns {uinteger32} integer binary logarithm\n*\n* @example\n* var v = log2( 4 >>> 0 );\n* // returns 2\n*\n* @example\n* var v = log2( 8 >>> 0 );\n* // returns 3\n*\n* @example\n* var v = log2( 9 >>> 0 );\n* // returns 3\n*/\nfunction log2( x ) {\n\tvar out = 0 >>> 0; // asm type annotation\n\tvar y = x >>> 0; // asm type annotation\n\n\t// `x >= 65536`:\n\tif ( y & B4 ) {\n\t\ty >>>= S4;\n\t\tout |= S4;\n\t}\n\t// `x >= 256`:\n\tif ( y & B3 ) {\n\t\ty >>>= S3;\n\t\tout |= S3;\n\t}\n\t// `x >= 16`:\n\tif ( y & B2 ) {\n\t\ty >>>= S2;\n\t\tout |= S2;\n\t}\n\t// `x >= 4`:\n\tif ( y & B1 ) {\n\t\ty >>>= S1;\n\t\tout |= S1;\n\t}\n\t// `x >= 2`:\n\tif ( y & B0 ) {\n\t\ty >>>= S0;\n\t\tout |= S0;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default log2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\n// Set the second most significant bit: 00100000000000000000000000000000 => 1<<30 = 1073741824\nvar BIT = 1073741824 >>> 0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Returns an integer square root.\n*\n* @param {uinteger32} x - input value\n* @returns {uinteger32} integer square root\n*\n* @example\n* var v = sqrt( 9 >>> 0 );\n* // returns 3\n*\n* @example\n* var v = sqrt( 2 >>> 0 );\n* // returns 1\n*\n* @example\n* var v = sqrt( 3 >>> 0 );\n* // returns 1\n*\n* @example\n* var v = sqrt( 0 >>> 0 );\n* // returns 0\n*/\nfunction sqrt( x ) {\n\tvar root;\n\tvar bit;\n\tvar sum;\n\tvar y;\n\n\ty = x >>> 0; // asm type annotation\n\n\troot = 0 >>> 0; // asm type annotation\n\tbit = BIT;\n\n\t// `bit` should start as the highest power of `4` less than or equal to `x`:\n\twhile ( bit > y ) {\n\t\tbit >>>= 2;\n\t}\n\t// Perform a digit-by-digit/abacus computation...\n\twhile ( bit !== 0 ) {\n\t\tsum = ( root + bit ) >>> 0; // asm type annotation\n\t\troot >>>= 1;\n\t\tif ( x >= sum ) {\n\t\t\tx -= sum;\n\t\t\troot += bit;\n\t\t}\n\t\tbit >>>= 2;\n\t}\n\t// Note: `x` is the remainder\n\n\treturn root >>> 0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nexport default sqrt;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum safe nth Fibonacci number when stored in double-precision floating-point format.\n*\n* @module @stdlib/constants-float64-max-safe-nth-fibonacci\n* @type {integer}\n*\n* @example\n* import FLOAT64_MAX_SAFE_NTH_FIBONACCI from '@stdlib/constants-float64-max-safe-nth-fibonacci';\n* // returns 78\n*/\n\n\n// MAIN //\n\n/**\n* The maximum safe nth Fibonacci number when stored in double-precision floating-point format.\n*\n* @constant\n* @type {integer}\n* @default 78\n* @see [Fibonacci number]{@link https://en.wikipedia.org/wiki/Fibonacci_number}\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_SAFE_NTH_FIBONACCI = 78|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_SAFE_NTH_FIBONACCI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport ln from '@stdlib/math-base-special-ln';\nimport round from '@stdlib/math-base-special-round';\nimport PHI from '@stdlib/constants-float64-phi';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// VARIABLES //\n\nvar SQRT_5 = 2.23606797749979;\nvar LN_PHI = ln( PHI );\n\n\n// MAIN //\n\n/**\n* Computes the Fibonacci number index.\n*\n* ## Notes\n*\n* -   We use `round` instead of `floor` due to errors introduced by floating-point precision.\n*\n* @param {NonNegativeInteger} F - Fibonacci number\n* @returns {NonNegativeInteger} Fibonacci number index\n*\n* @example\n* var n = fibonacciIndex( 0 );\n* // returns NaN\n*\n* @example\n* var n = fibonacciIndex( 1 );\n* // returns NaN\n*\n* @example\n* var n = fibonacciIndex( 2 );\n* // returns 3\n*\n* @example\n* var n = fibonacciIndex( 3 );\n* // returns 4\n*\n* @example\n* var n = fibonacciIndex( 5 );\n* // returns 5\n*\n* @example\n* var n = fibonacciIndex( 8 );\n* // returns 6\n*\n* @example\n* var n = fibonacciIndex( NaN );\n* // returns NaN\n*\n* @example\n* var n = fibonacciIndex( 3.14 );\n* // returns NaN\n*\n* @example\n* var n = fibonacciIndex( -1 );\n* // returns NaN\n*/\nfunction fibonacciIndex( F ) {\n\tvar x;\n\tif (\n\t\tisnan( F ) ||\n\t\tisInteger( F ) === false ||\n\t\tF <= 1 ||\n\t\tF === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\tx = ( F*SQRT_5 ) + 0.5;\n\treturn round( ln( x ) / LN_PHI );\n}\n\n\n// EXPORTS //\n\nexport default fibonacciIndex;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport SIGN_MASK from '@stdlib/constants-float64-high-word-sign-mask';\nimport toWords from '@stdlib/number-float64-base-to-words';\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport fromWords from '@stdlib/number-float64-base-from-words';\n\n\n// VARIABLES //\n\n// High/low words workspace:\nvar WORDS = [ 0>>>0, 0>>>0 ]; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `x*y`.\n*\n* @param {number} x - number from which to derive a magnitude\n* @param {number} y - number from which to derive a sign\n* @returns {number} a double-precision floating-point number\n*\n* @example\n* var z = flipsign( -3.0, 10.0 );\n* // returns -3.0\n*\n* @example\n* var z = flipsign( -3.0, -1.0 );\n* // returns 3.0\n*\n* @example\n* var z = flipsign( 1.0, -0.0 );\n* // returns -1.0\n*\n* @example\n* var z = flipsign( -3.0, -0.0 );\n* // returns 3.0\n*\n* @example\n* var z = flipsign( -0.0, 1.0 );\n* // returns -0.0\n*\n* @example\n* var z = flipsign( 0.0, -1.0 );\n* // returns -0.0\n*/\nfunction flipsign( x, y ) {\n\tvar hx;\n\tvar hy;\n\n\t// Split `x` into higher and lower order words:\n\ttoWords.assign( x, WORDS, 1, 0 );\n\thx = WORDS[ 0 ];\n\n\t// Extract the higher order word from `y`:\n\thy = getHighWord( y );\n\n\t// Leave only the sign bit of `y` turned on (if on):\n\thy &= SIGN_MASK;\n\n\t// Flip the sign bit of `x` only when the sign bit of `y` is on:\n\thx ^= hy; // 1^1=0 (flipped), 0^1=1 (flipped), 1^0=1 (unchanged), 0^0=0 (unchanged)\n\n\t// Return a new value having the same magnitude as `x`, but with the sign of `x*y`:\n\treturn fromWords( hx, WORDS[ 1 ] );\n}\n\n\n// EXPORTS //\n\nexport default flipsign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: implementation (?)\n\n/**\n* Rounds a single-precision floating-point number toward negative infinity.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = floorf( -4.2 );\n* // returns -5.0\n*\n* @example\n* var v = floorf( 9.99999 );\n* // returns 9.0\n*\n* @example\n* var v = floorf( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = floorf( NaN );\n* // returns NaN\n*/\nvar floorf = Math.floor; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default floorf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1987, 1989, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { assign as sincos } from '@stdlib/math-base-special-sincos';\nimport abs from '@stdlib/math-base-special-abs';\nimport HALF_PI from '@stdlib/constants-float64-half-pi';\nimport PI from '@stdlib/constants-float64-pi';\nimport polyS from './rational_psqs.js';\nimport polyC from './rational_pcqc.js';\nimport polyF from './rational_pfqf.js';\nimport polyG from './rational_pgqg.js';\n\n\n// VARIABLES //\n\n// Array for storing sincos evaluation:\nvar sc = [ 0.0, 0.0 ];\n\n\n// MAIN //\n\n/**\n* Computes the Fresnel integrals S(x) and C(x) and assigns results to a provided output array.\n*\n* ## Method\n*\n* Evaluates the Fresnel integrals\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{S}(x) &= \\int_0^x \\sin\\left(\\frac{\\pi}{2} t^2\\right)\\,\\mathrm{d}t, \\\\\n* \\operatorname{C}(x) &= \\int_0^x \\cos\\left(\\frac{\\pi}{2} t^2\\right)\\,\\mathrm{d}t.\n* \\end{align*}\n* ```\n*\n* The integrals are evaluated by a power series for \\\\( x < 1 \\\\). For \\\\( x >= 1 \\\\) auxiliary functions \\\\( f(x) \\\\) and \\\\( g(x) \\\\) are employed such that\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{C}(x) &= \\frac{1}{2} + f(x) \\sin\\left( \\frac{\\pi}{2} x^2 \\right) - g(x) \\cos\\left( \\frac{\\pi}{2} x^2 \\right), \\\\\n* \\operatorname{S}(x) &= \\frac{1}{2} - f(x) \\cos\\left( \\frac{\\pi}{2} x^2 \\right) - g(x) \\sin\\left( \\frac{\\pi}{2} x^2 \\right).\n* \\end{align*}\n* ```\n*\n* ## Notes\n*\n* -   Relative error on test interval \\\\( \\[0,10\\] \\\\):\n*\n*     | arithmetic | function | # trials | peak    | rms     |\n*     |:----------:|:--------:|:--------:|:-------:|:-------:|\n*     | IEEE       | S(x)     | 10000    | 2.0e-15 | 3.2e-16 |\n*     | IEEE       | C(x)     | 10000    | 1.8e-15 | 3.3e-16 |\n*\n* @private\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} S(x) and C(x)\n*\n* @example\n* var v = fresnel( 0.0, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ 0.0, 0.0 ]\n*\n* @example\n* var v = fresnel( 1.0, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ ~0.438, ~0.780 ]\n*\n* @example\n* var v = fresnel( Infinity, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ ~0.5, ~0.5 ]\n*\n* @example\n* var v = fresnel( -Infinity, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ ~-0.5, ~-0.5 ]\n*\n* @example\n* var v = fresnel( NaN, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ NaN, NaN ]\n*/\nfunction fresnel( x, out, stride, offset ) {\n\tvar x2;\n\tvar xa;\n\tvar f;\n\tvar g;\n\tvar t;\n\tvar u;\n\n\txa = abs( x );\n\tx2 = xa * xa;\n\tif ( x2 < 2.5625 ) {\n\t\tt = x2 * x2;\n\t\tout[ offset ] = xa * x2 * polyS( t );\n\t\tout[ offset+stride ] = xa * polyC( t );\n\t} else if ( xa > 36974.0 ) {\n\t\tout[ offset+stride ] = 0.5;\n\t\tout[ offset ] = 0.5;\n\t} else {\n\t\t// Asymptotic power series auxiliary functions for large arguments...\n\t\tx2 = xa * xa;\n\t\tt = PI * x2;\n\t\tu = 1.0 / (t * t);\n\t\tt = 1.0 / t;\n\t\tf = 1.0 - ( u * polyF( u ) );\n\t\tg = t * polyG( u );\n\t\tt = HALF_PI * x2;\n\t\tsincos( t, sc, 1, 0 );\n\t\tt = PI * xa;\n\t\tout[ offset+stride ] = 0.5 + ( ( (f*sc[0]) - (g*sc[1]) ) / t );\n\t\tout[ offset ] = 0.5 - ( ( (f*sc[1]) + (g*sc[0]) ) / t );\n\t}\n\tif ( x < 0.0 ) {\n\t\tout[ offset+stride ] = -out[ offset+stride ];\n\t\tout[ offset ] = -out[ offset ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default fresnel;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.5235987755982989;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 318016297876.5678 + (x * (-44297951805.96978 + (x * (2548908805.7337637 + (x * (-62974148.62058625 + (x * (708840.0452577386 + (x * (-2991.8191940101983 + (x * 0.0))))))))))); // eslint-disable-line max-len\n\t\ts2 = 607366389490.0846 + (x * (22441179564.534092 + (x * (419320245.8981112 + (x * (5173438.887700964 + (x * (45584.78108065326 + (x * (281.3762688899943 + (x * 1.0))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (-2991.8191940101983 + (x * (708840.0452577386 + (x * (-62974148.62058625 + (x * (2548908805.7337637 + (x * (-44297951805.96978 + (x * 318016297876.5678))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (281.3762688899943 + (x * (45584.78108065326 + (x * (5173438.887700964 + (x * (419320245.8981112 + (x * (22441179564.534092 + (x * 607366389490.0846))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 1.0 + (x * (-0.20552590095501388 + (x * (0.018884331939670384 + (x * (-0.0006451914356839651 + (x * (0.000009504280628298596 + (x * (-4.9884311457357354e-8 + (x * 0.0))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.04121420907221998 + (x * (0.0008680295429417843 + (x * (0.000012226278902417902 + (x * (1.2500186247959882e-7 + (x * (9.154392157746574e-10 + (x * 3.99982968972496e-12))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (-4.9884311457357354e-8 + (x * (0.000009504280628298596 + (x * (-0.0006451914356839651 + (x * (0.018884331939670384 + (x * (-0.20552590095501388 + (x * 1.0))))))))))); // eslint-disable-line max-len\n\t\ts2 = 3.99982968972496e-12 + (x * (9.154392157746574e-10 + (x * (1.2500186247959882e-7 + (x * (0.000012226278902417902 + (x * (0.0008680295429417843 + (x * (0.04121420907221998 + (x * 1.0))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 2.999999999999634;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 3.763297112699879e-20 + (x * (1.3428327623306275e-16 + (x * (1.7201074326816183e-13 + (x * (1.0230451416490724e-10 + (x * (3.055689837902576e-8 + (x * (0.0000046361374928786735 + (x * (0.000345017939782574 + (x * (0.011522095507358577 + (x * (0.1434079197807589 + (x * (0.4215435550436775 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.2544323709001127e-20 + (x * (4.5200143407412973e-17 + (x * (5.887545336215784e-14 + (x * (3.6014002958937136e-11 + (x * (1.1269922476399903e-8 + (x * (0.0000018462756734893055 + (x * (0.00015593440916415301 + (x * (0.0064405152650885865 + (x * (0.11688892585919138 + (x * (0.7515863983533789 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (0.4215435550436775 + (x * (0.1434079197807589 + (x * (0.011522095507358577 + (x * (0.000345017939782574 + (x * (0.0000046361374928786735 + (x * (3.055689837902576e-8 + (x * (1.0230451416490724e-10 + (x * (1.7201074326816183e-13 + (x * (1.3428327623306275e-16 + (x * 3.763297112699879e-20))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.7515863983533789 + (x * (0.11688892585919138 + (x * (0.0064405152650885865 + (x * (0.00015593440916415301 + (x * (0.0000018462756734893055 + (x * (1.1269922476399903e-8 + (x * (3.6014002958937136e-11 + (x * (5.887545336215784e-14 + (x * (4.5200143407412973e-17 + (x * 1.2544323709001127e-20))))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 1.8695871016278324e-22 + (x * (8.363544356306774e-19 + (x * (1.375554606332618e-15 + (x * (1.0826804113902088e-12 + (x * (4.4534441586175015e-10 + (x * (9.828524436884223e-8 + (x * (0.000011513882611188428 + (x * (0.0006840793809153931 + (x * (0.018764858409257526 + (x * (0.1971028335255234 + (x * (0.5044420736433832 + (x * 0.0))))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.8695871016278324e-22 + (x * (8.391588162831187e-19 + (x * (1.3879653125957886e-15 + (x * (1.1027321506624028e-12 + (x * (4.6068072814652043e-10 + (x * (1.0431458965757199e-7 + (x * (0.000012754507566772912 + (x * (0.0008146791071843061 + (x * (0.02536037414203388 + (x * (0.33774898912002 + (x * (1.4749575992512833 + (x * 1.0))))))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (0.5044420736433832 + (x * (0.1971028335255234 + (x * (0.018764858409257526 + (x * (0.0006840793809153931 + (x * (0.000011513882611188428 + (x * (9.828524436884223e-8 + (x * (4.4534441586175015e-10 + (x * (1.0826804113902088e-12 + (x * (1.375554606332618e-15 + (x * (8.363544356306774e-19 + (x * 1.8695871016278324e-22))))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (1.4749575992512833 + (x * (0.33774898912002 + (x * (0.02536037414203388 + (x * (0.0008146791071843061 + (x * (0.000012754507566772912 + (x * (1.0431458965757199e-7 + (x * (4.6068072814652043e-10 + (x * (1.1027321506624028e-12 + (x * (1.3879653125957886e-15 + (x * (8.391588162831187e-19 + (x * 1.8695871016278324e-22))))))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport computeFresnel from './assign.js';\n\n\n// MAIN //\n\n/**\n* Computes the Fresnel integrals S(x) and C(x).\n*\n* @param {number} x - input value\n* @returns {Array<number>} S(x) and C(x)\n*\n* @example\n* var v = fresnel( 0.0 );\n* // returns [ 0.0, 0.0 ]\n*\n* @example\n* var v = fresnel( 1.0 );\n* // returns [ ~0.438, ~0.780 ]\n*\n* @example\n* var v = fresnel( Infinity );\n* // returns [ ~0.5, ~0.5 ]\n*\n* @example\n* var v = fresnel( -Infinity );\n* // returns [ ~-0.5, ~-0.5 ]\n*\n* @example\n* var v = fresnel( NaN );\n* // returns [ NaN, NaN ]\n*/\nfunction fresnel( x ) {\n\treturn computeFresnel( x, [ 0.0, 0.0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default fresnel;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the Fresnel integrals S(x) and C(x).\n*\n* @module @stdlib/math-base-special-fresnel\n*\n* @example\n* import fresnel from '@stdlib/math-base-special-fresnel';\n*\n* var v = fresnel( 0.0 );\n* // returns [ 0.0, 0.0 ]\n*\n* v = fresnel( 1.0 );\n* // returns [ ~0.438, ~0.780 ]\n*\n* v = fresnel( Infinity );\n* // returns [ ~0.5, ~0.5 ]\n*\n* v = fresnel( -Infinity );\n* // returns [ ~-0.5, ~-0.5 ]\n*\n* v = fresnel( NaN );\n* // returns [ NaN, NaN ]\n*\n* @example\n* import fresnel from '@stdlib/math-base-special-fresnel';\n*\n* var out = new Float64Array( 2 );\n*\n* var v = fresnel.assign( 0.0, out, 1, 0 );\n* // return <Float64Array>[ ~0.0, ~0.0 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1987, 1989, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { assign as sincos } from '@stdlib/math-base-special-sincos';\nimport abs from '@stdlib/math-base-special-abs';\nimport HALF_PI from '@stdlib/constants-float64-half-pi';\nimport PI from '@stdlib/constants-float64-pi';\nimport polyC from './rational_pcqc.js';\nimport polyF from './rational_pfqf.js';\nimport polyG from './rational_pgqg.js';\n\n\n// VARIABLES //\n\n// Array for storing sincos evaluation:\nvar sc = [ 0.0, 0.0 ];\n\n\n// MAIN //\n\n/**\n* Computes the Fresnel integral C(x).\n*\n* ## Method\n*\n* Evaluates the Fresnel integral\n*\n* ```tex\n* \\operatorname{C}(x) = \\int_0^x \\cos\\left(\\frac{\\pi}{2} t^2\\right)\\,\\mathrm{d}t.\n* ```\n*\n* The integral is evaluated by a power series for \\\\( x < 1 \\\\). For \\\\( x >= 1 \\\\) auxiliary functions \\\\( f(x) \\\\) and \\\\( g(x) \\\\) are employed such that\n*\n* ```tex\n* \\operatorname{C}(x) = \\frac{1}{2} + f(x) \\sin\\left( \\frac{\\pi}{2} x^2 \\right) - g(x) \\cos\\left( \\frac{\\pi}{2} x^2 \\right).\n* ```\n*\n* ## Notes\n*\n* -   Relative error on test interval \\\\( \\[0,10\\] \\\\):\n*\n*     | arithmetic | function | # trials | peak    | rms     |\n*     |:----------:|:--------:|:--------:|:-------:|:-------:|\n*     | IEEE       | C(x)     | 10000    | 1.8e-15 | 3.3e-16 |\n*\n* @param {number} x - input value\n* @returns {number} C(x)\n*\n* @example\n* var v = fresnelc( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = fresnelc( 1.0 );\n* // returns ~0.780\n*\n* @example\n* var v = fresnelc( Infinity );\n* // returns ~0.5\n*\n* @example\n* var v = fresnelc( -Infinity );\n* // returns ~-0.5\n*\n* @example\n* var v = fresnelc( NaN );\n* // returns NaN\n*/\nfunction fresnelc( x ) {\n\tvar x2;\n\tvar xa;\n\tvar C;\n\tvar f;\n\tvar g;\n\tvar t;\n\tvar u;\n\n\txa = abs( x );\n\tx2 = xa * xa;\n\tif ( x2 < 2.5625 ) {\n\t\tt = x2 * x2;\n\t\tC = xa * polyC( t );\n\t} else if ( xa > 36974.0 ) {\n\t\tC = 0.5;\n\t} else {\n\t\t// Asymptotic power series auxiliary functions for large arguments...\n\t\tx2 = xa * xa;\n\t\tt = PI * x2;\n\t\tu = 1.0 / (t * t);\n\t\tt = 1.0 / t;\n\t\tf = 1.0 - ( u * polyF( u ) );\n\t\tg = t * polyG( u );\n\t\tt = HALF_PI * x2;\n\t\tsincos( t, sc, 1, 0 );\n\t\tt = PI * xa;\n\t\tC = 0.5 + ( ( (f*sc[0]) - (g*sc[1]) ) / t );\n\t}\n\tif ( x < 0.0 ) {\n\t\tC = -C;\n\t}\n\treturn C;\n}\n\n\n// EXPORTS //\n\nexport default fresnelc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1987, 1989, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { assign as sincos } from '@stdlib/math-base-special-sincos';\nimport abs from '@stdlib/math-base-special-abs';\nimport HALF_PI from '@stdlib/constants-float64-half-pi';\nimport PI from '@stdlib/constants-float64-pi';\nimport polyS from './rational_psqs.js';\nimport polyF from './rational_pfqf.js';\nimport polyG from './rational_pgqg.js';\n\n\n// VARIABLES //\n\n// Array for storing sincos evaluation:\nvar sc = [ 0.0, 0.0 ];\n\n\n// MAIN //\n\n/**\n* Computes the Fresnel integral S(x).\n*\n* ## Method\n*\n* Evaluates the Fresnel integral\n*\n* ```tex\n* \\operatorname{S}(x) = \\int_0^x \\sin\\left(\\frac{\\pi}{2} t^2\\right)\\,\\mathrm{d}t\n* ```\n*\n* The integral is evaluated by a power series for \\\\( x < 1 \\\\). For \\\\( x >= 1 \\\\) auxiliary functions \\\\( f(x) \\\\) and \\\\( g(x) \\\\) are employed such that\n*\n* ```tex\n* \\operatorname{S}(x) = \\frac{1}{2} - f(x) \\cos\\left( \\frac{\\pi}{2} x^2 \\right) - g(x) \\sin\\left( \\frac{\\pi}{2} x^2 \\right).\n* ```\n*\n* ## Notes\n*\n* -   Relative error on test interval \\\\( \\[0,10\\] \\\\):\n*\n*     | arithmetic | function | # trials | peak    | rms     |\n*     |:----------:|:--------:|:--------:|:--------:|:-------:|\n*     | IEEE       | S(x)     | 10000    | 2.0e-15 | 3.2e-16 |\n*\n* @param {number} x - input value\n* @returns {number} S(x)\n*\n* @example\n* var v = fresnels( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = fresnels( 1.0 );\n* // returns ~0.438\n*\n* @example\n* var v = fresnels( Infinity );\n* // returns ~0.5\n*\n* @example\n* var v = fresnels( -Infinity );\n* // returns ~-0.5\n*\n* @example\n* var v = fresnels( NaN );\n* // returns NaN\n*/\nfunction fresnels( x ) {\n\tvar x2;\n\tvar xa;\n\tvar S;\n\tvar f;\n\tvar g;\n\tvar t;\n\tvar u;\n\n\txa = abs( x );\n\tx2 = xa * xa;\n\tif ( x2 < 2.5625 ) {\n\t\tt = x2 * x2;\n\t\tS = xa * x2 * polyS( t );\n\t} else if ( xa > 36974.0 ) {\n\t\tS = 0.5;\n\t} else {\n\t\t// Asymptotic power series auxiliary functions for large arguments...\n\t\tx2 = xa * xa;\n\t\tt = PI * x2;\n\t\tu = 1.0 / (t * t);\n\t\tt = 1.0 / t;\n\t\tf = 1.0 - ( u * polyF( u ) );\n\t\tg = t * polyG( u );\n\t\tt = HALF_PI * x2;\n\t\tsincos( t, sc, 1, 0 );\n\t\tt = PI * xa;\n\t\tS = 0.5 - ( ( (f*sc[1]) + (g*sc[0]) ) / t );\n\t}\n\tif ( x < 0.0 ) {\n\t\tS = -S;\n\t}\n\treturn S;\n}\n\n\n// EXPORTS //\n\nexport default fresnels;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport { assign as normalize } from '@stdlib/number-float64-base-normalize';\nimport floatExp from '@stdlib/number-float64-base-exponent';\nimport toWords from '@stdlib/number-float64-base-to-words';\nimport fromWords from '@stdlib/number-float64-base-from-words';\n\n\n// VARIABLES //\n\n// Exponent all 0s: 1 00000000000 11111111111111111111 => 2148532223\nvar CLEAR_EXP_MASK = 0x800fffff>>>0; // asm type annotation\n\n// Exponent equal to 1022 (BIAS-1): 0 01111111110 00000000000000000000 => 1071644672\nvar SET_EXP_MASK = 0x3fe00000|0; // asm type annotation\n\n// Normalization workspace:\nvar X = [ 0.0, 0.0 ]; // WARNING: not thread safe\n\n// High/low words workspace:\nvar WORDS = [ 0, 0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a normalized fraction and an integer power of two and assigns results to a provided output array.\n*\n* @private\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var out = frexp( 4.0, new Array( 2 ), 1, 0 );\n* // returns [ 0.5, 3 ]\n*\n* @example\n* var out = frexp( 0.0, new Array( 2 ), 1, 0 );\n* // returns [ 0.0, 0 ]\n*\n* @example\n* var out = frexp( -0.0, new Array( 2 ), 1, 0 );\n* // returns [ -0.0, 0 ]\n*\n* @example\n* var out = frexp( NaN, new Array( 2 ), 1, 0 );\n* // returns [ NaN, 0 ]\n*\n* @example\n* var out = frexp( Infinity, new Array( 2 ), 1, 0 );\n* // returns [ Infinity , 0 ]\n*\n* @example\n* var out = frexp( -Infinity, new Array( 2 ), 1, 0 );\n* // returns [ -Infinity , 0 ]\n*/\nfunction frexp( x, out, stride, offset ) {\n\tvar high;\n\tvar exp;\n\tif (\n\t\tx === 0.0 || // handles -0\n\t\tisnan( x ) ||\n\t\tisInfinite( x )\n\t) {\n\t\tout[ offset ] = x;\n\t\tout[ offset + stride ] = 0;\n\t\treturn out;\n\t}\n\t// If `x` is subnormal, normalize it...\n\tnormalize( x, X, 1, 0 );\n\n\t// Extract the exponent from `x` and add the normalization exponent:\n\texp = floatExp( X[0] ) + X[ 1 ] + 1;\n\n\t// Break `x` into two unsigned 32-bit integers (higher and lower order words):\n\ttoWords.assign( X[ 0 ], WORDS, 1, 0 );\n\thigh = WORDS[ 0 ];\n\n\t// Clear the exponent bits within the higher order word:\n\thigh &= CLEAR_EXP_MASK;\n\n\t// Set the exponent bits within the higher order word to BIAS-1 (1023-1=1022):\n\thigh |= SET_EXP_MASK;\n\n\t// Create a new floating-point number:\n\tx = fromWords( high, WORDS[ 1 ] );\n\n\tout[ offset ] = x;\n\tout[ offset + stride ] = exp;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default frexp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a normalized fraction and an integer power of two.\n*\n* @param {number} x - input value\n* @returns {Array<number>} output array\n*\n* @example\n* var out = frexp( 4.0 );\n* // returns [ 0.5, 3 ]\n*\n* @example\n* var out = frexp( 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* @example\n* var out = frexp( -0.0 );\n* // returns [ -0.0, 0 ]\n*\n* @example\n* var out = frexp( NaN );\n* // returns [ NaN, 0 ]\n*\n* @example\n* var out = frexp( Infinity );\n* // returns [ Infinity , 0 ]\n*\n* @example\n* var out = frexp( -Infinity );\n* // returns [ -Infinity , 0 ]\n*/\nfunction frexp( x ) {\n\treturn fcn( x, [ 0.0, 0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default frexp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Split a double-precision floating-point number into a normalized fraction and an integer power of two.\n*\n* @module @stdlib/math-base-special-frexp\n*\n* @example\n* import frexp from '@stdlib/math-base-special-frexp';\n*\n* var out = frexp( 4.0 );\n* // returns [ 0.5, 3 ]\n*\n* out = frexp( 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* out = frexp( -0.0 );\n* // returns [ -0.0, 0 ]\n*\n* out = frexp( NaN );\n* // returns [ NaN, 0 ]\n*\n* out = frexp( Infinity );\n* // returns [ Infinity , 0 ]\n*\n* out = frexp( -Infinity );\n* // returns [ -Infinity , 0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import frexp from '@stdlib/math-base-special-frexp';\n*\n* var out = new Float64Array( 2 );\n*\n* var y = frexp.assign( 4.0, out, 1, 0 );\n* // returns <Float64Array>[ 0.5, 3 ]\n*\n* var bool = ( y === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable id-length */\n\n'use strict';\n\n/**\n* Maximum safe nth Lucas number when stored in double-precision floating-point format.\n*\n* @module @stdlib/constants-float64-max-safe-nth-lucas\n* @type {integer}\n*\n* @example\n* import FLOAT64_MAX_SAFE_NTH_LUCAS from '@stdlib/constants-float64-max-safe-nth-lucas';\n* // returns 76\n*/\n\n\n// MAIN //\n\n/**\n* The maximum safe nth Lucas number when stored in double-precision floating-point format.\n*\n* @constant\n* @type {integer}\n* @default 76\n* @see [Lucas number]{@link https://en.wikipedia.org/wiki/Lucas_number}\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_SAFE_NTH_LUCAS = 76|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_SAFE_NTH_LUCAS;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the maximum value.\n*\n* @param {number} [x] - first number\n* @param {number} [y] - second number\n* @param {...number} [args] - numbers\n* @returns {number} maximum value\n*\n* @example\n* var v = maxn( 3.14, 4.2 );\n* // returns 4.2\n*\n* @example\n* var v = maxn( 5.9, 3.14, 4.2 );\n* // returns 5.9\n*\n* @example\n* var v = maxn( 3.14, NaN );\n* // returns NaN\n*\n* @example\n* var v = maxn( +0.0, -0.0 );\n* // returns +0.0\n*/\nfunction maxn( x, y ) {\n\tvar len;\n\tvar m;\n\tvar v;\n\tvar i;\n\n\tlen = arguments.length;\n\tif ( len === 2 ) {\n\t\tif ( isnan( x ) || isnan( y ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x === PINF || y === PINF ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tif ( x === y && x === 0.0 ) {\n\t\t\tif ( isPositiveZero( x ) ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t\tif ( x > y ) {\n\t\t\treturn x;\n\t\t}\n\t\treturn y;\n\t}\n\tm = NINF;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tv = arguments[ i ];\n\t\tif ( isnan( v ) || v === PINF ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v > m ) {\n\t\t\tm = v;\n\t\t} else if (\n\t\t\tv === m &&\n\t\t\tv === 0.0 &&\n\t\t\tisPositiveZero( v )\n\t\t) {\n\t\t\tm = v;\n\t\t}\n\t}\n\treturn m;\n}\n\n\n// EXPORTS //\n\nexport default maxn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the minimum value.\n*\n* @param {number} [x] - first number\n* @param {number} [y] - second number\n* @param {...number} [args] - numbers\n* @returns {number} minimum value\n*\n* @example\n* var v = minn( 3.14, 4.2 );\n* // returns 3.14\n*\n* @example\n* var v = minn( 5.9, 3.14, 4.2 );\n* // returns 3.14\n*\n* @example\n* var v = minn( 3.14, NaN );\n* // returns NaN\n*\n* @example\n* var v = minn( +0.0, -0.0 );\n* // returns -0.0\n*/\nfunction minn( x, y ) {\n\tvar len;\n\tvar m;\n\tvar v;\n\tvar i;\n\n\tlen = arguments.length;\n\tif ( len === 2 ) {\n\t\tif ( isnan( x ) || isnan( y ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x === NINF || y === NINF ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tif ( x === y && x === 0.0 ) {\n\t\t\tif ( isNegativeZero( x ) ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t\tif ( x < y ) {\n\t\t\treturn x;\n\t\t}\n\t\treturn y;\n\t}\n\tm = PINF;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tv = arguments[ i ];\n\t\tif ( isnan( v ) || v === NINF ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v < m ) {\n\t\t\tm = v;\n\t\t} else if (\n\t\t\tv === m &&\n\t\t\tv === 0.0 &&\n\t\t\tisNegativeZero( v )\n\t\t) {\n\t\t\tm = v;\n\t\t}\n\t}\n\treturn m;\n}\n\n\n// EXPORTS //\n\nexport default minn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the minimum and maximum values and assigns results to a provided output array.\n*\n* @private\n* @param {number} x - first number\n* @param {number} y - second number\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} minimum and maximum values\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmax( 3.14, 4.2, out, 1, 0 );\n* // returns [ 3.14, 4.2 ]\n*\n* var bool = ( v === out );\n* // returns true\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmax( 3.14, NaN, out, 1, 0 );\n* // returns [ NaN, NaN ]\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmax( +0.0, -0.0, out, 1, 0 );\n* // returns [ -0.0, 0.0 ]\n*/\nfunction minmax( x, y, out, stride, offset ) {\n\tif ( isnan( x ) || isnan( y ) ) {\n\t\tout[ offset ] = NaN;\n\t\tout[ offset + stride ] = NaN;\n\t\treturn out;\n\t}\n\tif ( x === y && x === 0.0 ) {\n\t\tif ( isNegativeZero( x ) ) {\n\t\t\tout[ offset ] = x;\n\t\t\tout[ offset + stride ] = y;\n\t\t\treturn out;\n\t\t}\n\t\tout[ offset ] = y;\n\t\tout[ offset + stride ] = x;\n\t\treturn out;\n\t}\n\tif ( x < y ) {\n\t\tout[ offset ] = x;\n\t\tout[ offset + stride ] = y;\n\t\treturn out;\n\t}\n\tout[ offset ] = y;\n\tout[ offset + stride ] = x;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default minmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport assign from './assign.js';\n\n\n// MAIN //\n\n/**\n* Returns the minimum and maximum values.\n*\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {Array<number>} minimum and maximum values\n*\n* @example\n* var v = minmax( 3.14, 4.2 );\n* // returns [ 3.14, 4.2 ]\n*\n* @example\n* var v = minmax( 3.14, NaN );\n* // returns [ NaN, NaN ]\n*\n* @example\n* var v = minmax( +0.0, -0.0 );\n* // returns [ -0.0, 0.0 ]\n*/\nfunction minmax( x, y ) {\n\treturn assign( x, y, [ 0.0, 0.0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default minmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\n\n\n// MAIN //\n\n/**\n* Returns the minimum and maximum absolute values.\n*\n* @private\n* @param {number} x - first number\n* @param {number} y - second number\n* @param {Collection} out - output object\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} minimum and maximum absolute values\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmaxabs( 3.14, 4.2, out, 1, 0 );\n* // returns [ 3.14, 4.2 ]\n*\n* var bool = ( v === out );\n* // returns true\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmaxabs( -5.9, 3.14, out, 1, 0 );\n* // returns [ 3.14, 5.9 ]\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmaxabs( 3.14, NaN, out, 1, 0 );\n* // returns [ NaN, NaN ]\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmaxabs( +0.0, -0.0, out, 1, 0 );\n* // returns [ 0.0, 0.0 ]\n*/\nfunction minmaxabs( x, y, out, stride, offset ) {\n\tvar ax;\n\tvar ay;\n\n\tif ( isnan( x ) || isnan( y ) ) {\n\t\tout[ offset ] = NaN;\n\t\tout[ offset + stride ] = NaN;\n\t\treturn out;\n\t}\n\tax = abs( x );\n\tay = abs( y );\n\tif ( ax < ay ) {\n\t\tout[ offset ] = ax;\n\t\tout[ offset + stride ] = ay;\n\t\treturn out;\n\t}\n\tout[ offset ] = ay;\n\tout[ offset + stride ] = ax;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default minmaxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport compute from './assign.js';\n\n\n// MAIN //\n\n/**\n* Returns the minimum and maximum absolute values.\n*\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {Array<number>} minimum and maximum absolute values\n*\n* @example\n* var v = minmaxabs( 3.14, 4.2 );\n* // returns [ 3.14, 4.2 ]\n*\n* @example\n* var v = minmaxabs( 3.14, NaN );\n* // returns [ NaN, NaN ]\n*\n* @example\n* var v = minmaxabs( +0.0, -0.0 );\n* // returns [ 0.0, 0.0 ]\n*/\nfunction minmaxabs( x, y ) {\n\treturn compute( x, y, [ 0.0, 0.0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default minmaxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the minimum and maximum absolute values.\n*\n* @private\n* @param {number} [x] - first number\n* @param {number} [y] - second number\n* @param {Collection} out - output object\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} minimum and maximum absolute values\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmaxabsn( 3.14, 4.2, out, 1, 0 );\n* // returns [ 3.14, 4.2 ]\n*\n* var bool = ( v === out );\n* // returns true\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmaxabsn( -5.9, 3.14, 4.2, out, 1, 0 );\n* // returns [ 3.14, 5.9 ]\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmaxabsn( 3.14, NaN, out, 1, 0 );\n* // returns [ NaN, NaN ]\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmaxabsn( +0.0, -0.0, out, 1, 0 );\n* // returns [ 0.0, 0.0 ]\n*/\nfunction minmaxabsn( x, y, out, stride, offset ) {\n\tvar len;\n\tvar min;\n\tvar max;\n\tvar ax;\n\tvar ay;\n\tvar av;\n\tvar v;\n\tvar i;\n\n\tlen = arguments.length;\n\n\tout = arguments[ len - 3 ];\n\tstride = arguments[ len - 2 ];\n\toffset = arguments[ len - 1 ];\n\n\tif ( len === 3 ) {\n\t\tout[ offset ] = PINF;\n\t\tout[ offset + stride ] = PINF;\n\t\treturn out;\n\t}\n\tif ( len === 4 ) {\n\t\tax = abs( x );\n\t\tout[ offset ] = ax;\n\t\tout[ offset + stride ] = ax;\n\t\treturn out;\n\t}\n\tif ( len === 5 ) {\n\t\tif ( isnan( x ) || isnan( y ) ) {\n\t\t\tout[ offset ] = NaN;\n\t\t\tout[ offset + stride ] = NaN;\n\t\t\treturn out;\n\t\t}\n\t\tax = abs( x );\n\t\tay = abs( y );\n\t\tif ( ax < ay ) {\n\t\t\tout[ offset ] = ax;\n\t\t\tout[ offset + stride ] = ay;\n\t\t\treturn out;\n\t\t}\n\t\tout[ offset ] = ay;\n\t\tout[ offset + stride ] = ax;\n\t\treturn out;\n\t}\n\tmin = PINF;\n\tmax = 0.0;\n\tfor ( i = 0; i < len - 3; i++ ) {\n\t\tv = arguments[ i ];\n\t\tif ( isnan( v ) ) {\n\t\t\tout[ offset ] = NaN;\n\t\t\tout[ offset + stride ] = NaN;\n\t\t\treturn out;\n\t\t}\n\t\tav = abs( v );\n\t\tif ( av < min ) {\n\t\t\tmin = av;\n\t\t}\n\t\tif ( av > max ) {\n\t\t\tmax = av;\n\t\t}\n\t}\n\tout[ offset ] = min;\n\tout[ offset + stride ] = max;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default minmaxabsn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport compute from './assign.js';\n\n\n// MAIN //\n\n/**\n* Returns the minimum and maximum absolute values.\n*\n* @param {number} [x] - first number\n* @param {number} [y] - second number\n* @param {...number} [args] - numbers\n* @returns {Array<number>} minimum and maximum absolute values\n*\n* @example\n* var v = minmaxabsn( 3.14, 4.2 );\n* // returns [ 3.14, 4.2 ]\n*\n* @example\n* var v = minmaxabsn( 3.14, NaN );\n* // returns [ NaN, NaN ]\n*\n* @example\n* var v = minmaxabsn( +0.0, -0.0 );\n* // returns [ 0.0, 0.0 ]\n*/\nfunction minmaxabsn() {\n\tvar args;\n\tvar i;\n\n\targs = [];\n\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\targs.push( [ 0.0, 0.0 ], 1, 0 );\n\treturn compute.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default minmaxabsn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the minimum and maximum values and assigns results to a provided output array.\n*\n* @private\n* @param {number} [x] - first number\n* @param {number} [y] - second number\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} minimum and maximum values\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmaxn( 3.14, 4.2, out, 1, 0 );\n* // returns [ 3.14, 4.2 ]\n*\n* var bool = ( v === out );\n* // returns true\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmaxn( 5.9, 3.14, 4.2, out, 1, 0 );\n* // returns [ 3.14, 5.9 ]\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmaxn( 3.14, NaN, out, 1, 0 );\n* // returns [ NaN, NaN ]\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmaxn( +0.0, -0.0, out, 1, 0 );\n* // returns [ -0.0, 0.0 ]\n*/\nfunction minmaxn( x, y, out, stride, offset ) {\n\tvar len;\n\tvar min;\n\tvar max;\n\tvar v;\n\tvar i;\n\n\tlen = arguments.length;\n\n\tout = arguments[ len - 3 ];\n\tstride = arguments[ len - 2 ];\n\toffset = arguments[ len - 1 ];\n\n\tif ( len === 4 ) {\n\t\tout[ offset ] = x;\n\t\tout[ offset + stride ] = x;\n\t\treturn out;\n\t}\n\tif ( len === 5 ) {\n\t\tif ( isnan( x ) || isnan( y ) ) {\n\t\t\tout[ offset ] = NaN;\n\t\t\tout[ offset + stride ] = NaN;\n\t\t\treturn out;\n\t\t}\n\t\tif ( x === y && x === 0.0 ) {\n\t\t\tif ( isNegativeZero( x ) ) {\n\t\t\t\tout[ offset ] = x;\n\t\t\t\tout[ offset + stride ] = y;\n\t\t\t\treturn out;\n\t\t\t}\n\t\t\tout[ offset ] = y;\n\t\t\tout[ offset + stride ] = x;\n\t\t\treturn out;\n\t\t}\n\t\tif ( x < y ) {\n\t\t\tout[ offset ] = x;\n\t\t\tout[ offset + stride ] = y;\n\t\t\treturn out;\n\t\t}\n\t\tout[ offset ] = y;\n\t\tout[ offset + stride ] = x;\n\t\treturn out;\n\t}\n\tmin = PINF;\n\tmax = NINF;\n\tfor ( i = 0; i < len - 3; i++ ) {\n\t\tv = arguments[ i ];\n\t\tif ( isnan( v ) ) {\n\t\t\tout[ offset ] = NaN;\n\t\t\tout[ offset + stride ] = NaN;\n\t\t\treturn out;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t} else if (\n\t\t\tv === 0.0 &&\n\t\t\tv === min &&\n\t\t\tisNegativeZero( v )\n\t\t) {\n\t\t\tmin = v;\n\t\t}\n\t\tif ( v > max ) {\n\t\t\tmax = v;\n\t\t} else if (\n\t\t\tv === 0.0 &&\n\t\t\tv === max &&\n\t\t\tisPositiveZero( v )\n\t\t) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\tout[ offset ] = min;\n\tout[ offset + stride ] = max;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default minmaxn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport assign from './assign.js';\n\n\n// MAIN //\n\n/**\n* Returns the minimum and maximum values.\n*\n* @param {number} [x] - first number\n* @param {number} [y] - second number\n* @param {...number} [args] - numbers\n* @returns {Array<number>} minimum and maximum values\n*\n* @example\n* var v = minmaxn( 3.14, 4.2 );\n* // returns [ 3.14, 4.2 ]\n*\n* @example\n* var v = minmaxn( 3.14, NaN );\n* // returns [ NaN, NaN ]\n*\n* @example\n* var v = minmaxn( +0.0, -0.0 );\n* // returns [ -0.0, 0.0 ]\n*/\nfunction minmaxn() {\n\tvar args;\n\tvar i;\n\n\targs = [];\n\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\targs.push( [ 0.0, 0.0 ], 1, 0 );\n\treturn assign.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default minmaxn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the minimum and maximum values.\n*\n* @module @stdlib/math-base-special-minmax\n*\n* @example\n* import minmax from '@stdlib/math-base-special-minmax';\n*\n* var v = minmax( 3.14, 4.2 );\n* // returns [ 3.14, 4.2 ]\n*\n* v = minmax( 3.14, NaN );\n* // returns [ NaN, NaN ]\n*\n* v = minmax( +0.0, -0.0 );\n* // returns [ -0.0, 0.0 ]\n*\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport assign from './assign.js';\nimport minmax from './main.js';\n\n\n// MAIN //\n\nsetReadOnly( minmax, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default minmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the minimum and maximum absolute values.\n*\n* @module @stdlib/math-base-special-minmaxabs\n*\n* @example\n* import minmaxabs from '@stdlib/math-base-special-minmaxabs';\n*\n* var v = minmaxabs( 3.14, 4.2 );\n* // returns [ 3.14, 4.2 ]\n*\n* v = minmaxabs( -5.9, 3.14 );\n* // returns [ 3.14, 5.9 ]\n*\n* v = minmaxabs( 3.14, NaN );\n* // returns [ NaN, NaN ]\n*\n* v = minmaxabs( +0.0, -0.0 );\n* // returns [ 0.0, 0.0 ]\n*\n* v = minmaxabs( 3.14 );\n* // returns [ 3.14, 3.14 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport assign from './assign.js';\nimport minmaxabs from './main.js';\n\n\n// MAIN //\n\nsetReadOnly( minmaxabs, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default minmaxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the minimum and maximum absolute values.\n*\n* @module @stdlib/math-base-special-minmaxabsn\n*\n* @example\n* import minmaxabsn from '@stdlib/math-base-special-minmaxabsn';\n*\n* var v = minmaxabsn( 3.14, 4.2 );\n* // returns [ 3.14, 4.2 ]\n*\n* v = minmaxabsn( -5.9, 3.14, 4.2 );\n* // returns [ 3.14, 5.9 ]\n*\n* v = minmaxabsn( 3.14, NaN );\n* // returns [ NaN, NaN ]\n*\n* v = minmaxabsn( +0.0, -0.0 );\n* // returns [ 0.0, 0.0 ]\n*\n* v = minmaxabsn( 3.14 );\n* // returns [ 3.14, 3.14 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport assign from './assign.js';\nimport minmaxabsn from './main.js';\n\n\n// MAIN //\n\nsetReadOnly( minmaxabsn, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default minmaxabsn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the minimum and maximum values.\n*\n* @module @stdlib/math-base-special-minmaxn\n*\n* @example\n* import minmaxn from '@stdlib/math-base-special-minmaxn';\n*\n* var v = minmaxn( 3.14, 4.2 );\n* // returns [ 3.14, 4.2 ]\n*\n* v = minmaxn( 5.9, 3.14, 4.2 );\n* // returns [ 3.14, 5.9 ]\n*\n* v = minmaxn( 3.14, NaN );\n* // returns [ NaN, NaN ]\n*\n* v = minmaxn( +0.0, -0.0 );\n* // returns [ -0.0, 0.0 ]\n*\n* v = minmaxn( 3.14 );\n* // returns [ 3.14, 3.14 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport assign from './assign.js';\nimport minmaxn from './main.js';\n\n\n// MAIN //\n\nsetReadOnly( minmaxn, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default minmaxn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport toWords from '@stdlib/number-float64-base-to-words';\nimport fromWords from '@stdlib/number-float64-base-from-words';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport FLOAT64_EXPONENT_BIAS from '@stdlib/constants-float64-exponent-bias';\nimport FLOAT64_HIGH_WORD_EXPONENT_MASK from '@stdlib/constants-float64-high-word-exponent-mask'; // eslint-disable-line id-length\nimport FLOAT64_HIGH_WORD_SIGNIFICAND_MASK from '@stdlib/constants-float64-high-word-significand-mask'; // eslint-disable-line id-length\n\n\n// VARIABLES //\n\n// 4294967295 => 0xffffffff => 11111111111111111111111111111111\nvar ALL_ONES = 4294967295>>>0; // asm type annotation\n\n// High/low words workspace:\nvar WORDS = [ 0|0, 0|0 ];\n\n\n// MAIN //\n\n/**\n* Decomposes a double-precision floating-point number into integral and fractional parts, each having the same type and sign as the input value, and assigns results to a provided output array.\n*\n* @private\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var parts = modf( 3.14, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ 3.0, 0.14000000000000012 ]\n*/\nfunction modf( x, out, stride, offset ) {\n\tvar high;\n\tvar low;\n\tvar exp;\n\tvar i;\n\n\t// Special cases...\n\tif ( x < 1.0 ) {\n\t\tif ( x < 0.0 ) {\n\t\t\tmodf( -x, out, stride, offset );\n\t\t\tout[ offset ] *= -1.0;\n\t\t\tout[ offset + stride ] *= -1.0;\n\t\t\treturn out;\n\t\t}\n\t\tif ( x === 0.0 ) { // [ +-0, +-0 ]\n\t\t\tout[ offset ] = x;\n\t\t\tout[ offset + stride ] = x;\n\t\t\treturn out;\n\t\t}\n\t\tout[ offset ] = 0.0;\n\t\tout[ offset + stride ] = x;\n\t\treturn out;\n\t}\n\tif ( isnan( x ) ) {\n\t\tout[ offset ] = NaN;\n\t\tout[ offset + stride ] = NaN;\n\t\treturn out;\n\t}\n\tif ( x === PINF ) {\n\t\tout[ offset ] = PINF;\n\t\tout[ offset + stride ] = 0.0;\n\t\treturn out;\n\t}\n\t// Decompose |x|...\n\n\t// Extract the high and low words:\n\ttoWords.assign( x, WORDS, 1, 0 );\n\thigh = WORDS[ 0 ];\n\tlow = WORDS[ 1 ];\n\n\t// Extract the unbiased exponent from the high word:\n\texp = ((high & FLOAT64_HIGH_WORD_EXPONENT_MASK) >> 20)|0; // asm type annotation\n\texp -= FLOAT64_EXPONENT_BIAS|0; // asm type annotation\n\n\t// Handle smaller values (x < 2**20 = 1048576)...\n\tif ( exp < 20 ) {\n\t\ti = (FLOAT64_HIGH_WORD_SIGNIFICAND_MASK >> exp)|0; // asm type annotation\n\n\t\t// Determine if `x` is integral by checking for significand bits which cannot be exponentiated away...\n\t\tif ( ((high&i)|low) === 0 ) {\n\t\t\tout[ offset ] = x;\n\t\t\tout[ offset + stride ] = 0.0;\n\t\t\treturn out;\n\t\t}\n\t\t// Turn off all the bits which cannot be exponentiated away:\n\t\thigh &= (~i);\n\n\t\t// Generate the integral part:\n\t\ti = fromWords( high, 0 );\n\n\t\t// The fractional part is whatever is leftover:\n\t\tout[ offset ] = i;\n\t\tout[ offset + stride ] = x - i;\n\t\treturn out;\n\t}\n\t// Check if `x` can even have a fractional part...\n\tif ( exp > 51 ) {\n\t\t// `x` is integral:\n\t\tout[ offset ] = x;\n\t\tout[ offset + stride ] = 0.0;\n\t\treturn out;\n\t}\n\ti = ALL_ONES >>> (exp-20);\n\n\t// Determine if `x` is integral by checking for less significant significand bits which cannot be exponentiated away...\n\tif ( (low&i) === 0 ) {\n\t\tout[ offset ] = x;\n\t\tout[ offset + stride ] = 0.0;\n\t\treturn out;\n\t}\n\t// Turn off all the bits which cannot be exponentiated away:\n\tlow &= (~i);\n\n\t// Generate the integral part:\n\ti = fromWords( high, low );\n\n\t// The fractional part is whatever is leftover:\n\tout[ offset ] = i;\n\tout[ offset + stride ] = x - i;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default modf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Decomposes a double-precision floating-point number into integral and fractional parts, each having the same type and sign as the input value.\n*\n* @param {number} x - input value\n* @returns {Array<number>} output array\n*\n* @example\n* var parts = modf( 3.14 );\n* // returns [ 3.0, 0.14000000000000012 ]\n*\n*/\nfunction modf( x ) {\n\treturn fcn( x, [ 0.0, 0.0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default modf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Decompose a double-precision floating-point number into integral and fractional parts.\n*\n* @module @stdlib/math-base-special-modf\n*\n* @example\n* import modf from '@stdlib/math-base-special-modf';\n*\n* var parts = modf( 3.14 );\n* // returns [ 3.0, 0.14000000000000012 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import modf from '@stdlib/math-base-special-modf';\n*\n* var out = new Float64Array( 2 );\n*\n* var parts = modf.assign( 3.14, out, 1, 0 );\n* // returns [ 3.0, 0.14000000000000012 ]\n*\n* var bool = ( parts === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport ln from '@stdlib/math-base-special-ln';\nimport floor from '@stdlib/math-base-special-floor';\nimport PHI from '@stdlib/constants-float64-phi';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// VARIABLES //\n\nvar SQRT_5 = 2.23606797749979;\nvar LN_PHI = ln( PHI );\n\n\n// MAIN //\n\n/**\n* Computes the nth non-Fibonacci number.\n*\n* ## References\n*\n* -   Gould, H.W. 1965. \"Non-Fibonacci Numbers.\" _Fibonacci Quarterly_, no. 3: 177–83. <http://www.fq.math.ca/Scanned/3-3/gould.pdf>.\n* -   Farhi, Bakir. 2011. \"An explicit formula generating the non-Fibonacci numbers.\" _arXiv_ abs/1105.1127 \\[Math.NT\\] (May): 1–5. <https://arxiv.org/abs/1105.1127>.\n*\n* @param {NonNegativeInteger} n - the non-Fibonacci number to compute\n* @returns {NonNegativeInteger} non-Fibonacci number\n*\n* @example\n* var v = nonfibonacci( 1 );\n* // returns 4\n*\n* @example\n* var v = nonfibonacci( 2 );\n* // returns 6\n*\n* @example\n* var v = nonfibonacci( 3 );\n* // returns 7\n*\n* @example\n* var v = nonfibonacci( NaN );\n* // returns NaN\n*\n* @example\n* var v = nonfibonacci( 3.14 );\n* // returns NaN\n*\n* @example\n* var v = nonfibonacci( -1 );\n* // returns NaN\n*/\nfunction nonfibonacci( n ) {\n\tvar a;\n\tvar b;\n\tif (\n\t\tisnan( n ) ||\n\t\tisInteger( n ) === false ||\n\t\tn < 1 ||\n\t\tn === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\tn += 1;\n\ta = ln( n * SQRT_5 ) / LN_PHI;\n\tb = ln( (SQRT_5 * (n+a)) - 5.0 + (3.0/n) ) / LN_PHI;\n\treturn floor( n + b - 2.0 );\n}\n\n\n// EXPORTS //\n\nexport default nonfibonacci;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_65_0/boost/math/special_functions/trigamma.hpp}. The implementation follows the original but has been reformatted and modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\nimport sinpi from '@stdlib/math-base-special-sinpi';\nimport PI_SQUARED from '@stdlib/constants-float64-pi-squared';\nimport rateval12 from './rational_p12q12.js';\nimport rateval24 from './rational_p24q24.js';\nimport rateval48 from './rational_p48q48.js';\nimport rateval816 from './rational_p816q816.js';\nimport rateval16INF from './rational_p16infq16inf.js';\n\n\n// VARIABLES //\n\nvar YOFFSET24 = 3.558437347412109375;\n\n\n// MAIN //\n\n/**\n* Evaluates the trigamma function.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = trigamma( -2.5 );\n* // returns ~9.539\n*\n* @example\n* var v = trigamma( 1.0 );\n* // returns ~1.645\n*\n* @example\n* var v = trigamma( 10.0 );\n* // returns ~0.105\n*\n* @example\n* var v = trigamma( NaN );\n* // returns NaN\n*\n* @example\n* var v = trigamma( -1.0 );\n* // returns NaN\n*/\nfunction trigamma( x ) {\n\tvar result;\n\tvar s;\n\tvar y;\n\tvar z;\n\n\tresult = 0.0;\n\n\t// Check for negative arguments and use reflection:\n\tif ( x <= 0 ) {\n\t\tif ( floor( x ) === x ) {\n\t\t\treturn NaN;\n\t\t}\n\t\ts = sinpi( x );\n\t\tz = 1.0 - x;\n\t\treturn -trigamma( z ) + ( PI_SQUARED / ( s*s ) );\n\t}\n\tif ( x < 1.0 ) {\n\t\tresult = 1.0 / ( x*x );\n\t\tx += 1.0;\n\t}\n\tif ( x <= 2.0 ) {\n\t\tresult += ( 2.0+rateval12( x ) ) / ( x*x );\n\t}\n\telse if ( x <= 4.0 ) {\n\t\tresult += ( YOFFSET24+rateval24( x ) ) / ( x*x );\n\t}\n\telse if ( x <= 8.0 ) {\n\t\ty = 1.0 / x;\n\t\tresult += ( 1.0+rateval48( y ) ) / x;\n\t}\n\telse if ( x <= 16.0 ) {\n\t\ty = 1.0 / x;\n\t\tresult += ( 1.0+rateval816( y ) ) / x;\n\t}\n\telse {\n\t\ty = 1.0 / x;\n\t\tresult += ( 1.0+rateval16INF( y ) ) / x;\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default trigamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square of the mathematical constant `π`.\n*\n* @module @stdlib/constants-float64-pi-squared\n* @type {number}\n*\n* @example\n* import PI_SQUARED from '@stdlib/constants-float64-pi-squared';\n* // returns 9.869604401089358\n*/\n\n\n// MAIN //\n\n/**\n* Square of the mathematical constant `π`.\n*\n* @constant\n* @type {number}\n* @default 9.869604401089358\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar PI_SQUARED = 9.86960440108935861883449099987615113531369940724079062641334937622004482241920524300177340371855223182402591377; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default PI_SQUARED;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.9999999999999991;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.9999999999999991 + (x * (-4.712373111208652 + (x * (-7.94125711970499 + (x * (-5.746577466976647 + (x * (-0.4042133494563989 + (x * (2.4787778117864288 + (x * (2.0771415170245513 + (x * (0.8588778991623601 + (x * (0.20499222604410033 + (x * (0.027210314034819473 + (x * 0.001576484902087695))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (4.712373111208634 + (x * (9.586191186553398 + (x * (11.094006726982938 + (x * (8.090754247493278 + (x * (3.877058901598914 + (x * (1.2275867870191448 + (x * (0.249092040606385 + (x * (0.02957504139006556 + (x * (0.0015764849020049815 + (x * 1.6126405034405948e-15))))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.001576484902087695 + (x * (0.027210314034819473 + (x * (0.20499222604410033 + (x * (0.8588778991623601 + (x * (2.0771415170245513 + (x * (2.4787778117864288 + (x * (-0.4042133494563989 + (x * (-5.746577466976647 + (x * (-7.94125711970499 + (x * (-4.712373111208652 + (x * -0.9999999999999991))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.6126405034405948e-15 + (x * (0.0015764849020049815 + (x * (0.02957504139006556 + (x * (0.249092040606385 + (x * (1.2275867870191448 + (x * (3.877058901598914 + (x * (8.090754247493278 + (x * (11.094006726982938 + (x * (9.586191186553398 + (x * (4.712373111208634 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -2.5584373473990794;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -2.5584373473990794 + (x * (-12.283020824054201 + (x * (-23.9195022162768 + (x * (-24.925643150482347 + (x * (-14.797912276547878 + (x * (-4.466544539286106 + (x * (-0.01914390334056497 + (x * (0.5154120525543513 + (x * (0.1953783487860643 + (x * (0.03347612826241743 + (x * (0.0023736652059422065 + (x * 0.0))))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (4.800985584544199 + (x * (9.992207278431701 + (x * (11.889614616763133 + (x * (8.966132566838091 + (x * (4.4725413614962415 + (x * (1.4860098202819654 + (x * (0.31957073576676426 + (x * (0.040735834578768094 + (x * (0.0023736652059327163 + (x * (2.3955488790352614e-16 + (x * -2.9474924474061867e-18))))))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (0.0023736652059422065 + (x * (0.03347612826241743 + (x * (0.1953783487860643 + (x * (0.5154120525543513 + (x * (-0.01914390334056497 + (x * (-4.466544539286106 + (x * (-14.797912276547878 + (x * (-24.925643150482347 + (x * (-23.9195022162768 + (x * (-12.283020824054201 + (x * -2.5584373473990794))))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = -2.9474924474061867e-18 + (x * (2.3955488790352614e-16 + (x * (0.0023736652059327163 + (x * (0.040735834578768094 + (x * (0.31957073576676426 + (x * (1.4860098202819654 + (x * (4.4725413614962415 + (x * (8.966132566838091 + (x * (11.889614616763133 + (x * (9.992207278431701 + (x * (4.800985584544199 + (x * 1.0))))))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 1.6662611269702147e-17;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 1.6662611269702147e-17 + (x * (0.4999999999999977 + (x * (6.402709450190538 + (x * (41.38333741550006 + (x * (166.8033418545628 + (x * (453.39964786925367 + (x * (851.153712317697 + (x * (1097.7065756728507 + (x * (938.4312324784553 + (x * (487.26800160465194 + (x * 119.95344524233573))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (12.472085567047449 + (x * (78.60931297532986 + (x * (307.47024605031834 + (x * (805.1406861011516 + (x * (1439.1201976029215 + (x * (1735.6105285756048 + (x * (1348.3250071285634 + (x * (607.2259858605709 + (x * (119.95231785727705 + (x * 0.00014016591835503607))))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 119.95344524233573 + (x * (487.26800160465194 + (x * (938.4312324784553 + (x * (1097.7065756728507 + (x * (851.153712317697 + (x * (453.39964786925367 + (x * (166.8033418545628 + (x * (41.38333741550006 + (x * (6.402709450190538 + (x * (0.4999999999999977 + (x * 1.6662611269702147e-17))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.00014016591835503607 + (x * (119.95231785727705 + (x * (607.2259858605709 + (x * (1348.3250071285634 + (x * (1735.6105285756048 + (x * (1439.1201976029215 + (x * (805.1406861011516 + (x * (307.47024605031834 + (x * (78.60931297532986 + (x * (12.472085567047449 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -1.848283152741466e-20;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -1.848283152741466e-20 + (x * (0.5 + (x * (3.0253386524731334 + (x * (13.599592751745737 + (x * (35.31322242830879 + (x * (67.16394245507142 + (x * (83.5767733658514 + (x * (71.07349121223571 + (x * (35.86215156147256 + (x * 8.721522316399835))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (5.717343971612935 + (x * (25.29340417962044 + (x * (62.26197679674682 + (x * (113.955048909239 + (x * (130.80713832893898 + (x * (102.42314690233765 + (x * (44.04247728052452 + (x * (8.89898032477904 + (x * -0.029662733687204))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 8.721522316399835 + (x * (35.86215156147256 + (x * (71.07349121223571 + (x * (83.5767733658514 + (x * (67.16394245507142 + (x * (35.31322242830879 + (x * (13.599592751745737 + (x * (3.0253386524731334 + (x * (0.5 + (x * -1.848283152741466e-20))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = -0.029662733687204 + (x * (8.89898032477904 + (x * (44.04247728052452 + (x * (102.42314690233765 + (x * (130.80713832893898 + (x * (113.955048909239 + (x * (62.26197679674682 + (x * (25.29340417962044 + (x * (5.717343971612935 + (x * 1.0))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.0 + (x * (0.5 + (x * (0.34562566988545623 + (x * (9.628954993608422 + (x * (3.5936085382439025 + (x * (49.45959911843888 + (x * (7.775192373218939 + (x * (74.4536074488178 + (x * (2.7520934039706906 + (x * (23.92923597114717 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.3579180064375791 + (x * (19.138603985070986 + (x * (0.8743490814641436 + (x * (98.65160974348555 + (x * (-16.10519728333829 + (x * (154.31686021625373 + (x * (-40.2026880424379 + (x * (60.167913667426475 + (x * (-13.341484462225642 + (x * 2.537956362006499))))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (23.92923597114717 + (x * (2.7520934039706906 + (x * (74.4536074488178 + (x * (7.775192373218939 + (x * (49.45959911843888 + (x * (3.5936085382439025 + (x * (9.628954993608422 + (x * (0.34562566988545623 + (x * (0.5 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 2.537956362006499 + (x * (-13.341484462225642 + (x * (60.167913667426475 + (x * (-40.2026880424379 + (x * (154.31686021625373 + (x * (-16.10519728333829 + (x * (98.65160974348555 + (x * (0.8743490814641436 + (x * (19.138603985070986 + (x * (0.3579180064375791 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_65_0/boost/math/special_functions/detail/polygamma.hpp}. The implementation follows the original but has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright Nikhar Agrawal 2013.\n* (C) Copyright Christopher Kormanyos 2013.\n* (C) Copyright John Maddock 2014.\n* (C) Copyright Paul Bristow 2013.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nimport bernoulli from '@stdlib/math-base-special-bernoulli';\nimport factorial from '@stdlib/math-base-special-factorial';\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport LN_TWO from '@stdlib/constants-float64-ln-two';\nimport EPS from '@stdlib/constants-float64-eps';\n\n\n// VARIABLES //\n\nvar debug = logger( 'polygamma' );\nvar MAX_SERIES_ITERATIONS = 1000000;\nvar MAX_FACTORIAL = 172;\n\n\n// MAIN //\n\n/**\n* Evaluates the polygamma function for large values of `x` such as for `x > 400`.\n*\n* @private\n* @param {PositiveInteger} n - derivative to evaluate\n* @param {number} x - input\n* @returns {number} (n+1)'th derivative\n* @see {@link http://functions.wolfram.com/GammaBetaErf/PolyGamma2/06/02/0001/}\n*/\nfunction atinfinityplus( n, x ) {\n\tvar partTerm; // Value of current term excluding the Bernoulli number part\n\tvar xsquared;\n\tvar term; // Value of current term to be added to sum\n\tvar sum; // Current value of accumulated sum\n\tvar nlx;\n\tvar k2;\n\tvar k;\n\n\tif ( n+x === x ) {\n\t\t// If `x` is very large, just concentrate on the first part of the expression and use logs:\n\t\tif ( n === 1 ) {\n\t\t\treturn 1.0 / x;\n\t\t}\n\t\tnlx = n * ln( x );\n\t\tif ( nlx < MAX_LN && n < MAX_FACTORIAL ) {\n\t\t\treturn ( (n & 1) ? 1.0 : -1.0 ) * factorial( n-1 ) * pow( x, -n );\n\t\t}\n\t\treturn ( (n & 1) ? 1.0 : -1.0 ) * exp( gammaln( n ) - ( n*ln(x) ) );\n\t}\n\txsquared = x * x;\n\n\t// Start by setting `partTerm` to `(n-1)! / x^(n+1)`, which is common to both the first term of the series (with k = 1) and to the leading part. We can then get to the leading term by: `partTerm * (n + 2 * x) / 2` and to the first term in the series (excluding the Bernoulli number) by: `partTerm n * (n + 1) / (2x)`. If either the factorial would over- or the power term underflow, set `partTerm` to 0 and then we know that we have to use logs for the initial terms:\n\tif ( n > MAX_FACTORIAL && n*n > MAX_LN ) {\n\t\tpartTerm = 0.0;\n\t} else {\n\t\tpartTerm = factorial( n-1 ) * pow( x, -n-1 );\n\t}\n\tif ( partTerm === 0.0 ) {\n\t\t// Either `n` is very large, or the power term underflows. Set the initial values of `partTerm`, `term`, and `sum` via logs:\n\t\tpartTerm = gammaln(n) - ( (n+1) * ln(x) );\n\t\tsum = exp( partTerm + ln( n + (2.0*x) ) - LN_TWO );\n\t\tpartTerm += ln( n*(n+1) ) - LN_TWO - ln(x);\n\t\tpartTerm = exp( partTerm );\n\t} else {\n\t\tsum = partTerm * ( n+(2.0*x) ) / 2.0;\n\t\tpartTerm *= ( n*(n+1) ) / 2.0;\n\t\tpartTerm /= x;\n\t}\n\t// If the leading term is 0, so is the result:\n\tif ( sum === 0.0 ) {\n\t\treturn sum;\n\t}\n\tfor ( k = 1; ; ) {\n\t\tterm = partTerm * bernoulli( k*2 );\n\t\tsum += term;\n\n\t\t// Normal termination condition:\n\t\tif ( abs( term/sum ) < EPS ) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// Increment our counter, and move `partTerm` on to the next value:\n\t\tk += 1;\n\t\tk2 = 2 * k;\n\t\tpartTerm *= ( n+k2-2 ) * ( n-1+k2 );\n\t\tpartTerm /= ( k2-1 ) * k2;\n\t\tpartTerm /= xsquared;\n\t\tif ( k > MAX_SERIES_ITERATIONS ) {\n\t\t\tdebug( 'Series did not converge, closest value was: %d.', sum );\n\t\t\treturn NaN;\n\t\t}\n\t}\n\tif ( ( n-1 ) & 1 ) {\n\t\tsum = -sum;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default atinfinityplus;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_65_0/boost/math/special_functions/detail/polygamma.hpp}. The implementation follows the original but has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright Nikhar Agrawal 2013.\n* (C) Copyright Christopher Kormanyos 2013.\n* (C) Copyright John Maddock 2014.\n* (C) Copyright Paul Bristow 2013.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nimport factorial from '@stdlib/math-base-special-factorial';\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport trunc from '@stdlib/math-base-special-trunc';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport atinfinityplus from './atinfinityplus.js';\n\n\n// VARIABLES //\n\nvar debug = logger( 'polygamma' );\nvar MAX_SERIES_ITERATIONS = 1000000;\nvar DIGITS_BASE10 = 19;\n\n\n// MAIN //\n\n/**\n* Evaluates the polygamma function.\n*\n* @private\n* @param {PositiveInteger} n - derivative to evaluate\n* @param {number} x - input\n* @returns {number} (n+1)'th derivative\n* @see {@link http://functions.wolfram.com/GammaBetaErf/PolyGamma2/16/01/01/0017/}\n*/\nfunction attransitionplus( n, x ) {\n\tvar minusMminus1;\n\tvar lnterm;\n\tvar zpows;\n\tvar iter;\n\tvar sum0;\n\tvar d4d;\n\tvar N;\n\tvar m;\n\tvar k;\n\tvar z;\n\n\t// Use N = (0.4 * digits) + (4 * n) for target value for x:\n\td4d = 0.4 * DIGITS_BASE10;\n\tN = d4d + ( 4*n );\n\tm = n;\n\titer = N - trunc( x );\n\n\tif ( iter > MAX_SERIES_ITERATIONS ) {\n\t\tdebug( 'Exceeded maximum series evaluations when evaluated at n = %d and x = %d', n, x );\n\t\treturn NaN;\n\t}\n\tminusMminus1 = -m - 1;\n\tz = x;\n\tsum0 = 0.0;\n\tzpows = 0.0;\n\n\t// Forward recursion to larger `x`, need to check for overflow first though:\n\tif ( ln( z+iter ) * minusMminus1 > -MAX_LN ) {\n\t\tfor ( k = 1; k <= iter; k++ ) {\n\t\t\tzpows = pow( z, minusMminus1 );\n\t\t\tsum0 += zpows;\n\t\t\tz += 1;\n\t\t}\n\t\tsum0 *= factorial( n );\n\t} else {\n\t\tfor ( k = 1; k <= iter; k++ ) {\n\t\t\tlnterm = ( ln( z ) * minusMminus1 ) + gammaln( n+1 );\n\t\t\tsum0 += exp( lnterm );\n\t\t\tz += 1;\n\t\t}\n\t}\n\tif ( ( n-1 ) & 1 ) {\n\t\tsum0 = -sum0;\n\t}\n\treturn sum0 + atinfinityplus( n, z );\n}\n\n\n// EXPORTS //\n\nexport default attransitionplus;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_65_0/boost/math/special_functions/detail/polygamma.hpp}. The implementation follows the original but has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright Nikhar Agrawal 2013.\n* (C) Copyright Christopher Kormanyos 2013.\n* (C) Copyright John Maddock 2014.\n* (C) Copyright Paul Bristow 2013.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nimport evalpoly from '@stdlib/math-base-tools-evalpoly';\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport signum from '@stdlib/math-base-special-signum';\nimport cospi from '@stdlib/math-base-special-cospi';\nimport sinpi from '@stdlib/math-base-special-sinpi';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport LN_PI from '@stdlib/constants-float64-ln-pi';\nimport PI from '@stdlib/constants-float64-pi';\nimport zeros from '@stdlib/array-base-zeros';\nimport polyval3 from './polyval_p3.js';\nimport polyval4 from './polyval_p4.js';\nimport polyval5 from './polyval_p5.js';\nimport polyval6 from './polyval_p6.js';\nimport polyval7 from './polyval_p7.js';\nimport polyval8 from './polyval_p8.js';\nimport polyval9 from './polyval_p9.js';\nimport polyval10 from './polyval_p10.js';\nimport polyval11 from './polyval_p11.js';\nimport polyval12 from './polyval_p12.js';\n\n\n// VARIABLES //\n\nvar debug = logger( 'polygamma' );\nvar MAX_SERIES_ITERATIONS = 1000000;\n\n// π raised to powers two to twelve (obtained from Wolfram Alpha):\nvar PI2 = 9.869604401089358;\nvar PI3 = 31.00627668029982;\nvar PI4 = 97.40909103400244;\nvar PI5 = 306.01968478528147;\nvar PI6 = 961.3891935753045;\nvar PI7 = 3020.2932277767923;\nvar PI8 = 9488.531016070574;\nvar PI9 = 29809.09933344621;\nvar PI10 = 93648.04747608303;\nvar PI11 = 294204.0179738906;\nvar PI12 = 924269.1815233742;\n\n// Derivative memoization table:\nvar table = [\n\t[ -1.0 ]\n];\n\n\n// FUNCTIONS //\n\n/**\n* Updates the derivatives table.\n*\n* @private\n* @param {PositiveInteger} n - derivative\n*/\nfunction calculateDerivatives( n ) {\n\tvar noffset; // offset for next row\n\tvar offset; // 1 if the first cos power is 0; otherwise 0\n\tvar ncols; // how many entries there are in the current row\n\tvar mcols; // how many entries there will be in the next row\n\tvar mo; // largest order of the polynomial of cos terms\n\tvar so; // order of the sin term\n\tvar co; // order of the cosine term in entry \"j\"\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tfor ( i = table.length-1; i < n-1; i++ ) {\n\t\toffset = ( i&1 )|0;\n\t\tso = ( i+2 )|0;\n\t\tmo = ( so-1 )|0;\n\t\tncols = ( (mo-offset)/2 )|0;\n\t\tnoffset = ( offset ) ? 0 : 1;\n\t\tmcols = ( (mo+1-noffset)/2 )|0;\n\t\ttable.push( zeros( mcols+1 ) );\n\t\tfor ( j = 0; j <= ncols; j++ ) {\n\t\t\tco = ( (2*j)+offset )|0;\n\t\t\tk = ( (co+1)/2 )|0;\n\t\t\ttable[ i+1 ][ k ] += ((co-so)*table[i][j]) / (so-1);\n\t\t\tif ( co ) {\n\t\t\t\tk = ( (co-1)/2 )|0;\n\t\t\t\ttable[ i+1 ][ k ] += (-co*table[i][j]) / (so-1);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// MAIN //\n\n/**\n* Returns n'th derivative of \\\\(\\operatorname{cot|(\\pi x)\\\\) at \\\\(x\\\\).\n*\n* ## Notes\n*\n* -   The derivatives are simply tabulated for up to \\\\(n = 9\\\\), beyond that it is possible to calculate coefficients as follows. The general form of each derivative is:\n*\n*     ```tex\n*     \\pi^n * \\sum_{k=0}^n C[k,n] \\cdot \\cos^k(\\pi \\cdot x) \\cdot \\operatorname{csc}^{(n+1)}(\\pi \\cdot x)\n*     ```\n*\n*     with constant \\\\( C\\[0,1\\] = -1 \\\\) and all other \\\\( C\\[k,n\\] = 0 \\)). Then for each \\\\( k < n+1 \\\\):\n*\n*     ```tex\n*     \\begin{align*}\n*     C[k-1, n+1]  &-= k * C[k, n]; \\\\\n*     C[k+1, n+1]  &+= (k-n-1) * C[k, n];\n*     \\end{align*}\n*     ```\n*\n* -   Note that there are many different ways of representing this derivative thanks to the many trigonometric identities available. In particular, the sum of powers of cosines could be replaced by a sum of cosine multiple angles, and, indeed, if you plug the derivative into Mathematica, this is the form it will give. The two forms are related via the Chebeshev polynomials of the first kind and \\\\( T_n(\\cos(x)) = \\cos(n x) \\\\). The polynomial form has the great advantage that all the cosine terms are zero at half integer arguments - right where this function has it's minimum - thus avoiding cancellation error in this region.\n*\n* -   And finally, since every other term in the polynomials is zero, we can save space by only storing the non-zero terms. This greatly increases complexity when subscripting the tables in the calculation, but halves the storage space (and complexity for that matter).\n*\n* @private\n* @param {PositiveInteger} n - derivative to evaluate\n* @param {number} x - input\n* @param {number} xc - one minus `x`\n* @returns {number} n'th derivative\n*/\nfunction polycotpi( n, x, xc ) {\n\tvar powTerms;\n\tvar idx;\n\tvar out;\n\tvar sum;\n\tvar c;\n\tvar s;\n\n\ts = ( abs( x ) < abs( xc ) ) ? sinpi( x ) : sinpi( xc );\n\tc = cospi( x );\n\tswitch ( n ) { // eslint-disable-line default-case\n\tcase 1:\n\t\treturn -PI / ( s * s );\n\tcase 2:\n\t\treturn 2.0 * PI2 * c / pow( s, 3.0 );\n\tcase 3:\n\t\treturn PI3 * polyval3( c*c ) / pow( s, 4.0 );\n\tcase 4:\n\t\treturn PI4 * c * polyval4( c*c ) / pow( s, 5.0 );\n\tcase 5:\n\t\treturn PI5 * polyval5( c*c ) / pow( s, 6.0 );\n\tcase 6:\n\t\treturn PI6 * c * polyval6( c*c ) / pow( s, 7.0 );\n\tcase 7:\n\t\treturn PI7 * polyval7( c*c ) / pow( s, 8.0 );\n\tcase 8:\n\t\treturn PI8 * c * polyval8( c*c ) / pow( s, 9.0 );\n\tcase 9:\n\t\treturn PI9 * polyval9( c*c ) / pow( s, 10.0 );\n\tcase 10:\n\t\treturn PI10 * c * polyval10( c*c ) / pow( s, 11.0 );\n\tcase 11:\n\t\treturn PI11 * polyval11( c*c ) / pow( s, 12.0 );\n\tcase 12:\n\t\treturn PI12 * c * polyval12( c*c ) / pow( s, 13.0 );\n\t}\n\t// We'll have to compute the coefficients up to `n`, complexity is O(n^2) which we don't worry about as the values are computed once and then cached. However, if the final evaluation would have too many terms just bail out right away:\n\tif ( n/2 > MAX_SERIES_ITERATIONS ) {\n\t\tdebug( 'The value of `n` is so large that we\\'re unable to compute the result in reasonable time.' );\n\t\treturn NaN;\n\t}\n\tidx = n - 1;\n\tif ( idx >= table.length ) {\n\t\t// Lazily calculate derivatives:\n\t\tcalculateDerivatives( n );\n\t}\n\tsum = evalpoly( table[ idx ], c*c );\n\tif ( idx & 1 ) {\n\t\tsum *= c; // First coefficient is order 1, and really an odd polynomial.\n\t}\n\tif ( sum === 0.0 ) {\n\t\treturn sum;\n\t}\n\t// The remaining terms are computed using logs since the powers and factorials get real large real quick:\n\tpowTerms = n * LN_PI;\n\tif ( s === 0.0 ) {\n\t\treturn ( sum >= 0.0 ) ? PINF : NINF;\n\t}\n\tpowTerms -= ln( abs( s ) ) * ( n+1 );\n\tpowTerms += gammaln( n ) + ln( abs(sum) );\n\n\tif ( powTerms > MAX_LN ) {\n\t\treturn ( sum >= 0.0 ) ? PINF : NINF;\n\t}\n\tout = exp( powTerms ) * signum( sum );\n\tif ( s < 0.0 && ( (n+1)&1 ) ) {\n\t\tout *= -1;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default polycotpi;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -2.0;\n\t}\n\treturn -2.0 + (x * -4.0);\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 16.0;\n\t}\n\treturn 16.0 + (x * 8.0);\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -16.0;\n\t}\n\treturn -16.0 + (x * (-88.0 + (x * -16.0)));\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 272.0;\n\t}\n\treturn 272.0 + (x * (416.0 + (x * 32.0)));\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -272.0;\n\t}\n\treturn -272.0 + (x * (-2880.0 + (x * (-1824.0 + (x * -64.0)))));\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 7936.0;\n\t}\n\treturn 7936.0 + (x * (24576.0 + (x * (7680.0 + (x * 128.0)))));\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -7936.0;\n\t}\n\treturn -7936.0 + (x * (-137216.0 + (x * (-185856.0 + (x * (-31616.0 + (x * -256.0))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 353792.0;\n\t}\n\treturn 353792.0 + (x * (1841152.0 + (x * (1304832.0 + (x * (128512.0 + (x * 512.0))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -353792.0;\n\t}\n\treturn -353792.0 + (x * (-9061376.0 + (x * (-21253376.0 + (x * (-8728576.0 + (x * (-518656.0 + (x * -1024.0))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 22368256.0;\n\t}\n\treturn 22368256.0 + (x * (175627264.0 + (x * (222398464.0 + (x * (56520704.0 + (x * (2084864.0 + (x * 2048.0))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the mathematical constant `π`.\n*\n* @module @stdlib/constants-float64-ln-pi\n* @type {number}\n*\n* @example\n* import LN_PI from '@stdlib/constants-float64-ln-pi';\n* // returns 1.1447298858494002\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of the mathematical constant `π`.\n*\n* @constant\n* @type {number}\n* @default 1.1447298858494002\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar LN_PI = 1.1447298858494002;\n\n\n// EXPORTS //\n\nexport default LN_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_65_0/boost/math/special_functions/detail/polygamma.hpp}. The implementation follows the original but has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright Nikhar Agrawal 2013.\n* (C) Copyright Christopher Kormanyos 2013.\n* (C) Copyright John Maddock 2014.\n* (C) Copyright Paul Bristow 2013.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nimport factorial from '@stdlib/math-base-special-factorial';\nimport zeta from '@stdlib/math-base-special-riemann-zeta';\nimport abs from '@stdlib/math-base-special-abs';\nimport pow from '@stdlib/math-base-special-pow';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport EPS from '@stdlib/constants-float64-eps';\nimport MAX from '@stdlib/constants-float64-max';\n\n\n// VARIABLES //\n\nvar debug = logger( 'polygamma' );\nvar MAX_SERIES_ITERATIONS = 1000000;\n\n\n// MAIN //\n\n/**\n* Evaluates the polygamma function near zero.\n*\n* ## Notes\n*\n* -   If we take this [expansion][1] for `polygamma` and substitute in this [expression][2] for `polygamma(n, 1)`, we get an alternating series for polygamma when `x` is small in terms of zeta functions of integer arguments (which are easy to evaluate, at least when the integer is even).\n*\n* [1]: http://functions.wolfram.com/06.15.06.0003.02\n* [2]: http://functions.wolfram.com/06.15.03.0009.01\n*\n* @private\n* @param {PositiveInteger} n - derivative to evaluate\n* @param {number} x - input value\n* @returns {number} (n+1)'th derivative\n*/\nfunction nearzero( n, x ) {\n\tvar factorialPart;\n\tvar prefix;\n\tvar scale;\n\tvar term;\n\tvar sum;\n\tvar AX;\n\tvar k;\n\n\t// In order to avoid spurious overflow, save the `n!` term for later, and rescale at the end:\n\tscale = factorial( n );\n\n\t// \"factorialPart\" contains everything except the zeta function evaluations in each term:\n\tfactorialPart = 1;\n\n\t// \"prefix\" is what we'll be adding the accumulated sum to, it will be `n! / z^(n+1)`, but since we're scaling by `n!` it is just `1 / z^(n+1)` for now:\n\tprefix = pow( x, n+1 );\n\tif ( prefix === 0.0 ) {\n\t\treturn PINF;\n\t}\n\tprefix = 1.0 / prefix;\n\n\t// First term in the series is necessarily `< zeta(2) < 2`, so ignore the sum if it will have no effect on the result:\n\tif ( prefix > 2.0/EPS ) {\n\t\tif ( n & 1 ) {\n\t\t\treturn ( AX/prefix < scale ) ? PINF : prefix * scale;\n\t\t}\n\t\treturn ( AX/prefix < scale ) ? NINF : -prefix * scale;\n\t}\n\tsum = prefix;\n\tfor ( k = 0; ; ) {\n\t\t// Get the k'th term:\n\t\tterm = factorialPart * zeta( k+n+1 );\n\t\tsum += term;\n\n\t\t// Termination condition:\n\t\tif ( abs( term ) < abs(sum * EPS ) ) {\n\t\t\tbreak;\n\t\t}\n\t\t// Move on `k` and `factorialPart`:\n\t\tk += 1;\n\t\tfactorialPart *= (-x * (n+k)) / k;\n\n\t\t// Last chance exit:\n\t\tif ( k > MAX_SERIES_ITERATIONS ) {\n\t\t\tdebug( 'Series did not converge, best value is %d.', sum );\n\t\t\treturn NaN;\n\t\t}\n\t}\n\t// We need to multiply by the scale, at each stage checking for overflow:\n\tif ( MAX/scale < sum ) {\n\t\treturn PINF;\n\t}\n\tsum *= scale;\n\treturn ( n & 1 ) ? sum : -sum;\n}\n\n\n// EXPORTS //\n\nexport default nearzero;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_65_0/boost/math/special_functions/detail/polygamma.hpp}. The implementation follows the original but has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright Nikhar Agrawal 2013.\n* (C) Copyright Christopher Kormanyos 2013.\n* (C) Copyright John Maddock 2014.\n* (C) Copyright Paul Bristow 2013.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport factorial from '@stdlib/math-base-special-factorial';\nimport trigamma from '@stdlib/math-base-special-trigamma';\nimport digamma from '@stdlib/math-base-special-digamma';\nimport signum from '@stdlib/math-base-special-signum';\nimport ldexp from '@stdlib/math-base-special-ldexp';\nimport floor from '@stdlib/math-base-special-floor';\nimport trunc from '@stdlib/math-base-special-trunc';\nimport zeta from '@stdlib/math-base-special-riemann-zeta';\nimport abs from '@stdlib/math-base-special-abs';\nimport min from '@stdlib/math-base-special-min';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport MAX from '@stdlib/constants-float64-max';\nimport PI from '@stdlib/constants-float64-pi';\nimport attransitionplus from './attransitionplus.js';\nimport atinfinityplus from './atinfinityplus.js';\nimport polycotpi from './polycotpi.js';\nimport nearzero from './nearzero.js';\n\n\n// VARIABLES //\n\nvar debug = logger( 'polygamma' );\nvar DIGITS_BASE10 = 19;\n\n\n// MAIN //\n\n/**\n* Evaluates the polygamma function.\n*\n* @param {NonNegativeInteger} n - order of derivative\n* @param {number} x - input value\n* @returns {number} (n+1)'th derivative\n*\n* @example\n* var v = polygamma( 3, 1.2 );\n* // returns ~3.245\n*\n* @example\n* var v = polygamma( 5, 1.2 );\n* // returns ~41.39\n*\n* @example\n* var v = polygamma( 3, -4.9 );\n* // returns ~60014.239\n*\n* @example\n* var v = polygamma( 2.5, -1.2 );\n* // returns NaN\n*\n* @example\n* var v = polygamma( -1, 5.3 );\n* // returns NaN\n*\n* @example\n* var v = polygamma( 2, -2.0 );\n* // returns NaN\n*\n* @example\n* var v = polygamma( NaN, 2.1 );\n* // returns NaN\n*\n* @example\n* var v = polygamma( 1, NaN );\n* // returns NaN\n*\n* @example\n* var v = polygamma( NaN, NaN );\n* // returns NaN\n*/\nfunction polygamma( n, x ) {\n\tvar xSmallLimit;\n\tvar result;\n\tvar z;\n\n\tif ( !isNonNegativeInteger( n ) ) {\n\t\treturn NaN;\n\t}\n\tif ( n === 0 ) {\n\t\treturn digamma( x );\n\t}\n\tif ( n === 1 ) {\n\t\treturn trigamma( x );\n\t}\n\tif ( x < 0.0 ) {\n\t\tif ( floor(x) === x ) {\n\t\t\t// Result is infinity if `x` is odd, and a pole error if `x` is even.\n\t\t\tif ( trunc( x ) & 1 ) {\n\t\t\t\treturn PINF;\n\t\t\t}\n\t\t\tdebug( 'Evaluation at negative integer: %d.', x );\n\t\t\treturn NaN;\n\t\t}\n\t\tz = 1.0 - x;\n\t\tresult = polygamma( n, z ) + ( PI * polycotpi( n, z, x ) );\n\t\treturn ( n & 1 ) ? -result : result;\n\t}\n\t// Limit for use of small-x series is chosen so that the series doesn't go too divergent in the first few terms. Ordinarily, this would mean setting the limit to `~1/n`, but we can tolerate a small amount of divergence:\n\txSmallLimit = min( 5.0/n, 0.25 );\n\tif ( x < xSmallLimit ) {\n\t\treturn nearzero( n, x );\n\t}\n\tif ( x > ( 0.4 * DIGITS_BASE10 ) + ( 4*n ) ) {\n\t\treturn atinfinityplus( n, x );\n\t}\n\tif ( x === 1.0 ) {\n\t\treturn ( ( n & 1 ) ? 1.0 : -1.0 ) * factorial( n ) * zeta( n+1 );\n\t}\n\tif ( x === 0.5 ) {\n\t\tresult = ( ( n & 1 ) ? 1.0 : -1.0 ) * factorial( n ) * zeta( n+1 );\n\t\tif ( abs( result ) >= ldexp( MAX, -n-1 ) ) {\n\t\t\treturn ( signum( result ) === 1 ) ? PINF : NINF;\n\t\t}\n\t\tresult *= ldexp( 1.0, n+1 ) - 1.0;\n\t\treturn result;\n\t}\n\treturn attransitionplus( n, x );\n}\n\n\n// EXPORTS //\n\nexport default polygamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport pow from '@stdlib/math-base-special-pow';\nimport floor from '@stdlib/math-base-special-floor';\nimport ceil from '@stdlib/math-base-special-ceil';\nimport log2 from '@stdlib/math-base-special-log2';\nimport MAX_EXP from '@stdlib/constants-float64-max-base2-exponent';\nimport MIN_EXP_SUBNORMAL from '@stdlib/constants-float64-min-base2-exponent-subnormal';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// VARIABLES //\n\n// 2^1023:\nvar HUGE = pow( 2.0, MAX_EXP );\nvar HALF_HUGE = HUGE / 2.0;\n\n\n// MAIN //\n\n/**\n* Rounds a numeric value to the nearest power of two on a linear scale.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = round2( 3.141592653589793 );\n* // returns 4.0\n*\n* @example\n* var v = round2( 13.0 );\n* // returns 16.0\n*\n* @example\n* var v = round2( -0.314 );\n* // returns -0.25\n*/\nfunction round2( x ) {\n\tvar sign;\n\tvar half;\n\tvar p1;\n\tvar p2;\n\tvar y1;\n\tvar y2;\n\tvar p;\n\tif (\n\t\tisnan( x ) ||\n\t\tisInfinite( x ) ||\n\t\tx === 0.0\n\t) {\n\t\treturn x;\n\t}\n\tif ( x < 0 ) {\n\t\tx = -x;\n\t\tsign = -1.0;\n\t} else {\n\t\tsign = 1.0;\n\t}\n\t// Solve the equation `2^p = x` for `p`:\n\tp = log2( x );\n\n\t// If provided the smallest subnormal, no rounding possible:\n\tif ( p === MIN_EXP_SUBNORMAL ) {\n\t\treturn x;\n\t}\n\t// Find the previous and next integer powers:\n\tp1 = floor( p );\n\tp2 = ceil( p );\n\n\t// Handle overflow:\n\tif ( p1 === MAX_EXP ) {\n\t\tif ( x - HUGE >= HALF_HUGE ) {\n\t\t\treturn sign * PINF; // sign-preserving\n\t\t}\n\t\treturn sign * HUGE;\n\t}\n\t// Compute previous and next powers of two:\n\ty1 = pow( 2.0, p1 );\n\ty2 = pow( 2.0, p2 );\n\n\t// Find the closest power of two:\n\thalf = ( y2 - y1 ) / 2.0;\n\tif ( y1+half > x ) {\n\t\treturn sign * y1;\n\t}\n\treturn sign * y2;\n}\n\n\n// EXPORTS //\n\nexport default round2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1987, 1989 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport cos from '@stdlib/math-base-special-cos';\nimport sin from '@stdlib/math-base-special-sin';\nimport ln from '@stdlib/math-base-special-ln';\nimport HALF_PI from '@stdlib/constants-float64-half-pi';\nimport GAMMA from '@stdlib/constants-float64-eulergamma';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport polyvalFN4 from './polyval_fn4.js';\nimport polyvalFD4 from './polyval_fd4.js';\nimport polyvalFN8 from './polyval_fn8.js';\nimport polyvalFD8 from './polyval_fd8.js';\nimport polyvalGN4 from './polyval_gn4.js';\nimport polyvalGD4 from './polyval_gd4.js';\nimport polyvalGN8 from './polyval_gn8.js';\nimport polyvalGD8 from './polyval_gd8.js';\nimport polyvalSN from './polyval_sn.js';\nimport polyvalSD from './polyval_sd.js';\nimport polyvalCN from './polyval_cn.js';\nimport polyvalCD from './polyval_cd.js';\n\n\n// MAIN //\n\n/**\n* Computes the sine and cosine integrals and assigns results to a provided output array.\n*\n* ## Method\n*\n* -   The integrals are approximated by rational functions.\n*\n* -   For \\\\( x > 8 \\\\), auxiliary functions \\\\( f(x) \\\\) and \\\\( g(x) \\\\) are employed such that\n*\n*     ```tex\n*     \\operatorname{Ci}(x) = f(x) \\sin(x) - g(x) \\cos(x) \\\\\n*     \\operatorname{Si}(x) = \\pi/2 - f(x) \\cos(x) - g(x) \\sin(x)\n*     ```\n*\n* ## Notes\n*\n* -   Absolute error on test interval \\\\( \\[0,50\\] \\\\), except relative when greater than \\\\( 1 \\\\):\n*\n*     | arithmetic | function    | # trials | peak    | rms     |\n*     |:----------:|:-----------:|:--------:|:-------:|:-------:|\n*     | IEEE       | Si          | 30000    | 4.4e-16 | 7.3e-17 |\n*     | IEEE       | Ci          | 30000    | 6.9e-16 | 5.1e-17 |\n*\n* @private\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var v = sici( 3.0, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ ~1.849, ~0.12 ]\n*\n* @example\n* var v = sici( 0.0, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ 0.0, -Infinity  ]\n*\n* @example\n* var v = sici( -9.0, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ ~-1.665, ~0.055 ]\n*\n* @example\n* var v = sici( NaN, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ NaN, NaN ]\n*/\nfunction sici( x, out, stride, offset ) {\n\tvar sgn;\n\tvar si;\n\tvar ci;\n\tvar c;\n\tvar f;\n\tvar g;\n\tvar s;\n\tvar z;\n\n\tif ( isnan( x ) ) {\n\t\tout[ offset ] = NaN;\n\t\tout[ offset + stride ] = NaN;\n\t\treturn out;\n\t}\n\tif ( x < 0.0 ) {\n\t\tsgn = -1;\n\t\tx = -x;\n\t} else {\n\t\tsgn = 0;\n\t}\n\tif ( x === 0.0 ) {\n\t\tout[ offset ] = 0.0;\n\t\tout[ offset + stride ] = NINF;\n\t\treturn out;\n\t}\n\tif ( x > 1.0e9 ) {\n\t\tif ( isInfinite( x ) ) {\n\t\t\tif ( sgn === -1 ) {\n\t\t\t\tsi = -HALF_PI;\n\t\t\t\tci = NaN;\n\t\t\t} else {\n\t\t\t\tsi = HALF_PI;\n\t\t\t\tci = 0.0;\n\t\t\t}\n\t\t\tout[ offset ] = si;\n\t\t\tout[ offset + stride ] = ci;\n\t\t\treturn out;\n\t\t}\n\t\tsi = HALF_PI - ( cos( x ) / x );\n\t\tci = sin( x ) / x;\n\t}\n\tif ( x > 4.0 ) {\n\t\ts = sin( x );\n\t\tc = cos( x );\n\t\tz = 1.0 / ( x*x );\n\t\tif ( x < 8.0 ) {\n\t\t\tf = polyvalFN4( z ) / ( x * polyvalFD4( z ) );\n\t\t\tg = z * polyvalGN4( z ) / polyvalGD4( z );\n\t\t} else {\n\t\t\tf = polyvalFN8( z ) / ( x * polyvalFD8( z ) );\n\t\t\tg = z * polyvalGN8( z ) / polyvalGD8( z );\n\t\t}\n\t\tsi = HALF_PI - ( f*c ) - ( g*s );\n\t\tif ( sgn ) {\n\t\t\tsi = -si;\n\t\t}\n\t\tci = ( f*s ) - ( g*c );\n\t\tout[ offset ] = si;\n\t\tout[ offset + stride ] = ci;\n\t\treturn out;\n\t}\n\tz = x * x;\n\ts = x * polyvalSN( z ) / polyvalSD( z );\n\tc = z * polyvalCN( z ) / polyvalCD( z );\n\tif ( sgn ) {\n\t\ts = -s;\n\t}\n\tsi = s;\n\tci = GAMMA + ln( x ) + c; // real part if x < 0\n\tout[ offset ] = si;\n\tout[ offset + stride ] = ci;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default sici;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 5.489002234213736e-7;\n\t}\n\treturn 5.489002234213736e-7 + (x * (0.00010893658065032867 + (x * (0.006810201324725182 + (x * (0.16700661183132304 + (x * (1.6208328770153833 + (x * (5.4593771716181285 + (x * 4.236128628922166))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 5.489002527562557e-7;\n\t}\n\treturn 5.489002527562557e-7 + (x * (0.00011003435715391573 + (x * (0.007017106683227897 + (x * (0.1787920529631499 + (x * (1.867922579501842 + (x * (7.308288225055645 + (x * (8.16496634205391 + (x * 1.0))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 7.825790407440903e-9;\n\t}\n\treturn 7.825790407440903e-9 + (x * (0.0000019796387414096365 + (x * (0.00016199979459893403 + (x * (0.005388686814621773 + (x * (0.07485277376284691 + (x * (0.3971802963923375 + (x * (0.6113791099522193 + (x * 0.08710016989731142))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 7.825792189335346e-9;\n\t}\n\treturn 7.825792189335346e-9 + (x * (0.0000020265918208634397 + (x * (0.0001732210814741771 + (x * (0.006223963454417684 + (x * (0.09887717612776888 + (x * (0.666296701268988 + (x * (1.6440220241335535 + (x * 1.0))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 9.70507110881952e-14;\n\t}\n\treturn 9.70507110881952e-14 + (x * (9.41779576128513e-11 + (x * (3.200927900910049e-8 + (x * (0.0000048621543082645475 + (x * (0.00034955644244785906 + (x * (0.01160642294081244 + (x * (0.16030015822231947 + (x * (0.7137152741001467 + (x * 0.4558808734704653))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 9.70507110881952e-14;\n\t}\n\treturn 9.70507110881952e-14 + (x * (9.437205903502767e-11 + (x * (3.21956939101046e-8 + (x * (0.000004924350643178815 + (x * (0.00035869648188185157 + (x * (0.012225359477197129 + (x * (0.17868554533207454 + (x * (0.9174636118736841 + (x * 1.0))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 3.1404009894636335e-15;\n\t}\n\treturn 3.1404009894636335e-15 + (x * (3.859459254302766e-12 + (x * (1.7040445278204452e-9 + (x * (3.471311670841167e-7 + (x * (0.000034894116550227946 + (x * (0.001717182390523479 + (x * (0.03848787676499743 + (x * (0.33041097930563207 + (x * 0.6973599534432762))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 3.1404009894636335e-15;\n\t}\n\treturn 3.1404009894636335e-15 + (x * (3.878301660239547e-12 + (x * (1.7269374896631615e-9 + (x * (3.5704322344374083e-7 + (x * (0.00003684755044425611 + (x * (0.0019028442667439953 + (x * (0.04679131942596258 + (x * (0.48785225869530496 + (x * (1.6854889881101165 + (x * 1.0))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\treturn 1.0 + (x * (-0.04134703162294066 + (x * (0.0009769454381704354 + (x * (-0.000009757593038436328 + (x * (4.625917144270128e-8 + (x * -8.391678279103039e-11))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\treturn 1.0 + (x * (0.01420852393261499 + (x * (0.00009964121220438756 + (x * (4.418278428012189e-7 + (x * (1.279978911799433e-9 + (x * 2.0326926619595193e-12))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -1.0;\n\t}\n\treturn -1.0 + (x * (0.028915965260755523 + (x * (-0.0004740072068734079 + (x * (0.000003593250514199931 + (x * (-1.3524950491579076e-8 + (x * 2.0252400238910228e-11))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 4.0;\n\t}\n\treturn 4.0 + (x * (0.051002805623644606 + (x * (0.00031744202477503275 + (x * (0.0000012321035568588342 + (x * (3.067809975818878e-9 + (x * 4.077460400618806e-12))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Computes the sine and cosine integrals.\n*\n* @param {number} x - input value\n* @returns {Array<number>} output array\n*\n* @example\n* var v = sici( 3.0 );\n* // returns [ ~1.849, ~0.12 ]\n*\n* @example\n* var v = sici( 0.0 );\n* // returns [ 0.0, -Infinity  ]\n*\n* @example\n* var v = sici( -9.0 );\n* // returns [ ~-1.665, ~0.055 ]\n*\n* @example\n* var v = sici( NaN );\n* // returns [ NaN, NaN ]\n*/\nfunction sici( x ) {\n\treturn fcn( x, [ 0.0, 0.0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default sici;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport abs from '@stdlib/math-base-special-abs';\nimport { assign as sincos } from '@stdlib/math-base-special-sincos';\nimport floor from '@stdlib/math-base-special-floor';\nimport PI from '@stdlib/constants-float64-pi';\nimport copysign from '@stdlib/math-base-special-copysign';\n\n\n// MAIN //\n\n/**\n* Simultaneously computes the sine and cosine of a number times π.\n*\n* @private\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} two-element array containing sin(πx) and cos(πx)\n*\n* @example\n* var v = sincospi( 0.0, [0.0, 0.0], 1, 0 );\n* // returns [ 0.0, 1.0 ]\n*\n* @example\n* var v = sincospi( 0.5, [0.0, 0.0], 1, 0 );\n* // returns [ 1.0, 0.0 ]\n*\n* @example\n* var v = sincospi( 0.1, [0.0, 0.0], 1, 0 );\n* // returns [ ~0.309, ~0.951 ]\n*\n* @example\n* var v = sincospi( NaN, [0.0, 0.0], 1, 0 );\n* // returns [ NaN, NaN ]\n*/\nfunction sincospi( x, out, stride, offset ) {\n\tvar tmp;\n\tvar ix;\n\tvar ar;\n\tvar r;\n\n\tif ( isnan( x ) || isInfinite( x ) ) {\n\t\tout[ offset ] = NaN;\n\t\tout[ offset+stride ] = NaN;\n\t\treturn out;\n\t}\n\tr = x % 2.0;\n\tar = abs( r );\n\tif ( ar === 0.0 || ar === 1.0 ) {\n\t\tix = floor( ar );\n\t\tout[ offset ] = copysign( 0.0, r );\n\t\tout[ offset+stride ] = ( ix%2 === 1 ) ? -1.0 : 1.0;\n\t\treturn out;\n\t}\n\tif ( ar < 0.25 ) {\n\t\treturn sincos( PI*r, out, stride, offset );\n\t}\n\tif ( ar < 0.75 ) {\n\t\tar = 0.5 - ar;\n\t\tsincos( PI*ar, out, stride, offset );\n\t\ttmp = out[ offset ];\n\t\tout[ offset ] = copysign( out[ offset+stride ], r );\n\t\tout[ offset+stride ] = tmp;\n\t\treturn out;\n\t}\n\tif ( ar < 1.25 ) {\n\t\tr = copysign( 1.0, r ) - r;\n\t\tsincos( PI*r, out, stride, offset );\n\t\tout[ offset+stride ] *= -1;\n\t\treturn out;\n\t}\n\tif ( ar < 1.75 ) {\n\t\tar -= 1.5;\n\t\tsincos( PI*ar, out, stride, offset );\n\t\ttmp = out[ offset ];\n\t\tout[ offset ] = -copysign( out[ offset+stride ], r );\n\t\tout[ offset+stride ] = tmp;\n\t\treturn out;\n\t}\n\tr -= copysign( 2.0, r );\n\treturn sincos( PI*r, out, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default sincospi;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport assign from './assign.js';\n\n\n// MAIN //\n\n/**\n* Simultaneously computes the sine and cosine of a number times π.\n*\n* @param {number} x - input value\n* @returns {Array<number>} two-element array containing sin(πx) and cos(πx)\n*\n* @example\n* var v = sincospi( 0.0 );\n* // returns [ 0.0, 1.0 ]\n*\n* @example\n* var v = sincospi( 0.5 );\n* // returns [ 1.0, 0.0 ]\n*\n* @example\n* var v = sincospi( 0.1 );\n* // returns [ ~0.309, ~0.951 ]\n*\n* @example\n* var v = sincospi( NaN );\n* // returns [ NaN, NaN ]\n*/\nfunction sincospi( x ) {\n\treturn assign( x, [ 0.0, 0.0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default sincospi;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sine and cosine integrals.\n*\n* @module @stdlib/math-base-special-sici\n*\n* @example\n* import sici from '@stdlib/math-base-special-sici';\n*\n* var v = sici( 3.0 );\n* // returns [ ~1.849, ~0.12 ]\n*\n* v = sici( 0.0 );\n* // returns [ 0.0, -Infinity  ]\n*\n* v = sici( -9.0 );\n* // returns [ ~-1.665, ~0.055 ]\n*\n* v = sici( NaN );\n* // returns [ NaN, NaN ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import sici from '@stdlib/math-base-special-sici';\n*\n* var out = new Float64Array( 2 );\n*\n* var v = sici.assign( 3.0, out, 1, 0 );\n* // returns <Float64Array>[ ~1.849, ~0.12 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Simultaneously compute the sine and cosine of a number times π.\n*\n* @module @stdlib/math-base-special-sincospi\n*\n* @example\n* import sincospi from '@stdlib/math-base-special-sincospi';\n*\n* var v = sincospi( 0.0 );\n* // returns [ 0.0, 1.0 ]\n*\n* v = sincospi( 0.5 );\n* // returns [ 1.0, 0.0 ]\n*\n* v = sincospi( 0.1 );\n* // returns [ ~0.309, ~0.951 ]\n*\n* v = sincospi( NaN );\n* // returns [ NaN, NaN ]\n*\n* @example\n* import sincospi from '@stdlib/math-base-special-sincospi';\n*\n* var out = new Float64Array( 2 );\n*\n* var v = sincospi.assign( 0.0, out, 1, 0 );\n* // returns <Float64Array>[ 0.0, 1.0 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport pow from '@stdlib/math-base-special-pow';\nimport abs from '@stdlib/math-base-special-abs';\nimport trunc from '@stdlib/math-base-special-trunc';\nimport MAX_SAFE_INTEGER from '@stdlib/constants-float64-max-safe-integer';\nimport MAX_EXP from '@stdlib/constants-float64-max-base10-exponent';\nimport MIN_EXP from '@stdlib/constants-float64-min-base10-exponent';\nimport MIN_EXP_SUBNORMAL from '@stdlib/constants-float64-min-base10-exponent-subnormal';\n\n\n// VARIABLES //\n\nvar MAX_INT = MAX_SAFE_INTEGER + 1;\nvar HUGE = 1.0e+308;\n\n\n// MAIN //\n\n/**\n* Rounds a numeric value to the nearest multiple of \\\\(10^n\\\\) toward zero.\n*\n* ## Method\n*\n* 1.  If \\\\(|x| <= 2^{53}\\\\) and \\\\(|n| <= 308\\\\), we can use the formula\n*\n*     ```tex\n*     \\operatorname{truncn}(x,n) = \\frac{\\operatorname{trunc}(x \\cdot 10^{-n})}{10^{-n}}\n*     ```\n*\n*     which shifts the decimal to the nearest multiple of \\\\(10^n\\\\), performs a standard \\\\(\\mathrm{trunc}\\\\) operation, and then shifts the decimal to its original position.\n*\n*     <!-- <note> -->\n*\n*     If \\\\(x \\cdot 10^{-n}\\\\) overflows, \\\\(x\\\\) lacks a sufficient number of decimal digits to have any effect when rounding. Accordingly, the rounded value is \\\\(x\\\\).\n*\n*     <!-- </note> -->\n*\n*     <!-- <note> -->\n*\n*     Note that rescaling \\\\(x\\\\) can result in unexpected behavior due to the fact that most decimal fractions cannot be exactly represented as floating-point numbers. And further, rescaling can lead to slightly different fractional values, which, in turn, affects the result of \\\\(\\mathrm{trunc}\\\\).\n*\n*     <!-- </note> -->\n*\n* 2.  If \\\\(n > 308\\\\), we recognize that the maximum absolute double-precision floating-point number is \\\\(\\approx 1.8\\mbox{e}308\\\\) and, thus, the result of rounding any possible finite number \\\\(x\\\\) to the nearest \\\\(10^n\\\\) is \\\\(0\\\\). To ensure consistent behavior with \\\\(\\operatorname{trunc}(x)\\\\), the sign of \\\\(x\\\\) is preserved.\n*\n* 3.  If \\\\(n < -324\\\\), \\\\(n\\\\) exceeds the maximum number of possible decimal places (such as with subnormal numbers), and, thus, the rounded value is \\\\(x\\\\).\n*\n* 4.  If \\\\(x > 2^{53}\\\\), \\\\(x\\\\) is **always** an integer (i.e., \\\\(x\\\\) has no decimal digits). If \\\\(n <= 0\\\\), the rounded value is \\\\(x\\\\).\n*\n* 5.  If \\\\(n < -308\\\\), we let \\\\(m = n + 308\\\\) and modify the above formula to avoid overflow.\n*\n*     ```tex\n*     \\operatorname{truncn}(x,n) = \\frac{\\biggl(\\frac{\\operatorname{trunc}( (x \\cdot 10^{308}) 10^{-m})}{10^{308}}\\biggr)}{10^{-m}}\n*     ```\n*\n*     If overflow occurs, the rounded value is \\\\(x\\\\).\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{truncn}(\\mathrm{NaN}, n) &= \\mathrm{NaN} \\\\\n* \\operatorname{truncn}(x, \\mathrm{NaN}) &= \\mathrm{NaN} \\\\\n* \\operatorname{truncn}(x, \\pm\\infty) &= \\mathrm{NaN} \\\\\n* \\operatorname{truncn}(\\pm\\infty, n) &= \\pm\\infty \\\\\n* \\operatorname{truncn}(\\pm 0, n) &= \\pm 0\n* \\end{align*}\n* ```\n*\n* @param {number} x - input value\n* @param {integer} n - integer power of `10`\n* @returns {number} rounded value\n*\n* @example\n* // Round a value to 4 decimal places:\n* var v = truncn( 3.141592653589793, -4 );\n* // returns 3.1415\n*\n* @example\n* // If n = 0, `truncn` behaves like `trunc`:\n* var v = truncn( 3.141592653589793, 0 );\n* // returns 3.0\n*\n* @example\n* // Round a value to the nearest thousand:\n* var v = truncn( 12368.0, 3 );\n* // returns 12000.0\n*/\nfunction truncn( x, n ) {\n\tvar s;\n\tvar y;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( n ) ||\n\t\tisInfinite( n )\n\t) {\n\t\treturn NaN;\n\t}\n\tif (\n\t\t// Handle infinities...\n\t\tisInfinite( x ) ||\n\n\t\t// Handle +-0...\n\t\tx === 0.0 ||\n\n\t\t// If `n` exceeds the maximum number of feasible decimal places (such as with subnormal numbers), nothing to truncate...\n\t\tn < MIN_EXP_SUBNORMAL ||\n\n\t\t// If `|x|` is large enough, no decimals to truncate...\n\t\t( abs( x ) > MAX_INT && n <= 0 )\n\t) {\n\t\treturn x;\n\t}\n\t// The maximum absolute double is ~1.8e308. Accordingly, any possible positive finite `x` rounded to the nearest >=10^309 is zero.\n\tif ( n > MAX_EXP ) {\n\t\treturn 0.0 * x; // preserve the sign (same behavior as trunc)\n\t}\n\t// If we overflow, return `x`, as the number of digits to the right of the decimal is too small (i.e., `x` is too large / lacks sufficient fractional precision) for there to be any effect when rounding...\n\tif ( n < MIN_EXP ) {\n\t\ts = pow( 10.0, -(n + MAX_EXP) );\n\t\ty = (x*HUGE) * s; // order of operation matters!\n\t\tif ( isInfinite( y ) ) {\n\t\t\treturn x;\n\t\t}\n\t\treturn ( trunc(y)/HUGE ) / s;\n\t}\n\ts = pow( 10.0, -n );\n\ty = x * s;\n\tif ( isInfinite( y ) ) {\n\t\treturn x;\n\t}\n\treturn trunc( y ) / s;\n}\n\n\n// EXPORTS //\n\nexport default truncn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace special\n*/\nvar special = {};\n\n/**\n* @name abs\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/abs}\n*/\nimport abs from '@stdlib/math-base-special-abs';\nsetReadOnly( special, 'abs', abs );\n\n/**\n* @name abs2\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/abs2}\n*/\nimport abs2 from '@stdlib/math-base-special-abs2';\nsetReadOnly( special, 'abs2', abs2 );\n\n/**\n* @name abs2f\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/abs2f}\n*/\nimport abs2f from '@stdlib/math-base-special-abs2f';\nsetReadOnly( special, 'abs2f', abs2f );\n\n/**\n* @name absf\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/absf}\n*/\nimport absf from '@stdlib/math-base-special-absf';\nsetReadOnly( special, 'absf', absf );\n\n/**\n* @name acos\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/acos}\n*/\nimport acos from '@stdlib/math-base-special-acos';\nsetReadOnly( special, 'acos', acos );\n\n/**\n* @name acosh\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/acosh}\n*/\nimport acosh from '@stdlib/math-base-special-acosh';\nsetReadOnly( special, 'acosh', acosh );\n\n/**\n* @name acot\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/acot}\n*/\nimport acot from '@stdlib/math-base-special-acot';\nsetReadOnly( special, 'acot', acot );\n\n/**\n* @name acoth\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/acoth}\n*/\nimport acoth from '@stdlib/math-base-special-acoth';\nsetReadOnly( special, 'acoth', acoth );\n\n/**\n* @name acovercos\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/acovercos}\n*/\nimport acovercos from '@stdlib/math-base-special-acovercos';\nsetReadOnly( special, 'acovercos', acovercos );\n\n/**\n* @name acoversin\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/acoversin}\n*/\nimport acoversin from '@stdlib/math-base-special-acoversin';\nsetReadOnly( special, 'acoversin', acoversin );\n\n/**\n* @name acsc\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/acsc}\n*/\nimport acsc from '@stdlib/math-base-special-acsc';\nsetReadOnly( special, 'acsc', acsc );\n\n/**\n* @name acsch\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/acsch}\n*/\nimport acsch from '@stdlib/math-base-special-acsch';\nsetReadOnly( special, 'acsch', acsch );\n\n/**\n* @name ahavercos\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/ahavercos}\n*/\nimport ahavercos from '@stdlib/math-base-special-ahavercos';\nsetReadOnly( special, 'ahavercos', ahavercos );\n\n/**\n* @name ahaversin\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/ahaversin}\n*/\nimport ahaversin from '@stdlib/math-base-special-ahaversin';\nsetReadOnly( special, 'ahaversin', ahaversin );\n\n/**\n* @name asec\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/asec}\n*/\nimport asec from '@stdlib/math-base-special-asec';\nsetReadOnly( special, 'asec', asec );\n\n/**\n* @name asech\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/asech}\n*/\nimport asech from '@stdlib/math-base-special-asech';\nsetReadOnly( special, 'asech', asech );\n\n/**\n* @name asin\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/asin}\n*/\nimport asin from '@stdlib/math-base-special-asin';\nsetReadOnly( special, 'asin', asin );\n\n/**\n* @name asinh\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/asinh}\n*/\nimport asinh from '@stdlib/math-base-special-asinh';\nsetReadOnly( special, 'asinh', asinh );\n\n/**\n* @name atan\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/atan}\n*/\nimport atan from '@stdlib/math-base-special-atan';\nsetReadOnly( special, 'atan', atan );\n\n/**\n* @name atan2\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/atan2}\n*/\nimport atan2 from '@stdlib/math-base-special-atan2';\nsetReadOnly( special, 'atan2', atan2 );\n\n/**\n* @name atanh\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/atanh}\n*/\nimport atanh from '@stdlib/math-base-special-atanh';\nsetReadOnly( special, 'atanh', atanh );\n\n/**\n* @name avercos\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/avercos}\n*/\nimport avercos from '@stdlib/math-base-special-avercos';\nsetReadOnly( special, 'avercos', avercos );\n\n/**\n* @name aversin\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/aversin}\n*/\nimport aversin from '@stdlib/math-base-special-aversin';\nsetReadOnly( special, 'aversin', aversin );\n\n/**\n* @name bernoulli\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/bernoulli}\n*/\nimport bernoulli from '@stdlib/math-base-special-bernoulli';\nsetReadOnly( special, 'bernoulli', bernoulli );\n\n/**\n* @name besselj0\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/besselj0}\n*/\nimport besselj0 from '@stdlib/math-base-special-besselj0';\nsetReadOnly( special, 'besselj0', besselj0 );\n\n/**\n* @name besselj1\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/besselj1}\n*/\nimport besselj1 from '@stdlib/math-base-special-besselj1';\nsetReadOnly( special, 'besselj1', besselj1 );\n\n/**\n* @name bessely0\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/bessely0}\n*/\nimport bessely0 from '@stdlib/math-base-special-bessely0';\nsetReadOnly( special, 'bessely0', bessely0 );\n\n/**\n* @name bessely1\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/bessely1}\n*/\nimport bessely1 from '@stdlib/math-base-special-bessely1';\nsetReadOnly( special, 'bessely1', bessely1 );\n\n/**\n* @name beta\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/beta}\n*/\nimport beta from '@stdlib/math-base-special-beta';\nsetReadOnly( special, 'beta', beta );\n\n/**\n* @name betainc\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/betainc}\n*/\nimport betainc from '@stdlib/math-base-special-betainc';\nsetReadOnly( special, 'betainc', betainc );\n\n/**\n* @name betaincinv\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/betaincinv}\n*/\nimport betaincinv from '@stdlib/math-base-special-betaincinv';\nsetReadOnly( special, 'betaincinv', betaincinv );\n\n/**\n* @name betaln\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/betaln}\n*/\nimport betaln from '@stdlib/math-base-special-betaln';\nsetReadOnly( special, 'betaln', betaln );\n\n/**\n* @name binet\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/binet}\n*/\nimport binet from '@stdlib/math-base-special-binet';\nsetReadOnly( special, 'binet', binet );\n\n/**\n* @name binomcoef\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/binomcoef}\n*/\nimport binomcoef from '@stdlib/math-base-special-binomcoef';\nsetReadOnly( special, 'binomcoef', binomcoef );\n\n/**\n* @name binomcoefln\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/binomcoefln}\n*/\nimport binomcoefln from '@stdlib/math-base-special-binomcoefln';\nsetReadOnly( special, 'binomcoefln', binomcoefln );\n\n/**\n* @name boxcox\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/boxcox}\n*/\nimport boxcox from '@stdlib/math-base-special-boxcox';\nsetReadOnly( special, 'boxcox', boxcox );\n\n/**\n* @name boxcox1p\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/boxcox1p}\n*/\nimport boxcox1p from '@stdlib/math-base-special-boxcox1p';\nsetReadOnly( special, 'boxcox1p', boxcox1p );\n\n/**\n* @name boxcox1pinv\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/boxcox1pinv}\n*/\nimport boxcox1pinv from '@stdlib/math-base-special-boxcox1pinv';\nsetReadOnly( special, 'boxcox1pinv', boxcox1pinv );\n\n/**\n* @name boxcoxinv\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/boxcoxinv}\n*/\nimport boxcoxinv from '@stdlib/math-base-special-boxcoxinv';\nsetReadOnly( special, 'boxcoxinv', boxcoxinv );\n\n/**\n* @name cabs\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/cabs}\n*/\nimport cabs from '@stdlib/math-base-special-cabs';\nsetReadOnly( special, 'cabs', cabs );\n\n/**\n* @name cabs2\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/cabs2}\n*/\nimport cabs2 from '@stdlib/math-base-special-cabs2';\nsetReadOnly( special, 'cabs2', cabs2 );\n\n/**\n* @name cabs2f\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/cabs2f}\n*/\nimport cabs2f from '@stdlib/math-base-special-cabs2f';\nsetReadOnly( special, 'cabs2f', cabs2f );\n\n/**\n* @name cabsf\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/cabsf}\n*/\nimport cabsf from '@stdlib/math-base-special-cabsf';\nsetReadOnly( special, 'cabsf', cabsf );\n\n/**\n* @name cbrt\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/cbrt}\n*/\nimport cbrt from '@stdlib/math-base-special-cbrt';\nsetReadOnly( special, 'cbrt', cbrt );\n\n/**\n* @name cbrtf\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/cbrtf}\n*/\nimport cbrtf from '@stdlib/math-base-special-cbrtf';\nsetReadOnly( special, 'cbrtf', cbrtf );\n\n/**\n* @name cceil\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/cceil}\n*/\nimport cceil from '@stdlib/math-base-special-cceil';\nsetReadOnly( special, 'cceil', cceil );\n\n/**\n* @name cceilf\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/cceilf}\n*/\nimport cceilf from '@stdlib/math-base-special-cceilf';\nsetReadOnly( special, 'cceilf', cceilf );\n\n/**\n* @name cceiln\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/cceiln}\n*/\nimport cceiln from '@stdlib/math-base-special-cceiln';\nsetReadOnly( special, 'cceiln', cceiln );\n\n/**\n* @name ccis\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/ccis}\n*/\nimport ccis from '@stdlib/math-base-special-ccis';\nsetReadOnly( special, 'ccis', ccis );\n\n/**\n* @name ceil\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/ceil}\n*/\nimport ceil from '@stdlib/math-base-special-ceil';\nsetReadOnly( special, 'ceil', ceil );\n\n/**\n* @name ceil2\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/ceil2}\n*/\nimport ceil2 from '@stdlib/math-base-special-ceil2';\nsetReadOnly( special, 'ceil2', ceil2 );\n\n/**\n* @name ceil10\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/ceil10}\n*/\nimport ceil10 from '@stdlib/math-base-special-ceil10';\nsetReadOnly( special, 'ceil10', ceil10 );\n\n/**\n* @name ceilb\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/ceilb}\n*/\nimport ceilb from '@stdlib/math-base-special-ceilb';\nsetReadOnly( special, 'ceilb', ceilb );\n\n/**\n* @name ceilf\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/ceilf}\n*/\nimport ceilf from '@stdlib/math-base-special-ceilf';\nsetReadOnly( special, 'ceilf', ceilf );\n\n/**\n* @name ceiln\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/ceiln}\n*/\nimport ceiln from '@stdlib/math-base-special-ceiln';\nsetReadOnly( special, 'ceiln', ceiln );\n\n/**\n* @name ceilsd\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/ceilsd}\n*/\nimport ceilsd from '@stdlib/math-base-special-ceilsd';\nsetReadOnly( special, 'ceilsd', ceilsd );\n\n/**\n* @name cexp\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/cexp}\n*/\nimport cexp from '@stdlib/math-base-special-cexp';\nsetReadOnly( special, 'cexp', cexp );\n\n/**\n* @name cflipsign\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/cflipsign}\n*/\nimport cflipsign from '@stdlib/math-base-special-cflipsign';\nsetReadOnly( special, 'cflipsign', cflipsign );\n\n/**\n* @name cflipsignf\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/cflipsignf}\n*/\nimport cflipsignf from '@stdlib/math-base-special-cflipsignf';\nsetReadOnly( special, 'cflipsignf', cflipsignf );\n\n/**\n* @name cfloor\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/cfloor}\n*/\nimport cfloor from '@stdlib/math-base-special-cfloor';\nsetReadOnly( special, 'cfloor', cfloor );\n\n/**\n* @name cfloorn\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/cfloorn}\n*/\nimport cfloorn from '@stdlib/math-base-special-cfloorn';\nsetReadOnly( special, 'cfloorn', cfloorn );\n\n/**\n* @name cidentity\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/cidentity}\n*/\nimport cidentity from '@stdlib/math-base-special-cidentity';\nsetReadOnly( special, 'cidentity', cidentity );\n\n/**\n* @name cidentityf\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/cidentityf}\n*/\nimport cidentityf from '@stdlib/math-base-special-cidentityf';\nsetReadOnly( special, 'cidentityf', cidentityf );\n\n/**\n* @name cinv\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/cinv}\n*/\nimport cinv from '@stdlib/math-base-special-cinv';\nsetReadOnly( special, 'cinv', cinv );\n\n/**\n* @name clamp\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/clamp}\n*/\nimport clamp from '@stdlib/math-base-special-clamp';\nsetReadOnly( special, 'clamp', clamp );\n\n/**\n* @name clampf\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/clampf}\n*/\nimport clampf from '@stdlib/math-base-special-clampf';\nsetReadOnly( special, 'clampf', clampf );\n\n/**\n* @name copysign\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/copysign}\n*/\nimport copysign from '@stdlib/math-base-special-copysign';\nsetReadOnly( special, 'copysign', copysign );\n\n/**\n* @name copysignf\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/copysignf}\n*/\nimport copysignf from '@stdlib/math-base-special-copysignf';\nsetReadOnly( special, 'copysignf', copysignf );\n\n/**\n* @name cos\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/cos}\n*/\nimport cos from '@stdlib/math-base-special-cos';\nsetReadOnly( special, 'cos', cos );\n\n/**\n* @name cosh\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/cosh}\n*/\nimport cosh from '@stdlib/math-base-special-cosh';\nsetReadOnly( special, 'cosh', cosh );\n\n/**\n* @name cosm1\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/cosm1}\n*/\nimport cosm1 from '@stdlib/math-base-special-cosm1';\nsetReadOnly( special, 'cosm1', cosm1 );\n\n/**\n* @name cospi\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/cospi}\n*/\nimport cospi from '@stdlib/math-base-special-cospi';\nsetReadOnly( special, 'cospi', cospi );\n\n/**\n* @name cot\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/cot}\n*/\nimport cot from '@stdlib/math-base-special-cot';\nsetReadOnly( special, 'cot', cot );\n\n/**\n* @name coth\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/coth}\n*/\nimport coth from '@stdlib/math-base-special-coth';\nsetReadOnly( special, 'coth', coth );\n\n/**\n* @name covercos\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/covercos}\n*/\nimport covercos from '@stdlib/math-base-special-covercos';\nsetReadOnly( special, 'covercos', covercos );\n\n/**\n* @name coversin\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/coversin}\n*/\nimport coversin from '@stdlib/math-base-special-coversin';\nsetReadOnly( special, 'coversin', coversin );\n\n/**\n* @name cphase\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/cphase}\n*/\nimport cphase from '@stdlib/math-base-special-cphase';\nsetReadOnly( special, 'cphase', cphase );\n\n/**\n* @name cpolar\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/cpolar}\n*/\nimport cpolar from '@stdlib/math-base-special-cpolar';\nsetReadOnly( special, 'cpolar', cpolar );\n\n/**\n* @name cround\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/cround}\n*/\nimport cround from '@stdlib/math-base-special-cround';\nsetReadOnly( special, 'cround', cround );\n\n/**\n* @name croundn\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/croundn}\n*/\nimport croundn from '@stdlib/math-base-special-croundn';\nsetReadOnly( special, 'croundn', croundn );\n\n/**\n* @name csch\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/csch}\n*/\nimport csch from '@stdlib/math-base-special-csch';\nsetReadOnly( special, 'csch', csch );\n\n/**\n* @name csignum\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/csignum}\n*/\nimport csignum from '@stdlib/math-base-special-csignum';\nsetReadOnly( special, 'csignum', csignum );\n\n/**\n* @name deg2rad\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/deg2rad}\n*/\nimport deg2rad from '@stdlib/math-base-special-deg2rad';\nsetReadOnly( special, 'deg2rad', deg2rad );\n\n/**\n* @name deg2radf\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/deg2radf}\n*/\nimport deg2radf from '@stdlib/math-base-special-deg2radf';\nsetReadOnly( special, 'deg2radf', deg2radf );\n\n/**\n* @name digamma\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/digamma}\n*/\nimport digamma from '@stdlib/math-base-special-digamma';\nsetReadOnly( special, 'digamma', digamma );\n\n/**\n* @name diracDelta\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/dirac-delta}\n*/\nimport diracDelta from '@stdlib/math-base-special-dirac-delta';\nsetReadOnly( special, 'diracDelta', diracDelta );\n\n/**\n* @name eta\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/dirichlet-eta}\n*/\nimport eta from '@stdlib/math-base-special-dirichlet-eta';\nsetReadOnly( special, 'eta', eta );\n\n/**\n* @name ellipe\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/ellipe}\n*/\nimport ellipe from '@stdlib/math-base-special-ellipe';\nsetReadOnly( special, 'ellipe', ellipe );\n\n/**\n* @name ellipj\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/ellipj}\n*/\nimport ellipj from '@stdlib/math-base-special-ellipj';\nsetReadOnly( special, 'ellipj', ellipj );\n\n/**\n* @name ellipk\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/ellipk}\n*/\nimport ellipk from '@stdlib/math-base-special-ellipk';\nsetReadOnly( special, 'ellipk', ellipk );\n\n/**\n* @name erf\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/erf}\n*/\nimport erf from '@stdlib/math-base-special-erf';\nsetReadOnly( special, 'erf', erf );\n\n/**\n* @name erfc\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/erfc}\n*/\nimport erfc from '@stdlib/math-base-special-erfc';\nsetReadOnly( special, 'erfc', erfc );\n\n/**\n* @name erfcinv\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/erfcinv}\n*/\nimport erfcinv from '@stdlib/math-base-special-erfcinv';\nsetReadOnly( special, 'erfcinv', erfcinv );\n\n/**\n* @name erfcx\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/erfcx}\n*/\nimport erfcx from '@stdlib/math-base-special-erfcx';\nsetReadOnly( special, 'erfcx', erfcx );\n\n/**\n* @name erfinv\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/erfinv}\n*/\nimport erfinv from '@stdlib/math-base-special-erfinv';\nsetReadOnly( special, 'erfinv', erfinv );\n\n/**\n* @name exp\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/exp}\n*/\nimport exp from '@stdlib/math-base-special-exp';\nsetReadOnly( special, 'exp', exp );\n\n/**\n* @name exp2\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/exp2}\n*/\nimport exp2 from '@stdlib/math-base-special-exp2';\nsetReadOnly( special, 'exp2', exp2 );\n\n/**\n* @name exp10\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/exp10}\n*/\nimport exp10 from '@stdlib/math-base-special-exp10';\nsetReadOnly( special, 'exp10', exp10 );\n\n/**\n* @name expit\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/expit}\n*/\nimport expit from '@stdlib/math-base-special-expit';\nsetReadOnly( special, 'expit', expit );\n\n/**\n* @name expm1\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/expm1}\n*/\nimport expm1 from '@stdlib/math-base-special-expm1';\nsetReadOnly( special, 'expm1', expm1 );\n\n/**\n* @name expm1rel\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/expm1rel}\n*/\nimport expm1rel from '@stdlib/math-base-special-expm1rel';\nsetReadOnly( special, 'expm1rel', expm1rel );\n\n/**\n* @name factorial\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/factorial}\n*/\nimport factorial from '@stdlib/math-base-special-factorial';\nsetReadOnly( special, 'factorial', factorial );\n\n/**\n* @name factorial2\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/factorial2}\n*/\nimport factorial2 from '@stdlib/math-base-special-factorial2';\nsetReadOnly( special, 'factorial2', factorial2 );\n\n/**\n* @name factorialln\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/factorialln}\n*/\nimport factorialln from '@stdlib/math-base-special-factorialln';\nsetReadOnly( special, 'factorialln', factorialln );\n\n/**\n* @name fallingFactorial\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/falling-factorial}\n*/\nimport fallingFactorial from '@stdlib/math-base-special-falling-factorial';\nsetReadOnly( special, 'fallingFactorial', fallingFactorial );\n\n/**\n* @name fast\n* @memberof special\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/math/base/special/fast}\n*/\nimport fast from '@stdlib/math-base-special-fast';\nsetReadOnly( special, 'fast', fast );\n\n/**\n* @name fibonacci\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/fibonacci}\n*/\nimport fibonacci from '@stdlib/math-base-special-fibonacci';\nsetReadOnly( special, 'fibonacci', fibonacci );\n\n/**\n* @name fibonacciIndex\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/fibonacci-index}\n*/\nimport fibonacciIndex from '@stdlib/math-base-special-fibonacci-index';\nsetReadOnly( special, 'fibonacciIndex', fibonacciIndex );\n\n/**\n* @name flipsign\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/flipsign}\n*/\nimport flipsign from '@stdlib/math-base-special-flipsign';\nsetReadOnly( special, 'flipsign', flipsign );\n\n/**\n* @name flipsignf\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/flipsignf}\n*/\nimport flipsignf from '@stdlib/math-base-special-flipsignf';\nsetReadOnly( special, 'flipsignf', flipsignf );\n\n/**\n* @name floor\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/floor}\n*/\nimport floor from '@stdlib/math-base-special-floor';\nsetReadOnly( special, 'floor', floor );\n\n/**\n* @name floor2\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/floor2}\n*/\nimport floor2 from '@stdlib/math-base-special-floor2';\nsetReadOnly( special, 'floor2', floor2 );\n\n/**\n* @name floor10\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/floor10}\n*/\nimport floor10 from '@stdlib/math-base-special-floor10';\nsetReadOnly( special, 'floor10', floor10 );\n\n/**\n* @name floorb\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/floorb}\n*/\nimport floorb from '@stdlib/math-base-special-floorb';\nsetReadOnly( special, 'floorb', floorb );\n\n/**\n* @name floorf\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/floorf}\n*/\nimport floorf from '@stdlib/math-base-special-floorf';\nsetReadOnly( special, 'floorf', floorf );\n\n/**\n* @name floorn\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/floorn}\n*/\nimport floorn from '@stdlib/math-base-special-floorn';\nsetReadOnly( special, 'floorn', floorn );\n\n/**\n* @name floorsd\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/floorsd}\n*/\nimport floorsd from '@stdlib/math-base-special-floorsd';\nsetReadOnly( special, 'floorsd', floorsd );\n\n/**\n* @name fresnel\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/fresnel}\n*/\nimport fresnel from '@stdlib/math-base-special-fresnel';\nsetReadOnly( special, 'fresnel', fresnel );\n\n/**\n* @name fresnelc\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/fresnelc}\n*/\nimport fresnelc from '@stdlib/math-base-special-fresnelc';\nsetReadOnly( special, 'fresnelc', fresnelc );\n\n/**\n* @name fresnels\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/fresnels}\n*/\nimport fresnels from '@stdlib/math-base-special-fresnels';\nsetReadOnly( special, 'fresnels', fresnels );\n\n/**\n* @name frexp\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/frexp}\n*/\nimport frexp from '@stdlib/math-base-special-frexp';\nsetReadOnly( special, 'frexp', frexp );\n\n/**\n* @name gamma\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/gamma}\n*/\nimport gamma from '@stdlib/math-base-special-gamma';\nsetReadOnly( special, 'gamma', gamma );\n\n/**\n* @name gammaDeltaRatio\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/gamma-delta-ratio}\n*/\nimport gammaDeltaRatio from '@stdlib/math-base-special-gamma-delta-ratio';\nsetReadOnly( special, 'gammaDeltaRatio', gammaDeltaRatio );\n\n/**\n* @name gammaLanczosSum\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/gamma-lanczos-sum}\n*/\nimport gammaLanczosSum from '@stdlib/math-base-special-gamma-lanczos-sum';\nsetReadOnly( special, 'gammaLanczosSum', gammaLanczosSum );\n\n/**\n* @name gammaLanczosSumExpGScaled\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled}\n*/\nimport gammaLanczosSumExpGScaled from '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled';\nsetReadOnly( special, 'gammaLanczosSumExpGScaled', gammaLanczosSumExpGScaled );\n\n/**\n* @name gamma1pm1\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/gamma1pm1}\n*/\nimport gamma1pm1 from '@stdlib/math-base-special-gamma1pm1';\nsetReadOnly( special, 'gamma1pm1', gamma1pm1 );\n\n/**\n* @name gammainc\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/gammainc}\n*/\nimport gammainc from '@stdlib/math-base-special-gammainc';\nsetReadOnly( special, 'gammainc', gammainc );\n\n/**\n* @name gammaincinv\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/gammaincinv}\n*/\nimport gammaincinv from '@stdlib/math-base-special-gammaincinv';\nsetReadOnly( special, 'gammaincinv', gammaincinv );\n\n/**\n* @name gammaln\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/gammaln}\n*/\nimport gammaln from '@stdlib/math-base-special-gammaln';\nsetReadOnly( special, 'gammaln', gammaln );\n\n/**\n* @name gammasgn\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/gammasgn}\n*/\nimport gammasgn from '@stdlib/math-base-special-gammasgn';\nsetReadOnly( special, 'gammasgn', gammasgn );\n\n/**\n* @name gcd\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/gcd}\n*/\nimport gcd from '@stdlib/math-base-special-gcd';\nsetReadOnly( special, 'gcd', gcd );\n\n/**\n* @name hacovercos\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/hacovercos}\n*/\nimport hacovercos from '@stdlib/math-base-special-hacovercos';\nsetReadOnly( special, 'hacovercos', hacovercos );\n\n/**\n* @name hacoversin\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/hacoversin}\n*/\nimport hacoversin from '@stdlib/math-base-special-hacoversin';\nsetReadOnly( special, 'hacoversin', hacoversin );\n\n/**\n* @name havercos\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/havercos}\n*/\nimport havercos from '@stdlib/math-base-special-havercos';\nsetReadOnly( special, 'havercos', havercos );\n\n/**\n* @name haversin\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/haversin}\n*/\nimport haversin from '@stdlib/math-base-special-haversin';\nsetReadOnly( special, 'haversin', haversin );\n\n/**\n* @name heaviside\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/heaviside}\n*/\nimport heaviside from '@stdlib/math-base-special-heaviside';\nsetReadOnly( special, 'heaviside', heaviside );\n\n/**\n* @name hypot\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/hypot}\n*/\nimport hypot from '@stdlib/math-base-special-hypot';\nsetReadOnly( special, 'hypot', hypot );\n\n/**\n* @name hypotf\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/hypotf}\n*/\nimport hypotf from '@stdlib/math-base-special-hypotf';\nsetReadOnly( special, 'hypotf', hypotf );\n\n/**\n* @name identity\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/identity}\n*/\nimport identity from '@stdlib/math-base-special-identity';\nsetReadOnly( special, 'identity', identity );\n\n/**\n* @name identityf\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/identityf}\n*/\nimport identityf from '@stdlib/math-base-special-identityf';\nsetReadOnly( special, 'identityf', identityf );\n\n/**\n* @name inv\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/inv}\n*/\nimport inv from '@stdlib/math-base-special-inv';\nsetReadOnly( special, 'inv', inv );\n\n/**\n* @name invf\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/invf}\n*/\nimport invf from '@stdlib/math-base-special-invf';\nsetReadOnly( special, 'invf', invf );\n\n/**\n* @name kernelBetainc\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/kernel-betainc}\n*/\nimport kernelBetainc from '@stdlib/math-base-special-kernel-betainc';\nsetReadOnly( special, 'kernelBetainc', kernelBetainc );\n\n/**\n* @name kernelBetaincinv\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/kernel-betaincinv}\n*/\nimport kernelBetaincinv from '@stdlib/math-base-special-kernel-betaincinv';\nsetReadOnly( special, 'kernelBetaincinv', kernelBetaincinv );\n\n/**\n* @name kernelCos\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/kernel-cos}\n*/\nimport kernelCos from '@stdlib/math-base-special-kernel-cos';\nsetReadOnly( special, 'kernelCos', kernelCos );\n\n/**\n* @name kernelSin\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/kernel-sin}\n*/\nimport kernelSin from '@stdlib/math-base-special-kernel-sin';\nsetReadOnly( special, 'kernelSin', kernelSin );\n\n/**\n* @name kernelTan\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/kernel-tan}\n*/\nimport kernelTan from '@stdlib/math-base-special-kernel-tan';\nsetReadOnly( special, 'kernelTan', kernelTan );\n\n/**\n* @name kroneckerDelta\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/kronecker-delta}\n*/\nimport kroneckerDelta from '@stdlib/math-base-special-kronecker-delta';\nsetReadOnly( special, 'kroneckerDelta', kroneckerDelta );\n\n/**\n* @name kroneckerDeltaf\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/kronecker-deltaf}\n*/\nimport kroneckerDeltaf from '@stdlib/math-base-special-kronecker-deltaf';\nsetReadOnly( special, 'kroneckerDeltaf', kroneckerDeltaf );\n\n/**\n* @name labs\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/labs}\n*/\nimport labs from '@stdlib/math-base-special-labs';\nsetReadOnly( special, 'labs', labs );\n\n/**\n* @name lcm\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/lcm}\n*/\nimport lcm from '@stdlib/math-base-special-lcm';\nsetReadOnly( special, 'lcm', lcm );\n\n/**\n* @name ldexp\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/ldexp}\n*/\nimport ldexp from '@stdlib/math-base-special-ldexp';\nsetReadOnly( special, 'ldexp', ldexp );\n\n/**\n* @name ln\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/ln}\n*/\nimport ln from '@stdlib/math-base-special-ln';\nsetReadOnly( special, 'ln', ln );\n\n/**\n* @name log\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/log}\n*/\nimport log from '@stdlib/math-base-special-log';\nsetReadOnly( special, 'log', log );\n\n/**\n* @name log1mexp\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/log1mexp}\n*/\nimport log1mexp from '@stdlib/math-base-special-log1mexp';\nsetReadOnly( special, 'log1mexp', log1mexp );\n\n/**\n* @name log1p\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/log1p}\n*/\nimport log1p from '@stdlib/math-base-special-log1p';\nsetReadOnly( special, 'log1p', log1p );\n\n/**\n* @name log1pexp\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/log1pexp}\n*/\nimport log1pexp from '@stdlib/math-base-special-log1pexp';\nsetReadOnly( special, 'log1pexp', log1pexp );\n\n/**\n* @name log1pmx\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/log1pmx}\n*/\nimport log1pmx from '@stdlib/math-base-special-log1pmx';\nsetReadOnly( special, 'log1pmx', log1pmx );\n\n/**\n* @name log2\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/log2}\n*/\nimport log2 from '@stdlib/math-base-special-log2';\nsetReadOnly( special, 'log2', log2 );\n\n/**\n* @name log10\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/log10}\n*/\nimport log10 from '@stdlib/math-base-special-log10';\nsetReadOnly( special, 'log10', log10 );\n\n/**\n* @name logaddexp\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/logaddexp}\n*/\nimport logaddexp from '@stdlib/math-base-special-logaddexp';\nsetReadOnly( special, 'logaddexp', logaddexp );\n\n/**\n* @name logit\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/logit}\n*/\nimport logit from '@stdlib/math-base-special-logit';\nsetReadOnly( special, 'logit', logit );\n\n/**\n* @name lucas\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/lucas}\n*/\nimport lucas from '@stdlib/math-base-special-lucas';\nsetReadOnly( special, 'lucas', lucas );\n\n/**\n* @name max\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/max}\n*/\nimport max from '@stdlib/math-base-special-max';\nsetReadOnly( special, 'max', max );\n\n/**\n* @name maxabs\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/maxabs}\n*/\nimport maxabs from '@stdlib/math-base-special-maxabs';\nsetReadOnly( special, 'maxabs', maxabs );\n\n/**\n* @name maxabsn\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/maxabsn}\n*/\nimport maxabsn from '@stdlib/math-base-special-maxabsn';\nsetReadOnly( special, 'maxabsn', maxabsn );\n\n/**\n* @name maxn\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/maxn}\n*/\nimport maxn from '@stdlib/math-base-special-maxn';\nsetReadOnly( special, 'maxn', maxn );\n\n/**\n* @name min\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/min}\n*/\nimport min from '@stdlib/math-base-special-min';\nsetReadOnly( special, 'min', min );\n\n/**\n* @name minabs\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/minabs}\n*/\nimport minabs from '@stdlib/math-base-special-minabs';\nsetReadOnly( special, 'minabs', minabs );\n\n/**\n* @name minabsn\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/minabsn}\n*/\nimport minabsn from '@stdlib/math-base-special-minabsn';\nsetReadOnly( special, 'minabsn', minabsn );\n\n/**\n* @name minmax\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/minmax}\n*/\nimport minmax from '@stdlib/math-base-special-minmax';\nsetReadOnly( special, 'minmax', minmax );\n\n/**\n* @name minmaxabs\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/minmaxabs}\n*/\nimport minmaxabs from '@stdlib/math-base-special-minmaxabs';\nsetReadOnly( special, 'minmaxabs', minmaxabs );\n\n/**\n* @name minmaxabsn\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/minmaxabsn}\n*/\nimport minmaxabsn from '@stdlib/math-base-special-minmaxabsn';\nsetReadOnly( special, 'minmaxabsn', minmaxabsn );\n\n/**\n* @name minmaxn\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/minmaxn}\n*/\nimport minmaxn from '@stdlib/math-base-special-minmaxn';\nsetReadOnly( special, 'minmaxn', minmaxn );\n\n/**\n* @name minn\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/minn}\n*/\nimport minn from '@stdlib/math-base-special-minn';\nsetReadOnly( special, 'minn', minn );\n\n/**\n* @name modf\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/modf}\n*/\nimport modf from '@stdlib/math-base-special-modf';\nsetReadOnly( special, 'modf', modf );\n\n/**\n* @name negafibonacci\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/negafibonacci}\n*/\nimport negafibonacci from '@stdlib/math-base-special-negafibonacci';\nsetReadOnly( special, 'negafibonacci', negafibonacci );\n\n/**\n* @name negalucas\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/negalucas}\n*/\nimport negalucas from '@stdlib/math-base-special-negalucas';\nsetReadOnly( special, 'negalucas', negalucas );\n\n/**\n* @name nonfibonacci\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/nonfibonacci}\n*/\nimport nonfibonacci from '@stdlib/math-base-special-nonfibonacci';\nsetReadOnly( special, 'nonfibonacci', nonfibonacci );\n\n/**\n* @name pdiff\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/pdiff}\n*/\nimport pdiff from '@stdlib/math-base-special-pdiff';\nsetReadOnly( special, 'pdiff', pdiff );\n\n/**\n* @name pdifff\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/pdifff}\n*/\nimport pdifff from '@stdlib/math-base-special-pdifff';\nsetReadOnly( special, 'pdifff', pdifff );\n\n/**\n* @name polygamma\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/polygamma}\n*/\nimport polygamma from '@stdlib/math-base-special-polygamma';\nsetReadOnly( special, 'polygamma', polygamma );\n\n/**\n* @name pow\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/pow}\n*/\nimport pow from '@stdlib/math-base-special-pow';\nsetReadOnly( special, 'pow', pow );\n\n/**\n* @name powm1\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/powm1}\n*/\nimport powm1 from '@stdlib/math-base-special-powm1';\nsetReadOnly( special, 'powm1', powm1 );\n\n/**\n* @name rad2deg\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/rad2deg}\n*/\nimport rad2deg from '@stdlib/math-base-special-rad2deg';\nsetReadOnly( special, 'rad2deg', rad2deg );\n\n/**\n* @name ramp\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/ramp}\n*/\nimport ramp from '@stdlib/math-base-special-ramp';\nsetReadOnly( special, 'ramp', ramp );\n\n/**\n* @name rampf\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/rampf}\n*/\nimport rampf from '@stdlib/math-base-special-rampf';\nsetReadOnly( special, 'rampf', rampf );\n\n/**\n* @name rcbrt\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/rcbrt}\n*/\nimport rcbrt from '@stdlib/math-base-special-rcbrt';\nsetReadOnly( special, 'rcbrt', rcbrt );\n\n/**\n* @name rempio2\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/rempio2}\n*/\nimport rempio2 from '@stdlib/math-base-special-rempio2';\nsetReadOnly( special, 'rempio2', rempio2 );\n\n/**\n* @name zeta\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/riemann-zeta}\n*/\nimport zeta from '@stdlib/math-base-special-riemann-zeta';\nsetReadOnly( special, 'zeta', zeta );\n\n/**\n* @name risingFactorial\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/rising-factorial}\n*/\nimport risingFactorial from '@stdlib/math-base-special-rising-factorial';\nsetReadOnly( special, 'risingFactorial', risingFactorial );\n\n/**\n* @name round\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/round}\n*/\nimport round from '@stdlib/math-base-special-round';\nsetReadOnly( special, 'round', round );\n\n/**\n* @name round2\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/round2}\n*/\nimport round2 from '@stdlib/math-base-special-round2';\nsetReadOnly( special, 'round2', round2 );\n\n/**\n* @name round10\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/round10}\n*/\nimport round10 from '@stdlib/math-base-special-round10';\nsetReadOnly( special, 'round10', round10 );\n\n/**\n* @name roundb\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/roundb}\n*/\nimport roundb from '@stdlib/math-base-special-roundb';\nsetReadOnly( special, 'roundb', roundb );\n\n/**\n* @name roundn\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/roundn}\n*/\nimport roundn from '@stdlib/math-base-special-roundn';\nsetReadOnly( special, 'roundn', roundn );\n\n/**\n* @name roundsd\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/roundsd}\n*/\nimport roundsd from '@stdlib/math-base-special-roundsd';\nsetReadOnly( special, 'roundsd', roundsd );\n\n/**\n* @name rsqrt\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/rsqrt}\n*/\nimport rsqrt from '@stdlib/math-base-special-rsqrt';\nsetReadOnly( special, 'rsqrt', rsqrt );\n\n/**\n* @name rsqrtf\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/rsqrtf}\n*/\nimport rsqrtf from '@stdlib/math-base-special-rsqrtf';\nsetReadOnly( special, 'rsqrtf', rsqrtf );\n\n/**\n* @name sici\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/sici}\n*/\nimport sici from '@stdlib/math-base-special-sici';\nsetReadOnly( special, 'sici', sici );\n\n/**\n* @name signum\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/signum}\n*/\nimport signum from '@stdlib/math-base-special-signum';\nsetReadOnly( special, 'signum', signum );\n\n/**\n* @name signumf\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/signumf}\n*/\nimport signumf from '@stdlib/math-base-special-signumf';\nsetReadOnly( special, 'signumf', signumf );\n\n/**\n* @name sin\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/sin}\n*/\nimport sin from '@stdlib/math-base-special-sin';\nsetReadOnly( special, 'sin', sin );\n\n/**\n* @name sinc\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/sinc}\n*/\nimport sinc from '@stdlib/math-base-special-sinc';\nsetReadOnly( special, 'sinc', sinc );\n\n/**\n* @name sincos\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/sincos}\n*/\nimport sincos from '@stdlib/math-base-special-sincos';\nsetReadOnly( special, 'sincos', sincos );\n\n/**\n* @name sincospi\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/sincospi}\n*/\nimport sincospi from '@stdlib/math-base-special-sincospi';\nsetReadOnly( special, 'sincospi', sincospi );\n\n/**\n* @name sinh\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/sinh}\n*/\nimport sinh from '@stdlib/math-base-special-sinh';\nsetReadOnly( special, 'sinh', sinh );\n\n/**\n* @name sinpi\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/sinpi}\n*/\nimport sinpi from '@stdlib/math-base-special-sinpi';\nsetReadOnly( special, 'sinpi', sinpi );\n\n/**\n* @name spence\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/spence}\n*/\nimport spence from '@stdlib/math-base-special-spence';\nsetReadOnly( special, 'spence', spence );\n\n/**\n* @name sqrt\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/sqrt}\n*/\nimport sqrt from '@stdlib/math-base-special-sqrt';\nsetReadOnly( special, 'sqrt', sqrt );\n\n/**\n* @name sqrt1pm1\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/sqrt1pm1}\n*/\nimport sqrt1pm1 from '@stdlib/math-base-special-sqrt1pm1';\nsetReadOnly( special, 'sqrt1pm1', sqrt1pm1 );\n\n/**\n* @name sqrtf\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/sqrtf}\n*/\nimport sqrtf from '@stdlib/math-base-special-sqrtf';\nsetReadOnly( special, 'sqrtf', sqrtf );\n\n/**\n* @name sqrtpi\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/sqrtpi}\n*/\nimport sqrtpi from '@stdlib/math-base-special-sqrtpi';\nsetReadOnly( special, 'sqrtpi', sqrtpi );\n\n/**\n* @name tan\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/tan}\n*/\nimport tan from '@stdlib/math-base-special-tan';\nsetReadOnly( special, 'tan', tan );\n\n/**\n* @name tanh\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/tanh}\n*/\nimport tanh from '@stdlib/math-base-special-tanh';\nsetReadOnly( special, 'tanh', tanh );\n\n/**\n* @name tribonacci\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/tribonacci}\n*/\nimport tribonacci from '@stdlib/math-base-special-tribonacci';\nsetReadOnly( special, 'tribonacci', tribonacci );\n\n/**\n* @name trigamma\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/trigamma}\n*/\nimport trigamma from '@stdlib/math-base-special-trigamma';\nsetReadOnly( special, 'trigamma', trigamma );\n\n/**\n* @name trunc\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/trunc}\n*/\nimport trunc from '@stdlib/math-base-special-trunc';\nsetReadOnly( special, 'trunc', trunc );\n\n/**\n* @name trunc2\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/trunc2}\n*/\nimport trunc2 from '@stdlib/math-base-special-trunc2';\nsetReadOnly( special, 'trunc2', trunc2 );\n\n/**\n* @name trunc10\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/trunc10}\n*/\nimport trunc10 from '@stdlib/math-base-special-trunc10';\nsetReadOnly( special, 'trunc10', trunc10 );\n\n/**\n* @name truncb\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/truncb}\n*/\nimport truncb from '@stdlib/math-base-special-truncb';\nsetReadOnly( special, 'truncb', truncb );\n\n/**\n* @name truncf\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/truncf}\n*/\nimport truncf from '@stdlib/math-base-special-truncf';\nsetReadOnly( special, 'truncf', truncf );\n\n/**\n* @name truncn\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/truncn}\n*/\nimport truncn from '@stdlib/math-base-special-truncn';\nsetReadOnly( special, 'truncn', truncn );\n\n/**\n* @name truncsd\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/truncsd}\n*/\nimport truncsd from '@stdlib/math-base-special-truncsd';\nsetReadOnly( special, 'truncsd', truncsd );\n\n/**\n* @name vercos\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/vercos}\n*/\nimport vercos from '@stdlib/math-base-special-vercos';\nsetReadOnly( special, 'vercos', vercos );\n\n/**\n* @name versin\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/versin}\n*/\nimport versin from '@stdlib/math-base-special-versin';\nsetReadOnly( special, 'versin', versin );\n\n/**\n* @name wrap\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/wrap}\n*/\nimport wrap from '@stdlib/math-base-special-wrap';\nsetReadOnly( special, 'wrap', wrap );\n\n/**\n* @name xlog1py\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/xlog1py}\n*/\nimport xlog1py from '@stdlib/math-base-special-xlog1py';\nsetReadOnly( special, 'xlog1py', xlog1py );\n\n/**\n* @name xlogy\n* @memberof special\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/special/xlogy}\n*/\nimport xlogy from '@stdlib/math-base-special-xlogy';\nsetReadOnly( special, 'xlogy', xlogy );\n\n\n// EXPORTS //\n\nexport default special;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_60_0/boost/math/tools/rational.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\n\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @param {NumericArray} P - numerator polynomial coefficients sorted in ascending degree\n* @param {NumericArray} Q - denominator polynomial coefficients sorted in ascending degree\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*\n* @example\n* var P = [ -6.0, -5.0 ];\n* var Q = [ 3.0, 0.5 ];\n*\n* var v = evalrational( P, Q, 6.0 ); //  => ( -6*6^0 - 5*6^1 ) / ( 3*6^0 + 0.5*6^1 ) = (-6-30)/(3+3)\n* // returns -6.0\n*\n* @example\n* // 2x^3 + 4x^2 - 5x^1 - 6x^0 => degree 4\n* var P = [ -6.0, -5.0, 4.0, 2.0 ];\n*\n* // 0.5x^1 + 3x^0 => degree 2\n* var Q = [ 3.0, 0.5, 0.0, 0.0 ]; // zero-padded\n*\n* var v = evalrational( P, Q, 6.0 ); // => ( -6*6^0 - 5*6^1 + 4*6^2 + 2*6^3 ) / ( 3*6^0 + 0.5*6^1 + 0*6^2 + 0*6^3 ) = (-6-30+144+432)/(3+3)\n* // returns 90.0\n*/\nfunction evalrational( P, Q, x ) {\n\tvar len;\n\tvar s1;\n\tvar s2;\n\tvar i;\n\n\tlen = P.length;\n\tif ( len === 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( len !== Q.length ) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 || len === 1 ) {\n\t\treturn P[ 0 ] / Q[ 0 ];\n\t}\n\t// Use Horner's method...\n\tif ( abs( x ) <= 1.0 ) {\n\t\ts1 = P[ len-1 ];\n\t\ts2 = Q[ len-1 ];\n\t\tfor ( i = len-2; i >= 0; --i ) {\n\t\t\ts1 *= x;\n\t\t\ts2 *= x;\n\t\t\ts1 += P[ i ];\n\t\t\ts2 += Q[ i ];\n\t\t}\n\t} else {\n\t\tx = 1.0 / x; // use inverse to avoid overflow\n\t\ts1 = P[ 0 ];\n\t\ts2 = Q[ 0 ];\n\t\tfor ( i = 1; i < len; ++i ) {\n\t\t\ts1 *= x;\n\t\t\ts2 *= x;\n\t\t\ts1 += P[ i ];\n\t\t\ts2 += Q[ i ];\n\t\t}\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Computes the squared absolute value of a double-precision floating-point number `x`.\n*\n* @param {number} x - input value\n* @returns {number} squared absolute value\n*\n* @example\n* var v = abs2( -1.0 );\n* // returns 1.0\n*\n* @example\n* var v = abs2( 2.0 );\n* // returns 4.0\n*\n* @example\n* var v = abs2( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = abs2( -0.0 );\n* // returns 0.0\n*\n* @example\n* var v = abs2( NaN );\n* // returns NaN\n*/\nfunction abs2( x ) {\n\treturn x * x;\n}\n\n\n// EXPORTS //\n\nexport default abs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the squared absolute value of a single-precision floating-point number `x`.\n*\n* @param {number} x - input value\n* @returns {number} squared absolute value\n*\n* @example\n* var v = abs2f( -1.0 );\n* // returns 1.0\n*\n* @example\n* var v = abs2f( 2.0 );\n* // returns 4.0\n*\n* @example\n* var v = abs2f( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = abs2f( -0.0 );\n* // returns 0.0\n*\n* @example\n* var v = abs2f( NaN );\n* // returns NaN\n*/\nfunction abs2f( x ) {\n\treturn float64ToFloat32( float64ToFloat32( x ) * float64ToFloat32( x ) );\n}\n\n\n// EXPORTS //\n\nexport default abs2f;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the absolute value of a single-precision floating-point number `x`.\n*\n* @param {number} x - input value\n* @returns {number} absolute value\n*\n* @example\n* var v = absf( -1.0 );\n* // returns 1.0\n*\n* @example\n* var v = absf( 2.0 );\n* // returns 2.0\n*\n* @example\n* var v = absf( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = absf( -0.0 );\n* // returns 0.0\n*\n* @example\n* var v = absf( NaN );\n* // returns NaN\n*/\nfunction absf( x ) {\n\treturn Math.abs( x ); // eslint-disable-line stdlib/no-builtin-math\n}\n\n\n// EXPORTS //\n\nexport default absf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport atan from '@stdlib/math-base-special-atan';\n\n\n// MAIN //\n\n/**\n* Computes the inverse cotangent of a double-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {number} inverse cotangent (in radians)\n*\n* @example\n* var v = acot( 2.0 );\n* // returns ~0.4636\n*\n* @example\n* var v = acot( 0.0 );\n* // returns ~1.5708\n*\n* @example\n* var v = acot( 0.5 );\n* // returns ~1.1071\n*\n* @example\n* var v = acot( 1.0 );\n* // returns ~0.7854\n*\n* @example\n* var v = acot( NaN );\n* // returns NaN\n*\n* @example\n* var v = acot( Infinity );\n* // returns 0.0\n*/\nfunction acot( x ) {\n\treturn atan( 1.0 / x );\n}\n\n\n// EXPORTS //\n\nexport default acot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport atanh from '@stdlib/math-base-special-atanh';\n\n\n// MAIN //\n\n/**\n* Computes the inverse hyperbolic cotangent of a double-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {number} inverse hyperbolic cotangent\n*\n* @example\n* var v = acoth( 2.0 );\n* // returns ~0.5493\n*\n* @example\n* var v = acoth( 0.0 );\n* // returns NaN\n*\n* @example\n* var v = acoth( 0.5 );\n* // returns NaN\n*\n* @example\n* var v = acoth( 1.0 );\n* // returns Infinity\n*\n* @example\n* var v = acoth( NaN );\n* // returns NaN\n*/\nfunction acoth( x ) {\n\treturn atanh( 1.0/x );\n}\n\n\n// EXPORTS //\n\nexport default acoth;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport asin from '@stdlib/math-base-special-asin';\n\n\n// MAIN //\n\n/**\n* Computes the inverse coversed cosine.\n*\n* @param {number} x - input value\n* @returns {number} inverse coversed cosine\n*\n* @example\n* var v = acovercos( 0.0 );\n* // returns ~1.5708\n*\n* @example\n* var v = acovercos( -3.141592653589793/2.0 );\n* // returns ~-0.6075\n*\n* @example\n* var v = acovercos( -3.141592653589793/6.0 );\n* // returns ~0.4966\n*\n* @example\n* var v = acovercos( NaN );\n* // returns NaN\n*/\nfunction acovercos( x ) {\n\treturn asin( 1.0 + x );\n}\n\n\n// EXPORTS //\n\nexport default acovercos;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport asin from '@stdlib/math-base-special-asin';\n\n\n// MAIN //\n\n/**\n* Computes the inverse coversed sine.\n*\n* @param {number} x - input value\n* @returns {number} inverse coversed sine\n*\n* @example\n* var v = acoversin( 0.0 );\n* // returns ~1.5708\n*\n* @example\n* var v = acoversin( 3.141592653589793/2.0 );\n* // returns ~-0.6075\n*\n* @example\n* var v = acoversin( 3.141592653589793/6.0 );\n* // returns ~0.4966\n*\n* @example\n* var v = acoversin( NaN );\n* // returns NaN\n*/\nfunction acoversin( x ) {\n\treturn asin( 1.0 - x );\n}\n\n\n// EXPORTS //\n\nexport default acoversin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport asin from '@stdlib/math-base-special-asin';\n\n\n// MAIN //\n\n/**\n* Computes the arccosecant of a number.\n*\n* ## Method\n*\n* ```text\n* \\operatorname{acsc}(x) = \\operatorname{asin}(\\frac{1}{x})\n* ```\n*\n* @param {number} x - input value\n* @returns {number} arccosecant (in radians)\n*\n* @example\n* var v = acsc( 1.0 );\n* // returns ~1.57\n*\n* @example\n* var v = acsc( 3.141592653589793 );\n* // returns ~0.32\n*\n* @example\n* var v = acsc( -3.141592653589793 );\n* // returns ~-0.32\n*\n* @example\n* var v = acsc( NaN );\n* // returns NaN\n*/\nfunction acsc( x ) {\n\treturn asin( 1.0 / x );\n}\n\n\n// EXPORTS //\n\nexport default acsc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport asinh from '@stdlib/math-base-special-asinh';\n\n\n// MAIN //\n\n/**\n* Computes the hyperbolic arccosecant of a number.\n*\n* @param {number} x - input value\n* @returns {number} hyperbolic arccosecant\n*\n* @example\n* var v = acsch( 0.0 );\n* // returns Infinity\n*\n* @example\n* var v = acsch( -1.0 );\n* // returns ~-0.881\n*\n* @example\n* var v = acsch( 1.0 );\n* // returns ~0.881\n*/\nfunction acsch( x ) {\n\treturn asinh( 1.0 / x );\n}\n\n\n// EXPORTS //\n\nexport default acsch;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport acos from '@stdlib/math-base-special-acos';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Computes the inverse half-value versed cosine.\n*\n* @param {number} x - input value\n* @returns {number} inverse half-value versed cosine\n*\n* @example\n* var v = ahavercos( 0.0 );\n* // returns ~3.1416\n*\n* @example\n* var v = ahavercos( 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = ahavercos( 0.5 );\n* // returns ~1.5708\n*\n* @example\n* var v = ahavercos( NaN );\n* // returns NaN\n*/\nfunction ahavercos( x ) {\n\treturn 2.0 * acos( sqrt( x ) );\n}\n\n\n// EXPORTS //\n\nexport default ahavercos;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport asin from '@stdlib/math-base-special-asin';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Computes the inverse half-value versed sine.\n*\n* @param {number} x - input value\n* @returns {number} inverse half-value versed sine\n*\n* @example\n* var v = ahaversin( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = ahaversin( 1.0 );\n* // returns ~3.1416\n*\n* @example\n* var v = ahaversin( 0.5 );\n* // returns ~1.5708\n*\n* @example\n* var v = ahaversin( NaN );\n* // returns NaN\n*/\nfunction ahaversin( x ) {\n\treturn 2.0 * asin( sqrt( x ) );\n}\n\n\n// EXPORTS //\n\nexport default ahaversin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport acos from '@stdlib/math-base-special-acos';\n\n\n// MAIN //\n\n/**\n* Computes the inverse (arc) secant of a number.\n*\n* ## Method\n*\n* ```tex\n* \\operatorname{asec}(x) = \\operatorname{acos}(\\frac{1}{x})\n* ```\n*\n* @param {number} x - input value\n* @returns {number} inverse (arc) secant\n*\n* @example\n* var v = asec( 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = asec( 2.0 );\n* // returns ~1.0472\n*\n* @example\n* var v = asec( NaN );\n* // returns NaN\n*/\nfunction asec( x ) {\n\treturn acos( 1.0 / x );\n}\n\n\n// EXPORTS //\n\nexport default asec;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport acosh from '@stdlib/math-base-special-acosh';\n\n\n// MAIN //\n\n/**\n* Computes the hyperbolic arcsecant of a number.\n*\n* ## Method\n*\n* ```tex\n* \\operatorname{asech}(x) = \\operatorname{acosh}(\\frac{1}{x})\n* ```\n*\n* @param {number} x - input value\n* @returns {number} hyperbolic arcsecant\n*\n* @example\n* var v = asech( 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = asech( 0.5 );\n* // returns ~1.317\n*\n* @example\n* var v = asech( NaN );\n* // returns NaN\n*/\nfunction asech( x ) {\n\treturn acosh( 1.0 / x );\n}\n\n\n// EXPORTS //\n\nexport default asech;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport acos from '@stdlib/math-base-special-acos';\n\n\n// MAIN //\n\n/**\n* Computes the inverse versed cosine.\n*\n* @param {number} x - input value\n* @returns {number} inverse versed cosine\n*\n* @example\n* var v = avercos( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = avercos( -3.141592653589793/2.0 );\n* // returns ~2.1783\n*\n* @example\n* var v = avercos( -3.141592653589793/6.0 );\n* // returns ~1.0742\n*\n* @example\n* var v = avercos( NaN );\n* // returns NaN\n*/\nfunction avercos( x ) {\n\treturn acos( 1.0 + x );\n}\n\n\n// EXPORTS //\n\nexport default avercos;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport acos from '@stdlib/math-base-special-acos';\n\n\n// MAIN //\n\n/**\n* Computes the inverse versed sine.\n*\n* @param {number} x - input value\n* @returns {number} inverse versed sine\n*\n* @example\n* var v = aversin( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = aversin( 3.141592653589793/2.0 );\n* // returns ~2.1783\n*\n* @example\n* var v = aversin( 3.141592653589793/6.0 );\n* // returns ~1.0742\n*\n* @example\n* var v = aversin( NaN );\n* // returns NaN\n*/\nfunction aversin( x ) {\n\treturn acos( 1.0 - x );\n}\n\n\n// EXPORTS //\n\nexport default aversin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.18214429522164177;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 107235387820.03177 + (x * (-8371625545.12605 + (x * (204222743.5737662 + (x * (-2128754.84744018 + (x * (10102.532948020907 + (x * -18.402381979244993))))))))); // eslint-disable-line max-len\n\t\ts2 = 588738657389.9703 + (x * (8161718777.729036 + (x * (55662956.624278255 + (x * (238893.93209447255 + (x * (664.7598668924019 + (x * 1.0))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -18.402381979244993 + (x * (10102.532948020907 + (x * (-2128754.84744018 + (x * (204222743.5737662 + (x * (-8371625545.12605 + (x * 107235387820.03177))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (664.7598668924019 + (x * (238893.93209447255 + (x * (55662956.624278255 + (x * (8161718777.729036 + (x * 588738657389.9703))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.051200622130023854;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -22213976967566.19 + (x * (-551074352067.2264 + (x * (43600098638.60306 + (x * (-695904393.9461962 + (x * (4690528.861167863 + (x * (-14566.865832663636 + (x * 17.427031242901595))))))))))); // eslint-disable-line max-len\n\t\ts2 = 433861465807072.6 + (x * (5426682441941.234 + (x * (34015103849.97124 + (x * (139602027.7098683 + (x * (406699.82352539554 + (x * (830.3085761207029 + (x * 1.0))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 17.427031242901595 + (x * (-14566.865832663636 + (x * (4690528.861167863 + (x * (-695904393.9461962 + (x * (43600098638.60306 + (x * (-551074352067.2264 + (x * -22213976967566.19))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (830.3085761207029 + (x * (406699.82352539554 + (x * (139602027.7098683 + (x * (34015103849.97124 + (x * (5426682441941.234 + (x * 433861465807072.6))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.023356489432789604;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -8072872690515021.0 + (x * (670166418691732.4 + (x * (-128299123640.88687 + (x * (-193630512667.72083 + (x * (2195882717.0518103 + (x * (-10085539.923498211 + (x * (21363.5341693139 + (x * -17.439661319197498))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 345637246288464600.0 + (x * (3927242556964031.0 + (x * (22598377924042.9 + (x * (86926121104.20982 + (x * (247272194.75672302 + (x * (539247.3920976806 + (x * (879.0336216812844 + (x * 1.0))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -17.439661319197498 + (x * (21363.5341693139 + (x * (-10085539.923498211 + (x * (2195882717.0518103 + (x * (-193630512667.72083 + (x * (-128299123640.88687 + (x * (670166418691732.4 + (x * -8072872690515021.0))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (879.0336216812844 + (x * (539247.3920976806 + (x * (247272194.75672302 + (x * (86926121104.20982 + (x * (22598377924042.9 + (x * (3927242556964031.0 + (x * 345637246288464600.0))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 22779.090197304686 + (x * (41345.38663958076 + (x * (21170.523380864943 + (x * (3480.648644324927 + (x * (153.76201909008356 + (x * 0.8896154842421046))))))))); // eslint-disable-line max-len\n\t\ts2 = 22779.090197304686 + (x * (41370.41249551042 + (x * (21215.350561880117 + (x * (3502.8735138235606 + (x * (157.11159858080893 + (x * 1.0))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.8896154842421046 + (x * (153.76201909008356 + (x * (3480.648644324927 + (x * (21170.523380864943 + (x * (41345.38663958076 + (x * 22779.090197304686))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (157.11159858080893 + (x * (3502.8735138235606 + (x * (21215.350561880117 + (x * (41370.41249551042 + (x * 22779.090197304686))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.015625;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -89.22660020080009 + (x * (-185.91953644342993 + (x * (-111.83429920482737 + (x * (-22.300261666214197 + (x * (-1.244102674583564 + (x * -0.008803330304868075))))))))); // eslint-disable-line max-len\n\t\ts2 = 5710.502412851206 + (x * (11951.131543434614 + (x * (7264.278016921102 + (x * (1488.7231232283757 + (x * (90.59376959499312 + (x * 1.0))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.008803330304868075 + (x * (-1.244102674583564 + (x * (-22.300261666214197 + (x * (-111.83429920482737 + (x * (-185.91953644342993 + (x * -89.22660020080009))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (90.59376959499312 + (x * (1488.7231232283757 + (x * (7264.278016921102 + (x * (11951.131543434614 + (x * 5710.502412851206))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.13187550549740895;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 40535726612579.55 + (x * (5470861171652.543 + (x * (-375959744978.196 + (x * (7214454821.450256 + (x * (-59157479.9974084 + (x * (221579.5322228026 + (x * -317.1442466004613))))))))))); // eslint-disable-line max-len\n\t\ts2 = 307378739210792.9 + (x * (4127228620040.646 + (x * (27800352738.690586 + (x * (122504351.22182964 + (x * (381364.70753052575 + (x * (820.7990816839387 + (x * 1.0))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -317.1442466004613 + (x * (221579.5322228026 + (x * (-59157479.9974084 + (x * (7214454821.450256 + (x * (-375959744978.196 + (x * (5470861171652.543 + (x * 40535726612579.55))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (820.7990816839387 + (x * (381364.70753052575 + (x * (122504351.22182964 + (x * (27800352738.690586 + (x * (4127228620040.646 + (x * 307378739210792.9))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.021593919914419626;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 11514276357909012000.0 + (x * (-5680809457472421000.0 + (x * (-23638408497043136.0 + (x * (4068627528980474.5 + (x * (-59530713129741.984 + (x * (374536739624.3849 + (x * (-1195796191.2070618 + (x * (1915380.6858264203 + (x * -1233.7180442012952))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 533218443133161800000.0 + (x * (5696819882285718000.0 + (x * (30837179548112880.0 + (x * (111870100658569.7 + (x * (302217668529.60406 + (x * (635503180.8708892 + (x * (1045374.8201934079 + (x * (1285.516484932161 + (x * 1.0))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -1233.7180442012952 + (x * (1915380.6858264203 + (x * (-1195796191.2070618 + (x * (374536739624.3849 + (x * (-59530713129741.984 + (x * (4068627528980474.5 + (x * (-23638408497043136.0 + (x * (-5680809457472421000.0 + (x * 11514276357909012000.0))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (1285.516484932161 + (x * (1045374.8201934079 + (x * (635503180.8708892 + (x * (302217668529.60406 + (x * (111870100658569.7 + (x * (30837179548112880.0 + (x * (5696819882285718000.0 + (x * 533218443133161800000.0))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -4435757.816794128 + (x * (-9942246.505077641 + (x * (-6603373.248364939 + (x * (-1523529.3511811374 + (x * (-109824.05543459347 + (x * (-1611.6166443246102 + (x * 0.0))))))))))); // eslint-disable-line max-len\n\t\ts2 = -4435757.816794128 + (x * (-9934124.389934586 + (x * (-6585339.4797230875 + (x * (-1511809.5066341609 + (x * (-107263.8599110382 + (x * (-1455.0094401904962 + (x * 1.0))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (-1611.6166443246102 + (x * (-109824.05543459347 + (x * (-1523529.3511811374 + (x * (-6603373.248364939 + (x * (-9942246.505077641 + (x * -4435757.816794128))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (-1455.0094401904962 + (x * (-107263.8599110382 + (x * (-1511809.5066341609 + (x * (-6585339.4797230875 + (x * (-9934124.389934586 + (x * -4435757.816794128))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.046875;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 33220.913409857225 + (x * (85145.1606753357 + (x * (66178.83658127084 + (x * (18494.262873223866 + (x * (1706.375429020768 + (x * (35.26513384663603 + (x * 0.0))))))))))); // eslint-disable-line max-len\n\t\ts2 = 708712.8194102874 + (x * (1819458.0422439973 + (x * (1419460.669603721 + (x * (400294.43582266977 + (x * (37890.2297457722 + (x * (863.8367769604992 + (x * 1.0))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (35.26513384663603 + (x * (1706.375429020768 + (x * (18494.262873223866 + (x * (66178.83658127084 + (x * (85145.1606753357 + (x * 33220.913409857225))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (863.8367769604992 + (x * (37890.2297457722 + (x * (400294.43582266977 + (x * (1419460.669603721 + (x * (1819458.0422439973 + (x * 708712.8194102874))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport kernelBetaincinv from '@stdlib/math-base-special-kernel-betaincinv';\n\n\n// MAIN //\n\n/**\n* Returns a value `p` such that `p = betainc(a, b, x)`.\n*\n* @param {Probability} p - function parameter\n* @param {PositiveNumber} a - function parameter\n* @param {PositiveNumber} b - function parameter\n* @param {boolean} [upper=false] - boolean indicating if the function should return the inverse of the upper tail of the incomplete beta function\n* @returns {number} function value\n*\n* @example\n* var y = betaincinv( 0.2, 3.0, 3.0 );\n* // returns ~0.327\n*\n* @example\n* var y = betaincinv( 0.4, 3.0, 3.0 );\n* // returns ~0.446\n*\n* @example\n* var y = betaincinv( 0.4, 3.0, 3.0, true );\n* // returns ~0.554\n*\n* @example\n* var y = betaincinv( 0.4, 1.0, 6.0 );\n* // returns ~0.082\n*\n* @example\n* var y = betaincinv( 0.8, 1.0, 6.0 );\n* // returns ~0.235\n*/\nfunction betaincinv( p, a, b, upper ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b )\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( a <= 0.0 || b <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( p < 0.0 || p > 1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( upper ) {\n\t\treturn kernelBetaincinv( a, b, 1.0 - p, p )[ 0 ];\n\t}\n\treturn kernelBetaincinv( a, b, p, 1.0 - p )[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default betaincinv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport cospi from '@stdlib/math-base-special-cospi';\nimport pow from '@stdlib/math-base-special-pow';\nimport PHI from '@stdlib/constants-float64-phi';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// VARIABLES //\n\nvar SQRT_5 = 2.23606797749979;\n\n\n// MAIN //\n\n/**\n* Evaluates Binet's formula extended to real numbers.\n*\n* ## Notes\n*\n* -   [Non integer Fibonacci numbers][1]\n* -   [Interpolated Fibonacci numbers - real or complex][2]\n*\n* [1]: https://math.stackexchange.com/questions/798190/non-integer-fibonacci-numbers\n* [2]: https://math.stackexchange.com/questions/589841/interpolated-fibonacci-numbers-real-or-complex\n*\n* @param {number} x - input value\n* @returns {number} real-valued result\n*\n* @example\n* var y = binet( 0.0 );\n* // returns 0.0\n*\n* @example\n* var y = binet( 1.0 );\n* // returns 1.0\n*\n* @example\n* var y = binet( 2.0 );\n* // returns 1.0\n*\n* @example\n* var y = binet( 3.0 );\n* // returns 2.0\n*\n* @example\n* var y = binet( 4.0 );\n* // returns 3.0\n*\n* @example\n* var y = binet( 5.0 );\n* // returns ~5.0\n*\n* @example\n* var y = binet( 6.0 );\n* // returns ~8.0\n*\n* @example\n* var y = binet( NaN );\n* // returns NaN\n*\n* @example\n* var y = binet( 3.14 );\n* // returns ~2.12\n*\n* @example\n* var y = binet( -1.0 );\n* // returns 1.0\n*/\nfunction binet( x ) {\n\tvar a;\n\tvar b;\n\tif (\n\t\tisnan( x ) ||\n\t\tx === PINF ||\n\t\tx === NINF\n\t) {\n\t\treturn NaN;\n\t}\n\ta = pow( PHI, x );\n\tb = cospi( x ) / a;\n\treturn ( a - b ) / SQRT_5;\n}\n\n\n// EXPORTS //\n\nexport default binet;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport betaln from '@stdlib/math-base-special-betaln';\nimport abs from '@stdlib/math-base-special-abs';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Computes the natural logarithm of the binomial coefficient of two integers.\n*\n* @param {integer} n - input value\n* @param {integer} k - second input value\n* @returns {number} function value\n*\n* @example\n* var v = binomcoefln( 8, 2 );\n* // returns ~3.332\n*\n* @example\n* var v = binomcoefln( 0, 0 );\n* // returns 0.0\n*\n* @example\n* var v = binomcoefln( -4, 2 );\n* // returns ~2.303\n*\n* @example\n* var v = binomcoefln( 88, 3 );\n* // returns ~11.606\n*\n* @example\n* var v = binomcoefln( NaN, 3 );\n* // returns NaN\n*\n* @example\n* var v = binomcoefln( 5, NaN );\n* // returns NaN\n*\n* @example\n* var v = binomcoefln( NaN, NaN );\n* // returns NaN\n*/\nfunction binomcoefln( n, k ) {\n\tif ( isnan( n ) || isnan( k ) ) {\n\t\treturn NaN;\n\t}\n\tif ( !isInteger( n ) || !isInteger( k ) ) {\n\t\treturn NaN;\n\t}\n\tif ( n < 0.0 ) {\n\t\treturn binomcoefln( -n + k - 1, k );\n\t}\n\tif ( k < 0 ) {\n\t\treturn NINF;\n\t}\n\tif ( k === 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( k === 1 ) {\n\t\treturn ln( abs( n ) );\n\t}\n\tif ( n < k ) {\n\t\treturn NINF;\n\t}\n\tif ( n - k < 2 ) {\n\t\treturn binomcoefln( n, n - k );\n\t}\n\t// Case: n - k >= 2\n\treturn -ln( n + 1 ) - betaln( n - k + 1, k + 1 );\n}\n\n\n// EXPORTS //\n\nexport default binomcoefln;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\nimport ln from '@stdlib/math-base-special-ln';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Computes a one-parameter Box-Cox transformation.\n*\n* ## Method\n*\n* -   If \\\\( \\lambda << 1 \\\\) and \\\\( \\ln( x ) < 1.0 \\\\), then the product \\\\( \\lambda \\cdot \\ln(x) \\\\) can lose precision, and, furthermore, \\\\( \\operatorname{expm1}(x) = x \\\\) for \\\\( x < \\epsilon \\\\).\n* -   For double-precision floating-point numbers, the range of the natural log is \\\\( \\[-744.44, 709.78\\] and \\\\( \\epsilon \\\\) is the smallest value produced.\n* -   The value range means that we will have \\\\( |\\lambda \\cdot \\ln(x)| < \\epsilon \\\\) whenever \\\\( |\\lambda| \\leq \\frac{\\epsilon}{-\\ln(d) \\\\), where \\\\( d \\\\) is the minimum double-precision floating-point number, thus corresponding to the value \\\\( \\approx 2.98 \\times 10^{-19} \\\\).\n*\n* @param {number} x - input value\n* @param {number} lambda - power parameter\n* @returns {number} Box-Cox transformation\n*\n* @example\n* var v = boxcox( 1.0, 2.5 );\n* // returns 0.0\n*\n* @example\n* var v = boxcox( 4.0, 2.5 );\n* // returns 12.4\n*\n* @example\n* var v = boxcox( 10.0, 2.5 );\n* // returns ~126.0911\n*\n* @example\n* var v = boxcox( 2.0, 0.0 );\n* // returns ~0.6931\n*\n* @example\n* var v = boxcox( -1.0, 2.5 );\n* // returns NaN\n*\n* @example\n* var v = boxcox( 0.0, -1.0 );\n* // returns -Infinity\n*/\nfunction boxcox( x, lambda ) {\n\tif ( isnan( x ) || isnan( lambda ) ) {\n\t\treturn NaN;\n\t}\n\tif ( isPositiveZero( x ) && lambda < 0.0 ) {\n\t\treturn NINF;\n\t}\n\tif ( abs( lambda ) < 1.0e-19 ) {\n\t\treturn ln( x );\n\t}\n\treturn expm1( lambda*ln( x ) ) / lambda;\n}\n\n\n// EXPORTS //\n\nexport default boxcox;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport log1p from '@stdlib/math-base-special-log1p';\nimport abs from '@stdlib/math-base-special-abs';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Computes a one-parameter Box-Cox transformation of `1+x`.\n*\n* ## Method\n*\n* When computing a one-parameter Box-Cox transformation\n*\n* -   If \\\\( \\lambda << 1 \\\\) and \\\\( \\ln( x ) < 1.0 \\\\), then the product \\\\( \\lambda \\cdot \\ln(x) \\\\) can lose precision, and, furthermore, \\\\( \\operatorname{expm1}(x) = x \\\\) for \\\\( x < \\epsilon \\\\).\n* -   For double-precision floating-point numbers, the range of the natural log is \\\\( \\[-744.44, 709.78\\] and \\\\( \\epsilon \\\\) is the smallest value produced.\n* -   The value range means that we will have \\\\( |\\lambda \\cdot \\ln(x)| < \\epsilon \\\\) whenever \\\\( |\\lambda| \\leq \\frac{\\epsilon}{-\\ln(d) \\\\), where \\\\( d \\\\) is the minimum double-precision floating-point number, thus corresponding to the value \\\\( \\approx 2.98 \\times 10^{-19} \\\\).\n*\n* For small `x` values, the same method described above applies with the modification that the smallest value returned by \\\\( \\operatorname{log1p}(x) \\\\) is the minimum representable value, not \\\\( \\epsilon \\\\). Furthermore, we need to guard against underflow when \\\\( \\operatorname{log1p}(x) < \\epsilon \\\\).\n*\n* @param {number} x - input value\n* @param {number} lambda - power parameter\n* @returns {number} Box-Cox transformation of `1+x`\n*\n* @example\n* var v = boxcox1p( 1.0, 2.5 );\n* // returns ~1.8627\n*\n* @example\n* var v = boxcox1p( 4.0, 2.5 );\n* // returns ~21.9607\n*\n* @example\n* var v = boxcox1p( 10.0, 2.5 );\n* // returns ~160.1246\n*\n* @example\n* var v = boxcox1p( 2.0, 0.0 );\n* // returns ~1.0986\n*\n* @example\n* var v = boxcox1p( -1.0, 2.5 );\n* // returns -0.4\n*\n* @example\n* var v = boxcox1p( 0.0, -1.0 );\n* // returns 0.0\n*\n* @example\n* var v = boxcox1p( -1.0, -1.0 );\n* // returns -Infinity\n*/\nfunction boxcox1p( x, lambda ) {\n\tvar lgx;\n\tif ( isnan( x ) || isnan( lambda ) || x < -1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x === -1.0 && lambda < 0.0 ) {\n\t\treturn NINF;\n\t}\n\tlgx = log1p( x );\n\tif (\n\t\tabs( lambda ) < 1.0e-19 ||\n\n\t\t// Guard against underflow...\n\t\t(\n\t\t\tabs( lgx ) < 1.0e-289 &&\n\t\t\tabs( lambda ) < 1.0e273\n\t\t)\n\t) {\n\t\treturn lgx;\n\t}\n\treturn expm1( lambda*lgx ) / lambda;\n}\n\n\n// EXPORTS //\n\nexport default boxcox1p;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport abs from '@stdlib/math-base-special-abs';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the inverse of a one-parameter Box-Cox transformation for `1+x`.\n*\n* @param {number} y - input value\n* @param {number} lambda - power parameter\n* @returns {number} inverse of the Box-Cox transformation\n*\n* @example\n* var v = boxcox1pinv( 1.0, 2.5 );\n* // returns ~0.6505\n*\n* @example\n* var v = boxcox1pinv( 4.0, 2.5 );\n* // returns ~1.6095\n*\n* @example\n* var v = boxcox1pinv( 10.0, 2.5 );\n* // returns ~2.6812\n*\n* @example\n* var v = boxcox1pinv( 2.0, 0.0 );\n* // returns ~6.3891\n*\n* @example\n* var v = boxcox1pinv( -1.0, 2.5 );\n* // returns NaN\n*\n* @example\n* var v = boxcox1pinv( 0.0, -1.0 );\n* // returns 0.0\n*\n* @example\n* var v = boxcox1pinv( 1.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = boxcox1pinv( NaN, 3.1 );\n* // returns NaN\n*/\nfunction boxcox1pinv( y, lambda ) {\n\tvar ly;\n\tif ( isnan( y ) || isnan( lambda ) ) {\n\t\treturn NaN;\n\t}\n\tif ( lambda === 0.0 ) {\n\t\treturn expm1( y );\n\t}\n\tly = lambda * y;\n\tif ( abs( ly ) < 1.0e-154 ) {\n\t\treturn y;\n\t}\n\treturn expm1( log1p( ly ) / lambda );\n}\n\n\n// EXPORTS //\n\nexport default boxcox1pinv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport exp from '@stdlib/math-base-special-exp';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the inverse of a one-parameter Box-Cox transformation.\n*\n* @param {number} y - input value\n* @param {number} lambda - power parameter\n* @returns {number} inverse of the Box-Cox transformation\n*\n* @example\n* var v = boxcoxinv( 1.0, 2.5 );\n* // returns ~1.6505\n*\n* @example\n* var v = boxcoxinv( 4.0, 2.5 );\n* // returns ~2.6095\n*\n* @example\n* var v = boxcoxinv( 10.0, 2.5 );\n* // returns ~3.6812\n*\n* @example\n* var v = boxcoxinv( 2.0, 0.0 );\n* // returns ~7.3891\n*\n* @example\n* var v = boxcoxinv( -1.0, 2.5 );\n* // returns NaN\n*\n* @example\n* var v = boxcoxinv( 0.0, -1.0 );\n* // returns 1.0\n*\n* @example\n* var v = boxcoxinv( 1.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = boxcoxinv( NaN, 3.1 );\n* // returns NaN\n*/\nfunction boxcoxinv( y, lambda ) {\n\tif ( isnan( y ) || isnan( lambda ) ) {\n\t\treturn NaN;\n\t}\n\tif ( lambda === 0.0 ) {\n\t\treturn exp( y );\n\t}\n\treturn exp( log1p( lambda*y ) / lambda );\n}\n\n\n// EXPORTS //\n\nexport default boxcoxinv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\n\n\n// MAIN //\n\n/**\n* Computes the squared absolute value of a double-precision complex floating-point number.\n*\n* ## Notes\n*\n* -   Be careful of overflow and underflow.\n*\n* @param {Complex128} z - complex number\n* @returns {number} squared absolute value\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n*\n* var v = cabs2( new Complex128( 5.0, 3.0 ) );\n* // returns 34.0\n*/\nfunction cabs2( z ) {\n\tvar re = real( z );\n\tvar im = imag( z );\n\treturn (re*re) + (im*im);\n}\n\n\n// EXPORTS //\n\nexport default cabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\n\n\n// MAIN //\n\n/**\n* Computes the squared absolute value of a single-precision complex floating-point number.\n*\n* ## Notes\n*\n* -   Be careful of overflow and underflow.\n*\n* @param {Complex64} z - complex number\n* @returns {number} squared absolute value\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n*\n* var v = cabs2f( new Complex64( 5.0, 3.0 ) );\n* // returns 34.0\n*/\nfunction cabs2f( z ) {\n\tvar re = real( z );\n\tvar im = imag( z );\n\treturn (re*re) + (im*im);\n}\n\n\n// EXPORTS //\n\nexport default cabs2f;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hypotf from '@stdlib/math-base-special-hypotf';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\n\n\n// MAIN //\n\n/**\n* Computes the absolute value of a single-precision complex floating-point number.\n*\n* @param {Complex64} z - complex number\n* @returns {number} absolute value\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n*\n* var v = cabsf( new Complex64( 5.0, 3.0 ) );\n* // returns ~5.83\n*/\nfunction cabsf( z ) {\n\t// TODO: consider whether to use C99 rules for special cases involving infinities and nans (see https://github.com/python/cpython/blob/f4c03484da59049eb62a9bf7777b963e2267d187/Objects/complexobject.c#L191)\n\treturn hypotf( real( z ), imag( z ) );\n}\n\n\n// EXPORTS //\n\nexport default cabsf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport cbrt from '@stdlib/math-base-special-cbrt';\n\n\n// MAIN //\n\n/**\n* Computes the cube root of a single-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {number} cube root\n*\n* @example\n* var v = cbrtf( 64.0 );\n* // returns 4.0\n*\n* @example\n* var v = cbrtf( 27.0 );\n* // returns 3.0\n*\n* @example\n* var v = cbrtf( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = cbrtf( -9.0 );\n* // returns ~-2.08\n*\n* @example\n* var v = cbrtf( NaN );\n* // returns NaN\n*/\nfunction cbrtf( x ) {\n\treturn float64ToFloat32( cbrt( float64ToFloat32( x ) ) );\n}\n\n\n// EXPORTS //\n\nexport default cbrtf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Complex128 from '@stdlib/complex-float64';\nimport ceil from '@stdlib/math-base-special-ceil';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\n\n\n// MAIN //\n\n/**\n* Rounds a complex number toward positive infinity.\n*\n* @param {Complex128} z - complex number\n* @returns {Complex128} result\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var v = cceil( new Complex128( -1.5, 2.5 ) );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns -1.0\n*\n* var im = imag( v );\n* // returns 3.0\n*/\nfunction cceil( z ) {\n\treturn new Complex128( ceil( real( z ) ), ceil( imag( z ) ) );\n}\n\n\n// EXPORTS //\n\nexport default cceil;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Complex64 from '@stdlib/complex-float32';\nimport ceilf from '@stdlib/math-base-special-ceilf';\nimport realf from '@stdlib/complex-realf';\nimport imagf from '@stdlib/complex-imagf';\n\n\n// MAIN //\n\n/**\n* Rounds a complex number toward positive infinity.\n*\n* @param {Complex64} z - complex number\n* @returns {Complex64} result\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var v = cceilf( new Complex64( -1.5, 2.5 ) );\n* // returns <Complex64>\n*\n* var re = realf( v );\n* // returns -1.0\n*\n* var im = imagf( v );\n* // returns 3.0\n*/\nfunction cceilf( z ) {\n\treturn new Complex64( ceilf( realf( z ) ), ceilf( imagf( z ) ) );\n}\n\n\n// EXPORTS //\n\nexport default cceilf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ceiln from '@stdlib/math-base-special-ceiln';\nimport Complex128 from '@stdlib/complex-float64';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\n\n\n// MAIN //\n\n/**\n* Rounds each component of a double-precision complex floating-point number to the nearest multiple of `10^n` toward positive infinity.\n*\n* @param {Complex128} z - complex number\n* @param {integer} n - integer power of 10\n* @returns {Complex128} result\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* // Round components to 2 decimal places:\n* var z = new Complex128( -3.141592653589793, 3.141592653589793 )\n* var v = cceiln( z, -2 );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns -3.14\n*\n* var im = imag( v );\n* // returns 3.15\n*\n* // If n = 0, `cceiln` behaves like `cceil`:\n* z = new Complex128( 9.99999, 0.1 )\n* v = cceiln( z, 0 );\n* // returns <Complex128>\n*\n* re = real( v );\n* // returns 10.0\n*\n* im = imag( v );\n* // returns 1.0\n*\n* // Round components to the nearest thousand:\n* z = new Complex128( 12368.0, -12368.0 )\n* v = cceiln( z, 3 );\n* // returns <Complex128>\n*\n* re = real( v );\n* // returns 13000.0\n*\n* im = imag( v );\n* // returns -12000.0\n*\n* v = cceiln( new Complex128( NaN, NaN ), 2 );\n* // returns <Complex128>\n*\n* re = real( v );\n* // returns NaN\n*\n* im = imag( v );\n* // returns NaN\n*/\nfunction cceiln( z, n ) {\n\treturn new Complex128( ceiln( real( z ), n ), ceiln( imag( z ), n ) );\n}\n\n\n// EXPORTS //\n\nexport default cceiln;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport pow from '@stdlib/math-base-special-pow';\nimport floor from '@stdlib/math-base-special-floor';\nimport ceil from '@stdlib/math-base-special-ceil';\nimport log2 from '@stdlib/math-base-special-log2';\nimport MAX_EXP from '@stdlib/constants-float64-max-base2-exponent';\nimport MIN_EXP_SUBNORMAL from '@stdlib/constants-float64-min-base2-exponent-subnormal';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Rounds a numeric value to the nearest power of two toward positive infinity.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = ceil2( 3.141592653589793 );\n* // returns 4.0\n*\n* @example\n* var v = ceil2( 9.0 );\n* // returns 16.0\n*\n* @example\n* var v = ceil2( -0.314 );\n* // returns -0.25\n*/\nfunction ceil2( x ) {\n\tvar sign;\n\tvar p;\n\tif (\n\t\tisnan( x ) ||\n\t\tisInfinite( x ) ||\n\t\tx === 0.0\n\t) {\n\t\treturn x;\n\t}\n\tif ( x < 0 ) {\n\t\tx = -x;\n\t\tsign = -1.0;\n\t} else {\n\t\tsign = 1.0;\n\t}\n\t// Solve the equation `2^p = x` for `p`:\n\tp = log2( x );\n\n\t// If provided the smallest subnormal, no rounding possible:\n\tif ( p === MIN_EXP_SUBNORMAL ) {\n\t\treturn x;\n\t}\n\t// Determine a power of two which rounds the input value toward positive infinity:\n\tif ( sign === -1.0 ) {\n\t\tp = floor( p );\n\t} else {\n\t\tp = ceil( p );\n\t}\n\t// Handle overflow:\n\tif ( p > MAX_EXP ) {\n\t\treturn PINF;\n\t}\n\treturn sign * pow( 2.0, p );\n}\n\n\n// EXPORTS //\n\nexport default ceil2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport pow from '@stdlib/math-base-special-pow';\nimport floor from '@stdlib/math-base-special-floor';\nimport ceil from '@stdlib/math-base-special-ceil';\nimport log10 from '@stdlib/math-base-special-log10';\nimport MAX_EXP from '@stdlib/constants-float64-max-base10-exponent';\nimport MIN_EXP_SUBNORMAL from '@stdlib/constants-float64-min-base10-exponent-subnormal';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Rounds a numeric value to the nearest power of `10` toward positive infinity.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = ceil10( 3.141592653589793 );\n* // returns 10.0\n*\n* @example\n* var v = ceil10( 9.0 );\n* // returns 10.0\n*\n* @example\n* var v = ceil10( -0.314 );\n* // returns -0.1\n*/\nfunction ceil10( x ) {\n\tvar sign;\n\tvar p;\n\tif (\n\t\tisnan( x ) ||\n\t\tisInfinite( x ) ||\n\t\tx === 0.0\n\t) {\n\t\treturn x;\n\t}\n\tif ( x < 0 ) {\n\t\tx = -x;\n\t\tsign = -1.0;\n\t} else {\n\t\tsign = 1.0;\n\t}\n\t// Solve the equation `10^p = x` for `p`:\n\tp = log10( x );\n\n\t// Determine a power of 10 which rounds the input value toward positive infinity:\n\tif ( sign === -1.0 ) {\n\t\tp = floor( p );\n\t} else {\n\t\tp = ceil( p );\n\t}\n\t// Handle underflow:\n\tif ( p <= MIN_EXP_SUBNORMAL ) {\n\t\treturn sign * 0.0; // sign-preserving\n\t}\n\t// Handle overflow:\n\tif ( p > MAX_EXP ) {\n\t\treturn PINF;\n\t}\n\treturn sign * pow( 10.0, p );\n}\n\n\n// EXPORTS //\n\nexport default ceil10;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport pow from '@stdlib/math-base-special-pow';\nimport ceil from '@stdlib/math-base-special-ceil';\nimport ceiln from '@stdlib/math-base-special-ceiln';\n\n\n// MAIN //\n\n/**\n* Rounds a numeric value to the nearest multiple of \\\\(b^n\\\\) toward positive infinity.\n*\n* @param {number} x - input value\n* @param {integer} n - integer power\n* @param {PositiveInteger} b - base\n* @returns {number} rounded value\n*\n* @example\n* // Round a value to 4 decimal places:\n* var v = ceilb( 3.141592653589793, -4, 10 );\n* // returns 3.1416\n*\n* @example\n* // If n = 0 or b = 1, `ceilb` behaves like `ceil`:\n* var v = ceilb( 3.141592653589793, 0, 2 );\n* // returns 4.0\n*\n* @example\n* // Round a value to the nearest multiple of two toward positive infinity:\n* var v = ceilb( 5.0, 1, 2 );\n* // returns 6.0\n*/\nfunction ceilb( x, n, b ) {\n\tvar y;\n\tvar s;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( n ) ||\n\t\tisnan( b ) ||\n\t\tb <= 0 ||\n\t\tisInfinite( n ) ||\n\t\tisInfinite( b )\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( isInfinite( x ) || x === 0.0 ) {\n\t\treturn x;\n\t}\n\tif ( b === 10 ) {\n\t\treturn ceiln( x, n );\n\t}\n\tif ( n === 0 || b === 1 ) {\n\t\treturn ceil( x );\n\t}\n\ts = pow( b, -n );\n\n\t// Check for overflow:\n\tif ( isInfinite( s ) ) {\n\t\treturn x;\n\t}\n\ty = ceil( x * s ) / s;\n\n\t// Check for overflow:\n\tif ( isInfinite( y ) ) {\n\t\treturn x;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default ceilb;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport pow from '@stdlib/math-base-special-pow';\nimport log10 from '@stdlib/math-base-special-log10';\nimport ln from '@stdlib/math-base-special-ln';\nimport abs from '@stdlib/math-base-special-abs';\nimport floor from '@stdlib/math-base-special-floor';\nimport exponent from '@stdlib/number-float64-base-exponent';\nimport ceil from '@stdlib/math-base-special-ceil';\n\n\n// MAIN //\n\n/**\n* Rounds a numeric value to the nearest number toward positive infinity with \\\\(n\\\\) significant figures.\n*\n* @param {number} x - input value\n* @param {PositiveInteger} n - number of significant figures\n* @param {PositiveInteger} [b=10] - base\n* @returns {number} rounded value\n*\n* @example\n* var v = ceilsd( 3.141592653589793, 5 );\n* // returns 3.1416\n*\n* @example\n* var v = ceilsd( 3.141592653589793, 1 );\n* // returns 4.0\n*\n* @example\n* var v = ceilsd( 12368.0, 2 );\n* // returns 13000.0\n*\n* @example\n* var v = ceilsd( 0.0313, 2, 2 );\n* // returns 0.046875\n*/\nfunction ceilsd( x, n, b ) {\n\tvar base;\n\tvar exp;\n\tvar s;\n\tvar y;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( n ) ||\n\t\tn < 1 ||\n\t\tisInfinite( n )\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif (\n\t\t\tisnan( b ) ||\n\t\t\tb <= 0 ||\n\t\t\tisInfinite( b )\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\tbase = b;\n\t} else {\n\t\tbase = 10;\n\t}\n\tif ( isInfinite( x ) || x === 0.0 ) {\n\t\treturn x;\n\t}\n\tif ( base === 10 ) {\n\t\texp = log10( abs( x ) );\n\t}\n\telse if ( base === 2 ) {\n\t\texp = exponent( abs( x ) );\n\t}\n\telse {\n\t\texp = ln( abs(x) ) / ln( base );\n\t}\n\texp = floor( exp - n + 1.0 );\n\ts = pow( base, abs( exp ) );\n\n\t// Check for overflow:\n\tif ( isInfinite( s ) ) {\n\t\treturn x;\n\t}\n\t// To avoid numerical stability issues due to floating-point rounding error (e.g., 3.55/0.1-35.5 = -7.105427357601e-15 and 3.55*10-35.5 = 0), we must treat positive and negative exponents separately.\n\tif ( exp < 0 ) {\n\t\ty = ceil( x * s ) / s;\n\t} else {\n\t\ty = ceil( x / s ) * s;\n\t}\n\t// Check for overflow:\n\tif ( isInfinite( y ) ) {\n\t\treturn x;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default ceilsd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Complex128 from '@stdlib/complex-float64';\nimport copysign from '@stdlib/math-base-special-copysign';\nimport sincos from '@stdlib/math-base-special-sincos';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport exp from '@stdlib/math-base-special-exp';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\n\n\n// MAIN //\n\n/**\n* Evaluates the exponential function for a double-precision complex floating-point number.\n*\n* @param {Complex128} z - complex number\n* @returns {Complex128} result\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n* import cexp from '@stdlib/math-base-special-cexp';\n*\n* var v = cexp( new Complex128( 0.0, 0.0 ) );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns 1.0\n*\n* var im = imag( v );\n* // returns 0.0\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n* import cexp from '@stdlib/math-base-special-cexp';\n*\n* var v = cexp( new Complex128( 1.0, 0.0 ) );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns ~2.718\n*\n* var im = imag( v );\n* // returns 0.0\n*/\nfunction cexp( z ) {\n\tvar out;\n\tvar im;\n\tvar re;\n\tvar e;\n\n\tre = real( z );\n\tim = imag( z );\n\n\tif ( isnan( re ) ) {\n\t\tre = NaN;\n\t\tim = ( im === 0.0 ) ? im : re;\n\t} else if ( isInfinite( im ) ) {\n\t\tif ( re === PINF ) {\n\t\t\tre = -re;\n\t\t\tim = NaN;\n\t\t} else if ( re === NINF ) {\n\t\t\tre = -0.0;\n\t\t\tim = copysign( 0.0, im );\n\t\t} else {\n\t\t\tre = NaN;\n\t\t\tim = NaN;\n\t\t}\n\t} else {\n\t\te = exp( re );\n\t\tif ( im === 0.0 ) {\n\t\t\tre = e;\n\t\t} else {\n\t\t\tout = sincos( im );\n\t\t\tre = out[ 1 ] * e;\n\t\t\tim = out[ 0 ] * e;\n\t\t}\n\t}\n\treturn new Complex128( re, im );\n}\n\n\n// EXPORTS //\n\nexport default cexp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Complex128 from '@stdlib/complex-float64';\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\n\n\n// MAIN //\n\n/**\n* Returns a double-precision complex floating-point number with the same magnitude as `z` and the sign of `y*z`.\n*\n* @param {Complex128} z - complex number\n* @param {number} y - number from which to derive the sign\n* @returns {Complex128} result\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var v = cflipsign( new Complex128( -4.2, 5.5 ), -55.0 );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns 4.2\n*\n* var im = imag( v );\n* // returns -5.5\n*/\nfunction cflipsign( z, y ) {\n\tvar re = real( z );\n\tvar im = imag( z );\n\tif ( y < 0 || isNegativeZero( y ) ) {\n\t\tre = -re;\n\t\tim = -im;\n\t}\n\treturn new Complex128( re, im );\n}\n\n\n// EXPORTS //\n\nexport default cflipsign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Complex64 from '@stdlib/complex-float32';\nimport isNegativeZerof from '@stdlib/math-base-assert-is-negative-zerof';\nimport realf from '@stdlib/complex-realf';\nimport imagf from '@stdlib/complex-imagf';\n\n\n// MAIN //\n\n/**\n* Returns a single-precision complex floating-point number with the same magnitude as `z` and the sign of `y*z`.\n*\n* @param {Complex64} z - complex number\n* @param {number} y - number from which to derive the sign\n* @returns {Complex64} result\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var v = cflipsignf( new Complex64( -4.0, 5.0 ), -55.0 );\n* // returns <Complex64>\n*\n* var re = realf( v );\n* // returns 4.0\n*\n* var im = imagf( v );\n* // returns -5.0\n*/\nfunction cflipsignf( z, y ) {\n\tvar re = realf( z );\n\tvar im = imagf( z );\n\tif ( y < 0 || isNegativeZerof( y ) ) {\n\t\tre = -re;\n\t\tim = -im;\n\t}\n\treturn new Complex64( re, im );\n}\n\n\n// EXPORTS //\n\nexport default cflipsignf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Complex128 from '@stdlib/complex-float64';\nimport floor from '@stdlib/math-base-special-floor';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\n\n\n// MAIN //\n\n/**\n* Rounds a double-precision floating-point complex number toward negative infinity.\n*\n* @param {Complex128} z - complex number\n* @returns {Complex128} result\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var v = cfloor( new Complex128( -4.2, 5.5 ) );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns -5.0\n*\n* var im = imag( v );\n* // returns 5.0\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var v = cfloor( new Complex128( 9.99999, 0.1 ) );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns 9.0\n*\n* var im = imag( v );\n* // returns 0.0\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var v = cfloor( new Complex128( 0.0, 0.0 ) );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns 0.0\n*\n* var im = imag( v );\n* // returns 0.0\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var v = cfloor( new Complex128( NaN, NaN ) );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns NaN\n*\n* var im = imag( v );\n* // returns NaN\n*/\nfunction cfloor( z ) {\n\treturn new Complex128( floor( real( z ) ), floor( imag( z ) ) );\n}\n\n\n// EXPORTS //\n\nexport default cfloor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floorn from '@stdlib/math-base-special-floorn';\nimport Complex128 from '@stdlib/complex-float64';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\n\n\n// MAIN //\n\n/**\n* Rounds each component of a double-precision complex floating-point number to the nearest multiple of `10^n` toward negative infinity.\n*\n* @param {Complex128} z - complex number\n* @param {integer} n - integer power of 10\n* @returns {Complex128} result\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* // Round components to 2 decimal places:\n* var v = cfloorn( new Complex128( -3.141592653589793, 3.141592653589793 ), -2 );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns -3.15\n*\n* var im = imag( v );\n* // returns 3.14\n*\n* // If n = 0, `cfloorn` behaves like `cfloor`:\n* v = cfloorn( new Complex128( 9.99999, 0.1 ), 0 );\n* // returns <Complex128>\n*\n* re = real( v );\n* // returns 9.0\n*\n* im = imag( v );\n* // returns 0.0\n*\n* // Round components to the nearest thousand:\n* v = cfloorn( new Complex128( 12368.0, -12368.0 ), 2 );\n* // returns <Complex128>\n*\n* re = real( v );\n* // returns 12300\n*\n* im = imag( v );\n* // returns -12400\n*\n* v = cfloorn( new Complex128( NaN, NaN ), 2 );\n* // returns <Complex128>\n*\n* re = real( v );\n* // returns NaN\n*\n* im = imag( v );\n* // returns NaN\n*/\nfunction cfloorn( z, n ) {\n\treturn new Complex128( floorn( real( z ), n ), floorn( imag( z ), n ) );\n}\n\n\n// EXPORTS //\n\nexport default cfloorn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates the identity function for a double-precision complex floating-point number.\n*\n* @param {Complex128} z - input value\n* @returns {Complex128} input value\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var v = cidentity( new Complex128( -1.0, 2.0 ) );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns -1.0\n*\n* var im = imag( v );\n* // returns 2.0\n*/\nfunction cidentity( z ) {\n\treturn z;\n}\n\n\n// EXPORTS //\n\nexport default cidentity;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates the identity function for a single-precision complex floating-point number.\n*\n* @param {Complex64} z - input value\n* @returns {Complex64} input value\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var v = cidentityf( new Complex64( -1.0, 2.0 ) );\n* // returns <Complex64>\n*\n* var re = real( v );\n* // returns -1.0\n*\n* var im = imag( v );\n* // returns 2.0\n*/\nfunction cidentityf( z ) {\n\treturn z;\n}\n\n\n// EXPORTS //\n\nexport default cidentityf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\n\n\n// MAIN //\n\n/**\n* Restricts a double-precision floating-point number to a specified range.\n*\n* @param {number} v - input value\n* @param {number} min - minimum value\n* @param {number} max - maximum value\n* @returns {number} value restricted to a specified range\n*\n* @example\n* var v = clamp( 3.14, 0.0, 5.0 );\n* // returns 3.14\n*\n* v = clamp( -3.14, 0.0, 5.0 );\n* // returns 0.0\n*\n* v = clamp( 10.0, 0.0, 5.0 );\n* // returns 5.0\n*\n* v = clamp( -0.0, 0.0, 5.0 );\n* // returns 0.0\n*\n* v = clamp( 0.0, -0.0, 5.0 );\n* // returns 0.0\n*\n* v = clamp( NaN, 0.0, 5.0 );\n* // returns NaN\n*\n* v = clamp( 0.0, NaN, 5.0 );\n* // returns NaN\n*\n* v = clamp( 3.14, 0.0, NaN );\n* // returns NaN\n*/\nfunction clamp( v, min, max ) {\n\tif (\n\t\tisnan( v ) ||\n\t\tisnan( min ) ||\n\t\tisnan( max )\n\t) {\n\t\treturn NaN;\n\t}\n\t// Simple cases...\n\tif ( v < min ) {\n\t\treturn min;\n\t}\n\tif ( v > max ) {\n\t\treturn max;\n\t}\n\t// Special cases for handling +-0.0...\n\tif ( min === 0.0 && isNegativeZero( v ) ) {\n\t\treturn min; // +-0.0\n\t}\n\tif ( v === 0.0 && isNegativeZero( max ) ) {\n\t\treturn max; // -0.0\n\t}\n\t// Case: min <= v <= max\n\treturn v;\n}\n\n\n// EXPORTS //\n\nexport default clamp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\nimport isNegativeZerof from '@stdlib/math-base-assert-is-negative-zerof';\n\n\n// MAIN //\n\n/**\n* Restricts a single-precision floating-point number to a specified range.\n*\n* @param {number} v - input value\n* @param {number} min - minimum value\n* @param {number} max - maximum value\n* @returns {number} value restricted to a specified range\n*\n* @example\n* var v = clampf( 3.0, 0.0, 5.0 );\n* // returns 3.0\n*\n* v = clampf( -3.0, 0.0, 5.0 );\n* // returns 0.0\n*\n* v = clampf( 10.0, 0.0, 5.0 );\n* // returns 5.0\n*\n* v = clampf( -0.0, 0.0, 5.0 );\n* // returns 0.0\n*\n* v = clampf( 0.0, -0.0, 5.0 );\n* // returns 0.0\n*\n* v = clampf( NaN, 0.0, 5.0 );\n* // returns NaN\n*\n* v = clampf( 0.0, NaN, 5.0 );\n* // returns NaN\n*\n* v = clampf( 3.14, 0.0, NaN );\n* // returns NaN\n*/\nfunction clampf( v, min, max ) {\n\tif (\n\t\tisnanf( v ) ||\n\t\tisnanf( min ) ||\n\t\tisnanf( max )\n\t) {\n\t\treturn NaN;\n\t}\n\t// Simple cases...\n\tif ( v < min ) {\n\t\treturn min;\n\t}\n\tif ( v > max ) {\n\t\treturn max;\n\t}\n\t// Special cases for handling +-0.0...\n\tif ( min === 0.0 && isNegativeZerof( v ) ) {\n\t\treturn min; // +-0.0\n\t}\n\tif ( v === 0.0 && isNegativeZerof( max ) ) {\n\t\treturn max; // -0.0\n\t}\n\t// Case: min <= v <= max\n\treturn v;\n}\n\n\n// EXPORTS //\n\nexport default clampf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport SIGN_MASK from '@stdlib/constants-float32-sign-mask';\nimport ABS_MASK from '@stdlib/constants-float32-abs-mask';\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport toWord from '@stdlib/number-float32-base-to-word';\nimport fromWord from '@stdlib/number-float32-base-from-word';\n\n\n// MAIN //\n\n/**\n* Returns a single-precision floating-point number with the magnitude of `x` and the sign of `y`.\n*\n* @param {number} x - number from which to derive a magnitude\n* @param {number} y - number from which to derive a sign\n* @returns {number} a single-precision floating-point number\n*\n* @example\n* var z = copysignf( -3.0, 10.0 );\n* // returns 3.0\n*\n* @example\n* var z = copysignf( 3.0, -1.0 );\n* // returns -3.0\n*\n* @example\n* var z = copysignf( 1.0, -0.0 );\n* // returns -1.0\n*\n* @example\n* var z = copysignf( -3.0, -0.0 );\n* // returns -3.0\n*\n* @example\n* var z = copysignf( -0.0, 1.0 );\n* // returns 0.0\n*/\nfunction copysignf( x, y ) {\n\tvar wx;\n\tvar wy;\n\n\tx = float64ToFloat32( x );\n\ty = float64ToFloat32( y );\n\n\t// Convert `x` to an unsigned integer:\n\twx = toWord( x );\n\n\t// Turn off the sign bit of `x`:\n\twx &= ABS_MASK;\n\n\t// Convert `y` to an unsigned integer:\n\twy = toWord( y );\n\n\t// Leave only the sign bit of `y` turned on:\n\twy &= SIGN_MASK;\n\n\t// Copy the sign bit of `y` to `x`:\n\twx |= wy;\n\n\t// Return a new value having the same magnitude as `x`, but with the sign of `y`:\n\treturn fromWord( wx );\n}\n\n\n// EXPORTS //\n\nexport default copysignf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Mask for excluding the sign bit of a single-precision floating-point number.\n*\n* @module @stdlib/constants-float32-abs-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT32_ABS_MASK from '@stdlib/constants-float32-abs-mask';\n* // returns 2147483647\n*/\n\n\n// MAIN //\n\n/**\n* Mask for excluding the sign bit of a single-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for excluding the sign bit of a single-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2147483647 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 11111111 11111111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x7fffffff\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_ABS_MASK = 0x7fffffff>>>0;\n\n\n// EXPORTS //\n\nexport default FLOAT32_ABS_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cos from '@stdlib/math-base-special-cos';\nimport polyval from './polyval_p.js';\n\n\n// VARIABLES //\n\nvar PIO4 = 7.85398163397448309616e-1; // 4/π\n\n\n// MAIN //\n\n/**\n* Computes the cosine of a number minus one.\n*\n* @param {number} x - input value (in radians)\n* @returns {number} cosine minus one\n*\n* @example\n* var v = cosm1( 0.0 );\n* // returns 0.0\n*\n* @example\n* import PI from '@stdlib/constants-float64-pi';\n*\n* var v = cosm1( PI/4.0 );\n* // returns ~-0.293\n*\n* @example\n* import PI from '@stdlib/constants-float64-pi';\n*\n* var v = cosm1( -PI/6.0 );\n* // returns ~-0.134\n*\n* @example\n* var v = cosm1( NaN );\n* // returns NaN\n*/\nfunction cosm1( x ) {\n\tvar x2;\n\tif ( x < -PIO4 || x > PIO4 ) {\n\t\treturn cos( x ) - 1.0;\n\t}\n\tx2 = x * x;\n\treturn ( -0.5*x2 ) + ( x2*x2*polyval( x2 ) );\n}\n\n\n// EXPORTS //\n\nexport default cosm1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.041666666666666664;\n\t}\n\treturn 0.041666666666666664 + (x * (-0.0013888888888888872 + (x * (0.00002480158730157055 + (x * (-2.755731921499979e-7 + (x * (2.087675428708152e-9 + (x * (-1.147028484342536e-11 + (x * 4.737750796424621e-14))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport tan from '@stdlib/math-base-special-tan';\n\n\n// MAIN //\n\n/**\n* Evaluates the cotangent of a number.\n*\n* @param {number} x - input value (in radians)\n* @returns {number} cotangent\n*\n* @example\n* var v = cot( 0.0 );\n* // returns Infinity\n*\n* @example\n* var v = cot( 3.141592653589793/2.0 );\n* // returns ~0.0\n*\n* @example\n* var v = cot( -3.141592653589793/4.0 );\n* // returns ~-1.0\n*\n* @example\n* var v = cot( 3.141592653589793/4.0 );\n* // returns ~1.0\n*\n* @example\n* var v = cot( NaN );\n* // returns NaN\n*/\nfunction cot( x ) {\n\treturn 1.0 / tan( x );\n}\n\n\n// EXPORTS //\n\nexport default cot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport tanh from '@stdlib/math-base-special-tanh';\n\n\n// MAIN //\n\n/**\n* Computes the hyperbolic cotangent of a number.\n*\n* @param {number} x - input value\n* @returns {number} hyperbolic cotangent\n*\n* @example\n* var v = coth( 0.0 );\n* // returns Infinity\n*\n* @example\n* var v = coth( 2.0 );\n* // returns ~1.0373\n*\n* @example\n* var v = coth( -2.0 );\n* // returns ~-1.0373\n*\n* @example\n* var v = coth( NaN );\n* // returns NaN\n*/\nfunction coth( x ) {\n\treturn 1.0 / tanh( x );\n}\n\n\n// EXPORTS //\n\nexport default coth;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sin from '@stdlib/math-base-special-sin';\n\n\n// MAIN //\n\n/**\n* Computes the coversed cosine.\n*\n* @param {number} x - input value (in radians)\n* @returns {number} coversed cosine\n*\n* @example\n* var v = covercos( 0.0 );\n* // returns 1.0\n*\n* @example\n* var v = covercos( 3.141592653589793/2.0 );\n* // returns 2.0\n*\n* @example\n* var v = covercos( -3.141592653589793/6.0 );\n* // returns 0.5\n*\n* @example\n* var v = covercos( NaN );\n* // returns NaN\n*/\nfunction covercos( x ) {\n\treturn 1.0 + sin( x );\n}\n\n\n// EXPORTS //\n\nexport default covercos;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sin from '@stdlib/math-base-special-sin';\n\n\n// MAIN //\n\n/**\n* Computes the coversed sine.\n*\n* @param {number} x - input value (in radians)\n* @returns {number} coversed sine\n*\n* @example\n* var v = coversin( 0.0 );\n* // returns 1.0\n*\n* @example\n* var v = coversin( 3.141592653589793/2.0 );\n* // returns 0.0\n*\n* @example\n* var v = coversin( -3.141592653589793/6.0 );\n* // returns 1.5\n*\n* @example\n* var v = coversin( NaN );\n* // returns NaN\n*/\nfunction coversin( x ) {\n\treturn 1.0 - sin( x );\n}\n\n\n// EXPORTS //\n\nexport default coversin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Complex128 from '@stdlib/complex-float64';\nimport round from '@stdlib/math-base-special-round';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\n\n\n// MAIN //\n\n/**\n* Rounds each component of a double-precision complex floating-point number to the nearest integer.\n*\n* @param {Complex128} z - complex number\n* @returns {Complex128} rounded complex number\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var v = cround( new Complex128( -4.2, 5.5 ) );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns -4\n*\n* var im = imag( v );\n* // returns 6.0\n*\n* v = cround( new Complex128( 9.99999, 0.1 ) );\n* // returns <Complex128>\n*\n* re = real( v );\n* // returns 10.0\n*\n* im = imag( v );\n* // returns 0.0\n*\n* v = cround( new Complex128( 0.0, 0.0 ) );\n* // returns <Complex128>\n*\n* re = real( v );\n* // returns 0.0\n*\n* im = imag( v );\n* // returns 0.0\n*\n* v = cround( new Complex128( NaN, NaN ) );\n* // returns <Complex128>\n*\n* re = real( v );\n* // returns NaN\n*\n* im = imag( v );\n* // returns NaN\n*/\nfunction cround( z ) {\n\treturn new Complex128( round( real( z ) ), round( imag( z ) ) );\n}\n\n\n// EXPORTS //\n\nexport default cround;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Complex128 from '@stdlib/complex-float64';\nimport roundn from '@stdlib/math-base-special-roundn';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\n\n\n// MAIN //\n\n/**\n* Rounds each component of a double-precision complex floating-point number to the nearest multiple of `10^n`.\n*\n* @param {Complex128} z - complex number\n* @param {integer} n - integer power of 10\n* @returns {Complex128} result\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var v = croundn( new Complex128( -3.141592653589793, 3.141592653589793 ), -2 );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns -3.14\n*\n* var im = imag( v );\n* // returns 3.14\n*\n* // If n = 0, `croundn` behaves like `cround`:\n* v = croundn( new Complex128( 9.99999, 0.1 ), 0 );\n* // returns <Complex128>\n*\n* re = real( v );\n* // returns 10.0\n*\n* im = imag( v );\n* // returns 0.0\n*\n* // Round components to the nearest thousand:\n* v = croundn( new Complex128( 12368.0, -12368.0 ), 3 );\n* // returns <Complex128>\n*\n* re = real( v );\n* // returns 12000.0\n*\n* im = imag( v );\n* // returns -12000.0\n*\n* v = croundn( new Complex128( NaN, NaN ), 2 );\n* // returns <Complex128>\n*\n* re = real( v );\n* // returns NaN\n*\n* im = imag( v );\n* // returns NaN\n*/\nfunction croundn( z, n ) {\n\treturn new Complex128( roundn( real( z ), n ), roundn( imag( z ), n ) );\n}\n\n\n// EXPORTS //\n\nexport default croundn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sinh from '@stdlib/math-base-special-sinh';\n\n\n// MAIN //\n\n/**\n* Computes the hyperbolic cosecant of a number.\n*\n* @param {number} x - input value\n* @returns {number} hyperbolic cosecant\n*\n* @example\n* var v = csch( 0.0 );\n* // returns Infinity\n*\n* @example\n* var v = csch( 2.0 );\n* // returns ~0.2757\n*\n* @example\n* var v = csch( -2.0 );\n* // returns ~-0.2757\n*\n* @example\n* var v = csch( NaN );\n* // returns NaN\n*/\nfunction csch( x ) {\n\treturn 1.0 / sinh( x );\n}\n\n\n// EXPORTS //\n\nexport default csch;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Complex128 from '@stdlib/complex-float64';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\nimport cabs from '@stdlib/math-base-special-cabs';\n\n\n// MAIN //\n\n/**\n* Evaluates the signum function of a double-precision floating-point complex number.\n*\n* @param {Complex128} z - complex number\n* @returns {Complex128} result\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var v = csignum( new Complex128( -4.2, 5.5 ) );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns -0.6069136033622302\n*\n* var im = imag( v );\n* // returns 0.79476781392673\n*\n* v = csignum( new Complex128( 0.0, 0.0 ) );\n* // returns <Complex128>\n*\n* re = real( v );\n* // returns -0.0\n*\n* im = imag( v );\n* // returns 0.0\n*\n* v = csignum( new Complex128( NaN, NaN ) );\n* // returns <Complex128>\n*\n* re = real( v );\n* // returns NaN\n*\n* im = imag( v );\n* // returns NaN\n*/\nfunction csignum( z ) {\n\tvar re;\n\tvar im;\n\tvar az;\n\n\taz = cabs( z );\n\tif ( az === 0.0 ) {\n\t\treturn z;\n\t}\n\tre = real( z ) / az;\n\tim = imag( z ) / az;\n\treturn new Complex128( re, im );\n}\n\n\n// EXPORTS //\n\nexport default csignum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\n// π / 180.0\nvar PI_DIV_180 = 1.7453292519943295e-2;\n\n\n// MAIN //\n\n/**\n* Converts an angle from degrees to radians.\n*\n* @param {number} x - angle in degrees\n* @returns {number} angle in radians\n*\n* @example\n* var r = deg2rad( 90.0 );\n* // returns ~1.571\n*\n* @example\n* var r = deg2rad( -45.0 );\n* // returns ~-0.785\n*\n* @example\n* var r = deg2rad( NaN );\n* // returns NaN\n*/\nfunction deg2rad( x ) {\n\treturn x * PI_DIV_180;\n}\n\n\n// EXPORTS //\n\nexport default deg2rad;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the Dirac delta function.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = diracDelta( 0.0 );\n* // returns Infinity\n*\n* @example\n* var v = diracDelta( 3.14 );\n* // returns 0.0\n*\n* @example\n* var v = diracDelta( NaN );\n* // returns NaN\n*/\nfunction diracDelta( x ) {\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn PINF;\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default diracDelta;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport powm1 from '@stdlib/math-base-special-powm1';\nimport zeta from '@stdlib/math-base-special-riemann-zeta';\nimport LN2 from '@stdlib/constants-float64-ln-two';\n\n\n// MAIN //\n\n/**\n* Evaluates the Dirichlet eta function.\n*\n* @param {number} s - input value\n* @returns {number} function value\n*\n* @example\n* var v = eta( 0.0 );\n* // returns 0.5\n*\n* @example\n* var v = eta( -1.0 );\n* // returns 0.25\n*\n* @example\n* var v = eta( 1.0 ); // => ln(2)\n* // returns ~0.6931\n*\n* @example\n* var v = eta( 3.14 );\n* // returns ~0.9096\n*\n* @example\n* var v = eta( NaN );\n* // returns NaN\n*/\nfunction eta( s ) {\n\tif ( isnan( s ) ) {\n\t\treturn NaN;\n\t}\n\tif ( s === 1.0 ) {\n\t\t// Alternating harmonic series...\n\t\treturn LN2;\n\t}\n\treturn -powm1( 2.0, 1.0-s ) * zeta( s );\n}\n\n\n// EXPORTS //\n\nexport default eta;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original Julia code and copyright notice are from the [Julia library]{@link https://github.com/JuliaMath/SpecialFunctions.jl/blob/master/src/ellip.jl}. The implementation has been modified for JavaScript.\n*\n* ```text\n* The MIT License (MIT)\n*\n* Copyright (c) 2017 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and others:\n*\n* https://github.com/JuliaMath/SpecialFunctions.jl/graphs/contributors\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport HALF_PI from '@stdlib/constants-float64-half-pi';\nimport ellipk from '@stdlib/math-base-special-ellipk';\nimport poly1 from './poly_p1.js';\nimport poly2 from './poly_p2.js';\nimport poly3 from './poly_p3.js';\nimport poly4 from './poly_p4.js';\nimport poly5 from './poly_p5.js';\nimport poly6 from './poly_p6.js';\nimport poly7 from './poly_p7.js';\nimport poly8 from './poly_p8.js';\nimport poly9 from './poly_p9.js';\nimport poly10 from './poly_p10.js';\nimport poly11 from './poly_p11.js';\nimport poly12 from './poly_p12.js';\n\n\n// MAIN //\n\n/**\n* Computes the complete elliptic integral of the second kind.\n*\n* ## Method\n*\n* -   The function computes the complete elliptic integral of the second kind in terms of parameter \\\\( m \\\\), instead of the elliptic modulus \\\\( k \\\\).\n*\n*     ```tex\n*     E(m) = \\int_0^{\\pi/2} \\sqrt{1 - m (\\sin\\theta)^2} d\\theta\n*     ```\n*\n* -   The function uses a piecewise approximation polynomial as given in Fukushima (2009).\n*\n* -   For \\\\( m < 0 \\\\), the implementation follows Fukushima (2015).\n*\n* ## References\n*\n* -   Fukushima, Toshio. 2009. \"Fast computation of complete elliptic integrals and Jacobian elliptic functions.\" _Celestial Mechanics and Dynamical Astronomy_ 105 (4): 305. doi:[10.1007/s10569-009-9228-z](https://doi.org/10.1007/s10569-009-9228-z).\n* -   Fukushima, Toshio. 2015. \"Precise and fast computation of complete elliptic integrals by piecewise minimax rational function approximation.\" _Journal of Computational and Applied Mathematics_ 282 (July): 71–76. doi:[10.1016/j.cam.2014.12.038](https://doi.org/10.1016/j.cam.2014.12.038).\n*\n* @param {number} m - input value\n* @returns {number} evaluated elliptic integral\n*\n* @example\n* var v = ellipe( 0.5 );\n* // returns ~1.351\n*\n* v = ellipe( -1.0 );\n* // returns ~1.910\n*\n* v = ellipe( 2.0 );\n* // returns NaN\n*\n* v = ellipe( Infinity );\n* // returns NaN\n*\n* v = ellipe( -Infinity );\n* // returns NaN\n*\n* v = ellipe( NaN );\n* // returns NaN\n*/\nfunction ellipe( m ) {\n\tvar FLG;\n\tvar kdm;\n\tvar edm;\n\tvar td;\n\tvar km;\n\tvar t;\n\tvar x;\n\n\tx = m;\n\tif ( m < 0.0 ) {\n\t\tx = m / ( m - 1.0 );\n\t\tFLG = true;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn HALF_PI;\n\t}\n\tif ( x === 1.0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x > 1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.1 ) {\n\t\tt = poly1( x - 0.05 );\n\t} else if ( x < 0.2 ) {\n\t\tt = poly2( x - 0.15 );\n\t} else if ( x < 0.3 ) {\n\t\tt = poly3( x - 0.25 );\n\t} else if ( x < 0.4 ) {\n\t\tt = poly4( x - 0.35 );\n\t} else if ( x < 0.5 ) {\n\t\tt = poly5( x - 0.45 );\n\t} else if ( x < 0.6 ) {\n\t\tt = poly6( x - 0.55 );\n\t} else if ( x < 0.7 ) {\n\t\tt = poly7( x - 0.65 );\n\t} else if ( x < 0.8 ) {\n\t\tt = poly8( x - 0.75 );\n\t} else if ( x < 0.85 ) {\n\t\tt = poly9( x - 0.825 );\n\t} else if ( x < 0.9 ) {\n\t\tt = poly10( x - 0.875 );\n\t} else {\n\t\ttd = 0.95 - x;\n\t\tkdm = poly11(td);\n\t\tedm = poly12(td);\n\t\tkm = ellipk( x );\n\n\t\t// To avoid precision loss near 1, we use Eq. 33 from Fukushima (2009):\n\t\tt = ( HALF_PI + ( km * (kdm - edm) ) ) / kdm;\n\t}\n\tif ( FLG ) {\n\t\t// Complete the transformation mentioned above for m < 0:\n\t\treturn t * sqrt( 1.0 - m );\n\t}\n\treturn t;\n}\n\n\n// EXPORTS //\n\nexport default ellipe;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.5509733517804722;\n\t}\n\treturn 1.5509733517804722 + (x * (-0.4003010201031985 + (x * (-0.07849861944294194 + (x * (-0.034318853117591995 + (x * (-0.0197180433173655 + (x * (-0.01305950773199331 + (x * (-0.009442372874146548 + (x * (-0.007246728512402157 + (x * (-0.00580742401295609 + (x * -0.004809187786009338))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.5101218320928198;\n\t}\n\treturn 1.5101218320928198 + (x * (-0.41711633390586755 + (x * (-0.09012382040477457 + (x * (-0.04372994401908431 + (x * (-0.027965493064761784 + (x * (-0.020644781177568104 + (x * (-0.016650786739707237 + (x * (-0.01426196082884252 + (x * (-0.012759847429264804 + (x * (-0.011799303775587354 + (x * -0.011197445703074968))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.4674622093394272;\n\t}\n\treturn 1.4674622093394272 + (x * (-0.43657629094633776 + (x * (-0.10515555766694255 + (x * (-0.05737184359324173 + (x * (-0.04139162772734022 + (x * (-0.03452772850528084 + (x * (-0.031495443512532785 + (x * (-0.030527000890325277 + (x * (-0.0309169840192389 + (x * (-0.03237139531475812 + (x * -0.03478996038640416))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.4226911334908792;\n\t}\n\treturn 1.4226911334908792 + (x * (-0.4595135196210487 + (x * (-0.12525053982206188 + (x * (-0.07813854509440948 + (x * (-0.06471427847205 + (x * (-0.06208433913173031 + (x * (-0.06519703281557247 + (x * (-0.07279389536257878 + (x * (-0.084959075171781 + (x * (-0.102539850131046 + (x * (-0.12705358515769605 + (x * -0.1607911206912746))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.3754019718711163;\n\t}\n\treturn 1.3754019718711163 + (x * (-0.4872021832731848 + (x * (-0.15331170134854022 + (x * (-0.11184944491702783 + (x * (-0.10884095252313576 + (x * (-0.12295422312026907 + (x * (-0.15221716396203505 + (x * (-0.20049532364269734 + (x * (-0.27617433306775174 + (x * (-0.39351311430437586 + (x * (-0.5757544060278792 + (x * (-0.8605232357272398 + (x * -1.3088332057585401))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.3250244979582302;\n\t}\n\treturn 1.3250244979582302 + (x * (-0.5217276475575667 + (x * (-0.19490643048212622 + (x * (-0.17162372682201127 + (x * (-0.20275465292641914 + (x * (-0.27879895311853475 + (x * (-0.42069845728100574 + (x * (-0.675948400853106 + (x * (-1.1363431218392293 + (x * (-1.9767211439543984 + (x * (-3.5316967730957227 + (x * (-6.446753640156048 + (x * -11.97703130208884))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.2707074796501499;\n\t}\n\treturn 1.2707074796501499 + (x * (-0.5668391682878666 + (x * (-0.2621607934324926 + (x * (-0.2922441735330774 + (x * (-0.4403978408504232 + (x * (-0.7749476413813975 + (x * (-1.498870837987561 + (x * (-3.089708310445187 + (x * (-6.6675959033810015 + (x * (-14.89436036517319 + (x * (-34.18120574251449 + (x * (-80.15895841905397 + (x * (-191.34894807629848 + (x * (-463.5938853480342 + (x * -1137.38082216936))))))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.2110560275684594;\n\t}\n\treturn 1.2110560275684594 + (x * (-0.6303064132874558 + (x * (-0.38716640952066916 + (x * (-0.5922782353119346 + (x * (-1.23755558451305 + (x * (-3.0320566617452474 + (x * (-8.18168822157359 + (x * (-23.55507217389693 + (x * (-71.04099935893065 + (x * (-221.879685319235 + (x * (-712.1364793277636 + (x * (-2336.1253314403966 + (x * (-7801.945954775964 + (x * (-26448.19586059192 + (x * (-90799.48341621365 + (x * (-315126.04064491636 + (x * -1104011.3443115912))))))))))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.1613071521962828;\n\t}\n\treturn 1.1613071521962828 + (x * (-0.7011002845552895 + (x * (-0.5805514744654373 + (x * (-1.2436930610777865 + (x * (-3.679383613496635 + (x * (-12.815909243378957 + (x * (-49.25672530759985 + (x * (-202.18187354340904 + (x * (-869.8602699308701 + (x * (-3877.0058473132895 + (x * (-17761.7071017094 + (x * (-83182.69029154233 + (x * (-396650.4505013548 + (x * -1920033.4136826345))))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.1246173251197522;\n\t}\n\treturn 1.1246173251197522 + (x * (-0.7708450563609095 + (x * (-0.8447940536449113 + (x * (-2.4900973094503946 + (x * (-10.239717411543843 + (x * (-49.7490054655148 + (x * (-267.09866751957054 + (x * (-1532.66588382523 + (x * (-9222.313478526092 + (x * (-57502.51612140314 + (x * (-368596.11674161063 + (x * (-2415611.0887010912 + (x * (-16120097.815816568 + (x * (-109209938.52030899 + (x * (-749380758.1942496 + (x * (-5198725846.725541 + (x * -36409256888.1214))))))))))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.5910034537907922;\n\t}\n\treturn 1.5910034537907922 + (x * (0.41600074399178694 + (x * (0.24579151426410342 + (x * (0.17948148291490615 + (x * (0.14455605708755515 + (x * (0.12320099331242772 + (x * (0.10893881157429353 + (x * (0.09885340987159291 + (x * (0.09143962920174975 + (x * (0.0858425915954139 + (x * 0.08154111871830322))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.5509733517804722;\n\t}\n\treturn 1.5509733517804722 + (x * (-0.4003010201031985 + (x * (-0.07849861944294194 + (x * (-0.034318853117591995 + (x * (-0.0197180433173655 + (x * (-0.01305950773199331 + (x * (-0.009442372874146548 + (x * (-0.007246728512402157 + (x * (-0.00580742401295609 + (x * -0.004809187786009338))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.3250421072470015;\n\t}\n\treturn -0.3250421072470015 + (x * (-0.02848174957559851 + (x * (-0.005770270296489442 + (x * -0.000023763016656650163))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.39791722395915535;\n\t}\n\treturn 0.39791722395915535 + (x * (0.0650222499887673 + (x * (0.005081306281875766 + (x * (0.00013249473800432164 + (x * -0.000003960228278775368))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.41485611868374833;\n\t}\n\treturn 0.41485611868374833 + (x * (-0.3722078760357013 + (x * (0.31834661990116175 + (x * (-0.11089469428239668 + (x * (0.035478304325618236 + (x * -0.002166375594868791))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.10642088040084423;\n\t}\n\treturn 0.10642088040084423 + (x * (0.540397917702171 + (x * (0.07182865441419627 + (x * (0.12617121980876164 + (x * (0.01363708391202905 + (x * 0.011984499846799107))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.6938585727071818;\n\t}\n\treturn -0.6938585727071818 + (x * (-10.558626225323291 + (x * (-62.375332450326006 + (x * (-162.39666946257347 + (x * (-184.60509290671104 + (x * (-81.2874355063066 + (x * -9.814329344169145))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 19.651271667439257;\n\t}\n\treturn 19.651271667439257 + (x * (137.65775414351904 + (x * (434.56587747522923 + (x * (645.3872717332679 + (x * (429.00814002756783 + (x * (108.63500554177944 + (x * (6.570249770319282 + (x * -0.0604244152148581))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.799283237680523;\n\t}\n\treturn -0.799283237680523 + (x * (-17.757954917754752 + (x * (-160.63638485582192 + (x * (-637.5664433683896 + (x * (-1025.0951316110772 + (x * -483.5191916086514))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 30.33806074348246;\n\t}\n\treturn 30.33806074348246 + (x * (325.7925129965739 + (x * (1536.729586084437 + (x * (3199.8582195085955 + (x * (2553.0504064331644 + (x * (474.52854120695537 + (x * -22.44095244658582))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [SciPy]{@link https://github.com/scipy/scipy/blob/ed14bf0a66440a4d164581499fda662121963a56/scipy/special/Faddeeva.cc}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (c) 2012 Massachusetts Institute of Technology\n*\n* Permission is hereby granted, free of charge, to any person obtaining\n* a copy of this software and associated documentation files (the\n* \"Software\"), to deal in the Software without restriction, including\n* without limitation the rights to use, copy, modify, merge, publish,\n* distribute, sublicense, and/or sell copies of the Software, and to\n* permit persons to whom the Software is furnished to do so, subject to\n* the following conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n* LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n* OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n* WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport exp from '@stdlib/math-base-special-exp';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport erfcxY100 from './erfcx_y100.js';\n\n\n// VARIABLES //\n\nvar INV_SQRT_PI = 0.56418958354775628694807945156; // 1 / sqrt(pi)\n\n\n// MAIN //\n\n/**\n* Evaluates the scaled complementary error function.\n*\n* ```tex\n* \\operatorname{erfcx}(x) = \\exp{x^2} \\cdot \\operatorname{erfc}(x)\n* ```\n*\n* ## Notes\n*\n* -   Use this function to replace expressions containing `exp{x^2} erfc(x)` in order to avoid errors due to underflow or overflow.\n* -   For expressions of the form `\\exp{-x^2} erfcx(x)`, use the complementary error function `erfc(x)` instead, as this substitution maintains accuracy by avoiding roundoff errors for large values of `x`.\n*\n* @param {number} x - input value\n* @returns {number} evaluated scaled complementary error function\n*\n* @example\n* var y = erfcx( 0.0 );\n* // returns 1.0\n*\n* @example\n* var y = erfcx( 1.0 );\n* // returns ~0.4276\n*\n* @example\n* var y = erfcx( -1.0 );\n* // returns ~5.01\n*\n* @example\n* var y = erfcx( 50.0 );\n* // returns ~0.011\n*\n* @example\n* var y = erfcx( -50.0 );\n* // returns +Infinity\n*\n* @example\n* var y = erfcx( NaN );\n* // returns NaN\n*/\nfunction erfcx( x ) {\n\tvar x2;\n\tif ( x !== x ) {\n\t\treturn NaN;\n\t}\n\tif ( x >= 0.0 ) {\n\t\tif ( x > 50.0 ) { // continued-fraction expansion is faster\n\t\t\tif ( x > 5.0e7 ) { // 1-term expansion, important to avoid overflow\n\t\t\t\treturn INV_SQRT_PI / x;\n\t\t\t}\n\t\t\tx2 = x * x;\n\n\t\t\t// 5-term expansion (rely on compiler for CSE), simplified from: INV_SQRT_PI / (x+0.5/(x+1/(x+1.5/(x+2/x))))\n\t\t\treturn INV_SQRT_PI * ( ( x2 * (x2+4.5) ) + 2.0 ) / ( x * ( ( x2*(x2+5.0) ) + 3.75 ) ); // eslint-disable-line max-len\n\t\t}\n\t\treturn erfcxY100( 400.0/(4.0+x) );\n\t}\n\tif ( x < -26.7 ) {\n\t\treturn PINF;\n\t}\n\tx2 = x * x;\n\tif ( x < -6.1 ) {\n\t\treturn 2.0 * exp( x2 );\n\t}\n\treturn ( 2.0*exp( x2 ) ) - erfcxY100( 400.0/(4.0-x) );\n}\n\n\n// EXPORTS //\n\nexport default erfcx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_48_0/boost/math/special_functions/detail/erf_inv.hpp}. This implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport rationalFcnR1 from './rational_p1q1.js';\nimport rationalFcnR2 from './rational_p2q2.js';\nimport rationalFcnR3 from './rational_p3q3.js';\nimport rationalFcnR4 from './rational_p4q4.js';\nimport rationalFcnR5 from './rational_p5q5.js';\n\n\n// VARIABLES //\n\nvar Y1 = 8.91314744949340820313e-2;\nvar Y2 = 2.249481201171875;\nvar Y3 = 8.07220458984375e-1;\nvar Y4 = 9.3995571136474609375e-1;\nvar Y5 = 9.8362827301025390625e-1;\n\n\n// MAIN //\n\n/**\n* Evaluates the inverse error function.\n*\n* ## Method\n*\n* 1.  For \\\\(|x| \\leq 0.5\\\\), we evaluate the inverse error function using the rational approximation\n*\n*     ```tex\n*     \\operatorname{erf^{-1}}(x) = x(x+10)(\\mathrm{Y} + \\operatorname{R}(x))\n*     ```\n*\n*     where \\\\(Y\\\\) is a constant and \\\\(\\operatorname{R}(x)\\\\) is optimized for a low absolute error compared to \\\\(|Y|\\\\).\n*\n*     <!-- <note> -->\n*\n*     Max error \\\\(2.001849\\mbox{e-}18\\\\). Maximum deviation found (error term at infinite precision) \\\\(8.030\\mbox{e-}21\\\\).\n*\n*     <!-- </note> -->\n*\n* 2.  For \\\\(0.5 > 1-|x| \\geq 0\\\\), we evaluate the inverse error function using the rational approximation\n*\n*     ```tex\n*     \\operatorname{erf^{-1}} = \\frac{\\sqrt{-2 \\cdot \\ln(1-x)}}{\\mathrm{Y} + \\operatorname{R}(1-x)}\n*     ```\n*\n*     where \\\\(Y\\\\) is a constant, and \\\\(\\operatorname{R}(q)\\\\) is optimized for a low absolute error compared to \\\\(Y\\\\).\n*\n*     <!-- <note> -->\n*\n*     Max error \\\\(7.403372\\mbox{e-}17\\\\). Maximum deviation found (error term at infinite precision) \\\\(4.811\\mbox{e-}20\\\\).\n*\n*     <!-- </note> -->\n*\n* 3.  For \\\\(1-|x| < 0.25\\\\), we have a series of rational approximations all of the general form\n*\n*     ```tex\n*     p = \\sqrt{-\\ln(1-x)}\n*     ```\n*\n*     Accordingly, the result is given by\n*\n*     ```tex\n*     \\operatorname{erf^{-1}}(x) = p(\\mathrm{Y} + \\operatorname{R}(p-B))\n*     ```\n*\n*     where \\\\(Y\\\\) is a constant, \\\\(B\\\\) is the lowest value of \\\\(p\\\\) for which the approximation is valid, and \\\\(\\operatorname{R}(x-B)\\\\) is optimized for a low absolute error compared to \\\\(Y\\\\).\n*\n*     <!-- <note> -->\n*\n*     Almost all code will only go through the first or maybe second approximation.  After that we are dealing with very small input values.\n*\n*     -   If \\\\(p < 3\\\\), max error \\\\(1.089051\\mbox{e-}20\\\\).\n*     -   If \\\\(p < 6\\\\), max error \\\\(8.389174\\mbox{e-}21\\\\).\n*     -   If \\\\(p < 18\\\\), max error \\\\(1.481312\\mbox{e-}19\\\\).\n*     -   If \\\\(p < 44\\\\), max error \\\\(5.697761\\mbox{e-}20\\\\).\n*     -   If \\\\(p \\geq 44\\\\), max error \\\\(1.279746\\mbox{e-}20\\\\).\n*\n*     <!-- </note> -->\n*\n*     <!-- <note> -->\n*\n*     The Boost library can accommodate \\\\(80\\\\) and \\\\(128\\\\) bit long doubles. JavaScript only supports a \\\\(64\\\\) bit double (IEEE 754). Accordingly, the smallest \\\\(p\\\\) (in JavaScript at the time of this writing) is \\\\(\\sqrt{-\\ln(\\sim5\\mbox{e-}324)} = 27.284429111150214\\\\).\n*\n*     <!-- </note> -->\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var y = erfinv( 0.5 );\n* // returns ~0.4769\n*\n* @example\n* var y = erfinv( 0.8 );\n* // returns ~0.9062\n*\n* @example\n* var y = erfinv( 0.0 );\n* // returns 0.0\n*\n* @example\n* var y = erfinv( -0.0 );\n* // returns -0.0\n*\n* @example\n* var y = erfinv( -1.0 );\n* // returns -Infinity\n*\n* @example\n* var y = erfinv( 1.0 );\n* // returns Infinity\n*\n* @example\n* var y = erfinv( NaN );\n* // returns NaN\n*/\nfunction erfinv( x ) {\n\tvar sign;\n\tvar ax;\n\tvar qs;\n\tvar q;\n\tvar g;\n\tvar r;\n\n\t// Special case: NaN\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\t// Special case: 1\n\tif ( x === 1.0 ) {\n\t\treturn PINF;\n\t}\n\t// Special case: -1\n\tif ( x === -1.0 ) {\n\t\treturn NINF;\n\t}\n\t// Special case: +-0\n\tif ( x === 0.0 ) {\n\t\treturn x;\n\t}\n\t// Special case: |x| > 1 (range error)\n\tif ( x > 1.0 || x < -1.0 ) {\n\t\treturn NaN;\n\t}\n\t// Argument reduction (reduce to interval [0,1]). If `x` is negative, we can safely negate the value, taking advantage of the error function being an odd function; i.e., `erf(-x) = -erf(x)`.\n\tif ( x < 0.0 ) {\n\t\tsign = -1.0;\n\t\tax = -x;\n\t} else {\n\t\tsign = 1.0;\n\t\tax = x;\n\t}\n\tq = 1.0 - ax;\n\n\t// |x| <= 0.5\n\tif ( ax <= 0.5 ) {\n\t\tg = ax * ( ax + 10.0 );\n\t\tr = rationalFcnR1( ax );\n\t\treturn sign * ( (g*Y1) + (g*r) );\n\t}\n\t// 1-|x| >= 0.25\n\tif ( q >= 0.25 ) {\n\t\tg = sqrt( -2.0 * ln(q) );\n\t\tq -= 0.25;\n\t\tr = rationalFcnR2( q );\n\t\treturn sign * ( g / (Y2+r) );\n\t}\n\tq = sqrt( -ln( q ) );\n\n\t// q < 3\n\tif ( q < 3.0 ) {\n\t\tqs = q - 1.125;\n\t\tr = rationalFcnR3( qs );\n\t\treturn sign * ( (Y3*q) + (r*q) );\n\t}\n\t// q < 6\n\tif ( q < 6.0 ) {\n\t\tqs = q - 3.0;\n\t\tr = rationalFcnR4( qs );\n\t\treturn sign * ( (Y4*q) + (r*q) );\n\t}\n\t// q < 18\n\tqs = q - 6.0;\n\tr = rationalFcnR5( qs );\n\treturn sign * ( (Y5*q) + (r*q) );\n}\n\n\n// EXPORTS //\n\nexport default erfinv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.0005087819496582806;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.0005087819496582806 + (x * (-0.008368748197417368 + (x * (0.03348066254097446 + (x * (-0.012692614766297404 + (x * (-0.03656379714117627 + (x * (0.02198786811111689 + (x * (0.008226878746769157 + (x * (-0.005387729650712429 + (x * (0.0 + (x * 0.0))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (-0.9700050433032906 + (x * (-1.5657455823417585 + (x * (1.5622155839842302 + (x * (0.662328840472003 + (x * (-0.7122890234154284 + (x * (-0.05273963823400997 + (x * (0.07952836873415717 + (x * (-0.0023339375937419 + (x * 0.0008862163904564247))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (0.0 + (x * (-0.005387729650712429 + (x * (0.008226878746769157 + (x * (0.02198786811111689 + (x * (-0.03656379714117627 + (x * (-0.012692614766297404 + (x * (0.03348066254097446 + (x * (-0.008368748197417368 + (x * -0.0005087819496582806))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0008862163904564247 + (x * (-0.0023339375937419 + (x * (0.07952836873415717 + (x * (-0.05273963823400997 + (x * (-0.7122890234154284 + (x * (0.662328840472003 + (x * (1.5622155839842302 + (x * (-1.5657455823417585 + (x * (-0.9700050433032906 + (x * 1.0))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.20243350835593876;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.20243350835593876 + (x * (0.10526468069939171 + (x * (8.3705032834312 + (x * (17.644729840837403 + (x * (-18.851064805871424 + (x * (-44.6382324441787 + (x * (17.445385985570866 + (x * (21.12946554483405 + (x * -3.6719225470772936))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (6.242641248542475 + (x * (3.971343795334387 + (x * (-28.66081804998 + (x * (-20.14326346804852 + (x * (48.560921310873994 + (x * (10.826866735546016 + (x * (-22.643693341313973 + (x * 1.7211476576120028))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -3.6719225470772936 + (x * (21.12946554483405 + (x * (17.445385985570866 + (x * (-44.6382324441787 + (x * (-18.851064805871424 + (x * (17.644729840837403 + (x * (8.3705032834312 + (x * (0.10526468069939171 + (x * -0.20243350835593876))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.7211476576120028 + (x * (-22.643693341313973 + (x * (10.826866735546016 + (x * (48.560921310873994 + (x * (-20.14326346804852 + (x * (-28.66081804998 + (x * (3.971343795334387 + (x * (6.242641248542475 + (x * 1.0))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.1311027816799519;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.1311027816799519 + (x * (-0.16379404719331705 + (x * (0.11703015634199525 + (x * (0.38707973897260434 + (x * (0.3377855389120359 + (x * (0.14286953440815717 + (x * (0.029015791000532906 + (x * (0.0021455899538880526 + (x * (-6.794655751811263e-7 + (x * (2.8522533178221704e-8 + (x * -6.81149956853777e-10))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (3.4662540724256723 + (x * (5.381683457070069 + (x * (4.778465929458438 + (x * (2.5930192162362027 + (x * (0.848854343457902 + (x * (0.15226433829533179 + (x * (0.011059242293464892 + (x * (0.0 + (x * (0.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -6.81149956853777e-10 + (x * (2.8522533178221704e-8 + (x * (-6.794655751811263e-7 + (x * (0.0021455899538880526 + (x * (0.029015791000532906 + (x * (0.14286953440815717 + (x * (0.3377855389120359 + (x * (0.38707973897260434 + (x * (0.11703015634199525 + (x * (-0.16379404719331705 + (x * -0.1311027816799519))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0 + (x * (0.0 + (x * (0.0 + (x * (0.011059242293464892 + (x * (0.15226433829533179 + (x * (0.848854343457902 + (x * (2.5930192162362027 + (x * (4.778465929458438 + (x * (5.381683457070069 + (x * (3.4662540724256723 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.0350353787183178;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.0350353787183178 + (x * (-0.0022242652921344794 + (x * (0.018557330651423107 + (x * (0.009508047013259196 + (x * (0.0018712349281955923 + (x * (0.00015754461742496055 + (x * (0.00000460469890584318 + (x * (-2.304047769118826e-10 + (x * 2.6633922742578204e-12))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (1.3653349817554064 + (x * (0.7620591645536234 + (x * (0.22009110576413124 + (x * (0.03415891436709477 + (x * (0.00263861676657016 + (x * (0.00007646752923027944 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 2.6633922742578204e-12 + (x * (-2.304047769118826e-10 + (x * (0.00000460469890584318 + (x * (0.00015754461742496055 + (x * (0.0018712349281955923 + (x * (0.009508047013259196 + (x * (0.018557330651423107 + (x * (-0.0022242652921344794 + (x * -0.0350353787183178))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0 + (x * (0.0 + (x * (0.00007646752923027944 + (x * (0.00263861676657016 + (x * (0.03415891436709477 + (x * (0.22009110576413124 + (x * (0.7620591645536234 + (x * (1.3653349817554064 + (x * 1.0))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.016743100507663373;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.016743100507663373 + (x * (-0.0011295143874558028 + (x * (0.001056288621524929 + (x * (0.00020938631748758808 + (x * (0.000014962478375834237 + (x * (4.4969678992770644e-7 + (x * (4.625961635228786e-9 + (x * (-2.811287356288318e-14 + (x * 9.905570997331033e-17))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.5914293448864175 + (x * (0.1381518657490833 + (x * (0.016074608709367652 + (x * (0.0009640118070051656 + (x * (0.000027533547476472603 + (x * (2.82243172016108e-7 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 9.905570997331033e-17 + (x * (-2.811287356288318e-14 + (x * (4.625961635228786e-9 + (x * (4.4969678992770644e-7 + (x * (0.000014962478375834237 + (x * (0.00020938631748758808 + (x * (0.001056288621524929 + (x * (-0.0011295143874558028 + (x * -0.016743100507663373))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0 + (x * (0.0 + (x * (2.82243172016108e-7 + (x * (0.000027533547476472603 + (x * (0.0009640118070051656 + (x * (0.016074608709367652 + (x * (0.1381518657490833 + (x * (0.5914293448864175 + (x * 1.0))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1995, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// TODO: replace with TOMS (Openlibm) algo (updating license header and long comment)\n\n// MODULES //\n\nimport FLOAT64_MAX_BASE2_EXPONENT from '@stdlib/constants-float64-max-base2-exponent'; // eslint-disable-line id-length\nimport FLOAT64_MIN_BASE2_EXPONENT from '@stdlib/constants-float64-min-base2-exponent'; // eslint-disable-line id-length\nimport round from '@stdlib/math-base-special-round';\nimport ldexp from '@stdlib/math-base-special-ldexp';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport polyvalP from './polyval_p.js';\nimport polyvalQ from './polyval_q.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the base `2` exponential function.\n*\n* ## Method\n*\n* -   Range reduction is accomplished by separating the argument into an integer \\\\( k \\\\) and fraction \\\\( f \\\\) such that\n*\n*     ```tex\n*     2^x = 2^k 2^f\n*     ```\n*\n* -   A Pade' approximate\n*\n*     ```tex\n*     1 + 2x \\frac{\\mathrm{P}\\left(x^2\\right)}{\\mathrm{Q}\\left(x^2\\right) - x \\mathrm{P}\\left(x^2\\right)}\n*     ```\n*\n*     approximates \\\\( 2^x \\\\) in the basic range \\\\( \\[-0.5, 0.5] \\\\).\n*\n* ## Notes\n*\n* -   Relative error:\n*\n*     | arithmetic | domain      | # trials | peak    | rms     |\n*     |:----------:|:-----------:|:--------:|:-------:|:-------:|\n*     | IEEE       | -1022,+1024 | 30000    | 1.8e-16 | 5.4e-17 |\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = exp2( 3.0 );\n* // returns 8.0\n*\n* @example\n* var v = exp2( -9.0 );\n* // returns ~0.002\n*\n* @example\n* var v = exp2( 0.0 );\n* // returns 1.0\n*\n* @example\n* var v = exp2( NaN );\n* // returns NaN\n*/\nfunction exp2( x ) {\n\tvar px;\n\tvar xx;\n\tvar n;\n\tif ( isnan( x ) ) {\n\t\treturn x;\n\t}\n\tif ( x > FLOAT64_MAX_BASE2_EXPONENT ) {\n\t\treturn PINF;\n\t}\n\tif ( x < FLOAT64_MIN_BASE2_EXPONENT ) {\n\t\treturn 0.0;\n\t}\n\t// Separate into integer and fractional parts...\n\tn = round( x );\n\tx -= n;\n\n\txx = x * x;\n\tpx = x * polyvalP( xx );\n\tx = px / ( polyvalQ( xx ) - px );\n\tx = 1.0 + ldexp( x, 1 );\n\n\t// Scale by power of 2:\n\treturn ldexp( x, n );\n}\n\n\n// EXPORTS //\n\nexport default exp2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The minimum biased base 2 exponent for a normal double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-min-base2-exponent\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MIN_BASE2_EXPONENT from '@stdlib/constants-float64-min-base2-exponent';\n* // returns -1022\n*/\n\n\n// MAIN //\n\n/**\n* The minimum biased base 2 exponent for a normal double-precision floating-point number.\n*\n* ```text\n* 1 - BIAS = -1022\n* ```\n*\n* where `BIAS = 1023`.\n*\n* @constant\n* @type {integer32}\n* @default -1022\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_BASE2_EXPONENT = -1022|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MIN_BASE2_EXPONENT;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1513.906801156151;\n\t}\n\treturn 1513.906801156151 + (x * (20.202065669316532 + (x * 0.023093347705734523))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 4368.211668792106;\n\t}\n\treturn 4368.211668792106 + (x * (233.1842117223149 + (x * 1.0)));\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1991, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\nimport ldexp from '@stdlib/math-base-special-ldexp';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport MAXL10 from '@stdlib/constants-float64-max-base10-exponent';\nimport MINL10 from '@stdlib/constants-float64-min-base10-exponent';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport polyvalP from './polyval_p.js';\nimport polyvalQ from './polyval_q.js';\n\n\n// VARIABLES //\n\nvar LOG210 = 3.32192809488736234787e0;\nvar LG102A = 3.01025390625000000000e-1;\nvar LG102B = 4.60503898119521373889e-6;\n\n\n// MAIN //\n\n/**\n* Returns `10` raised to the `x` power.\n*\n* ## Method\n*\n* -   Range reduction is accomplished by expressing the argument as \\\\( 10^x = 2^n 10^f \\\\), with \\\\( |f| < 0.5 log_{10}(2) \\\\). The Pade' form\n*\n*     ```tex\n*     1 + 2x \\frac{P(x^2)}{Q(x^2) - P(x^2)}\n*     ```\n*\n*     is used to approximate \\\\( 10^f \\\\).\n*\n* ## Notes\n*\n* -   Relative error:\n*\n*     | arithmetic | domain      | # trials | peak    | rms     |\n*     |:----------:|:-----------:|:--------:|:-------:|:-------:|\n*     | IEEE       | -307,+307   |  30000   | 2.2e-16 | 5.5e-17 |\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = exp10( 3.0 );\n* // returns 1000.0\n*\n* @example\n* var v = exp10( -9.0 );\n* // returns 1.0e-9\n*\n* @example\n* var v = exp10( 0.0 );\n* // returns 1.0\n*\n* @example\n* var v = exp10( NaN );\n* // returns NaN\n*/\nfunction exp10( x ) {\n\tvar px;\n\tvar xx;\n\tvar n;\n\n\tif ( isnan( x ) ) {\n\t\treturn x;\n\t}\n\tif ( x > MAXL10 ) {\n\t\treturn PINF;\n\t}\n\tif ( x < MINL10 ) {\n\t\treturn 0.0;\n\t}\n\t// Express 10^x = 10^g 2^n = 10^g 10^( n log10(2) ) = 10^( g + n log10(2) )\n\tpx = floor( (LOG210*x) + 0.5 );\n\tn = px;\n\tx -= px * LG102A;\n\tx -= px * LG102B;\n\n\t// Rational approximation for exponential of the fractional part: 10^x = 1 + 2x P(x^2)/( Q(x^2) - P(x^2) )\n\txx = x * x;\n\tpx = x * polyvalP( xx );\n\tx = px / ( polyvalQ( xx ) - px );\n\tx = 1.0 + ldexp( x, 1 );\n\n\t// Multiply by power of 2:\n\treturn ldexp( x, n );\n}\n\n\n// EXPORTS //\n\nexport default exp10;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 2394.2374120738828;\n\t}\n\treturn 2394.2374120738828 + (x * (406.7172899368727 + (x * (11.745273255434405 + (x * 0.040996251979858706))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 2079.608192860019;\n\t}\n\treturn 2079.608192860019 + (x * (1272.0927117834513 + (x * (85.09361608493066 + (x * 1.0))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Evaluates the standard logistic function.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var y = expit( 0.0 );\n* // returns 0.5\n*\n* @example\n* var y = expit( 1.0 );\n* // returns ~0.731\n*\n* @example\n* var y = expit( -1.0 );\n* // returns ~0.269\n*\n* @example\n* var y = expit( Infinity );\n* // returns 1.0\n*\n* @example\n* var y = expit( NaN );\n* // returns NaN\n*/\nfunction expit( x ) {\n\tif ( isnan( x ) ) {\n\t\treturn x;\n\t}\n\treturn 1.0 / ( 1.0 + exp( -x ) );\n}\n\n\n// EXPORTS //\n\nexport default expit;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport abs from '@stdlib/math-base-special-abs';\nimport EPS from '@stdlib/constants-float64-eps';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// VARIABLES //\n\nvar OVERFLOW_THRESHOLD = 7.09782712893383973096e+02; // 0x40862E42 0xFEFA39EF\n\n\n// MAIN //\n\n/**\n* Computes the relative error exponential.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = expm1rel( 0.0 );\n* // returns 1.0\n*\n* @example\n* var v = expm1rel( 1.0 );\n* // returns ~1.718\n*\n* @example\n* var v = expm1rel( -1.0 );\n* // returns ~0.632\n*\n* @example\n* var v = expm1rel( NaN );\n* // returns NaN\n*/\nfunction expm1rel( x ) {\n\tif ( abs( x ) <= EPS ) {\n\t\treturn 1.0; // L'Hopital's Rule\n\t}\n\tif ( x >= OVERFLOW_THRESHOLD ) {\n\t\treturn PINF; // L'Hopital's Rule\n\t}\n\treturn expm1( x ) / x;\n}\n\n\n// EXPORTS //\n\nexport default expm1rel;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isEven from '@stdlib/math-base-assert-is-even';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// VARIABLES //\n\nvar MAX_FACTORIAL2 = 301; // TODO: consider extracting as a constant\n\n\n// MAIN //\n\n/**\n* Evaluates the double factorial of `n`.\n*\n* @param {number} n - input value\n* @returns {(NonNegativeInteger|number)} double factorial\n*\n* @example\n* var v = factorial2( 3 );\n* // returns 3\n*\n* @example\n* var v = factorial2( 4 );\n* // returns 8\n*\n* @example\n* var v = factorial2( 5 );\n* // returns 15\n*\n* @example\n* var v = factorial2( 301 );\n* // returns Infinity\n*/\nfunction factorial2( n ) {\n\tvar last;\n\tvar out;\n\tvar v;\n\tvar i;\n\tif ( isnan( n ) ) {\n\t\treturn NaN;\n\t}\n\tif ( n > MAX_FACTORIAL2 ) {\n\t\treturn PINF;\n\t}\n\tif ( n < 0 || isInteger( n ) === false ) {\n\t\treturn NaN;\n\t}\n\tv = n|0; // asm type annotation\n\tif ( v === 0|0 || v === 1|0 ) {\n\t\treturn 1|0; // asm type annotation\n\t}\n\tif ( isEven( v ) ) {\n\t\tlast = 2|0; // asm type annotation\n\t} else {\n\t\tlast = 3|0; // asm type annotation\n\t}\n\tout = 1;\n\tfor ( i = v|0; i >= last; i -= 2|0 ) {\n\t\tout *= i|0; // asm type annotation\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default factorial2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeInteger from '@stdlib/math-base-assert-is-negative-integer';\nimport gammaln from '@stdlib/math-base-special-gammaln';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the factorial of `x`.\n*\n* @param {number} x - input value\n* @returns {number} natural logarithm of factorial of `x`\n*\n* @example\n* var v = factorialln( 3.0 );\n* // returns ~1.792\n*\n* @example\n* var v = factorialln( 2.4 );\n* // returns ~1.092\n*\n* @example\n* var v = factorialln( -1.0 );\n* // returns NaN\n*\n* @example\n* var v = factorialln( -1.5 );\n* // returns ~1.266\n*\n* @example\n* var v = factorialln( NaN );\n* // returns NaN\n*/\nfunction factorialln( x ) {\n\tif ( isNegativeInteger( x ) ) {\n\t\treturn NaN;\n\t}\n\treturn gammaln( x + 1.0 );\n}\n\n\n// EXPORTS //\n\nexport default factorialln;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport MAX_FIBONACCI from '@stdlib/constants-float64-max-safe-nth-fibonacci';\nimport FIBONACCI from './fibonacci.json';\n\n\n// MAIN //\n\n/**\n* Computes the nth Fibonacci number.\n*\n* @param {NonNegativeInteger} n - the Fibonacci number to compute\n* @returns {NonNegativeInteger} Fibonacci number\n*\n* @example\n* var y = fibonacci( 0 );\n* // returns 0\n*\n* @example\n* var y = fibonacci( 1 );\n* // returns 1\n*\n* @example\n* var y = fibonacci( 2 );\n* // returns 1\n*\n* @example\n* var y = fibonacci( 3 );\n* // returns 2\n*\n* @example\n* var y = fibonacci( 4 );\n* // returns 3\n*\n* @example\n* var y = fibonacci( 5 );\n* // returns 5\n*\n* @example\n* var y = fibonacci( 6 );\n* // returns 8\n*\n* @example\n* var y = fibonacci( NaN );\n* // returns NaN\n*\n* @example\n* var y = fibonacci( 3.14 );\n* // returns NaN\n*\n* @example\n* var y = fibonacci( -1.0 );\n* // returns NaN\n*/\nfunction fibonacci( n ) {\n\tif (\n\t\tisnan( n ) ||\n\t\tisInteger( n ) === false ||\n\t\tn < 0 ||\n\t\tn > MAX_FIBONACCI\n\t) {\n\t\treturn NaN;\n\t}\n\treturn FIBONACCI[ n ];\n}\n\n\n// EXPORTS //\n\nexport default fibonacci;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport SIGN_MASK from '@stdlib/constants-float32-sign-mask';\nimport toWord from '@stdlib/number-float32-base-to-word';\nimport fromWord from '@stdlib/number-float32-base-from-word';\n\n\n// MAIN //\n\n/**\n* Returns a single-precision floating-point number with the magnitude of `x` and the sign of `x*y`.\n*\n* @param {number} x - number from which to derive a magnitude\n* @param {number} y - number from which to derive a sign\n* @returns {number} a single-precision floating-point number\n*\n* @example\n* var z = flipsignf( -3.0, 10.0 );\n* // returns -3.0\n*\n* @example\n* var z = flipsignf( -3.0, -1.0 );\n* // returns 3.0\n*\n* @example\n* var z = flipsignf( 1.0, -0.0 );\n* // returns -1.0\n*\n* @example\n* var z = flipsignf( -3.0, -0.0 );\n* // returns 3.0\n*\n* @example\n* var z = flipsignf( -0.0, 1.0 );\n* // returns -0.0\n*\n* @example\n* var z = flipsignf( 0.0, -1.0 );\n* // returns -0.0\n*/\nfunction flipsignf( x, y ) {\n\tvar wx;\n\tvar wy;\n\n\tx = float64ToFloat32( x );\n\ty = float64ToFloat32( y );\n\n\t// Convert `x` and `y` to unsigned integers:\n\twx = toWord( x );\n\twy = toWord( y );\n\n\t// Leave only the sign bit of `y` turned on (if on):\n\twy &= SIGN_MASK;\n\n\t// Flip the sign bit of `x` only when the sign bit of `y` is on:\n\twx ^= wy; // 1^1=0 (flipped), 0^1=1 (flipped), 1^0=1 (unchanged), 0^0=0 (unchanged)\n\n\t// Return a new value having the same magnitude as `x`, but with the sign of `x*y`:\n\treturn fromWord( wx );\n}\n\n\n// EXPORTS //\n\nexport default flipsignf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport pow from '@stdlib/math-base-special-pow';\nimport floor from '@stdlib/math-base-special-floor';\nimport ceil from '@stdlib/math-base-special-ceil';\nimport log2 from '@stdlib/math-base-special-log2';\nimport MAX_EXP from '@stdlib/constants-float64-max-base2-exponent';\nimport MIN_EXP_SUBNORMAL from '@stdlib/constants-float64-min-base2-exponent-subnormal';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Rounds a numeric value to the nearest power of two toward negative infinity.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = floor2( 3.141592653589793 );\n* // returns 2.0\n*\n* @example\n* var v = floor2( 13.0 );\n* // returns 8.0\n*\n* @example\n* var v = floor2( -0.314 );\n* // returns -0.5\n*/\nfunction floor2( x ) {\n\tvar sign;\n\tvar p;\n\tif (\n\t\tisnan( x ) ||\n\t\tisInfinite( x ) ||\n\t\tx === 0.0\n\t) {\n\t\treturn x;\n\t}\n\tif ( x < 0 ) {\n\t\tx = -x;\n\t\tsign = -1.0;\n\t} else {\n\t\tsign = 1.0;\n\t}\n\t// Solve the equation `2^p = x` for `p`:\n\tp = log2( x );\n\n\t// If provided the smallest subnormal, no rounding possible:\n\tif ( p === MIN_EXP_SUBNORMAL ) {\n\t\treturn x;\n\t}\n\t// Determine a power of two which rounds the input value toward negative infinity:\n\tif ( sign === 1.0 ) {\n\t\tp = floor( p );\n\t} else {\n\t\tp = ceil( p );\n\t}\n\t// Handle overflow:\n\tif ( p > MAX_EXP ) {\n\t\treturn NINF;\n\t}\n\treturn sign * pow( 2.0, p );\n}\n\n\n// EXPORTS //\n\nexport default floor2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport pow from '@stdlib/math-base-special-pow';\nimport floor from '@stdlib/math-base-special-floor';\nimport ceil from '@stdlib/math-base-special-ceil';\nimport log10 from '@stdlib/math-base-special-log10';\nimport MAX_EXP from '@stdlib/constants-float64-max-base10-exponent';\nimport MIN_EXP_SUBNORMAL from '@stdlib/constants-float64-min-base10-exponent-subnormal';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Rounds a numeric value to the nearest power of `10` toward negative infinity.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = floor10( 3.141592653589793 );\n* // returns 1.0\n*\n* @example\n* var v = floor10( 9.0 );\n* // returns 1.0\n*\n* @example\n* var v = floor10( -0.314 );\n* // returns -1.0\n*/\nfunction floor10( x ) {\n\tvar sign;\n\tvar p;\n\tif (\n\t\tisnan( x ) ||\n\t\tisInfinite( x ) ||\n\t\tx === 0.0\n\t) {\n\t\treturn x;\n\t}\n\tif ( x < 0 ) {\n\t\tx = -x;\n\t\tsign = -1.0;\n\t} else {\n\t\tsign = 1.0;\n\t}\n\t// Solve the equation `10^p = x` for `p`:\n\tp = log10( x );\n\n\t// Determine a power of 10 which rounds the input value toward negative infinity:\n\tif ( sign === 1.0 ) {\n\t\tp = floor( p );\n\t} else {\n\t\tp = ceil( p );\n\t}\n\t// Handle underflow:\n\tif ( p <= MIN_EXP_SUBNORMAL ) {\n\t\treturn sign * 0.0; // sign-preserving\n\t}\n\t// Handle overflow:\n\tif ( p > MAX_EXP ) {\n\t\treturn NINF;\n\t}\n\treturn sign * pow( 10.0, p );\n}\n\n\n// EXPORTS //\n\nexport default floor10;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport pow from '@stdlib/math-base-special-pow';\nimport floor from '@stdlib/math-base-special-floor';\nimport floorn from '@stdlib/math-base-special-floorn';\n\n\n// MAIN //\n\n/**\n* Rounds a numeric value to the nearest multiple of \\\\(b^n\\\\) toward negative infinity.\n*\n* @param {number} x - input value\n* @param {integer} n - integer power\n* @param {PositiveInteger} b - base\n* @returns {number} rounded value\n*\n* @example\n* // Round a value to 4 decimal places:\n* var v = floorb( 3.141592653589793, -4, 10 );\n* // returns 3.1415\n*\n* @example\n* // If n = 0 or b = 1, `floorb` behaves like `floor`:\n* var v = floorb( 3.141592653589793, 0, 2 );\n* // returns 3.0\n*\n* @example\n* // Round a value to the nearest multiple of two toward negative infinity:\n* var v = floorb( 5.0, 1, 2 );\n* // returns 4.0\n*/\nfunction floorb( x, n, b ) {\n\tvar y;\n\tvar s;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( n ) ||\n\t\tisnan( b ) ||\n\t\tb <= 0 ||\n\t\tisInfinite( n ) ||\n\t\tisInfinite( b )\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( isInfinite( x ) || x === 0.0 ) {\n\t\treturn x;\n\t}\n\tif ( b === 10 ) {\n\t\treturn floorn( x, n );\n\t}\n\tif ( n === 0 || b === 1 ) {\n\t\treturn floor( x );\n\t}\n\ts = pow( b, -n );\n\n\t// Check for overflow:\n\tif ( isInfinite( s ) ) {\n\t\treturn x;\n\t}\n\ty = floor( x * s ) / s;\n\n\t// Check for overflow:\n\tif ( isInfinite( y ) ) {\n\t\treturn x;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default floorb;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport pow from '@stdlib/math-base-special-pow';\nimport log10 from '@stdlib/math-base-special-log10';\nimport ln from '@stdlib/math-base-special-ln';\nimport abs from '@stdlib/math-base-special-abs';\nimport floor from '@stdlib/math-base-special-floor';\nimport exponent from '@stdlib/number-float64-base-exponent';\n\n\n// MAIN //\n\n/**\n* Rounds a numeric value to the nearest number toward negative infinity with \\\\(N\\\\) significant figures.\n*\n* @param {number} x - input value\n* @param {PositiveInteger} n - number of significant figures\n* @param {PositiveInteger} [b=10] - base\n* @returns {number} rounded value\n*\n* @example\n* var v = floorsd( 3.141592653589793, 5 );\n* // returns 3.1415\n*\n* @example\n* var v = floorsd( 3.141592653589793, 1 );\n* // returns 3.0\n*\n* @example\n* var v = floorsd( 12368.0, 2 );\n* // returns 12000.0\n*\n* @example\n* var v = floorsd( 0.0313, 2, 2 );\n* // returns 0.03125\n*/\nfunction floorsd( x, n, b ) {\n\tvar base;\n\tvar exp;\n\tvar s;\n\tvar y;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( n ) ||\n\t\tn < 1 ||\n\t\tisInfinite( n )\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif (\n\t\t\tisnan( b ) ||\n\t\t\tb <= 0 ||\n\t\t\tisInfinite( b )\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\tbase = b;\n\t} else {\n\t\tbase = 10;\n\t}\n\tif ( isInfinite( x ) || x === 0.0 ) {\n\t\treturn x;\n\t}\n\tif ( base === 10 ) {\n\t\texp = log10( abs( x ) );\n\t}\n\telse if ( base === 2 ) {\n\t\texp = exponent( abs( x ) );\n\t}\n\telse {\n\t\texp = ln( abs(x) ) / ln( base );\n\t}\n\texp = floor( exp - n + 1.0 );\n\ts = pow( base, abs( exp ) );\n\n\t// Check for overflow:\n\tif ( isInfinite( s ) ) {\n\t\treturn x;\n\t}\n\t// To avoid numerical stability issues due to floating-point rounding error (e.g., 3.55/0.1-35.5 = -7.105427357601e-15 and 3.55*10-35.5 = 0), we must treat positive and negative exponents separately.\n\tif ( exp < 0 ) {\n\t\ty = floor( x * s ) / s;\n\t} else {\n\t\ty = floor( x / s ) * s;\n\t}\n\t// Check for overflow:\n\tif ( isInfinite( y ) ) {\n\t\treturn x;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default floorsd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 1.0 + (x * (-0.20552590095501388 + (x * (0.018884331939670384 + (x * (-0.0006451914356839651 + (x * (0.000009504280628298596 + (x * (-4.9884311457357354e-8 + (x * 0.0))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.04121420907221998 + (x * (0.0008680295429417843 + (x * (0.000012226278902417902 + (x * (1.2500186247959882e-7 + (x * (9.154392157746574e-10 + (x * 3.99982968972496e-12))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (-4.9884311457357354e-8 + (x * (0.000009504280628298596 + (x * (-0.0006451914356839651 + (x * (0.018884331939670384 + (x * (-0.20552590095501388 + (x * 1.0))))))))))); // eslint-disable-line max-len\n\t\ts2 = 3.99982968972496e-12 + (x * (9.154392157746574e-10 + (x * (1.2500186247959882e-7 + (x * (0.000012226278902417902 + (x * (0.0008680295429417843 + (x * (0.04121420907221998 + (x * 1.0))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 2.999999999999634;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 3.763297112699879e-20 + (x * (1.3428327623306275e-16 + (x * (1.7201074326816183e-13 + (x * (1.0230451416490724e-10 + (x * (3.055689837902576e-8 + (x * (0.0000046361374928786735 + (x * (0.000345017939782574 + (x * (0.011522095507358577 + (x * (0.1434079197807589 + (x * (0.4215435550436775 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.2544323709001127e-20 + (x * (4.5200143407412973e-17 + (x * (5.887545336215784e-14 + (x * (3.6014002958937136e-11 + (x * (1.1269922476399903e-8 + (x * (0.0000018462756734893055 + (x * (0.00015593440916415301 + (x * (0.0064405152650885865 + (x * (0.11688892585919138 + (x * (0.7515863983533789 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (0.4215435550436775 + (x * (0.1434079197807589 + (x * (0.011522095507358577 + (x * (0.000345017939782574 + (x * (0.0000046361374928786735 + (x * (3.055689837902576e-8 + (x * (1.0230451416490724e-10 + (x * (1.7201074326816183e-13 + (x * (1.3428327623306275e-16 + (x * 3.763297112699879e-20))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.7515863983533789 + (x * (0.11688892585919138 + (x * (0.0064405152650885865 + (x * (0.00015593440916415301 + (x * (0.0000018462756734893055 + (x * (1.1269922476399903e-8 + (x * (3.6014002958937136e-11 + (x * (5.887545336215784e-14 + (x * (4.5200143407412973e-17 + (x * 1.2544323709001127e-20))))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 1.8695871016278324e-22 + (x * (8.363544356306774e-19 + (x * (1.375554606332618e-15 + (x * (1.0826804113902088e-12 + (x * (4.4534441586175015e-10 + (x * (9.828524436884223e-8 + (x * (0.000011513882611188428 + (x * (0.0006840793809153931 + (x * (0.018764858409257526 + (x * (0.1971028335255234 + (x * (0.5044420736433832 + (x * 0.0))))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.8695871016278324e-22 + (x * (8.391588162831187e-19 + (x * (1.3879653125957886e-15 + (x * (1.1027321506624028e-12 + (x * (4.6068072814652043e-10 + (x * (1.0431458965757199e-7 + (x * (0.000012754507566772912 + (x * (0.0008146791071843061 + (x * (0.02536037414203388 + (x * (0.33774898912002 + (x * (1.4749575992512833 + (x * 1.0))))))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (0.5044420736433832 + (x * (0.1971028335255234 + (x * (0.018764858409257526 + (x * (0.0006840793809153931 + (x * (0.000011513882611188428 + (x * (9.828524436884223e-8 + (x * (4.4534441586175015e-10 + (x * (1.0826804113902088e-12 + (x * (1.375554606332618e-15 + (x * (8.363544356306774e-19 + (x * 1.8695871016278324e-22))))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (1.4749575992512833 + (x * (0.33774898912002 + (x * (0.02536037414203388 + (x * (0.0008146791071843061 + (x * (0.000012754507566772912 + (x * (1.0431458965757199e-7 + (x * (4.6068072814652043e-10 + (x * (1.1027321506624028e-12 + (x * (1.3879653125957886e-15 + (x * (8.391588162831187e-19 + (x * 1.8695871016278324e-22))))))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.5235987755982989;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 318016297876.5678 + (x * (-44297951805.96978 + (x * (2548908805.7337637 + (x * (-62974148.62058625 + (x * (708840.0452577386 + (x * (-2991.8191940101983 + (x * 0.0))))))))))); // eslint-disable-line max-len\n\t\ts2 = 607366389490.0846 + (x * (22441179564.534092 + (x * (419320245.8981112 + (x * (5173438.887700964 + (x * (45584.78108065326 + (x * (281.3762688899943 + (x * 1.0))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (-2991.8191940101983 + (x * (708840.0452577386 + (x * (-62974148.62058625 + (x * (2548908805.7337637 + (x * (-44297951805.96978 + (x * 318016297876.5678))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (281.3762688899943 + (x * (45584.78108065326 + (x * (5173438.887700964 + (x * (419320245.8981112 + (x * (22441179564.534092 + (x * 607366389490.0846))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 2.999999999999634;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 3.763297112699879e-20 + (x * (1.3428327623306275e-16 + (x * (1.7201074326816183e-13 + (x * (1.0230451416490724e-10 + (x * (3.055689837902576e-8 + (x * (0.0000046361374928786735 + (x * (0.000345017939782574 + (x * (0.011522095507358577 + (x * (0.1434079197807589 + (x * (0.4215435550436775 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.2544323709001127e-20 + (x * (4.5200143407412973e-17 + (x * (5.887545336215784e-14 + (x * (3.6014002958937136e-11 + (x * (1.1269922476399903e-8 + (x * (0.0000018462756734893055 + (x * (0.00015593440916415301 + (x * (0.0064405152650885865 + (x * (0.11688892585919138 + (x * (0.7515863983533789 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (0.4215435550436775 + (x * (0.1434079197807589 + (x * (0.011522095507358577 + (x * (0.000345017939782574 + (x * (0.0000046361374928786735 + (x * (3.055689837902576e-8 + (x * (1.0230451416490724e-10 + (x * (1.7201074326816183e-13 + (x * (1.3428327623306275e-16 + (x * 3.763297112699879e-20))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.7515863983533789 + (x * (0.11688892585919138 + (x * (0.0064405152650885865 + (x * (0.00015593440916415301 + (x * (0.0000018462756734893055 + (x * (1.1269922476399903e-8 + (x * (3.6014002958937136e-11 + (x * (5.887545336215784e-14 + (x * (4.5200143407412973e-17 + (x * 1.2544323709001127e-20))))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 1.8695871016278324e-22 + (x * (8.363544356306774e-19 + (x * (1.375554606332618e-15 + (x * (1.0826804113902088e-12 + (x * (4.4534441586175015e-10 + (x * (9.828524436884223e-8 + (x * (0.000011513882611188428 + (x * (0.0006840793809153931 + (x * (0.018764858409257526 + (x * (0.1971028335255234 + (x * (0.5044420736433832 + (x * 0.0))))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.8695871016278324e-22 + (x * (8.391588162831187e-19 + (x * (1.3879653125957886e-15 + (x * (1.1027321506624028e-12 + (x * (4.6068072814652043e-10 + (x * (1.0431458965757199e-7 + (x * (0.000012754507566772912 + (x * (0.0008146791071843061 + (x * (0.02536037414203388 + (x * (0.33774898912002 + (x * (1.4749575992512833 + (x * 1.0))))))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (0.5044420736433832 + (x * (0.1971028335255234 + (x * (0.018764858409257526 + (x * (0.0006840793809153931 + (x * (0.000011513882611188428 + (x * (9.828524436884223e-8 + (x * (4.4534441586175015e-10 + (x * (1.0826804113902088e-12 + (x * (1.375554606332618e-15 + (x * (8.363544356306774e-19 + (x * 1.8695871016278324e-22))))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (1.4749575992512833 + (x * (0.33774898912002 + (x * (0.02536037414203388 + (x * (0.0008146791071843061 + (x * (0.000012754507566772912 + (x * (1.0431458965757199e-7 + (x * (4.6068072814652043e-10 + (x * (1.1027321506624028e-12 + (x * (1.3879653125957886e-15 + (x * (8.391588162831187e-19 + (x * 1.8695871016278324e-22))))))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Computes the sign of the gamma function.\n*\n* @param {number} x - input value\n* @returns {number} sign of the gamma function\n*\n* @example\n* var v = gammasgn( 1.0 );\n* // returns 1.0\n*\n* v = gammasgn( -2.5 );\n* // returns -1.0\n*\n* v = gammasgn( 0.0 );\n* // returns 0.0\n*\n* v = gammasgn( NaN );\n* // returns NaN\n*/\nfunction gammasgn( x ) {\n\tvar fx;\n\n\tif ( isnan( x ) ) {\n\t\treturn x;\n\t}\n\tif ( x > 0 ) {\n\t\treturn 1.0;\n\t}\n\tfx = floor( x );\n\tif ( x === fx ) {\n\t\treturn 0.0;\n\t}\n\tfx /= 2.0;\n\tif ( fx === floor( fx ) ) {\n\t\treturn 1.0;\n\t}\n\treturn -1.0;\n}\n\n\n// EXPORTS //\n\nexport default gammasgn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sin from '@stdlib/math-base-special-sin';\n\n\n// MAIN //\n\n/**\n* Computes the half-value coversed cosine.\n*\n* @param {number} x - input value (in radians)\n* @returns {number} half-value coversed cosine\n*\n* @example\n* var v = hacovercos( 0.0 );\n* // returns 0.5\n*\n* @example\n* var v = hacovercos( 3.141592653589793/2.0 );\n* // returns 1.0\n*\n* @example\n* var v = hacovercos( -3.141592653589793/6.0 );\n* // returns 0.25\n*\n* @example\n* var v = hacovercos( NaN );\n* // returns NaN\n*/\nfunction hacovercos( x ) {\n\treturn (1.0 + sin( x )) / 2.0;\n}\n\n\n// EXPORTS //\n\nexport default hacovercos;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sin from '@stdlib/math-base-special-sin';\n\n\n// MAIN //\n\n/**\n* Computes the half-value coversed sine.\n*\n* @param {number} x - input value (in radians)\n* @returns {number} half-value coversed sine\n*\n* @example\n* var v = hacoversin( 0.0 );\n* // returns 0.5\n*\n* @example\n* var v = hacoversin( 3.141592653589793/2.0 );\n* // returns 0.0\n*\n* @example\n* var v = hacoversin( -3.141592653589793/6.0 );\n* // returns 0.75\n*\n* @example\n* var v = hacoversin( NaN );\n* // returns NaN\n*/\nfunction hacoversin( x ) {\n\treturn (1.0 - sin( x )) / 2.0;\n}\n\n\n// EXPORTS //\n\nexport default hacoversin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cos from '@stdlib/math-base-special-cos';\n\n\n// MAIN //\n\n/**\n* Computes the half-value versed cosine.\n*\n* @param {number} x - input value (in radians)\n* @returns {number} half-value versed cosine\n*\n* @example\n* var v = havercos( 0.0 );\n* // returns 1.0\n*\n* @example\n* var v = havercos( 3.141592653589793/2.0 );\n* // returns 0.5\n*\n* @example\n* var v = havercos( -3.141592653589793/6.0 );\n* // returns ~0.9330\n*\n* @example\n* var v = havercos( NaN );\n* // returns NaN\n*/\nfunction havercos( x ) {\n\treturn (1.0 + cos( x )) / 2.0;\n}\n\n\n// EXPORTS //\n\nexport default havercos;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cos from '@stdlib/math-base-special-cos';\n\n\n// MAIN //\n\n/**\n* Computes the half-value versed sine.\n*\n* @param {number} x - input value (in radians)\n* @returns {number} half-value versed sine\n*\n* @example\n* var v = haversin( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = haversin( 3.141592653589793/2.0 );\n* // returns ~0.5\n*\n* @example\n* var v = haversin( -3.141592653589793/6.0 );\n* // returns ~0.06699\n*\n* @example\n* var v = haversin( NaN );\n* // returns NaN\n*/\nfunction haversin( x ) {\n\treturn (1.0 - cos( x )) / 2.0;\n}\n\n\n// EXPORTS //\n\nexport default haversin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the Heaviside function.\n*\n* @param {number} x - input value\n* @param {string} [continuity] - continuity option\n* @returns {number} function value\n*\n* @example\n* var v = heaviside( 3.14 );\n* // returns 1.0\n*\n* @example\n* var v = heaviside( -3.14 );\n* // returns 0.0\n*\n* @example\n* var v = heaviside( 0.0 );\n* // returns NaN\n*\n* @example\n* var v = heaviside( 0.0, 'half-maximum' );\n* // returns 0.5\n*\n* @example\n* var v = heaviside( 0.0, 'left-continuous' );\n* // returns 0.0\n*\n* @example\n* var v = heaviside( 0.0, 'right-continuous' );\n* // returns 1.0\n*\n* @example\n* var v = heaviside( NaN );\n* // returns NaN\n*/\nfunction heaviside( x, continuity ) {\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x > 0.0 ) {\n\t\treturn 1.0;\n\t}\n\t// Handle `+-0`...\n\tif ( x === 0.0 ) {\n\t\tif ( continuity === 'half-maximum' ) {\n\t\t\treturn 0.5;\n\t\t}\n\t\tif ( continuity === 'left-continuous' ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( continuity === 'right-continuous' ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\t// Default behavior is discontinuity...\n\t\treturn NaN;\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default heaviside;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluates the identity function for a double-precision floating-point number `x`.\n*\n* @param {number} x - input value\n* @returns {number} input value\n*\n* @example\n* var v = identity( -1.0 );\n* // returns -1.0\n*\n* @example\n* var v = identity( 2.0 );\n* // returns 2.0\n*\n* @example\n* var v = identity( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = identity( -0.0 );\n* // returns -0.0\n*\n* @example\n* var v = identity( NaN );\n* // returns NaN\n*/\nfunction identity( x ) {\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default identity;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluates the identity function for a single-precision floating-point number `x`.\n*\n* @param {number} x - input value\n* @returns {number} input value\n*\n* @example\n* var v = identityf( -1.0 );\n* // returns -1.0\n*\n* @example\n* var v = identityf( 2.0 );\n* // returns 2.0\n*\n* @example\n* var v = identityf( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = identityf( -0.0 );\n* // returns -0.0\n*\n* @example\n* var v = identityf( NaN );\n* // returns NaN\n*/\nfunction identityf( x ) {\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default identityf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Computes the multiplicative inverse of a double-precision floating-point number `x`.\n*\n* @param {number} x - input value\n* @returns {number} multiplicative inverse\n*\n* @example\n* var v = inv( -1.0 );\n* // returns -1.0\n*\n* @example\n* var v = inv( 2.0 );\n* // returns 0.5\n*\n* @example\n* var v = inv( 0.0 );\n* // returns Infinity\n*\n* @example\n* var v = inv( -0.0 );\n* // returns -Infinity\n*\n* @example\n* var v = inv( NaN );\n* // returns NaN\n*/\nfunction inv( x ) {\n\treturn 1.0 / x;\n}\n\n\n// EXPORTS //\n\nexport default inv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the multiplicative inverse of a single-precision floating-point number `x`.\n*\n* @param {number} x - input value\n* @returns {number} multiplicative inverse\n*\n* @example\n* var v = invf( -1.0 );\n* // returns -1.0\n*\n* @example\n* var v = invf( 2.0 );\n* // returns 0.5\n*\n* @example\n* var v = invf( 0.0 );\n* // returns Infinity\n*\n* @example\n* var v = invf( -0.0 );\n* // returns -Infinity\n*\n* @example\n* var v = invf( NaN );\n* // returns NaN\n*/\nfunction invf( x ) {\n\treturn float64ToFloat32( 1.0 / float64ToFloat32( x ) );\n}\n\n\n// EXPORTS //\n\nexport default invf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the Kronecker delta.\n*\n* @param {number} i - input value\n* @param {number} j - input value\n* @returns {number} function value\n*\n* @example\n* var v = kroneckerDelta( 3.14, 3.14 );\n* // returns 1.0\n*\n* @example\n* var v = kroneckerDelta( 3.14, 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = kroneckerDelta( NaN, 3.14 );\n* // returns NaN\n*\n* @example\n* var v = kroneckerDelta( 3.14, NaN );\n* // returns NaN\n*\n* @example\n* var v = kroneckerDelta( NaN, NaN );\n* // returns NaN\n*/\nfunction kroneckerDelta( i, j ) {\n\tif ( isnan( i ) || isnan( j ) ) {\n\t\treturn NaN;\n\t}\n\tif ( i === j ) {\n\t\treturn 1.0;\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default kroneckerDelta;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\n\n\n// MAIN //\n\n/**\n* Evaluates the Kronecker delta (single-precision).\n*\n* @param {number} i - input value\n* @param {number} j - input value\n* @returns {number} function value\n*\n* @example\n* var v = kroneckerDeltaf( 3.14, 3.14 );\n* // returns 1.0\n*\n* @example\n* var v = kroneckerDeltaf( 3.14, 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = kroneckerDeltaf( NaN, 3.14 );\n* // returns NaN\n*\n* @example\n* var v = kroneckerDeltaf( 3.14, NaN );\n* // returns NaN\n*\n* @example\n* var v = kroneckerDeltaf( NaN, NaN );\n* // returns NaN\n*/\nfunction kroneckerDeltaf( i, j ) {\n\tif ( isnanf( i ) || isnanf( j ) ) {\n\t\treturn NaN;\n\t}\n\tif ( i === j ) {\n\t\treturn 1.0;\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default kroneckerDeltaf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport gcd from '@stdlib/math-base-special-gcd';\n\n\n// MAIN //\n\n/**\n* Computes the least common multiple (lcm).\n*\n* @param {integer} a - integer\n* @param {integer} b - integer\n* @returns {integer} least common multiple\n*\n* @example\n* var v = lcm( 21, 6 );\n* // returns 42\n*\n* @example\n* var v = lcm( 3.14, 6 );\n* // returns NaN\n*\n* @example\n* var v = lcm( NaN, 6 );\n* // returns NaN\n*/\nfunction lcm( a, b ) {\n\tvar d;\n\tif ( a === 0 || b === 0 ) {\n\t\treturn 0;\n\t}\n\tif ( a < 0 ) {\n\t\ta = -a;\n\t}\n\tif ( b < 0 ) {\n\t\tb = -b;\n\t}\n\t// Note: we rely on `gcd` to perform further argument validation...\n\td = gcd( a, b );\n\tif ( isnan( d ) ) {\n\t\treturn d;\n\t}\n\treturn (a/d) * b;\n}\n\n\n// EXPORTS //\n\nexport default lcm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Computes the base `b` logarithm of `x`.\n*\n* @param {NonNegativeNumber} x - input value\n* @param {NonNegativeNumber} b - base\n* @returns {number} logarithm (base `b`)\n*\n* @example\n* var v = log( 100.0, 10.0 );\n* // returns 2.0\n*\n* @example\n* var v = log( 16.0, 2.0 );\n* // returns 4.0\n*\n* @example\n* var v = log( 5.0, 1.0 );\n* // returns Infinity\n*\n* @example\n* var v = log( NaN, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = log( 1.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = log( -4.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = log( 4.0, -2.0 );\n* // returns NaN\n*/\nfunction log( x, b ) {\n\treturn ln( x ) / ln( b );\n}\n\n\n// EXPORTS //\n\nexport default log;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport exp from '@stdlib/math-base-special-exp';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport ln from '@stdlib/math-base-special-ln';\nimport abs from '@stdlib/math-base-special-abs';\nimport LN2 from '@stdlib/constants-float64-ln-two';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Computes the natural logarithm of \\\\( 1-\\exp(-|x|) \\\\).\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = log1mexp( 1.1 );\n* // returns ~-0.40477\n*\n* @example\n* var v = log1mexp( 0.0 );\n* // returns -Infinity\n*\n* @example\n* var v = log1mexp( NaN );\n* // returns NaN\n*/\nfunction log1mexp( x ) {\n\tvar ax;\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn NINF;\n\t}\n\tax = abs( x );\n\tif ( 0.0 < ax && ax <= LN2 ) {\n\t\treturn ln( -expm1( -ax ) );\n\t}\n\t// Case: |x| > ln(2)\n\treturn log1p( -exp( -ax ) );\n}\n\n\n// EXPORTS //\n\nexport default log1mexp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Computes the natural logarithm of \\\\( 1 + \\exp(x) \\\\).\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = log1pexp( 1.1 );\n* // returns ~1.387\n*\n* @example\n* var v = log1pexp( 100.0 );\n* // returns 100.0\n*\n* @example\n* var v = log1pexp( NaN );\n* // returns NaN\n*/\nfunction log1pexp( x ) {\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x <= -37.0 ) {\n\t\treturn exp( x );\n\t}\n\tif ( x <= 18.0 ) {\n\t\treturn log1p( exp( x ) );\n\t}\n\tif ( x <= 33.3 ) {\n\t\treturn x + exp( -x );\n\t}\n\t// Case: x > 33.3\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default log1pexp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport LN2 from '@stdlib/constants-float64-ln-two';\n\n\n// MAIN //\n\n/**\n* Computes the natural logarithm of \\\\( \\exp(x) + \\exp(y) \\\\).\n*\n* @param {number} x - input value\n* @param {number} y - input value\n* @returns {number} natural logarithm of \\\\( \\exp(x) + \\exp(y) \\\\)\n*\n* @example\n* var v = logaddexp( 90.0, 90.0 );\n* // returns ~90.6931\n*\n* @example\n* var v = logaddexp( -20.0, 90.0 );\n* // returns 90.0\n*\n* @example\n* var v = logaddexp( 0.0, -100 );\n* // returns ~3.7201e-44\n*/\nfunction logaddexp( x, y ) {\n\tvar d;\n\tif ( isnan( x ) || isnan( y ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x === y ) {\n\t\treturn x + LN2;\n\t}\n\td = x - y;\n\tif ( d > 0.0 ) {\n\t\treturn x + log1p( exp( -d ) );\n\t}\n\treturn y + log1p( exp( d ) );\n}\n\n\n// EXPORTS //\n\nexport default logaddexp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isProbability from '@stdlib/math-base-assert-is-probability';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the logit function.\n*\n* @param {Probability} p - input value\n* @returns {number} function value\n*\n* @example\n* var y = logit( 0.2 );\n* // returns ~-1.386\n*\n* @example\n* var y = logit( 0.9 );\n* // returns ~2.197\n*\n* @example\n* var y = logit( -4.0 );\n* // returns NaN\n*\n* @example\n* var y = logit( 1.5 );\n* // returns NaN\n*\n* @example\n* var y = logit( NaN );\n* // returns NaN\n*/\nfunction logit( p ) {\n\tif ( isnan( p ) ) {\n\t\treturn p;\n\t}\n\tif ( !isProbability( p ) ) {\n\t\treturn NaN;\n\t}\n\tif ( p === 0.0 ) {\n\t\treturn NINF;\n\t}\n\tif ( p === 1.0 ) {\n\t\treturn PINF;\n\t}\n\treturn ln( p / ( 1.0-p ) );\n}\n\n\n// EXPORTS //\n\nexport default logit;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport MAX_LUCAS from '@stdlib/constants-float64-max-safe-nth-lucas';\nimport LUCAS from './lucas.json';\n\n\n// MAIN //\n\n/**\n* Computes the nth Lucas number.\n*\n* @param {NonNegativeInteger} n - the Lucas number to compute\n* @returns {NonNegativeInteger} Lucas number\n*\n* @example\n* var y = lucas( 0 );\n* // returns 2\n*\n* @example\n* var y = lucas( 1 );\n* // returns 1\n*\n* @example\n* var y = lucas( 2 );\n* // returns 3\n*\n* @example\n* var y = lucas( 3 );\n* // returns 4\n*\n* @example\n* var y = lucas( 4 );\n* // returns 7\n*\n* @example\n* var y = lucas( 5 );\n* // returns 11\n*\n* @example\n* var y = lucas( 6 );\n* // returns 18\n*\n* @example\n* var y = lucas( NaN );\n* // returns NaN\n*\n* @example\n* var y = lucas( 3.14 );\n* // returns NaN\n*\n* @example\n* var y = lucas( -1.0 );\n* // returns NaN\n*/\nfunction lucas( n ) {\n\tif (\n\t\tisnan( n ) ||\n\t\tisInteger( n ) === false ||\n\t\tn < 0 ||\n\t\tn > MAX_LUCAS\n\t) {\n\t\treturn NaN;\n\t}\n\treturn LUCAS[ n ];\n}\n\n\n// EXPORTS //\n\nexport default lucas;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport max from '@stdlib/math-base-special-maxn';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the maximum absolute value.\n*\n* @param {number} [x] - first number\n* @param {number} [y] - second number\n* @param {...number} [args] - numbers\n* @returns {number} maximum absolute value\n*\n* @example\n* var v = maxabsn( 3.14, -4.2 );\n* // returns 4.2\n*\n* @example\n* var v = maxabsn( 5.9, 3.14, 4.2 );\n* // returns 5.9\n*\n* @example\n* var v = maxabsn( 3.14, NaN );\n* // returns NaN\n*\n* @example\n* var v = maxabsn( +0.0, -0.0 );\n* // returns +0.0\n*/\nfunction maxabsn( x, y ) {\n\tvar nargs;\n\tvar args;\n\tvar i;\n\n\tnargs = arguments.length;\n\tif ( nargs === 0 ) {\n\t\treturn PINF;\n\t}\n\tif ( nargs === 2 ) {\n\t\treturn max( abs( x ), abs( y ) );\n\t}\n\targs = [];\n\tfor ( i = 0; i < nargs; i++ ) {\n\t\targs.push( abs( arguments[ i ] ) );\n\t}\n\treturn max.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default maxabsn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport minn from '@stdlib/math-base-special-minn';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the minimum absolute value.\n*\n* @param {number} [x] - first number\n* @param {number} [y] - second number\n* @param {...number} [args] - numbers\n* @returns {number} minimum absolute value\n*\n* @example\n* var v = minabsn( -3.14, 4.2 );\n* // returns 3.14\n*\n* @example\n* var v = minabsn( 5.9, 3.14, 4.2 );\n* // returns 3.14\n*\n* @example\n* var v = minabsn( 3.14, NaN );\n* // returns NaN\n*\n* @example\n* var v = minabsn( +0.0, -0.0 );\n* // returns +0.0\n*/\nfunction minabsn( x, y ) {\n\tvar nargs;\n\tvar args;\n\tvar i;\n\n\tnargs = arguments.length;\n\tif ( nargs === 0 ) {\n\t\treturn PINF;\n\t}\n\tif ( nargs === 2 ) {\n\t\treturn minn( abs( x ), abs( y ) );\n\t}\n\targs = [];\n\tfor ( i = 0; i < nargs; i++ ) {\n\t\targs.push( abs( arguments[ i ] ) );\n\t}\n\treturn minn.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default minabsn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport abs from '@stdlib/math-base-special-abs';\nimport MAX_FIBONACCI from '@stdlib/constants-float64-max-safe-nth-fibonacci';\nimport NEGAFIBONACCI from './negafibonacci.json';\n\n\n// MAIN //\n\n/**\n* Computes the nth negaFibonacci number.\n*\n* @param {NonPositiveInteger} n - the negaFibonacci number to compute\n* @returns {integer} negaFibonacci number\n*\n* @example\n* var y = negafibonacci( 0 );\n* // returns 0\n*\n* @example\n* var y = negafibonacci( -1 );\n* // returns 1\n*\n* @example\n* var y = negafibonacci( -2 );\n* // returns -1\n*\n* @example\n* var y = negafibonacci( -3 );\n* // returns 2\n*\n* @example\n* var y = negafibonacci( -4 );\n* // returns -3\n*\n* @example\n* var y = negafibonacci( -5 );\n* // returns 5\n*\n* @example\n* var y = negafibonacci( -6 );\n* // returns -8\n*\n* @example\n* var y = negafibonacci( NaN );\n* // returns NaN\n*\n* @example\n* var y = negafibonacci( -3.14 );\n* // returns NaN\n*/\nfunction negafibonacci( n ) {\n\tvar an;\n\tif (\n\t\tisnan( n ) ||\n\t\tisInteger( n ) === false ||\n\t\tn > 0\n\t) {\n\t\treturn NaN;\n\t}\n\tan = abs( n );\n\tif ( an > MAX_FIBONACCI ) {\n\t\treturn NaN;\n\t}\n\treturn NEGAFIBONACCI[ an ];\n}\n\n\n// EXPORTS //\n\nexport default negafibonacci;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport abs from '@stdlib/math-base-special-abs';\nimport MAX_LUCAS from '@stdlib/constants-float64-max-safe-nth-lucas';\nimport NEGALUCAS from './negalucas.json';\n\n\n// MAIN //\n\n/**\n* Computes the nth negaLucas number.\n*\n* @param {NonPositiveInteger} n - the negaLucas number to compute\n* @returns {integer} negaLucas number\n*\n* @example\n* var y = negalucas( 0 );\n* // returns 2\n*\n* @example\n* var y = negalucas( -1 );\n* // returns -1\n*\n* @example\n* var y = negalucas( -2 );\n* // returns 3\n*\n* @example\n* var y = negalucas( -3 );\n* // returns -4\n*\n* @example\n* var y = negalucas( -4 );\n* // returns 7\n*\n* @example\n* var y = negalucas( -5 );\n* // returns -11\n*\n* @example\n* var y = negalucas( -6 );\n* // returns 18\n*\n* @example\n* var y = negalucas( NaN );\n* // returns NaN\n*\n* @example\n* var y = negalucas( -3.14 );\n* // returns NaN\n*/\nfunction negalucas( n ) {\n\tvar an;\n\tif (\n\t\tisnan( n ) ||\n\t\tisInteger( n ) === false ||\n\t\tn > 0\n\t) {\n\t\treturn NaN;\n\t}\n\tan = abs( n );\n\tif ( an > MAX_LUCAS ) {\n\t\treturn NaN;\n\t}\n\treturn NEGALUCAS[ an ];\n}\n\n\n// EXPORTS //\n\nexport default negalucas;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the positive difference between `x` and `y` if `x > y`; otherwise, returns `0`.\n*\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {number} positive difference\n*\n* @example\n* var v = pdiff( 5.9, 3.14 );\n* // returns 2.76\n*\n* @example\n* var v = pdiff( 3.14, 4.2 );\n* // returns 0.0\n*\n* @example\n* var v = pdiff( 3.14, NaN );\n* // returns NaN\n*\n* @example\n* var v = pdiff( -0.0, +0.0 );\n* // returns +0.0\n*/\nfunction pdiff( x, y ) {\n\tif ( isnan( x ) || isnan( y ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x > y ) {\n\t\treturn x - y;\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default pdiff;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\n\n\n// MAIN //\n\n/**\n* Returns the positive difference between `x` and `y` if `x > y`; otherwise, returns `0`.\n*\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {number} positive difference\n*\n* @example\n* var v = pdifff( 5.9, 3.15 );\n* // returns 2.75\n*\n* @example\n* var v = pdifff( 3.14, 4.2 );\n* // returns 0.0\n*\n* @example\n* var v = pdifff( 3.14, NaN );\n* // returns NaN\n*\n* @example\n* var v = pdifff( -0.0, +0.0 );\n* // returns +0.0\n*/\nfunction pdifff( x, y ) {\n\tif ( isnanf( x ) || isnanf( y ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x > y ) {\n\t\treturn float64ToFloat32( float64ToFloat32(x) - float64ToFloat32(y) );\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default pdifff;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\n// 180.0 / π\nvar CONST_180_DIV_PI = 57.29577951308232;\n\n\n// MAIN //\n\n/**\n* Converts an angle from radians to degrees.\n*\n* @param {number} x - angle in radians\n* @returns {number} angle in degrees\n*\n* @example\n* var d = rad2deg( 3.141592653589793/2.0 );\n* // returns 90.0\n*\n* @example\n* var d = rad2deg( -3.141592653589793/4.0 );\n* // returns -45.0\n*\n* @example\n* var d = rad2deg( NaN );\n* // returns NaN\n*/\nfunction rad2deg( x ) {\n\treturn x * CONST_180_DIV_PI;\n}\n\n\n// EXPORTS //\n\nexport default rad2deg;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the ramp function.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = ramp( 3.14 );\n* // returns 3.14\n*\n* @example\n* var v = ramp( -3.14 );\n* // returns 0.0\n*\n* @example\n* var v = ramp( NaN );\n* // returns NaN\n*/\nfunction ramp( x ) {\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x > 0.0 ) {\n\t\treturn x;\n\t}\n\treturn 0.0; // handles `-0`\n}\n\n\n// EXPORTS //\n\nexport default ramp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\n\n\n// MAIN //\n\n/**\n* Evaluates the ramp function (single-precision).\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = rampf( 3.0 );\n* // returns 3.0\n*\n* @example\n* var v = rampf( -3.0 );\n* // returns 0.0\n*\n* @example\n* var v = rampf( NaN );\n* // returns NaN\n*/\nfunction rampf( x ) {\n\tif ( isnanf( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x > 0.0 ) {\n\t\treturn x;\n\t}\n\treturn 0.0; // handles `-0`\n}\n\n\n// EXPORTS //\n\nexport default rampf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cbrt from '@stdlib/math-base-special-cbrt';\n\n\n// MAIN //\n\n/**\n* Compute the reciprocal cube root of a double-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {number} reciprocal cube root\n*\n* @example\n* var v = rcbrt( 8.0 );\n* // returns 0.5\n*\n* @example\n* var v = rcbrt( 1000.0 );\n* // returns 0.1\n*\n* @example\n* var v = rcbrt( 0.0 );\n* // returns Infinity\n*\n* @example\n* var v = rcbrt( Infinity );\n* // returns 0.0\n*\n* @example\n* var v = rcbrt( -8.0 );\n* // returns -0.5\n*\n* @example\n* var v = rcbrt( NaN );\n* // returns NaN\n*/\nfunction rcbrt( x ) {\n\treturn 1.0 / cbrt( x );\n}\n\n\n// EXPORTS //\n\nexport default rcbrt;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/factorials.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006, 2010.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport gammaDeltaRatio from '@stdlib/math-base-special-gamma-delta-ratio';\nimport fallingFactorial from '@stdlib/math-base-special-falling-factorial';\n\n\n// MAIN //\n\n/**\n* Computes the rising factorial of `x` and `n`.\n*\n* ## Notes\n*\n* -   The rising factorial is defined as\n*\n*     ```tex\n*     \\operatorname{risingFactorial}(x, n) = x (x-1) (x-2) (x-3) \\ldots (x-n+1)\n*     ```\n*\n*     or equivalently\n*\n*     ```tex\n*     \\operatorname{risingFactorial}(x, n) = \\frac{ \\Gamma(x + n) }{ \\Gamma(x) };\n*     ```\n*\n* @param {number} x - first function parameter\n* @param {integer} n - second function parameter\n* @returns {number} function value\n*\n* @example\n* var v = risingFactorial( 0.9, 5 );\n* // returns ~94.766\n*\n* @example\n* var v = risingFactorial( -9.0, 3 );\n* // returns -504.0\n*\n* @example\n* var v = risingFactorial( 0.0, 2 );\n* // returns 0.0\n*\n* @example\n* var v = risingFactorial( 3.0, -2 );\n* // returns 0.5\n*/\nfunction risingFactorial( x, n ) {\n\tvar result;\n\tvar inv;\n\n\tif ( isnan( x ) || !isInteger( n ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\t// For `x < 0`, we really have a falling factorial, modulo a possible change of sign. Note that the falling factorial isn't defined for negative `n`, so we'll get rid of that case first:\n\t\tif ( n < 0.0 ) {\n\t\t\tx += n;\n\t\t\tn = -n;\n\t\t\tinv = true;\n\t\t}\n\t\tresult = ( (n&1) ? -1.0 : 1.0 ) * fallingFactorial( -x, n );\n\t\tif ( inv ) {\n\t\t\tresult = 1.0 / result;\n\t\t}\n\t\treturn result;\n\t}\n\tif ( n === 0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x === 0.0 ) {\n\t\tif ( n < 0 ) {\n\t\t\treturn -gammaDeltaRatio( x+1.0, -n );\n\t\t}\n\t\treturn 0.0;\n\t}\n\tif ( x < 1.0 && x+n < 0.0 ) {\n\t\tresult = gammaDeltaRatio( 1.0-x, -n );\n\t\treturn ( n&1 ) ? -result : result;\n\t}\n\t// We don't optimize this for small `n`, because `gammaDeltaRatio` is already optimized for that use case:\n\treturn 1.0 / gammaDeltaRatio( x, n );\n}\n\n\n// EXPORTS //\n\nexport default risingFactorial;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport pow from '@stdlib/math-base-special-pow';\nimport floor from '@stdlib/math-base-special-floor';\nimport ceil from '@stdlib/math-base-special-ceil';\nimport log10 from '@stdlib/math-base-special-log10';\nimport MAX_EXP from '@stdlib/constants-float64-max-base10-exponent';\nimport MIN_EXP_SUBNORMAL from '@stdlib/constants-float64-min-base10-exponent-subnormal';\n\n\n// VARIABLES //\n\n// 10^308:\nvar HUGE = 1.0e308;\n\n// 10^-323\nvar TINY = 1.0e-323;\n\n\n// MAIN //\n\n/**\n* Rounds a numeric value to the nearest power of `10` on a linear scale.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = round10( 3.141592653589793 );\n* // returns 1.0\n*\n* @example\n* var v = round10( 13.0 );\n* // returns 10.0\n*\n* @example\n* var v = round10( -0.314 );\n* // returns -0.1\n*/\nfunction round10( x ) {\n\tvar sign;\n\tvar half;\n\tvar p1;\n\tvar p2;\n\tvar y1;\n\tvar y2;\n\tvar p;\n\tif (\n\t\tisnan( x ) ||\n\t\tisInfinite( x ) ||\n\t\tx === 0.0\n\t) {\n\t\treturn x;\n\t}\n\tif ( x < 0 ) {\n\t\tx = -x;\n\t\tsign = -1.0;\n\t} else {\n\t\tsign = 1.0;\n\t}\n\t// Solve the equation `10^p = x` for `p`:\n\tp = log10( x );\n\n\t// Find the previous and next integer powers:\n\tp1 = floor( p );\n\tp2 = ceil( p );\n\n\t// Handle tiny:\n\tif ( p1 === MIN_EXP_SUBNORMAL ) {\n\t\treturn sign * TINY;\n\t}\n\t// Handle huge:\n\tif ( p1 === MAX_EXP ) {\n\t\treturn sign * HUGE;\n\t}\n\t// Compute previous and next powers of 10:\n\ty1 = pow( 10.0, p1 );\n\ty2 = pow( 10.0, p2 );\n\n\t// Find the closest power of 10:\n\thalf = ( y2 - y1 ) / 2.0;\n\tif ( y1+half > x ) {\n\t\treturn sign * y1;\n\t}\n\treturn sign * y2;\n}\n\n\n// EXPORTS //\n\nexport default round10;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport pow from '@stdlib/math-base-special-pow';\nimport round from '@stdlib/math-base-special-round';\nimport roundn from '@stdlib/math-base-special-roundn';\n\n\n// MAIN //\n\n/**\n* Rounds a numeric value to the nearest multiple of \\\\(b^n\\\\) on a linear scale.\n*\n* @param {number} x - input value\n* @param {integer} n - integer power\n* @param {PositiveInteger} b - base\n* @returns {number} rounded value\n*\n* @example\n* // Round a value to 2 decimal places:\n* var v = roundb( 3.141592653589793, -2, 10 );\n* // returns 3.14\n*\n* @example\n* // If n = 0 or b = 1, `roundb` behaves like `round`:\n* var v = roundb( 3.141592653589793, 0, 2 );\n* // returns 3.0\n*\n* @example\n* // Round a value to the nearest multiple of two:\n* var v = roundb( 5.0, 1, 2 );\n* // returns 6.0\n*/\nfunction roundb( x, n, b ) {\n\tvar y;\n\tvar s;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( n ) ||\n\t\tisnan( b ) ||\n\t\tb <= 0 ||\n\t\tisInfinite( n ) ||\n\t\tisInfinite( b )\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( isInfinite( x ) || x === 0.0 ) {\n\t\treturn x;\n\t}\n\tif ( b === 10 ) {\n\t\treturn roundn( x, n );\n\t}\n\tif ( n === 0 || b === 1 ) {\n\t\treturn round( x );\n\t}\n\ts = pow( b, -n );\n\n\t// Check for overflow:\n\tif ( isInfinite( s ) ) {\n\t\treturn x;\n\t}\n\ty = round( x * s ) / s;\n\n\t// Check for overflow:\n\tif ( isInfinite( y ) ) {\n\t\treturn x;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default roundb;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport pow from '@stdlib/math-base-special-pow';\nimport log10 from '@stdlib/math-base-special-log10';\nimport ln from '@stdlib/math-base-special-ln';\nimport abs from '@stdlib/math-base-special-abs';\nimport floor from '@stdlib/math-base-special-floor';\nimport exponent from '@stdlib/number-float64-base-exponent';\nimport round from '@stdlib/math-base-special-round';\n\n\n// MAIN //\n\n/**\n* Rounds a numeric value to the nearest number with \\\\(n\\\\) significant figures.\n*\n* @param {number} x - input value\n* @param {PositiveInteger} n - number of significant figures\n* @param {PositiveInteger} [b=10] - base\n* @returns {number} rounded value\n*\n* @example\n* var v = roundsd( 3.141592653589793, 3 );\n* // returns 3.14\n*\n* @example\n* var v = roundsd( 3.141592653589793, 1 );\n* // returns 3.0\n*\n* @example\n* var v = roundsd( 12368.0, 2 );\n* // returns 12000.0\n*\n* @example\n* var v = roundsd( 0.0313, 2, 2 );\n* // returns 0.03125\n*/\nfunction roundsd( x, n, b ) {\n\tvar base;\n\tvar exp;\n\tvar s;\n\tvar y;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( n ) ||\n\t\tn < 1 ||\n\t\tisInfinite( n )\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif (\n\t\t\tisnan( b ) ||\n\t\t\tb <= 0 ||\n\t\t\tisInfinite( b )\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\tbase = b;\n\t} else {\n\t\tbase = 10;\n\t}\n\tif ( isInfinite( x ) || x === 0.0 ) {\n\t\treturn x;\n\t}\n\tif ( base === 10 ) {\n\t\texp = log10( abs( x ) );\n\t}\n\telse if ( base === 2 ) {\n\t\texp = exponent( abs( x ) );\n\t}\n\telse {\n\t\texp = ln( abs(x) ) / ln( base );\n\t}\n\texp = floor( exp - n + 1.0 );\n\ts = pow( base, abs( exp ) );\n\n\t// Check for overflow:\n\tif ( isInfinite( s ) ) {\n\t\treturn x;\n\t}\n\t// To avoid numerical stability issues due to floating-point rounding error (e.g., 3.55/0.1-35.5 = -7.105427357601e-15 and 3.55*10-35.5 = 0), we must treat positive and negative exponents separately.\n\tif ( exp < 0 ) {\n\t\ty = round( x * s ) / s;\n\t} else {\n\t\ty = round( x / s ) * s;\n\t}\n\t// Check for overflow:\n\tif ( isInfinite( y ) ) {\n\t\treturn x;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default roundsd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Compute the reciprocal square root of a double-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {number} reciprocal square root\n*\n* @example\n* var v = rsqrt( 4.0 );\n* // returns 0.5\n*\n* @example\n* var v = rsqrt( 100.0 );\n* // returns 0.1\n*\n* @example\n* var v = rsqrt( 0.0 );\n* // returns Infinity\n*\n* @example\n* var v = rsqrt( Infinity );\n* // returns 0.0\n*\n* @example\n* var v = rsqrt( -4.0 );\n* // returns NaN\n*\n* @example\n* var v = rsqrt( NaN );\n* // returns NaN\n*/\nfunction rsqrt( x ) {\n\treturn 1.0 / sqrt( x );\n}\n\n\n// EXPORTS //\n\nexport default rsqrt;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Compute the reciprocal square root of a single-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {number} reciprocal square root\n*\n* @example\n* var v = rsqrtf( 4.0 );\n* // returns 0.5\n*\n* @example\n* var v = rsqrtf( 0.0 );\n* // returns Infinity\n*\n* @example\n* var v = rsqrtf( Infinity );\n* // returns 0.0\n*\n* @example\n* var v = rsqrtf( -4.0 );\n* // returns NaN\n*\n* @example\n* var v = rsqrtf( NaN );\n* // returns NaN\n*/\nfunction rsqrtf( x ) {\n\treturn float64ToFloat32( 1.0 / sqrt( float64ToFloat32( x ) ) );\n}\n\n\n// EXPORTS //\n\nexport default rsqrtf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\n\n\n// MAIN //\n\n/**\n* Evaluates the signum function for a single-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var sign = signumf( -5.0 );\n* // returns -1.0\n*\n* @example\n* var sign = signumf( 5.0 );\n* // returns 1.0\n*\n* @example\n* var sign = signumf( -0.0 );\n* // returns -0.0\n*\n* @example\n* var sign = signumf( 0.0 );\n* // returns 0.0\n*\n* @example\n* var sign = signumf( NaN );\n* // returns NaN\n*/\nfunction signumf( x ) {\n\tif ( x === 0.0 || isnanf( x ) ) {\n\t\treturn x; // addresses both +-0\n\t}\n\treturn ( x < 0.0 ) ? -1.0 : 1.0;\n}\n\n\n// EXPORTS //\n\nexport default signumf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sinpi from '@stdlib/math-base-special-sinpi';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Computes the normalized cardinal sine of a number.\n*\n* ## Method\n*\n* For \\\\( x \\neq 0 \\\\), the normalized cardinal sine is calculated as\n*\n* ```tex\n* \\operatorname{sinc}(x) = \\frac{\\operatorname{sin}(\\pi x)}{\\pi x}.\n* ```\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{sinc}(0) &= 1 & \\\\\n* \\operatorname{sinc}(\\infty) &= 0 & \\\\\n* \\operatorname{sinc}(-\\infty) &= 0 & \\\\\n* \\operatorname{sinc}(\\mathrm{NaN}) &= \\mathrm{NaN}\n* \\end{align*}\n* ```\n*\n* @param {number} x - input value\n* @returns {number} cardinal sine\n*\n* @example\n* var v = sinc( 0.5 );\n* // returns ~0.637\n*\n* @example\n* var v = sinc( -1.2 );\n* // returns ~-0.156\n*\n* @example\n* var v = sinc( 0.0 );\n* // returns 1.0\n*\n* @example\n* var v = sinc( NaN );\n* // returns NaN\n*/\nfunction sinc( x ) {\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( isInfinite( x ) ) {\n\t\treturn 0.0;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\treturn sinpi( x ) / ( PI*x );\n}\n\n\n// EXPORTS //\n\nexport default sinc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1985, 1987, 1989, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport PI_SQUARED from '@stdlib/constants-float64-pi-squared';\nimport polyvalA from './polyval_a.js';\nimport polyvalB from './polyval_b.js';\n\n\n// MAIN //\n\n/**\n* Evaluates Spence’s function, which is also known as the dilogarithm.\n*\n* ## Method\n*\n* -   A rational approximation gives the integral in the interval (0.5, 1.5).\n* -   Transformation formulas for \\\\( \\tfrac{1}{x} \\\\) and \\\\( 1 - x \\\\) are employed outside the basic expansion range.\n*\n* ## Notes\n*\n* -   Relative error:\n*\n*     | arithmetic | domain      | # trials | peak    | rms     |\n*     |:----------:|:-----------:|:--------:|:-------:|:-------:|\n*     | IEEE       | 0,4         | 30000    | 3.9e-15 | 5.4e-16 |\n*\n* @param {NonNegativeNumber} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = spence( 3.0 );\n* // returns ~-1.437\n*\n* @example\n* var v = spence( 0.0 );\n* // returns ~1.645\n*\n* @example\n* var v = spence( -9.0 );\n* // returns NaN\n*\n* @example\n* var v = spence( NaN );\n* // returns NaN\n*/\nfunction spence( x ) {\n\tvar flg;\n\tvar w;\n\tvar y;\n\tvar z;\n\n\tif ( isnan( x ) || x < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x === 1.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn ( PI_SQUARED / 6.0 );\n\t}\n\tflg = 0;\n\tif ( x > 2.0 ) {\n\t\tx = 1.0 / x;\n\t\tflg |= 2;\n\t}\n\tif ( x > 1.5 ) {\n\t\tw = (1.0 / x) - 1.0;\n\t\tflg |= 2;\n\t}\n\telse if ( x < 0.5 ) {\n\t\tw = -x;\n\t\tflg |= 1;\n\t}\n\telse {\n\t\tw = x - 1.0;\n\t}\n\ty = -w * polyvalA( w ) / polyvalB( w );\n\tif ( flg & 1 ) {\n\t\ty = ( PI_SQUARED/6.0 ) - ( ln( x ) * ln( 1.0-x ) ) - y;\n\t}\n\tif ( flg & 2 ) {\n\t\tz = ln( x );\n\t\ty = -( 0.5 * z * z ) - y;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default spence;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\treturn 1.0 + (x * (3.297713409852251 + (x * (4.256971560081218 + (x * (2.7114985119655346 + (x * (0.8796913117545303 + (x * (0.13384763957830903 + (x * (0.007315890452380947 + (x * 0.000046512858607399003))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\treturn 1.0 + (x * (3.547713409852251 + (x * (5.03278880143317 + (x * (3.6380053334513707 + (x * (1.4117259775183106 + (x * (0.2829748606025681 + (x * (0.02540437639325444 + (x * 0.0006909904889125533))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link https://github.com/boostorg/math/blob/fa1896fbc4c6fadc167307342ceb20bf2b6c0688/include/boost/math/special_functions/sqrt1pm1.hpp}. This implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\n\n\n// MAIN //\n\n/**\n* Computes the value of `sqrt(1+x)-1`.\n*\n* @param {number} x - input value\n* @returns {number} square root of `1+x` minus one\n*\n* @example\n* var v = sqrt1pm1( 3.0 );\n* // returns 1.0\n*\n* @example\n* var v = sqrt1pm1( 0.5 );\n* // returns ~0.225\n*\n* @example\n* var v = sqrt1pm1( 0.02 );\n* // returns ~0.01\n*\n* @example\n* var v = sqrt1pm1( -0.5 );\n* // returns ~-0.293\n*\n* @example\n* var v = sqrt1pm1( -1.1 );\n* // returns NaN\n*\n* @example\n* var v = sqrt1pm1( NaN );\n* // returns NaN\n*/\nfunction sqrt1pm1( x ) {\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( abs( x ) > 0.75 ) {\n\t\treturn sqrt( 1.0+x ) - 1.0;\n\t}\n\treturn expm1( log1p( x ) / 2.0 );\n}\n\n\n// EXPORTS //\n\nexport default sqrt1pm1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Compute the principal square root of a single-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {number} principal square root\n*\n* @example\n* var v = sqrtf( 4.0 );\n* // returns 2.0\n*\n* v = sqrtf( 9.0 );\n* // returns 3.0\n*\n* v = sqrtf( 0.0 );\n* // returns 0.0\n*\n* v = sqrtf( -4.0 );\n* // returns NaN\n*\n* v = sqrtf( NaN );\n* // returns NaN\n*/\nfunction sqrtf( x ) {\n\treturn float64ToFloat32( sqrt( float64ToFloat32( x ) ) );\n}\n\n\n// EXPORTS //\n\nexport default sqrtf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Computes the principal square root of the product of 𝛑 and a positive double-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {number} result\n*\n* @example\n* var v = sqrtpi( 4.0 );\n* // returns ~3.5449\n*\n* v = sqrtpi( 10.0 );\n* // returns ~5.60499\n*\n* v = sqrtpi( 0.0 );\n* // returns 0.0\n*\n* v = sqrtpi( -4.0 );\n* // returns NaN\n*\n* v = sqrtpi( NaN );\n* // returns NaN\n*/\nfunction sqrtpi( x ) {\n\treturn sqrt( x * PI );\n}\n\n\n// EXPORTS //\n\nexport default sqrtpi;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport TRIBONACCI from './tribonacci.json';\n\n\n// VARIABLES //\n\nvar MAX_TRIBONACCI = 63;\n\n\n// MAIN //\n\n/**\n* Computes the nth Tribonacci number.\n*\n* @param {NonNegativeInteger} n - the Tribonacci number to compute\n* @returns {NonNegativeInteger} Tribonacci number\n*\n* @example\n* var y = tribonacci( 0 );\n* // returns 0\n*\n* @example\n* var y = tribonacci( 1 );\n* // returns 0\n*\n* @example\n* var y = tribonacci( 2 );\n* // returns 1\n*\n* @example\n* var y = tribonacci( 3 );\n* // returns 1\n*\n* @example\n* var y = tribonacci( 4 );\n* // returns 2\n*\n* @example\n* var y = tribonacci( 5 );\n* // returns 4\n*\n* @example\n* var y = tribonacci( 6 );\n* // returns 7\n*\n* @example\n* var y = tribonacci( NaN );\n* // returns NaN\n*\n* @example\n* var y = tribonacci( 3.14 );\n* // returns NaN\n*\n* @example\n* var y = tribonacci( -1.0 );\n* // returns NaN\n*/\nfunction tribonacci( n ) {\n\tif (\n\t\tisnan( n ) ||\n\t\tisInteger( n ) === false ||\n\t\tn < 0 ||\n\t\tn > MAX_TRIBONACCI\n\t) {\n\t\treturn NaN;\n\t}\n\treturn TRIBONACCI[ n ];\n}\n\n\n// EXPORTS //\n\nexport default tribonacci;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport pow from '@stdlib/math-base-special-pow';\nimport floor from '@stdlib/math-base-special-floor';\nimport log2 from '@stdlib/math-base-special-log2';\n\n\n// MAIN //\n\n/**\n* Rounds a numeric value to the nearest power of two toward zero.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = trunc2( 3.141592653589793 );\n* // returns 2.0\n*\n* @example\n* var v = trunc2( 13.0 );\n* // returns 8.0\n*\n* @example\n* var v = trunc2( -0.314 );\n* // returns -0.25\n*/\nfunction trunc2( x ) {\n\tvar sign;\n\tif (\n\t\tisnan( x ) ||\n\t\tisInfinite( x ) ||\n\t\tx === 0.0\n\t) {\n\t\treturn x;\n\t}\n\tif ( x < 0 ) {\n\t\tx = -x;\n\t\tsign = -1.0;\n\t} else {\n\t\tsign = 1.0;\n\t}\n\treturn sign * pow( 2.0, floor( log2( x ) ) );\n}\n\n\n// EXPORTS //\n\nexport default trunc2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport pow from '@stdlib/math-base-special-pow';\nimport floor from '@stdlib/math-base-special-floor';\nimport log10 from '@stdlib/math-base-special-log10';\n\n\n// MAIN //\n\n/**\n* Rounds a numeric value to the nearest power of `10` toward zero.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = trunc10( 3.141592653589793 );\n* // returns 1.0\n*\n* @example\n* var v = trunc10( 13.0 );\n* // returns 10.0\n*\n* @example\n* var v = trunc10( -0.314 );\n* // returns -0.1\n*/\nfunction trunc10( x ) {\n\tvar sign;\n\tif (\n\t\tisnan( x ) ||\n\t\tisInfinite( x ) ||\n\t\tx === 0.0\n\t) {\n\t\treturn x;\n\t}\n\tif ( x < 0 ) {\n\t\tx = -x;\n\t\tsign = -1.0;\n\t} else {\n\t\tsign = 1.0;\n\t}\n\treturn sign * pow( 10.0, floor( log10( x ) ) );\n}\n\n\n// EXPORTS //\n\nexport default trunc10;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport pow from '@stdlib/math-base-special-pow';\nimport trunc from '@stdlib/math-base-special-trunc';\nimport truncn from '@stdlib/math-base-special-truncn';\n\n\n// MAIN //\n\n/**\n* Rounds a numeric value to the nearest multiple of \\\\(b^n\\\\) toward zero.\n*\n* @param {number} x - input value\n* @param {integer} n - integer power\n* @param {PositiveInteger} b - base\n* @returns {number} rounded value\n*\n* @example\n* // Round a value to 4 decimal places:\n* var v = truncb( 3.141592653589793, -4, 10 );\n* // returns 3.1415\n*\n* @example\n* // If n = 0 or b = 1, `truncb` behaves like `trunc`:\n* var v = truncb( 3.141592653589793, 0, 2 );\n* // returns 3.0\n*\n* @example\n* // Round a value to the nearest multiple of two toward zero:\n* var v = truncb( 5.0, 1, 2 );\n* // returns 4.0\n*/\nfunction truncb( x, n, b ) {\n\tvar y;\n\tvar s;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( n ) ||\n\t\tisnan( b ) ||\n\t\tb <= 0 ||\n\t\tisInfinite( n ) ||\n\t\tisInfinite( b )\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( isInfinite( x ) || x === 0.0 ) {\n\t\treturn x;\n\t}\n\tif ( b === 10 ) {\n\t\treturn truncn( x, n );\n\t}\n\tif ( n === 0 || b === 1 ) {\n\t\treturn trunc( x );\n\t}\n\ts = pow( b, -n );\n\n\t// Check for overflow:\n\tif ( isInfinite( s ) ) {\n\t\treturn x;\n\t}\n\ty = trunc( x*s ) / s;\n\n\t// Check for overflow:\n\tif ( isInfinite( y ) ) {\n\t\treturn x;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default truncb;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floorf from '@stdlib/math-base-special-floorf';\nimport ceilf from '@stdlib/math-base-special-ceilf';\n\n\n// MAIN //\n\n/**\n* Rounds a single-precision floating-point number toward zero.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = truncf( -4.2 );\n* // returns -4.0\n*\n* @example\n* var v = truncf( 9.99999 );\n* // returns 9.0\n*\n* @example\n* var v = truncf( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = truncf( -0.0 );\n* // returns -0.0\n*\n* @example\n* var v = truncf( NaN );\n* // returns NaN\n*\n* @example\n* var v = truncf( Infinity );\n* // returns Infinity\n*\n* @example\n* var v = truncf( -Infinity );\n* // returns -Infinity\n*/\nfunction truncf( x ) {\n\tif ( x < 0.0 ) {\n\t\treturn ceilf( x );\n\t}\n\treturn floorf( x );\n}\n\n\n// EXPORTS //\n\nexport default truncf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport pow from '@stdlib/math-base-special-pow';\nimport log10 from '@stdlib/math-base-special-log10';\nimport ln from '@stdlib/math-base-special-ln';\nimport abs from '@stdlib/math-base-special-abs';\nimport floor from '@stdlib/math-base-special-floor';\nimport exponent from '@stdlib/number-float64-base-exponent';\nimport trunc from '@stdlib/math-base-special-trunc';\n\n\n// MAIN //\n\n/**\n* Rounds a numeric value to the nearest number toward zero with \\\\(n\\\\) significant figures.\n*\n* @param {number} x - input value\n* @param {PositiveInteger} n - number of significant figures\n* @param {PositiveInteger} [b=10] - base\n* @returns {number} rounded value\n*\n* @example\n* var v = truncsd( 3.141592653589793, 5 );\n* // returns 3.1415\n*\n* @example\n* var v = truncsd( 3.141592653589793, 1 );\n* // returns 3.0\n*\n* @example\n* var v = truncsd( 12368.0, 2 );\n* // returns 12000.0\n*\n* @example\n* var v = truncsd( 0.0313, 2, 2 );\n* // returns 0.03125\n*/\nfunction truncsd( x, n, b ) {\n\tvar base;\n\tvar exp;\n\tvar s;\n\tvar y;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( n ) ||\n\t\tn < 1 ||\n\t\tisInfinite( n )\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif (\n\t\t\tisnan( b ) ||\n\t\t\tb <= 0 ||\n\t\t\tisInfinite( b )\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\tbase = b;\n\t} else {\n\t\tbase = 10;\n\t}\n\tif ( isInfinite( x ) || x === 0.0 ) {\n\t\treturn x;\n\t}\n\tif ( base === 10 ) {\n\t\texp = log10( abs( x ) );\n\t}\n\telse if ( base === 2 ) {\n\t\texp = exponent( abs( x ) );\n\t}\n\telse {\n\t\texp = ln( abs(x) ) / ln( base );\n\t}\n\texp = floor( exp - n + 1.0 );\n\ts = pow( base, abs( exp ) );\n\n\t// Check for overflow:\n\tif ( isInfinite( s ) ) {\n\t\treturn x;\n\t}\n\t// To avoid numerical stability issues due to floating-point rounding error (e.g., 3.55/0.1-35.5 = -7.105427357601e-15 and 3.55*10-35.5 = 0), we must treat positive and negative exponents separately.\n\tif ( exp < 0 ) {\n\t\ty = trunc( x * s ) / s;\n\t} else {\n\t\ty = trunc( x / s ) * s;\n\t}\n\t// Check for overflow:\n\tif ( isInfinite( y ) ) {\n\t\treturn x;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default truncsd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cos from '@stdlib/math-base-special-cos';\n\n\n// MAIN //\n\n/**\n* Computes the versed cosine.\n*\n* @param {number} x - input value (in radians)\n* @returns {number} versed cosine\n*\n* @example\n* var v = vercos( 0.0 );\n* // returns 2.0\n*\n* @example\n* var v = vercos( 3.141592653589793/2.0 );\n* // returns 1.0\n*\n* @example\n* var v = vercos( -3.141592653589793/6.0 );\n* // returns ~1.8660\n*\n* @example\n* var v = vercos( NaN );\n* // returns NaN\n*/\nfunction vercos( x ) {\n\treturn 1.0 + cos( x );\n}\n\n\n// EXPORTS //\n\nexport default vercos;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cos from '@stdlib/math-base-special-cos';\n\n\n// MAIN //\n\n/**\n* Computes the versed sine.\n*\n* @param {number} x - input value (in radians)\n* @returns {number} versed sine\n*\n* @example\n* var v = versin( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = versin( 3.141592653589793/2.0 );\n* // returns ~1.0\n*\n* @example\n* var v = versin( -3.141592653589793/6.0 );\n* // returns ~0.13397\n*\n* @example\n* var v = versin( NaN );\n* // returns NaN\n*/\nfunction versin( x ) {\n\treturn 1.0 - cos( x );\n}\n\n\n// EXPORTS //\n\nexport default versin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport trunc from '@stdlib/math-base-special-trunc';\n\n\n// MAIN //\n\n/**\n* Wraps a value on the half-open interval `[min,max)`.\n*\n* @param {number} v - input value\n* @param {number} min - minimum value\n* @param {number} max - maximum value\n* @returns {number} wrapped value\n*\n* @example\n* var v = wrap( 3.14, 0.0, 5.0 );\n* // returns 3.14\n*\n* v = wrap( -3.14, 0.0, 5.0 );\n* // returns ~1.86\n*\n* v = wrap( 10.0, 0.0, 5.0 );\n* // returns 0.0\n*\n* v = wrap( -0.0, 0.0, 5.0 );\n* // returns 0.0\n*\n* v = wrap( 0.0, -0.0, 5.0 );\n* // returns 0.0\n*\n* v = wrap( NaN, 0.0, 5.0 );\n* // returns NaN\n*\n* v = wrap( 0.0, NaN, 5.0 );\n* // returns NaN\n*\n* v = wrap( 3.14, 0.0, NaN );\n* // returns NaN\n*\n* v = wrap( 3.14, 5.0, 0.0 );\n* // returns NaN\n*/\nfunction wrap( v, min, max ) {\n\tvar delta;\n\tif (\n\t\tisnan( v ) ||\n\t\tisnan( min ) ||\n\t\tisnan( max ) ||\n\t\tmax <= min\n\t) {\n\t\treturn NaN;\n\t}\n\t// Normalize +-0 to +0...\n\tif ( v === 0.0 ) {\n\t\tv = 0.0;\n\t}\n\tif ( min === 0.0 ) {\n\t\tmin = 0.0;\n\t}\n\tif ( max === 0.0 ) {\n\t\tmax = 0.0;\n\t}\n\t// Simple case where value is already within range...\n\tif ( min <= v && v < max ) {\n\t\treturn v;\n\t}\n\t// Perform range reduction...\n\tdelta = max - min;\n\tif ( v < min ) {\n\t\tv += delta * ( trunc( (min-v)/delta ) + 1.0 );\n\t}\n\treturn min + ( (v-min) % delta );\n}\n\n\n// EXPORTS //\n\nexport default wrap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\n\n\n// MAIN //\n\n/**\n* Computes `x * ln(y+1)` so that the result is `0` if `x = 0`.\n*\n* @param {number} x - input value\n* @param {number} y - input value\n* @returns {number} function value\n*\n* @example\n* var out = xlog1py( 3.0, 2.0 );\n* // returns ~3.296\n*\n* @example\n* var out = xlog1py( 1.5, 5.9 );\n* // returns ~2.897\n*\n* @example\n* var out = xlog1py( 0.9, 1.0 );\n* // returns ~0.624\n*\n* @example\n* var out = xlog1py( 1.0, 0.0 );\n* // returns 0.0\n*\n* @example\n* var out = xlog1py( 0.0, -2.0 );\n* // returns 0.0\n*\n* @example\n* var out = xlog1py( 1.5, NaN );\n* // returns NaN\n*\n* @example\n* var out = xlog1py( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var out = xlog1py( NaN, 2.3 );\n* // returns NaN\n*/\nfunction xlog1py( x, y ) {\n\tif ( x === 0.0 && !isnan( y ) ) {\n\t\treturn 0.0;\n\t}\n\treturn x * log1p( y );\n}\n\n\n// EXPORTS //\n\nexport default xlog1py;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Computes `x * ln(y)` so that the result is `0` if `x = 0`.\n*\n* @param {number} x - input value\n* @param {number} y - input value\n* @returns {number} function value\n*\n* @example\n* var out = xlogy( 3.0, 2.0 );\n* // returns ~2.079\n*\n* @example\n* var out = xlogy( 1.5, 5.9 );\n* // returns ~2.662\n*\n* @example\n* var out = xlogy( 0.9, 1.0 );\n* // returns 0.0\n*\n* @example\n* var out = xlogy( 0.0, -2.0 );\n* // returns 0.0\n*\n* @example\n* var out = xlogy( 1.5, NaN );\n* // returns NaN\n*\n* @example\n* var out = xlogy( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var out = xlogy( NaN, 2.3 );\n* // returns NaN\n*/\nfunction xlogy( x, y ) {\n\tif ( x === 0.0 && !isnan( y ) ) {\n\t\treturn 0.0;\n\t}\n\treturn x * ln( y );\n}\n\n\n// EXPORTS //\n\nexport default xlogy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate a rational function.\n*\n* @module @stdlib/math-base-tools-evalrational\n*\n* @example\n* import evalrational from '@stdlib/math-base-tools-evalrational';\n*\n* // 2x^3 + 4x^2 - 5x^1 - 6x^0 => degree 4\n* var P = [ -6.0, -5.0, 4.0, 2.0 ];\n*\n* // 0.5x^1 + 3x^0 => degree 2\n* var Q = [ 3.0, 0.5, 0.0, 0.0 ]; // zero-padded\n*\n* var v = evalrational( P, Q, 6.0 ); // => ( -6*6^0 - 5*6^1 + 4*6^2 + 2*6^3 ) / ( 3*6^0 + 0.5*6^1 + 0*6^2 + 0*6^3 ) = (-6-30+144+432)/(3+3)\n* // returns 90.0\n*\n* @example\n* import evalrational from '@stdlib/math-base-tools-evalrational';\n*\n* var P = [ 20.0, 8.0, 3.0 ];\n* var Q = [ 10.0, 9.0, 1.0 ];\n*\n* var rational = evalrational.factory( P, Q );\n*\n* var v = rational( 10.0 ); // => (20*10^0 + 8*10^1 + 3*10^2) / (10*10^0 + 9*10^1 + 1*10^2) = (20+80+300)/(10+90+100)\n* // returns 2.0\n*\n* v = rational( 2.0 ); // => (20*2^0 + 8*2^1 + 3*2^2) / (10*2^0 + 9*2^1 + 1*2^2) = (20+16+12)/(10+18+4)\n* // returns 1.5\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Fcn from '@stdlib/function-ctor';\nimport evalrational from './main.js';\n\n\n// MAIN //\n\n/**\n* Generates a function for evaluating a rational function.\n*\n* ## Notes\n*\n* -   The compiled function uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @param {NumericArray} P - numerator polynomial coefficients sorted in ascending degree\n* @param {NumericArray} Q - denominator polynomial coefficients sorted in ascending degree\n* @returns {Function} function for evaluating a rational function\n*\n* @example\n* var P = [ 20.0, 8.0, 3.0 ];\n* var Q = [ 10.0, 9.0, 1.0 ];\n*\n* var rational = factory( P, Q );\n*\n* var v = rational( 10.0 ); // => (20*10^0 + 8*10^1 + 3*10^2) / (10*10^0 + 9*10^1 + 1*10^2) = (20+80+300)/(10+90+100)\n* // returns 2.0\n*\n* v = rational( 2.0 ); // => (20*2^0 + 8*2^1 + 3*2^2) / (10*2^0 + 9*2^1 + 1*2^2) = (20+16+12)/(10+18+4)\n* // returns 1.5\n*/\nfunction factory( P, Q ) {\n\tvar f;\n\tvar r;\n\tvar n;\n\tvar m;\n\tvar i;\n\n\t// Avoid exceeding maximum stack size on V8 :(. Note that the value of `500` was empirically determined...\n\tif ( P.length > 500 ) {\n\t\treturn rational;\n\t}\n\t// Code generation. Start with the function definition...\n\tf = 'return function evalrational(x){';\n\n\t// Create the function body...\n\tn = P.length;\n\n\t// Declare variables...\n\tf += 'var ax,s1,s2;';\n\n\t// If no coefficients, the function always returns NaN...\n\tif ( n === 0 ) {\n\t\tf += 'return NaN;';\n\t}\n\t// If P and Q have different lengths, the function always returns NaN...\n\telse if ( n !== Q.length ) {\n\t\tf += 'return NaN;';\n\t}\n\t// If P and Q have only one coefficient, the function always returns the ratio of the first coefficients...\n\telse if ( n === 1 ) {\n\t\tr = P[ 0 ] / Q[ 0 ];\n\t\tf += 'return ' + r + ';';\n\t}\n\t// If more than one coefficient, apply Horner's method to both the numerator and denominator...\n\telse {\n\t\t// If `x == 0`, return the ratio of the first coefficients...\n\t\tr = P[ 0 ] / Q[ 0 ];\n\t\tf += 'if(x===0.0){return ' + r + ';}';\n\n\t\t// Compute the absolute value of `x`...\n\t\tf += 'if(x<0.0){ax=-x;}else{ax=x;}';\n\n\t\t// If `abs(x) <= 1`, evaluate the numerator and denominator of the rational function using Horner's method...\n\t\tf += 'if(ax<=1.0){';\n\t\tf += 's1 = ' + P[ 0 ];\n\t\tm = n - 1;\n\t\tfor ( i = 1; i < n; i++ ) {\n\t\t\tf += '+x*';\n\t\t\tif ( i < m ) {\n\t\t\t\tf += '(';\n\t\t\t}\n\t\t\tf += P[ i ];\n\t\t}\n\t\t// Close all the parentheses...\n\t\tfor ( i = 0; i < m-1; i++ ) {\n\t\t\tf += ')';\n\t\t}\n\t\tf += ';';\n\t\tf += 's2 = ' + Q[ 0 ];\n\t\tm = n - 1;\n\t\tfor ( i = 1; i < n; i++ ) {\n\t\t\tf += '+x*';\n\t\t\tif ( i < m ) {\n\t\t\t\tf += '(';\n\t\t\t}\n\t\t\tf += Q[ i ];\n\t\t}\n\t\t// Close all the parentheses...\n\t\tfor ( i = 0; i < m-1; i++ ) {\n\t\t\tf += ')';\n\t\t}\n\t\tf += ';';\n\n\t\t// Close the if statement...\n\t\tf += '}else{';\n\n\t\t// If `abs(x) > 1`, evaluate the numerator and denominator via the inverse to avoid overflow...\n\t\tf += 'x = 1.0/x;';\n\t\tm = n - 1;\n\t\tf += 's1 = ' + P[ m ];\n\t\tfor ( i = m - 1; i >= 0; i-- ) {\n\t\t\tf += '+x*';\n\t\t\tif ( i > 0 ) {\n\t\t\t\tf += '(';\n\t\t\t}\n\t\t\tf += P[ i ];\n\t\t}\n\t\t// Close all the parentheses...\n\t\tfor ( i = 0; i < m-1; i++ ) {\n\t\t\tf += ')';\n\t\t}\n\t\tf += ';';\n\n\t\tm = n - 1;\n\t\tf += 's2 = ' + Q[ m ];\n\t\tfor ( i = m - 1; i >= 0; i-- ) {\n\t\t\tf += '+x*';\n\t\t\tif ( i > 0 ) {\n\t\t\t\tf += '(';\n\t\t\t}\n\t\t\tf += Q[ i ];\n\t\t}\n\t\t// Close all the parentheses...\n\t\tfor ( i = 0; i < m-1; i++ ) {\n\t\t\tf += ')';\n\t\t}\n\t\tf += ';';\n\n\t\t// Close the else statement...\n\t\tf += '}';\n\n\t\t// Return the ratio of the two sums...\n\t\tf += 'return s1/s2;';\n\t}\n\t// Close the function:\n\tf += '}';\n\n\t// Add a source directive for debugging:\n\tf += '//# sourceURL=evalrational.factory.js';\n\n\t// Create the function in the global scope:\n\treturn ( new Fcn( f ) )();\n\n\t/*\n\t*\tfunction evalrational( x ) {\n\t*\t\tvar ax, s1, s2;\n\t*\t\tif ( x === 0.0 ) {\n\t*\t\t\treturn P[0] / Q[0];\n\t*\t\t}\n\t*\t\tif ( x < 0.0 ) {\n\t*\t\t\tax = -x;\n\t*\t\t} else {\n\t*\t\t\tax = x;\n\t*\t\t}\n\t*\t\tif ( ax <= 1.0 ) {\n\t*\t\t\ts1 = P[0]+x*(P[1]+x*(P[2]+x*(P[3]+...+x*(P[n-2]+x*P[n-1]))));\n\t*\t\t\ts2 = Q[0]+x*(Q[1]+x*(Q[2]+x*(Q[3]+...+x*(Q[n-2]+x*Q[n-1]))));\n\t*\t\t} else {\n\t*\t\t\tx = 1.0/x;\n\t*\t\t\ts1 = P[n-1]+x*(P[n-2]+x*(P[n-3]+x*(P[n-4]+...+x*(P[1]+x*P[0]))));\n\t*\t\t\ts2 = Q[n-1]+x*(Q[n-2]+x*(Q[n-3]+x*(Q[n-4]+...+x*(Q[1]+x*Q[0]))));\n\t*\t\t}\n\t*\t\treturn s1 / s2;\n\t*\t}\n\t*/\n\n\t/**\n\t* Evaluates a rational function.\n\t*\n\t* @private\n\t* @param {number} x - value at which to evaluate a rational function\n\t* @returns {number} evaluated rational function\n\t*/\n\tfunction rational( x ) {\n\t\treturn evalrational( P, Q, x );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar cache = {};\n\n\n// EXPORTS //\n\nexport default cache;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport binomcoef from '@stdlib/math-base-special-binomcoef';\nimport cache from './cache.js';\n\n\n// MAIN //\n\n/**\n* Computes polynomial coefficients.\n*\n* @private\n* @param {NonNegativeInteger} n - Fibonacci polynomial for which to compute coefficients\n* @returns {NonNegativeIntegerArray} polynomial coefficients\n*/\nfunction coefficients( n ) {\n\tvar coefs;\n\tvar i;\n\n\tcoefs = cache[ n ];\n\tif ( coefs === void 0 ) {\n\t\tcoefs = [];\n\t\tfor ( i = 0; i < n; i++ ) {\n\t\t\tcoefs.push( 0.0 );\n\t\t}\n\t\tfor ( i = n-1; i >= 0; i -= 2 ) {\n\t\t\tcoefs[ i ] = binomcoef( (n+i-1)/2, i );\n\t\t}\n\t\t// Memoize the coefficients:\n\t\tcache[ n ] = coefs;\n\t}\n\treturn coefs;\n}\n\n\n// EXPORTS //\n\nexport default coefficients;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport evalpoly from '@stdlib/math-base-tools-evalpoly';\nimport pow from '@stdlib/math-base-special-pow';\nimport abs from '@stdlib/math-base-special-abs';\nimport coefficients from './coefficients.js';\n\n\n// MAIN //\n\n/**\n* Evaluates a Fibonacci polynomial.\n*\n* @param {integer} n - Fibonacci polynomial to evaluate\n* @param {number} x - value at which to evaluate a Fibonacci polynomial\n* @returns {number} result\n*\n* @example\n* var v = fibpoly( 5, 1.0 );\n* // returns 5.0\n*/\nfunction fibpoly( n, x ) {\n\tvar coefs;\n\tvar an;\n\tvar v;\n\n\tan = abs( n );\n\tcoefs = coefficients( an );\n\n\tv = evalpoly( coefs, x );\n\tif ( n >= 0 ) {\n\t\treturn v;\n\t}\n\treturn pow( -1.0, an-1 ) * v;\n}\n\n\n// EXPORTS //\n\nexport default fibpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isint from '@stdlib/math-base-assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Evaluates a normalized Hermite polynomial.\n*\n* @param {NonNegativeInteger} n - nonnegative polynomial degree\n* @param {number} x - evaluation point\n* @returns {number} function value\n*\n* @example\n* var v = normhermitepoly( 1, 0.5 );\n* // returns 0.5\n*\n* @example\n* var v = normhermitepoly( 0, 0.5 );\n* // returns 1.0\n*\n* @example\n* var v = normhermitepoly( 2, 0.5 );\n* // returns -0.75\n*\n* @example\n* var v = normhermitepoly( -1, 0.5 );\n* // returns NaN\n*/\nfunction normhermitepoly( n, x ) {\n\tvar y1;\n\tvar y2;\n\tvar y3;\n\tvar i;\n\n\tif ( isnan( n ) || isnan( x ) || n < 0 || !isint( n ) ) {\n\t\treturn NaN;\n\t}\n\tif ( n === 0 ) {\n\t\t// `x` is completely canceled from the expression:\n\t\treturn 1.0;\n\t}\n\tif ( n === 1 ) {\n\t\treturn x;\n\t}\n\ty2 = 1.0;\n\ty3 = 0.0;\n\tfor ( i = n; i > 1; i-- ) {\n\t\ty1 = (x*y2) - (i*y3);\n\t\ty3 = y2;\n\t\ty2 = y1;\n\t}\n\treturn (x*y2) - y3;\n}\n\n\n// EXPORTS //\n\nexport default normhermitepoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Creates a function which always returns the same value.\n*\n* @param {*} [value] - value to always return\n* @returns {Function} constant function\n*\n* @example\n* var fcn = wrap( 3.14 );\n*\n* var v = fcn();\n* // returns 3.14\n*\n* v = fcn();\n* // returns 3.14\n*\n* v = fcn();\n* // returns 3.14\n*/\nfunction wrap( value ) {\n\treturn constantFunction;\n\n\t/**\n\t* Constant function.\n\t*\n\t* @private\n\t* @returns {*} constant value\n\t*/\n\tfunction constantFunction() {\n\t\treturn value;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default wrap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport SQRT2 from '@stdlib/constants-float64-sqrt-two';\nimport pow from '@stdlib/math-base-special-pow';\nimport normhermitepoly from '@stdlib/math-base-tools-normhermitepoly';\n\n\n// MAIN //\n\n/**\n* Evaluates a physicist's Hermite polynomial.\n*\n* @param {NonNegativeInteger} n - nonnegative polynomial degree\n* @param {number} x - evaluation point\n* @returns {number} function value\n*\n* @example\n* var v = hermitepoly( 1, 1.0 );\n* // returns 2.0\n*\n* @example\n* var v = hermitepoly( 1, 0.5 );\n* // returns 1.0\n*\n* @example\n* var v = hermitepoly( -1, 0.5 );\n* // returns NaN\n*\n* @example\n* var v = hermitepoly( 0, 0.5 );\n* // returns 1.0\n*\n* @example\n* var v = hermitepoly( 2, 0.5 );\n* // returns -1.0\n*/\nfunction hermitepoly( n, x ) {\n\treturn pow( 2.0, 0.5*n ) * normhermitepoly( n, SQRT2*x );\n}\n\n\n// EXPORTS //\n\nexport default hermitepoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate a Fibonacci polynomial.\n*\n* @module @stdlib/math-base-tools-fibpoly\n*\n* @example\n* import fibpoly from '@stdlib/math-base-tools-fibpoly';\n*\n* var v = fibpoly( 5, 1.0 );\n* // returns 5.0\n*\n* @example\n* import { factory as factory } from '@stdlib/math-base-tools-fibpoly';\n*\n* var fibpolyval = factory( 5 );\n*\n* var v = fibpolyval( 1.0 );\n* // returns 5.0\n*\n* v = fibpolyval( 2.0 );\n* // returns 29.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as evalpoly } from '@stdlib/math-base-tools-evalpoly';\nimport pow from '@stdlib/math-base-special-pow';\nimport abs from '@stdlib/math-base-special-abs';\nimport coefficients from './coefficients.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating a Fibonacci polynomial.\n*\n* @param {integer} n - Fibonacci polynomial to evaluate\n* @returns {Function} function for evaluating a Fibonacci polynomial\n*\n* @example\n* var fibpolyval = factory( 5 );\n*\n* var v = fibpolyval( 1.0 );\n* // returns 5.0\n*\n* v = fibpolyval( 2.0 );\n* // returns 29.0\n*/\nfunction factory( n ) {\n\tvar coefs;\n\tvar an;\n\tvar f;\n\tvar s;\n\n\tan = abs( n );\n\tcoefs = coefficients( an );\n\n\tf = evalpoly( coefs );\n\ts = pow( -1.0, an-1 );\n\tif ( n >= 0 || s === 1.0 ) {\n\t\treturn f;\n\t}\n\treturn polyval;\n\n\t/**\n\t* Evaluates a Fibonacci polynomial.\n\t*\n\t* @private\n\t* @param {number} x - value at which to evaluate a Fibonacci polynomial\n\t* @returns {number} result\n\t*/\n\tfunction polyval( x ) {\n\t\treturn -1.0 * f( x );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate a normalized Hermite polynomial.\n*\n* @module @stdlib/math-base-tools-normhermitepoly\n*\n* @example\n* import normhermitepoly from '@stdlib/math-base-tools-normhermitepoly';\n*\n* var v = normhermitepoly( 1, 0.5 );\n* // returns 0.5\n*\n* v = normhermitepoly( 0, 0.5 );\n* // returns 1.0\n*\n* v = normhermitepoly( 2, 0.5 );\n* // returns -0.75\n*\n* v = normhermitepoly( -1, 0.5 );\n* // returns NaN\n*\n* @example\n* import { factory as factory } from '@stdlib/math-base-tools-normhermitepoly';\n*\n* var polyval = factory( 2 );\n*\n* var v = polyval( 0.5 );\n* // returns -0.75\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isint from '@stdlib/math-base-assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating a normalized Hermite polynomial.\n*\n* @param {NonNegativeInteger} n - polynomial degree\n* @returns {Function} function for evaluating a normalized Hermite polynomial\n*\n* @example\n* var polyval = factory( 2 );\n*\n* var v = polyval( 0.5 );\n* // returns -0.75\n*/\nfunction factory( n ) {\n\tif ( n < 0 || isnan( n ) || !isint( n ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( n === 0 ) {\n\t\treturn constantFunction( 1.0 );\n\t}\n\treturn polyval;\n\n\t/**\n\t* Evaluates a normalized Hermite polynomial.\n\t*\n\t* @private\n\t* @param {number} x - value at which to evaluate a normalized Hermite polynomial\n\t* @returns {number} result\n\t*/\n\tfunction polyval( x ) {\n\t\tvar y1;\n\t\tvar y2;\n\t\tvar y3;\n\t\tvar i;\n\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\ty2 = 1.0;\n\t\ty3 = 0.0;\n\t\tfor ( i = n; i > 1; i-- ) {\n\t\t\ty1 = (x*y2) - (i*y3);\n\t\t\ty3 = y2;\n\t\t\ty2 = y1;\n\t\t}\n\t\treturn (x*y2) - y3;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate a physicist's Hermite polynomial.\n*\n* @module @stdlib/math-base-tools-hermitepoly\n*\n* @example\n* import hermitepoly from '@stdlib/math-base-tools-hermitepoly';\n*\n* var v = hermitepoly( 1, 1.0 );\n* // returns 2.0\n*\n* v = hermitepoly( 1, 0.5 );\n* // returns 0.5\n*\n* v = hermitepoly( -1, 0.5 );\n* // returns NaN\n*\n* v = hermitepoly( 0, 0.5 );\n* // returns 1.0\n*\n* v = hermitepoly( 2, 0.5 );\n* // returns -1.0\n*\n* @example\n* import { factory as factory } from '@stdlib/math-base-tools-hermitepoly';\n*\n* var polyval = factory( 2 );\n*\n* var v = polyval( 0.5 );\n* // returns -1.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isint from '@stdlib/math-base-assert-is-integer';\nimport SQRT2 from '@stdlib/constants-float64-sqrt-two';\nimport pow from '@stdlib/math-base-special-pow';\nimport normhermitepoly from '@stdlib/math-base-tools-normhermitepoly';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating a physicist's Hermite polynomial.\n*\n* @param {NonNegativeInteger} n - polynomial degree\n* @returns {Function} function for evaluating a physicist's Hermite polynomial\n*\n* @example\n* var polyval = factory( 2 );\n*\n* var v = polyval( 0.5 );\n* // returns -1.0\n*/\nfunction factory( n ) {\n\tvar c;\n\tif ( n < 0 || isnan( n ) || !isint( n ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( n === 0 ) {\n\t\treturn constantFunction( 1.0 );\n\t}\n\tc = pow( 2.0, 0.5*n );\n\treturn polyval;\n\n\t/**\n\t* Evaluates a physicist's Hermite polynomial.\n\t*\n\t* @private\n\t* @param {number} x - value at which to evaluate a physicist's Hermite polynomial\n\t* @returns {number} result\n\t*/\n\tfunction polyval( x ) {\n\t\treturn c * normhermitepoly( n, SQRT2*x );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar cache = {};\n\n\n// EXPORTS //\n\nexport default cache;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport binomcoef from '@stdlib/math-base-special-binomcoef';\nimport floor from '@stdlib/math-base-special-floor';\nimport ceil from '@stdlib/math-base-special-ceil';\nimport cache from './cache.js';\n\n\n// MAIN //\n\n/**\n* Computes polynomial coefficients.\n*\n* ## Notes\n*\n* -   Coefficients are computed via a (1,2)-Pascal triangle (i.e., Lucas triangle). For more details, see [Lucas polynomials][oeis-lucas-polynomials] and [Lucas triangle][oeis-lucas-triangle].\n*\n* [oeis-lucas-polynomials]: https://oeis.org/wiki/Lucas_polynomials\n* [oeis-lucas-triangle]: https://oeis.org/wiki/Lucas_triangle\n*\n* @private\n* @param {NonNegativeInteger} n - Lucas polynomial for which to compute coefficients\n* @returns {NonNegativeIntegerArray} polynomial coefficients\n*/\nfunction coefficients( n ) {\n\tvar coefs;\n\tvar half;\n\tvar high;\n\tvar low;\n\tvar p;\n\tvar a;\n\tvar b;\n\tvar m;\n\tvar i;\n\n\tcoefs = cache[ n ];\n\tif ( coefs === void 0 ) {\n\t\tm = n + 1;\n\t\tcoefs = new Array( m );\n\t\tif ( n === 0 ) {\n\t\t\tcoefs[ 0 ] = 2.0;\n\t\t} else {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tcoefs[ i ] = 0.0;\n\t\t\t}\n\t\t\thalf = n / 2;\n\t\t\thigh = ceil( half );\n\t\t\tlow = floor( half );\n\t\t\tfor ( i = 0; i <= low; i++ ) {\n\t\t\t\tp = (2*i) + (n%2);\n\t\t\t\ta = 2.0 * binomcoef( high+i-1, low-i-1 );\n\t\t\t\tb = binomcoef( high+i-1, low-i );\n\t\t\t\tcoefs[ p ] += a + b;\n\t\t\t}\n\t\t}\n\t\t// Memoize the coefficients:\n\t\tcache[ n ] = coefs;\n\t}\n\treturn coefs;\n}\n\n\n// EXPORTS //\n\nexport default coefficients;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport evalpoly from '@stdlib/math-base-tools-evalpoly';\nimport pow from '@stdlib/math-base-special-pow';\nimport abs from '@stdlib/math-base-special-abs';\nimport coefficients from './coefficients.js';\n\n\n// MAIN //\n\n/**\n* Evaluates a Lucas polynomial.\n*\n* @param {integer} n - Lucas polynomial to evaluate\n* @param {number} x - value at which to evaluate a Lucas polynomial\n* @returns {number} result\n*\n* @example\n* var v = lucaspoly( 5, 1.0 );\n* // returns 11.0\n*/\nfunction lucaspoly( n, x ) {\n\tvar coefs;\n\tvar an;\n\tvar v;\n\n\tan = abs( n );\n\tcoefs = coefficients( an );\n\n\tv = evalpoly( coefs, x );\n\tif ( n >= 0 ) {\n\t\treturn v;\n\t}\n\treturn pow( -1.0, an ) * v;\n}\n\n\n// EXPORTS //\n\nexport default lucaspoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate a Lucas polynomial.\n*\n* @module @stdlib/math-base-tools-lucaspoly\n*\n* @example\n* import lucaspoly from '@stdlib/math-base-tools-lucaspoly';\n*\n* var v = lucaspoly( 5, 1.0 );\n* // returns 11.0\n*\n* @example\n* import { factory as factory } from '@stdlib/math-base-tools-lucaspoly';\n*\n* var polyval = factory( 5 );\n*\n* var v = polyval( 1.0 );\n* // returns 11.0\n*\n* v = polyval( 2.0 );\n* // returns 82.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as evalpoly } from '@stdlib/math-base-tools-evalpoly';\nimport pow from '@stdlib/math-base-special-pow';\nimport abs from '@stdlib/math-base-special-abs';\nimport coefficients from './coefficients.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating a Lucas polynomial.\n*\n* @param {integer} n - Lucas polynomial to evaluate\n* @returns {Function} function for evaluating a Lucas polynomial\n*\n* @example\n* var polyval = factory( 5 );\n*\n* var v = polyval( 1.0 );\n* // returns 11.0\n*\n* v = polyval( 2.0 );\n* // returns 82.0\n*/\nfunction factory( n ) {\n\tvar coefs;\n\tvar an;\n\tvar f;\n\tvar s;\n\n\tan = abs( n );\n\tcoefs = coefficients( an );\n\n\tf = evalpoly( coefs );\n\ts = pow( -1.0, an );\n\tif ( n >= 0 || s === 1.0 ) {\n\t\treturn f;\n\t}\n\treturn polyval;\n\n\t/**\n\t* Evaluates a Lucas polynomial.\n\t*\n\t* @private\n\t* @param {number} x - value at which to evaluate a Lucas polynomial\n\t* @returns {number} result\n\t*/\n\tfunction polyval( x ) {\n\t\treturn -1.0 * f( x );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n/*\n* The following modules are intentionally not exported: evalpoly-compile, evalpoly-compile-c, evalrational-compile, evalrational-compile-c\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name continuedFraction\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/tools/continued-fraction}\n*/\nimport continuedFraction from '@stdlib/math-base-tools-continued-fraction';\nsetReadOnly( ns, 'continuedFraction', continuedFraction );\n\n/**\n* @name evalpoly\n* @memberof tools\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/tools/evalpoly}\n*/\nimport evalpoly from '@stdlib/math-base-tools-evalpoly';\nsetReadOnly( ns, 'evalpoly', evalpoly );\n\n/**\n* @name evalrational\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/tools/evalrational}\n*/\nimport evalrational from '@stdlib/math-base-tools-evalrational';\nsetReadOnly( ns, 'evalrational', evalrational );\n\n/**\n* @name fibpoly\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/tools/fibpoly}\n*/\nimport fibpoly from '@stdlib/math-base-tools-fibpoly';\nsetReadOnly( ns, 'fibpoly', fibpoly );\n\n/**\n* @name hermitepoly\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/tools/hermitepoly}\n*/\nimport hermitepoly from '@stdlib/math-base-tools-hermitepoly';\nsetReadOnly( ns, 'hermitepoly', hermitepoly );\n\n/**\n* @name lucaspoly\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/tools/lucaspoly}\n*/\nimport lucaspoly from '@stdlib/math-base-tools-lucaspoly';\nsetReadOnly( ns, 'lucaspoly', lucaspoly );\n\n/**\n* @name normhermitepoly\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/tools/normhermitepoly}\n*/\nimport normhermitepoly from '@stdlib/math-base-tools-normhermitepoly';\nsetReadOnly( ns, 'normhermitepoly', normhermitepoly );\n\n/**\n* @name sumSeries\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/tools/sum-series}\n*/\nimport sumSeries from '@stdlib/math-base-tools-sum-series';\nsetReadOnly( ns, 'sumSeries', sumSeries );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\nvar RE = /./;\n\n\n// EXPORTS //\n\nexport default RE;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a boolean primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a boolean primitive\n*\n* @example\n* var bool = isBoolean( true );\n* // returns true\n*\n* @example\n* var bool = isBoolean( false );\n* // returns true\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n*\n* var bool = isBoolean( new Boolean( true ) );\n* // returns false\n*/\nfunction isBoolean( value ) {\n\treturn ( typeof value === 'boolean' );\n}\n\n\n// EXPORTS //\n\nexport default isBoolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a boolean.\n*\n* @name Boolean\n* @constructor\n* @type {Function}\n* @param {*} value - input value\n* @returns {(boolean|Boolean)} boolean\n*\n* @example\n* var b = Boolean( null );\n* // returns false\n*\n* b = Boolean( [] );\n* // returns true\n*\n* b = Boolean( {} );\n* // returns true\n*\n* @example\n* var b = new Boolean( false );\n* // returns <Boolean>\n*/\nvar Bool = Boolean; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default Bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// eslint-disable-next-line stdlib/no-redeclare\nvar toString = Boolean.prototype.toString; // non-generic\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasToStringTag from '@stdlib/assert-has-tostringtag-support';\nimport nativeClass from '@stdlib/utils-native-class';\nimport Boolean from '@stdlib/boolean-ctor';\nimport test from './try2serialize.js';\n\n\n// VARIABLES //\n\nvar FLG = hasToStringTag();\n\n\n// MAIN //\n\n/**\n* Tests if a value is a boolean object.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a boolean object\n*\n* @example\n* var bool = isBoolean( true );\n* // returns false\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n*\n* var bool = isBoolean( new Boolean( false ) );\n* // returns true\n*/\nfunction isBoolean( value ) {\n\tif ( typeof value === 'object' ) {\n\t\tif ( value instanceof Boolean ) {\n\t\t\treturn true;\n\t\t}\n\t\tif ( FLG ) {\n\t\t\treturn test( value );\n\t\t}\n\t\treturn ( nativeClass( value ) === '[object Boolean]' );\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default isBoolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport toString from './tostring.js'; // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Attempts to serialize a value to a string.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value can be serialized\n*/\nfunction test( value ) {\n\ttry {\n\t\ttoString.call( value );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default test;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a boolean.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a boolean\n*\n* @example\n* var bool = isBoolean( false );\n* // returns true\n*\n* @example\n* var bool = isBoolean( true );\n* // returns true\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n*\n* var bool = isBoolean( new Boolean( false ) );\n* // returns true\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n*\n* var bool = isBoolean( new Boolean( true ) );\n* // returns true\n*/\nfunction isBoolean( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isBoolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a number primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( typeof value === 'number' );  // NOTE: we inline the `isNumber.isPrimitive` function from `@stdlib/assert/is-number` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Tests if a string starts with a minus sign (`-`).\n*\n* @private\n* @param {string} str - input string\n* @returns {boolean} boolean indicating if a string starts with a minus sign (`-`)\n*/\nfunction startsWithMinus( str ) {\n\treturn str[ 0 ] === '-';\n}\n\n/**\n* Returns a string of `n` zeros.\n*\n* @private\n* @param {number} n - number of zeros\n* @returns {string} string of zeros\n*/\nfunction zeros( n ) {\n\tvar out = '';\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tout += '0';\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Pads a token with zeros to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction zeroPad( str, width, right ) {\n\tvar negative = false;\n\tvar pad = width - str.length;\n\tif ( pad < 0 ) {\n\t\treturn str;\n\t}\n\tif ( startsWithMinus( str ) ) {\n\t\tnegative = true;\n\t\tstr = str.substr( 1 );\n\t}\n\tstr = ( right ) ?\n\t\tstr + zeros( pad ) :\n\t\tzeros( pad ) + str;\n\tif ( negative ) {\n\t\tstr = '-' + str;\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default zeroPad;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a boolean.\n*\n* @module @stdlib/assert-is-boolean\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n* import isBoolean from '@stdlib/assert-is-boolean';\n*\n* var bool = isBoolean( false );\n* // returns true\n*\n* bool = isBoolean( new Boolean( false ) );\n* // returns true\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n* import { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\n*\n* var bool = isBoolean( false );\n* // returns true\n*\n* bool = isBoolean( new Boolean( true ) );\n* // returns false\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n* import { isObject as isBoolean } from '@stdlib/assert-is-boolean';\n*\n* var bool = isBoolean( true );\n* // returns false\n*\n* bool = isBoolean( new Boolean( false ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNumber from './is_number.js';\nimport zeroPad from './zero_pad.js';\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\n\n\n// MAIN //\n\n/**\n* Formats a token object argument as an integer.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid integer\n* @returns {string} formatted token argument\n*/\nfunction formatInteger( token ) {\n\tvar base;\n\tvar out;\n\tvar i;\n\n\tswitch ( token.specifier ) {\n\tcase 'b':\n\t\t// Case: %b (binary)\n\t\tbase = 2;\n\t\tbreak;\n\tcase 'o':\n\t\t// Case: %o (octal)\n\t\tbase = 8;\n\t\tbreak;\n\tcase 'x':\n\tcase 'X':\n\t\t// Case: %x, %X (hexadecimal)\n\t\tbase = 16;\n\t\tbreak;\n\tcase 'd':\n\tcase 'i':\n\tcase 'u':\n\tdefault:\n\t\t// Case: %d, %i, %u (decimal)\n\t\tbase = 10;\n\t\tbreak;\n\t}\n\tout = token.arg;\n\ti = parseInt( out, 10 );\n\tif ( !isFinite( i ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n\t\tif ( !isNumber( out ) ) {\n\t\t\tthrow new Error( 'invalid integer. Value: ' + out );\n\t\t}\n\t\ti = 0;\n\t}\n\tif ( i < 0 && ( token.specifier === 'u' || base !== 10 ) ) {\n\t\ti = 0xffffffff + i + 1;\n\t}\n\tif ( i < 0 ) {\n\t\tout = ( -i ).toString( base );\n\t\tif ( token.precision ) {\n\t\t\tout = zeroPad( out, token.precision, token.padRight );\n\t\t}\n\t\tout = '-' + out;\n\t} else {\n\t\tout = i.toString( base );\n\t\tif ( !i && !token.precision ) {\n\t\t\tout = '';\n\t\t} else if ( token.precision ) {\n\t\t\tout = zeroPad( out, token.precision, token.padRight );\n\t\t}\n\t\tif ( token.sign ) {\n\t\t\tout = token.sign + out;\n\t\t}\n\t}\n\tif ( base === 16 ) {\n\t\tif ( token.alternate ) {\n\t\t\tout = '0x' + out;\n\t\t}\n\t\tout = ( token.specifier === uppercase.call( token.specifier ) ) ?\n\t\t\tuppercase.call( out ) :\n\t\t\tlowercase.call( out );\n\t}\n\tif ( base === 8 ) {\n\t\tif ( token.alternate && out.charAt( 0 ) !== '0' ) {\n\t\t\tout = '0' + out;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a string primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string primitive\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns false\n*/\nfunction isString( value ) {\n\treturn ( typeof value === 'string' ); // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNumber from './is_number.js';\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar abs = Math.abs; // eslint-disable-line stdlib/no-builtin-math\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\nvar replace = String.prototype.replace;\n\n\n// VARIABLES //\n\nvar RE_EXP_POS_DIGITS = /e\\+(\\d)$/;\nvar RE_EXP_NEG_DIGITS = /e-(\\d)$/;\nvar RE_ONLY_DIGITS = /^(\\d+)$/;\nvar RE_DIGITS_BEFORE_EXP = /^(\\d+)e/;\nvar RE_TRAILING_PERIOD_ZERO = /\\.0$/;\nvar RE_PERIOD_ZERO_EXP = /\\.0*e/;\nvar RE_ZERO_BEFORE_EXP = /(\\..*[^0])0*e/;\n\n\n// MAIN //\n\n/**\n* Formats a token object argument as a floating-point number.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid floating-point number\n* @returns {string} formatted token argument\n*/\nfunction formatDouble( token ) {\n\tvar digits;\n\tvar out;\n\tvar f = parseFloat( token.arg );\n\tif ( !isFinite( f ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n\t\tif ( !isNumber( token.arg ) ) {\n\t\t\tthrow new Error( 'invalid floating-point number. Value: ' + out );\n\t\t}\n\t\t// Case: NaN, Infinity, or -Infinity\n\t\tf = token.arg;\n\t}\n\tswitch ( token.specifier ) {\n\tcase 'e':\n\tcase 'E':\n\t\tout = f.toExponential( token.precision );\n\t\tbreak;\n\tcase 'f':\n\tcase 'F':\n\t\tout = f.toFixed( token.precision );\n\t\tbreak;\n\tcase 'g':\n\tcase 'G':\n\t\tif ( abs( f ) < 0.0001 ) {\n\t\t\tdigits = token.precision;\n\t\t\tif ( digits > 0 ) {\n\t\t\t\tdigits -= 1;\n\t\t\t}\n\t\t\tout = f.toExponential( digits );\n\t\t} else {\n\t\t\tout = f.toPrecision( token.precision );\n\t\t}\n\t\tif ( !token.alternate ) {\n\t\t\tout = replace.call( out, RE_ZERO_BEFORE_EXP, '$1e' );\n\t\t\tout = replace.call( out, RE_PERIOD_ZERO_EXP, 'e');\n\t\t\tout = replace.call( out, RE_TRAILING_PERIOD_ZERO, '' );\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( 'invalid double notation. Value: ' + token.specifier );\n\t}\n\tout = replace.call( out, RE_EXP_POS_DIGITS, 'e+0$1' );\n\tout = replace.call( out, RE_EXP_NEG_DIGITS, 'e-0$1' );\n\tif ( token.alternate ) {\n\t\tout = replace.call( out, RE_ONLY_DIGITS, '$1.' );\n\t\tout = replace.call( out, RE_DIGITS_BEFORE_EXP, '$1.e' );\n\t}\n\tif ( f >= 0 && token.sign ) {\n\t\tout = token.sign + out;\n\t}\n\tout = ( token.specifier === uppercase.call( token.specifier ) ) ?\n\t\tuppercase.call( out ) :\n\t\tlowercase.call( out );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatDouble;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Returns `n` spaces.\n*\n* @private\n* @param {number} n - number of spaces\n* @returns {string} string of spaces\n*/\nfunction spaces( n ) {\n\tvar out = '';\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tout += ' ';\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Pads a token with spaces to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction spacePad( str, width, right ) {\n\tvar pad = width - str.length;\n\tif ( pad < 0 ) {\n\t\treturn str;\n\t}\n\tstr = ( right ) ?\n\t\tstr + spaces( pad ) :\n\t\tspaces( pad ) + str;\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default spacePad;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport formatInteger from './format_integer.js';\nimport isString from './is_string.js';\nimport formatDouble from './format_double.js';\nimport spacePad from './space_pad.js';\nimport zeroPad from './zero_pad.js';\n\n\n// VARIABLES //\n\nvar fromCharCode = String.fromCharCode;\nvar isnan = isNaN; // NOTE: We use the global `isNaN` function here instead of `@stdlib/math/base/assert/is-nan` to avoid circular dependencies.\nvar isArray = Array.isArray; // NOTE: We use the global `Array.isArray` function here instead of `@stdlib/assert/is-array` to avoid circular dependencies.\n\n\n// FUNCTIONS //\n\n/**\n* Initializes token object with properties of supplied format identifier object or default values if not present.\n*\n* @private\n* @param {Object} token - format identifier object\n* @returns {Object} token object\n*/\nfunction initialize( token ) {\n\tvar out = {};\n\tout.specifier = token.specifier;\n\tout.precision = ( token.precision === void 0 ) ? 1 : token.precision;\n\tout.width = token.width;\n\tout.flags = token.flags || '';\n\tout.mapping = token.mapping;\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Generates string from a token array by interpolating values.\n*\n* @param {Array} tokens - string parts and format identifier objects\n* @param {Array} ...args - variable values\n* @throws {TypeError} first argument must be an array\n* @throws {Error} invalid flags\n* @returns {string} formatted string\n*\n* @example\n* var tokens = [ 'beep ', { 'specifier': 's' } ];\n* var out = formatInterpolate( tokens, 'boop' );\n* // returns 'beep boop'\n*/\nfunction formatInterpolate( tokens ) {\n\tvar hasPeriod;\n\tvar flags;\n\tvar token;\n\tvar flag;\n\tvar num;\n\tvar out;\n\tvar pos;\n\tvar i;\n\tvar j;\n\n\tif ( !isArray( tokens ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an array. Value: `' + tokens + '`.' );\n\t}\n\tout = '';\n\tpos = 1;\n\tfor ( i = 0; i < tokens.length; i++ ) {\n\t\ttoken = tokens[ i ];\n\t\tif ( isString( token ) ) {\n\t\t\tout += token;\n\t\t} else {\n\t\t\thasPeriod = token.precision !== void 0;\n\t\t\ttoken = initialize( token );\n\t\t\tif ( !token.specifier ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Token is missing `specifier` property. Index: `'+ i +'`. Value: `' + token + '`.' );\n\t\t\t}\n\t\t\tif ( token.mapping ) {\n\t\t\t\tpos = token.mapping;\n\t\t\t}\n\t\t\tflags = token.flags;\n\t\t\tfor ( j = 0; j < flags.length; j++ ) {\n\t\t\t\tflag = flags.charAt( j );\n\t\t\t\tswitch ( flag ) {\n\t\t\t\tcase ' ':\n\t\t\t\t\ttoken.sign = ' ';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '+':\n\t\t\t\t\ttoken.sign = '+';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '-':\n\t\t\t\t\ttoken.padRight = true;\n\t\t\t\t\ttoken.padZeros = false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '0':\n\t\t\t\t\ttoken.padZeros = flags.indexOf( '-' ) < 0; // NOTE: We use built-in `Array.prototype.indexOf` here instead of `@stdlib/assert/contains` in order to avoid circular dependencies.\n\t\t\t\t\tbreak;\n\t\t\t\tcase '#':\n\t\t\t\t\ttoken.alternate = true;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'invalid flag: ' + flag );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( token.width === '*' ) {\n\t\t\t\ttoken.width = parseInt( arguments[ pos ], 10 );\n\t\t\t\tpos += 1;\n\t\t\t\tif ( isnan( token.width ) ) {\n\t\t\t\t\tthrow new TypeError( 'the argument for * width at position ' + pos + ' is not a number. Value: `' + token.width + '`.' );\n\t\t\t\t}\n\t\t\t\tif ( token.width < 0 ) {\n\t\t\t\t\ttoken.padRight = true;\n\t\t\t\t\ttoken.width = -token.width;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( hasPeriod ) {\n\t\t\t\tif ( token.precision === '*' ) {\n\t\t\t\t\ttoken.precision = parseInt( arguments[ pos ], 10 );\n\t\t\t\t\tpos += 1;\n\t\t\t\t\tif ( isnan( token.precision ) ) {\n\t\t\t\t\t\tthrow new TypeError( 'the argument for * precision at position ' + pos + ' is not a number. Value: `' + token.precision + '`.' );\n\t\t\t\t\t}\n\t\t\t\t\tif ( token.precision < 0 ) {\n\t\t\t\t\t\ttoken.precision = 1;\n\t\t\t\t\t\thasPeriod = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttoken.arg = arguments[ pos ];\n\t\t\tswitch ( token.specifier ) {\n\t\t\tcase 'b':\n\t\t\tcase 'o':\n\t\t\tcase 'x':\n\t\t\tcase 'X':\n\t\t\tcase 'd':\n\t\t\tcase 'i':\n\t\t\tcase 'u':\n\t\t\t\t// Case: %b (binary), %o (octal), %x, %X (hexadecimal), %d, %i (decimal), %u (unsigned decimal)\n\t\t\t\tif ( hasPeriod ) {\n\t\t\t\t\ttoken.padZeros = false;\n\t\t\t\t}\n\t\t\t\ttoken.arg = formatInteger( token );\n\t\t\t\tbreak;\n\t\t\tcase 's':\n\t\t\t\t// Case: %s (string)\n\t\t\t\ttoken.maxWidth = ( hasPeriod ) ? token.precision : -1;\n\t\t\t\tbreak;\n\t\t\tcase 'c':\n\t\t\t\t// Case: %c (character)\n\t\t\t\tif ( !isnan( token.arg ) ) {\n\t\t\t\t\tnum = parseInt( token.arg, 10 );\n\t\t\t\t\tif ( num < 0 || num > 127 ) {\n\t\t\t\t\t\tthrow new Error( 'invalid character code. Value: ' + token.arg );\n\t\t\t\t\t}\n\t\t\t\t\ttoken.arg = ( isnan( num ) ) ?\n\t\t\t\t\t\tString( token.arg ) :\n\t\t\t\t\t\tfromCharCode( num );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'e':\n\t\t\tcase 'E':\n\t\t\tcase 'f':\n\t\t\tcase 'F':\n\t\t\tcase 'g':\n\t\t\tcase 'G':\n\t\t\t\t// Case: %e, %E (scientific notation), %f, %F (decimal floating point), %g, %G (uses the shorter of %e/E or %f/F)\n\t\t\t\tif ( !hasPeriod ) {\n\t\t\t\t\ttoken.precision = 6;\n\t\t\t\t}\n\t\t\t\ttoken.arg = formatDouble( token );\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'invalid specifier: ' + token.specifier );\n\t\t\t}\n\t\t\t// Fit argument into field width...\n\t\t\tif ( token.maxWidth >= 0 && token.arg.length > token.maxWidth ) {\n\t\t\t\ttoken.arg = token.arg.substring( 0, token.maxWidth );\n\t\t\t}\n\t\t\tif ( token.padZeros ) {\n\t\t\t\ttoken.arg = zeroPad( token.arg, token.width || token.precision, token.padRight ); // eslint-disable-line max-len\n\t\t\t} else if ( token.width ) {\n\t\t\t\ttoken.arg = spacePad( token.arg, token.width, token.padRight );\n\t\t\t}\n\t\t\tout += token.arg || '';\n\t\t\tpos += 1;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatInterpolate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar RE = /%(?:([1-9]\\d*)\\$)?([0 +\\-#]*)(\\*|\\d+)?(?:(\\.)(\\*|\\d+)?)?[hlL]?([%A-Za-z])/g;\n\n\n// FUNCTIONS //\n\n/**\n* Parses a delimiter.\n*\n* @private\n* @param {Array} match - regular expression match\n* @returns {Object} delimiter token object\n*/\nfunction parse( match ) {\n\tvar token = {\n\t\t'mapping': ( match[ 1 ] ) ? parseInt( match[ 1 ], 10 ) : void 0,\n\t\t'flags': match[ 2 ],\n\t\t'width': match[ 3 ],\n\t\t'precision': match[ 5 ],\n\t\t'specifier': match[ 6 ]\n\t};\n\tif ( match[ 4 ] === '.' && match[ 5 ] === void 0 ) {\n\t\ttoken.precision = '1';\n\t}\n\treturn token;\n}\n\n\n// MAIN //\n\n/**\n* Tokenizes a string into an array of string parts and format identifier objects.\n*\n* @param {string} str - input string\n* @returns {Array} tokens\n*\n* @example\n* var tokens = formatTokenize( 'Hello %s!' );\n* // returns [ 'Hello ', {...}, '!' ]\n*/\nfunction formatTokenize( str ) {\n\tvar content;\n\tvar tokens;\n\tvar match;\n\tvar prev;\n\n\ttokens = [];\n\tprev = 0;\n\tmatch = RE.exec( str );\n\twhile ( match ) {\n\t\tcontent = str.slice( prev, RE.lastIndex - match[ 0 ].length );\n\t\tif ( content.length ) {\n\t\t\ttokens.push( content );\n\t\t}\n\t\ttokens.push( parse( match ) );\n\t\tprev = RE.lastIndex;\n\t\tmatch = RE.exec( str );\n\t}\n\tcontent = str.slice( prev );\n\tif ( content.length ) {\n\t\ttokens.push( content );\n\t}\n\treturn tokens;\n}\n\n\n// EXPORTS //\n\nexport default formatTokenize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a string primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string primitive\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns false\n*/\nfunction isString( value ) {\n\treturn ( typeof value === 'string' ); // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport interpolate from '@stdlib/string-base-format-interpolate';\nimport tokenize from '@stdlib/string-base-format-tokenize';\nimport isString from './is_string.js';\n\n\n// MAIN //\n\n/**\n* Inserts supplied variable values into a format string.\n*\n* @param {string} str - input string\n* @param {Array} ...args - variable values\n* @throws {TypeError} first argument must be a string\n* @throws {Error} invalid flags\n* @returns {string} formatted string\n*\n* @example\n* var str = format( 'Hello %s!', 'world' );\n* // returns 'Hello world!'\n*\n* @example\n* var str = format( 'Pi: ~%.2f', 3.141592653589793 );\n* // returns 'Pi: ~3.14'\n*/\nfunction format( str ) {\n\tvar args;\n\tvar i;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\targs = [ tokenize( str ) ];\n\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\treturn interpolate.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default format;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the global object using code generation.\n*\n* @private\n* @returns {Object} global object\n*/\nfunction getGlobal() {\n\treturn new Function( 'return this;' )(); // eslint-disable-line no-new-func, stdlib/require-globals\n}\n\n\n// EXPORTS //\n\nexport default getGlobal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar obj = ( typeof self === 'object' ) ? self : null;\n\n\n// EXPORTS //\n\nexport default obj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar obj = ( typeof window === 'object' ) ? window : null;\n\n\n// EXPORTS //\n\nexport default obj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar obj = ( typeof global === 'object' ) ? global : null;\n\n\n// EXPORTS //\n\nexport default obj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar obj = ( typeof globalThis === 'object' ) ? globalThis : null; // eslint-disable-line no-undef\n\n\n// EXPORTS //\n\nexport default obj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getGlobal from '@stdlib/utils-global';\n\n\n// MAIN //\n\nvar root = getGlobal();\nvar nodeList = root.document && root.document.childNodes;\n\n\n// EXPORTS //\n\nexport default nodeList;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport format from '@stdlib/string-format';\nimport getThis from './codegen.js';\nimport Self from './self.js';\nimport Win from './window.js';\nimport Global from './global.js';\nimport GlobalThis from './global_this.js';\n\n\n// MAIN //\n\n/**\n* Returns the global object.\n*\n* ## Notes\n*\n* -   Using code generation is the **most** reliable way to resolve the global object; however, doing so is likely to violate content security policies (CSPs) in, e.g., Chrome Apps and elsewhere.\n*\n* @param {boolean} [codegen=false] - boolean indicating whether to use code generation to resolve the global object\n* @throws {TypeError} must provide a boolean\n* @throws {Error} unable to resolve global object\n* @returns {Object} global object\n*\n* @example\n* var g = getGlobal();\n* // returns {...}\n*/\nfunction getGlobal( codegen ) {\n\tif ( arguments.length ) {\n\t\tif ( !isBoolean( codegen ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a boolean. Value: `%s`.', codegen ) );\n\t\t}\n\t\tif ( codegen ) {\n\t\t\treturn getThis();\n\t\t}\n\t\t// Fall through...\n\t}\n\t// Case: 2020 revision of ECMAScript standard\n\tif ( GlobalThis ) {\n\t\treturn GlobalThis;\n\t}\n\t// Case: browsers and web workers\n\tif ( Self ) {\n\t\treturn Self;\n\t}\n\t// Case: browsers\n\tif ( Win ) {\n\t\treturn Win;\n\t}\n\t// Case: Node.js\n\tif ( Global ) {\n\t\treturn Global;\n\t}\n\t// Case: unknown\n\tthrow new Error( 'unexpected error. Unable to resolve global object.' );\n}\n\n\n// EXPORTS //\n\nexport default getGlobal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\nvar typedarray = Int8Array; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default typedarray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.\n*\n* @returns {RegExp} regular expression\n*\n* @example\n* var RE_FUNCTION_NAME = reFunctionName();\n*\n* function fname( fcn ) {\n*     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];\n* }\n*\n* var fn = fname( Math.sqrt );\n* // returns 'sqrt'\n*\n* fn = fname( Int8Array );\n* // returns 'Int8Array'\n*\n* fn = fname( Object.prototype.toString );\n* // returns 'toString'\n*\n* fn = fname( function(){} );\n* // returns ''\n*/\nfunction reFunctionName() {\n\treturn /^\\s*function\\s*([^(]*)/i;\n}\n\n\n// EXPORTS //\n\nexport default reFunctionName;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reFunctionName from './main.js';\n\n\n// MAIN //\n\n/**\n* Captures everything that is not a space immediately after the `function` keyword and before the first left parenthesis.\n*\n* Regular expression: `/^\\s*function\\s*([^(]*)/i`\n*\n* -   `/^\\s*`\n*     -   Match zero or more spaces at beginning\n*\n* -   `function`\n*     -   Match the word `function`\n*\n* -   `\\s*`\n*     -   Match zero or more spaces after the word `function`\n*\n* -   `()`\n*     -   Capture\n*\n* -   `[^(]*`\n*     -   Match anything except a left parenthesis `(` zero or more times\n*\n* -   `/i`\n*     -   ignore case\n*\n* @constant\n* @type {RegExp}\n* @default /^\\s*function\\s*([^(]*)/i\n*/\nvar RE_FUNCTION_NAME = reFunctionName();\n\n\n// EXPORTS //\n\nexport default RE_FUNCTION_NAME;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.\n*\n* @module @stdlib/regexp-function-name\n*\n* @example\n* import reFunctionName from '@stdlib/regexp-function-name';\n* var RE_FUNCTION_NAME = reFunctionName();\n*\n* function fname( fcn ) {\n*     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];\n* }\n*\n* var fn = fname( Math.sqrt );\n* // returns 'sqrt'\n*\n* fn = fname( Int8Array );\n* // returns 'Int8Array'\n*\n* fn = fname( Object.prototype.toString );\n* // returns 'toString'\n*\n* fn = fname( function(){} );\n* // returns ''\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport REGEXP from './regexp.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'REGEXP', REGEXP );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar f;\n\n\n// FUNCTIONS //\n\n/**\n* Tests if a value is an array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is an array\n*\n* @example\n* var bool = isArray( [] );\n* // returns true\n*\n* @example\n* var bool = isArray( {} );\n* // returns false\n*/\nfunction isArray( value ) {\n\treturn ( nativeClass( value ) === '[object Array]' );\n}\n\n\n// MAIN //\n\nif ( Array.isArray ) {\n\tf = Array.isArray;\n} else {\n\tf = isArray;\n}\n\n\n// EXPORTS //\n\nexport default f;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a number primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( typeof value === 'number' );  // NOTE: we inline the `isNumber.isPrimitive` function from `@stdlib/assert/is-number` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Tests if a string starts with a minus sign (`-`).\n*\n* @private\n* @param {string} str - input string\n* @returns {boolean} boolean indicating if a string starts with a minus sign (`-`)\n*/\nfunction startsWithMinus( str ) {\n\treturn str[ 0 ] === '-';\n}\n\n/**\n* Returns a string of `n` zeros.\n*\n* @private\n* @param {number} n - number of zeros\n* @returns {string} string of zeros\n*/\nfunction zeros( n ) {\n\tvar out = '';\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tout += '0';\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Pads a token with zeros to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction zeroPad( str, width, right ) {\n\tvar negative = false;\n\tvar pad = width - str.length;\n\tif ( pad < 0 ) {\n\t\treturn str;\n\t}\n\tif ( startsWithMinus( str ) ) {\n\t\tnegative = true;\n\t\tstr = str.substr( 1 );\n\t}\n\tstr = ( right ) ?\n\t\tstr + zeros( pad ) :\n\t\tzeros( pad ) + str;\n\tif ( negative ) {\n\t\tstr = '-' + str;\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default zeroPad;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNumber from './is_number.js';\nimport zeroPad from './zero_pad.js';\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\n\n\n// MAIN //\n\n/**\n* Formats a token object argument as an integer.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid integer\n* @returns {string} formatted token argument\n*/\nfunction formatInteger( token ) {\n\tvar base;\n\tvar out;\n\tvar i;\n\n\tswitch ( token.specifier ) {\n\tcase 'b':\n\t\t// Case: %b (binary)\n\t\tbase = 2;\n\t\tbreak;\n\tcase 'o':\n\t\t// Case: %o (octal)\n\t\tbase = 8;\n\t\tbreak;\n\tcase 'x':\n\tcase 'X':\n\t\t// Case: %x, %X (hexadecimal)\n\t\tbase = 16;\n\t\tbreak;\n\tcase 'd':\n\tcase 'i':\n\tcase 'u':\n\tdefault:\n\t\t// Case: %d, %i, %u (decimal)\n\t\tbase = 10;\n\t\tbreak;\n\t}\n\tout = token.arg;\n\ti = parseInt( out, 10 );\n\tif ( !isFinite( i ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n\t\tif ( !isNumber( out ) ) {\n\t\t\tthrow new Error( 'invalid integer. Value: ' + out );\n\t\t}\n\t\ti = 0;\n\t}\n\tif ( i < 0 && ( token.specifier === 'u' || base !== 10 ) ) {\n\t\ti = 0xffffffff + i + 1;\n\t}\n\tif ( i < 0 ) {\n\t\tout = ( -i ).toString( base );\n\t\tif ( token.precision ) {\n\t\t\tout = zeroPad( out, token.precision, token.padRight );\n\t\t}\n\t\tout = '-' + out;\n\t} else {\n\t\tout = i.toString( base );\n\t\tif ( !i && !token.precision ) {\n\t\t\tout = '';\n\t\t} else if ( token.precision ) {\n\t\t\tout = zeroPad( out, token.precision, token.padRight );\n\t\t}\n\t\tif ( token.sign ) {\n\t\t\tout = token.sign + out;\n\t\t}\n\t}\n\tif ( base === 16 ) {\n\t\tif ( token.alternate ) {\n\t\t\tout = '0x' + out;\n\t\t}\n\t\tout = ( token.specifier === uppercase.call( token.specifier ) ) ?\n\t\t\tuppercase.call( out ) :\n\t\t\tlowercase.call( out );\n\t}\n\tif ( base === 8 ) {\n\t\tif ( token.alternate && out.charAt( 0 ) !== '0' ) {\n\t\t\tout = '0' + out;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a string primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string primitive\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns false\n*/\nfunction isString( value ) {\n\treturn ( typeof value === 'string' ); // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNumber from './is_number.js';\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar abs = Math.abs; // eslint-disable-line stdlib/no-builtin-math\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\nvar replace = String.prototype.replace;\n\n\n// VARIABLES //\n\nvar RE_EXP_POS_DIGITS = /e\\+(\\d)$/;\nvar RE_EXP_NEG_DIGITS = /e-(\\d)$/;\nvar RE_ONLY_DIGITS = /^(\\d+)$/;\nvar RE_DIGITS_BEFORE_EXP = /^(\\d+)e/;\nvar RE_TRAILING_PERIOD_ZERO = /\\.0$/;\nvar RE_PERIOD_ZERO_EXP = /\\.0*e/;\nvar RE_ZERO_BEFORE_EXP = /(\\..*[^0])0*e/;\n\n\n// MAIN //\n\n/**\n* Formats a token object argument as a floating-point number.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid floating-point number\n* @returns {string} formatted token argument\n*/\nfunction formatDouble( token ) {\n\tvar digits;\n\tvar out;\n\tvar f = parseFloat( token.arg );\n\tif ( !isFinite( f ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n\t\tif ( !isNumber( token.arg ) ) {\n\t\t\tthrow new Error( 'invalid floating-point number. Value: ' + out );\n\t\t}\n\t\t// Case: NaN, Infinity, or -Infinity\n\t\tf = token.arg;\n\t}\n\tswitch ( token.specifier ) {\n\tcase 'e':\n\tcase 'E':\n\t\tout = f.toExponential( token.precision );\n\t\tbreak;\n\tcase 'f':\n\tcase 'F':\n\t\tout = f.toFixed( token.precision );\n\t\tbreak;\n\tcase 'g':\n\tcase 'G':\n\t\tif ( abs( f ) < 0.0001 ) {\n\t\t\tdigits = token.precision;\n\t\t\tif ( digits > 0 ) {\n\t\t\t\tdigits -= 1;\n\t\t\t}\n\t\t\tout = f.toExponential( digits );\n\t\t} else {\n\t\t\tout = f.toPrecision( token.precision );\n\t\t}\n\t\tif ( !token.alternate ) {\n\t\t\tout = replace.call( out, RE_ZERO_BEFORE_EXP, '$1e' );\n\t\t\tout = replace.call( out, RE_PERIOD_ZERO_EXP, 'e');\n\t\t\tout = replace.call( out, RE_TRAILING_PERIOD_ZERO, '' );\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( 'invalid double notation. Value: ' + token.specifier );\n\t}\n\tout = replace.call( out, RE_EXP_POS_DIGITS, 'e+0$1' );\n\tout = replace.call( out, RE_EXP_NEG_DIGITS, 'e-0$1' );\n\tif ( token.alternate ) {\n\t\tout = replace.call( out, RE_ONLY_DIGITS, '$1.' );\n\t\tout = replace.call( out, RE_DIGITS_BEFORE_EXP, '$1.e' );\n\t}\n\tif ( f >= 0 && token.sign ) {\n\t\tout = token.sign + out;\n\t}\n\tout = ( token.specifier === uppercase.call( token.specifier ) ) ?\n\t\tuppercase.call( out ) :\n\t\tlowercase.call( out );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatDouble;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Returns `n` spaces.\n*\n* @private\n* @param {number} n - number of spaces\n* @returns {string} string of spaces\n*/\nfunction spaces( n ) {\n\tvar out = '';\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tout += ' ';\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Pads a token with spaces to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction spacePad( str, width, right ) {\n\tvar pad = width - str.length;\n\tif ( pad < 0 ) {\n\t\treturn str;\n\t}\n\tstr = ( right ) ?\n\t\tstr + spaces( pad ) :\n\t\tspaces( pad ) + str;\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default spacePad;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport formatInteger from './format_integer.js';\nimport isString from './is_string.js';\nimport formatDouble from './format_double.js';\nimport spacePad from './space_pad.js';\nimport zeroPad from './zero_pad.js';\n\n\n// VARIABLES //\n\nvar fromCharCode = String.fromCharCode;\nvar isnan = isNaN; // NOTE: We use the global `isNaN` function here instead of `@stdlib/math/base/assert/is-nan` to avoid circular dependencies.\nvar isArray = Array.isArray; // NOTE: We use the global `Array.isArray` function here instead of `@stdlib/assert/is-array` to avoid circular dependencies.\n\n\n// FUNCTIONS //\n\n/**\n* Initializes token object with properties of supplied format identifier object or default values if not present.\n*\n* @private\n* @param {Object} token - format identifier object\n* @returns {Object} token object\n*/\nfunction initialize( token ) {\n\tvar out = {};\n\tout.specifier = token.specifier;\n\tout.precision = ( token.precision === void 0 ) ? 1 : token.precision;\n\tout.width = token.width;\n\tout.flags = token.flags || '';\n\tout.mapping = token.mapping;\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Generates string from a token array by interpolating values.\n*\n* @param {Array} tokens - string parts and format identifier objects\n* @param {Array} ...args - variable values\n* @throws {TypeError} first argument must be an array\n* @throws {Error} invalid flags\n* @returns {string} formatted string\n*\n* @example\n* var tokens = [ 'beep ', { 'specifier': 's' } ];\n* var out = formatInterpolate( tokens, 'boop' );\n* // returns 'beep boop'\n*/\nfunction formatInterpolate( tokens ) {\n\tvar hasPeriod;\n\tvar flags;\n\tvar token;\n\tvar flag;\n\tvar num;\n\tvar out;\n\tvar pos;\n\tvar i;\n\tvar j;\n\n\tif ( !isArray( tokens ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an array. Value: `' + tokens + '`.' );\n\t}\n\tout = '';\n\tpos = 1;\n\tfor ( i = 0; i < tokens.length; i++ ) {\n\t\ttoken = tokens[ i ];\n\t\tif ( isString( token ) ) {\n\t\t\tout += token;\n\t\t} else {\n\t\t\thasPeriod = token.precision !== void 0;\n\t\t\ttoken = initialize( token );\n\t\t\tif ( !token.specifier ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Token is missing `specifier` property. Index: `'+ i +'`. Value: `' + token + '`.' );\n\t\t\t}\n\t\t\tif ( token.mapping ) {\n\t\t\t\tpos = token.mapping;\n\t\t\t}\n\t\t\tflags = token.flags;\n\t\t\tfor ( j = 0; j < flags.length; j++ ) {\n\t\t\t\tflag = flags.charAt( j );\n\t\t\t\tswitch ( flag ) {\n\t\t\t\tcase ' ':\n\t\t\t\t\ttoken.sign = ' ';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '+':\n\t\t\t\t\ttoken.sign = '+';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '-':\n\t\t\t\t\ttoken.padRight = true;\n\t\t\t\t\ttoken.padZeros = false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '0':\n\t\t\t\t\ttoken.padZeros = flags.indexOf( '-' ) < 0; // NOTE: We use built-in `Array.prototype.indexOf` here instead of `@stdlib/assert/contains` in order to avoid circular dependencies.\n\t\t\t\t\tbreak;\n\t\t\t\tcase '#':\n\t\t\t\t\ttoken.alternate = true;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'invalid flag: ' + flag );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( token.width === '*' ) {\n\t\t\t\ttoken.width = parseInt( arguments[ pos ], 10 );\n\t\t\t\tpos += 1;\n\t\t\t\tif ( isnan( token.width ) ) {\n\t\t\t\t\tthrow new TypeError( 'the argument for * width at position ' + pos + ' is not a number. Value: `' + token.width + '`.' );\n\t\t\t\t}\n\t\t\t\tif ( token.width < 0 ) {\n\t\t\t\t\ttoken.padRight = true;\n\t\t\t\t\ttoken.width = -token.width;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( hasPeriod ) {\n\t\t\t\tif ( token.precision === '*' ) {\n\t\t\t\t\ttoken.precision = parseInt( arguments[ pos ], 10 );\n\t\t\t\t\tpos += 1;\n\t\t\t\t\tif ( isnan( token.precision ) ) {\n\t\t\t\t\t\tthrow new TypeError( 'the argument for * precision at position ' + pos + ' is not a number. Value: `' + token.precision + '`.' );\n\t\t\t\t\t}\n\t\t\t\t\tif ( token.precision < 0 ) {\n\t\t\t\t\t\ttoken.precision = 1;\n\t\t\t\t\t\thasPeriod = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttoken.arg = arguments[ pos ];\n\t\t\tswitch ( token.specifier ) {\n\t\t\tcase 'b':\n\t\t\tcase 'o':\n\t\t\tcase 'x':\n\t\t\tcase 'X':\n\t\t\tcase 'd':\n\t\t\tcase 'i':\n\t\t\tcase 'u':\n\t\t\t\t// Case: %b (binary), %o (octal), %x, %X (hexadecimal), %d, %i (decimal), %u (unsigned decimal)\n\t\t\t\tif ( hasPeriod ) {\n\t\t\t\t\ttoken.padZeros = false;\n\t\t\t\t}\n\t\t\t\ttoken.arg = formatInteger( token );\n\t\t\t\tbreak;\n\t\t\tcase 's':\n\t\t\t\t// Case: %s (string)\n\t\t\t\ttoken.maxWidth = ( hasPeriod ) ? token.precision : -1;\n\t\t\t\tbreak;\n\t\t\tcase 'c':\n\t\t\t\t// Case: %c (character)\n\t\t\t\tif ( !isnan( token.arg ) ) {\n\t\t\t\t\tnum = parseInt( token.arg, 10 );\n\t\t\t\t\tif ( num < 0 || num > 127 ) {\n\t\t\t\t\t\tthrow new Error( 'invalid character code. Value: ' + token.arg );\n\t\t\t\t\t}\n\t\t\t\t\ttoken.arg = ( isnan( num ) ) ?\n\t\t\t\t\t\tString( token.arg ) :\n\t\t\t\t\t\tfromCharCode( num );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'e':\n\t\t\tcase 'E':\n\t\t\tcase 'f':\n\t\t\tcase 'F':\n\t\t\tcase 'g':\n\t\t\tcase 'G':\n\t\t\t\t// Case: %e, %E (scientific notation), %f, %F (decimal floating point), %g, %G (uses the shorter of %e/E or %f/F)\n\t\t\t\tif ( !hasPeriod ) {\n\t\t\t\t\ttoken.precision = 6;\n\t\t\t\t}\n\t\t\t\ttoken.arg = formatDouble( token );\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'invalid specifier: ' + token.specifier );\n\t\t\t}\n\t\t\t// Fit argument into field width...\n\t\t\tif ( token.maxWidth >= 0 && token.arg.length > token.maxWidth ) {\n\t\t\t\ttoken.arg = token.arg.substring( 0, token.maxWidth );\n\t\t\t}\n\t\t\tif ( token.padZeros ) {\n\t\t\t\ttoken.arg = zeroPad( token.arg, token.width || token.precision, token.padRight ); // eslint-disable-line max-len\n\t\t\t} else if ( token.width ) {\n\t\t\t\ttoken.arg = spacePad( token.arg, token.width, token.padRight );\n\t\t\t}\n\t\t\tout += token.arg || '';\n\t\t\tpos += 1;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatInterpolate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar RE = /%(?:([1-9]\\d*)\\$)?([0 +\\-#]*)(\\*|\\d+)?(?:(\\.)(\\*|\\d+)?)?[hlL]?([%A-Za-z])/g;\n\n\n// FUNCTIONS //\n\n/**\n* Parses a delimiter.\n*\n* @private\n* @param {Array} match - regular expression match\n* @returns {Object} delimiter token object\n*/\nfunction parse( match ) {\n\tvar token = {\n\t\t'mapping': ( match[ 1 ] ) ? parseInt( match[ 1 ], 10 ) : void 0,\n\t\t'flags': match[ 2 ],\n\t\t'width': match[ 3 ],\n\t\t'precision': match[ 5 ],\n\t\t'specifier': match[ 6 ]\n\t};\n\tif ( match[ 4 ] === '.' && match[ 5 ] === void 0 ) {\n\t\ttoken.precision = '1';\n\t}\n\treturn token;\n}\n\n\n// MAIN //\n\n/**\n* Tokenizes a string into an array of string parts and format identifier objects.\n*\n* @param {string} str - input string\n* @returns {Array} tokens\n*\n* @example\n* var tokens = formatTokenize( 'Hello %s!' );\n* // returns [ 'Hello ', {...}, '!' ]\n*/\nfunction formatTokenize( str ) {\n\tvar content;\n\tvar tokens;\n\tvar match;\n\tvar prev;\n\n\ttokens = [];\n\tprev = 0;\n\tmatch = RE.exec( str );\n\twhile ( match ) {\n\t\tcontent = str.slice( prev, RE.lastIndex - match[ 0 ].length );\n\t\tif ( content.length ) {\n\t\t\ttokens.push( content );\n\t\t}\n\t\ttokens.push( parse( match ) );\n\t\tprev = RE.lastIndex;\n\t\tmatch = RE.exec( str );\n\t}\n\tcontent = str.slice( prev );\n\tif ( content.length ) {\n\t\ttokens.push( content );\n\t}\n\treturn tokens;\n}\n\n\n// EXPORTS //\n\nexport default formatTokenize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a string primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string primitive\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns false\n*/\nfunction isString( value ) {\n\treturn ( typeof value === 'string' ); // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport interpolate from '@stdlib/string-base-format-interpolate';\nimport tokenize from '@stdlib/string-base-format-tokenize';\nimport isString from './is_string.js';\n\n\n// MAIN //\n\n/**\n* Inserts supplied variable values into a format string.\n*\n* @param {string} str - input string\n* @param {Array} ...args - variable values\n* @throws {TypeError} first argument must be a string\n* @throws {Error} invalid flags\n* @returns {string} formatted string\n*\n* @example\n* var str = format( 'Hello %s!', 'world' );\n* // returns 'Hello world!'\n*\n* @example\n* var str = format( 'Pi: ~%.2f', 3.141592653589793 );\n* // returns 'Pi: ~3.14'\n*/\nfunction format( str ) {\n\tvar args;\n\tvar i;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\targs = [ tokenize( str ) ];\n\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\treturn interpolate.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default format;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is object-like.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether a value is object-like\n*\n* @example\n* var bool = isObjectLike( {} );\n* // returns true\n*\n* @example\n* var bool = isObjectLike( [] );\n* // returns true\n*\n* @example\n* var bool = isObjectLike( null );\n* // returns false\n*/\nfunction isObjectLike( value ) {\n\treturn (\n\t\tvalue !== null &&\n\t\ttypeof value === 'object'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isObjectLike;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\nimport { REGEXP as RE } from '@stdlib/regexp-function-name';\nimport isBuffer from '@stdlib/assert-is-buffer';\n\n\n// MAIN //\n\n/**\n* Determines the name of a value's constructor.\n*\n* @param {*} v - input value\n* @returns {string} name of a value's constructor\n*\n* @example\n* var v = constructorName( 'a' );\n* // returns 'String'\n*\n* @example\n* var v = constructorName( 5 );\n* // returns 'Number'\n*\n* @example\n* var v = constructorName( null );\n* // returns 'Null'\n*\n* @example\n* var v = constructorName( undefined );\n* // returns 'Undefined'\n*\n* @example\n* var v = constructorName( function noop() {} );\n* // returns 'Function'\n*/\nfunction constructorName( v ) {\n\tvar match;\n\tvar name;\n\tvar ctor;\n\tname = nativeClass( v ).slice( 8, -1 );\n\tif ( (name === 'Object' || name === 'Error') && v.constructor ) {\n\t\tctor = v.constructor;\n\t\tif ( typeof ctor.name === 'string' ) {\n\t\t\treturn ctor.name;\n\t\t}\n\t\tmatch = RE.exec( ctor.toString() );\n\t\tif ( match ) {\n\t\t\treturn match[ 1 ];\n\t\t}\n\t}\n\tif ( isBuffer( v ) ) {\n\t\treturn 'Buffer';\n\t}\n\treturn name;\n}\n\n\n// EXPORTS //\n\nexport default constructorName;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObjectLike from '@stdlib/assert-is-object-like';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Buffer instance.\n*\n* @param {*} value - value to validate\n* @returns {boolean} boolean indicating if a value is a Buffer instance\n*\n* @example\n* var v = isBuffer( new Buffer( 'beep' ) );\n* // returns true\n*\n* @example\n* var v = isBuffer( new Buffer( [1,2,3,4] ) );\n* // returns true\n*\n* @example\n* var v = isBuffer( {} );\n* // returns false\n*\n* @example\n* var v = isBuffer( [] );\n* // returns false\n*/\nfunction isBuffer( value ) {\n\treturn (\n\t\tisObjectLike( value ) &&\n\t\t(\n\t\t\t// eslint-disable-next-line no-underscore-dangle\n\t\t\tvalue._isBuffer || // for envs missing Object.prototype.constructor (e.g., Safari 5-7)\n\t\t\t(\n\t\t\t\tvalue.constructor &&\n\n\t\t\t\t// WARNING: `typeof` is not a foolproof check, as certain envs consider RegExp and NodeList instances to be functions\n\t\t\t\ttypeof value.constructor.isBuffer === 'function' &&\n\t\t\t\tvalue.constructor.isBuffer( value )\n\t\t\t)\n\t\t)\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isBuffer;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is object-like.\n*\n* @module @stdlib/assert-is-object-like\n*\n* @example\n* import isObjectLike from '@stdlib/assert-is-object-like';\n*\n* var bool = isObjectLike( {} );\n* // returns true\n*\n* bool = isObjectLike( [] );\n* // returns true\n*\n* bool = isObjectLike( null );\n* // returns false\n*\n* @example\n* import { isObjectLikeArray as isObjectLike } from '@stdlib/assert-is-object-like';\n*\n* var bool = isObjectLike( [ {}, [] ] );\n* // returns true\n*\n* bool = isObjectLike( [ {}, '3.0' ] );\n* // returns false\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport arrayfun from '@stdlib/assert-tools-array-function';\nimport main from './main.js';\n\n\n// VARIABLES //\n\nvar isObjectLikeArray = arrayfun( main );\n\n\n// MAIN //\n\nsetReadOnly( main, 'isObjectLikeArray', isObjectLikeArray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArray from '@stdlib/assert-is-array';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns a function which tests if every element in an array passes a test condition.\n*\n* @param {Function} predicate - function to apply\n* @throws {TypeError} must provide a function\n* @returns {Function} an array function\n*\n* @example\n* import isOdd from '@stdlib/assert-is-odd';\n*\n* var arr1 = [ 1, 3, 5, 7 ];\n* var arr2 = [ 3, 5, 8 ];\n*\n* var validate = arrayfcn( isOdd );\n*\n* var bool = validate( arr1 );\n* // returns true\n*\n* bool = validate( arr2 );\n* // returns false\n*/\nfunction arrayfcn( predicate ) {\n\tif ( typeof predicate !== 'function' ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a function. Value: `%s`.', predicate ) );\n\t}\n\treturn every;\n\n\t/**\n\t* Tests if every element in an array passes a test condition.\n\t*\n\t* @private\n\t* @param {*} value - value to test\n\t* @returns {boolean} boolean indicating whether a value is an array for which all elements pass a test condition\n\t*/\n\tfunction every( value ) {\n\t\tvar len;\n\t\tvar i;\n\t\tif ( !isArray( value ) ) {\n\t\t\treturn false;\n\t\t}\n\t\tlen = value.length;\n\t\tif ( len === 0 ) {\n\t\t\treturn false;\n\t\t}\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tif ( predicate( value[ i ] ) === false ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default arrayfcn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine a value's type.\n*\n* @module @stdlib/utils-type-of\n*\n* @example\n* import typeOf from '@stdlib/utils-type-of';\n*\n* var str = typeOf( 'a' );\n* // returns 'string'\n*\n* str = typeOf( 5 );\n* // returns 'number'\n*/\n\n// MODULES //\n\nimport usePolyfill from './check.js';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar main = ( usePolyfill() ) ? polyfill : builtin;\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport RE from './fixtures/re.js';\nimport nodeList from './fixtures/nodelist.js';\nimport typedarray from './fixtures/typedarray.js';\n\n\n// MAIN //\n\n/**\n* Checks whether a polyfill is needed when using the `typeof` operator.\n*\n* @private\n* @returns {boolean} boolean indicating whether a polyfill is needed\n*/\nfunction check() {\n\tif (\n\t\t// Chrome 1-12 returns 'function' for regular expression instances (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof):\n\t\ttypeof RE === 'function' ||\n\n\t\t// Safari 8 returns 'object' for typed array and weak map constructors (underscore #1929):\n\t\ttypeof typedarray === 'object' ||\n\n\t\t// PhantomJS 1.9 returns 'function' for `NodeList` instances (underscore #2236):\n\t\ttypeof nodeList === 'function'\n\t) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default check;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ctorName from '@stdlib/utils-constructor-name';\n\n\n// MAIN //\n\n/**\n* Determines a value's type.\n*\n* @param {*} v - input value\n* @returns {string} string indicating the value's type\n*/\nfunction typeOf( v ) {\n\treturn ctorName( v ).toLowerCase();\n}\n\n\n// EXPORTS //\n\nexport default typeOf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ctorName from '@stdlib/utils-constructor-name';\n\n\n// NOTES //\n\n/*\n* Built-in `typeof` operator behavior:\n*\n* ```text\n* typeof null => 'object'\n* typeof undefined => 'undefined'\n* typeof 'a' => 'string'\n* typeof 5 => 'number'\n* typeof NaN => 'number'\n* typeof true => 'boolean'\n* typeof false => 'boolean'\n* typeof {} => 'object'\n* typeof [] => 'object'\n* typeof function foo(){} => 'function'\n* typeof function* foo(){} => 'object'\n* typeof Symbol() => 'symbol'\n* ```\n*\n*/\n\n\n// MAIN //\n\n/**\n* Determines a value's type.\n*\n* @param {*} v - input value\n* @returns {string} string indicating the value's type\n*/\nfunction typeOf( v ) {\n\tvar type;\n\n\t// Address `typeof null` => `object` (see http://wiki.ecmascript.org/doku.php?id=harmony:typeof_null):\n\tif ( v === null ) {\n\t\treturn 'null';\n\t}\n\ttype = typeof v;\n\n\t// If the `typeof` operator returned something other than `object`, we are done. Otherwise, we need to check for an internal class name or search for a constructor.\n\tif ( type === 'object' ) {\n\t\treturn ctorName( v ).toLowerCase();\n\t}\n\treturn type;\n}\n\n\n// EXPORTS //\n\nexport default typeOf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a number primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( typeof value === 'number' );  // NOTE: we inline the `isNumber.isPrimitive` function from `@stdlib/assert/is-number` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Tests if a string starts with a minus sign (`-`).\n*\n* @private\n* @param {string} str - input string\n* @returns {boolean} boolean indicating if a string starts with a minus sign (`-`)\n*/\nfunction startsWithMinus( str ) {\n\treturn str[ 0 ] === '-';\n}\n\n/**\n* Returns a string of `n` zeros.\n*\n* @private\n* @param {number} n - number of zeros\n* @returns {string} string of zeros\n*/\nfunction zeros( n ) {\n\tvar out = '';\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tout += '0';\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Pads a token with zeros to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction zeroPad( str, width, right ) {\n\tvar negative = false;\n\tvar pad = width - str.length;\n\tif ( pad < 0 ) {\n\t\treturn str;\n\t}\n\tif ( startsWithMinus( str ) ) {\n\t\tnegative = true;\n\t\tstr = str.substr( 1 );\n\t}\n\tstr = ( right ) ?\n\t\tstr + zeros( pad ) :\n\t\tzeros( pad ) + str;\n\tif ( negative ) {\n\t\tstr = '-' + str;\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default zeroPad;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNumber from './is_number.js';\nimport zeroPad from './zero_pad.js';\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\n\n\n// MAIN //\n\n/**\n* Formats a token object argument as an integer.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid integer\n* @returns {string} formatted token argument\n*/\nfunction formatInteger( token ) {\n\tvar base;\n\tvar out;\n\tvar i;\n\n\tswitch ( token.specifier ) {\n\tcase 'b':\n\t\t// Case: %b (binary)\n\t\tbase = 2;\n\t\tbreak;\n\tcase 'o':\n\t\t// Case: %o (octal)\n\t\tbase = 8;\n\t\tbreak;\n\tcase 'x':\n\tcase 'X':\n\t\t// Case: %x, %X (hexadecimal)\n\t\tbase = 16;\n\t\tbreak;\n\tcase 'd':\n\tcase 'i':\n\tcase 'u':\n\tdefault:\n\t\t// Case: %d, %i, %u (decimal)\n\t\tbase = 10;\n\t\tbreak;\n\t}\n\tout = token.arg;\n\ti = parseInt( out, 10 );\n\tif ( !isFinite( i ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n\t\tif ( !isNumber( out ) ) {\n\t\t\tthrow new Error( 'invalid integer. Value: ' + out );\n\t\t}\n\t\ti = 0;\n\t}\n\tif ( i < 0 && ( token.specifier === 'u' || base !== 10 ) ) {\n\t\ti = 0xffffffff + i + 1;\n\t}\n\tif ( i < 0 ) {\n\t\tout = ( -i ).toString( base );\n\t\tif ( token.precision ) {\n\t\t\tout = zeroPad( out, token.precision, token.padRight );\n\t\t}\n\t\tout = '-' + out;\n\t} else {\n\t\tout = i.toString( base );\n\t\tif ( !i && !token.precision ) {\n\t\t\tout = '';\n\t\t} else if ( token.precision ) {\n\t\t\tout = zeroPad( out, token.precision, token.padRight );\n\t\t}\n\t\tif ( token.sign ) {\n\t\t\tout = token.sign + out;\n\t\t}\n\t}\n\tif ( base === 16 ) {\n\t\tif ( token.alternate ) {\n\t\t\tout = '0x' + out;\n\t\t}\n\t\tout = ( token.specifier === uppercase.call( token.specifier ) ) ?\n\t\t\tuppercase.call( out ) :\n\t\t\tlowercase.call( out );\n\t}\n\tif ( base === 8 ) {\n\t\tif ( token.alternate && out.charAt( 0 ) !== '0' ) {\n\t\t\tout = '0' + out;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a string primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string primitive\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns false\n*/\nfunction isString( value ) {\n\treturn ( typeof value === 'string' ); // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNumber from './is_number.js';\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar abs = Math.abs; // eslint-disable-line stdlib/no-builtin-math\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\nvar replace = String.prototype.replace;\n\n\n// VARIABLES //\n\nvar RE_EXP_POS_DIGITS = /e\\+(\\d)$/;\nvar RE_EXP_NEG_DIGITS = /e-(\\d)$/;\nvar RE_ONLY_DIGITS = /^(\\d+)$/;\nvar RE_DIGITS_BEFORE_EXP = /^(\\d+)e/;\nvar RE_TRAILING_PERIOD_ZERO = /\\.0$/;\nvar RE_PERIOD_ZERO_EXP = /\\.0*e/;\nvar RE_ZERO_BEFORE_EXP = /(\\..*[^0])0*e/;\n\n\n// MAIN //\n\n/**\n* Formats a token object argument as a floating-point number.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid floating-point number\n* @returns {string} formatted token argument\n*/\nfunction formatDouble( token ) {\n\tvar digits;\n\tvar out;\n\tvar f = parseFloat( token.arg );\n\tif ( !isFinite( f ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n\t\tif ( !isNumber( token.arg ) ) {\n\t\t\tthrow new Error( 'invalid floating-point number. Value: ' + out );\n\t\t}\n\t\t// Case: NaN, Infinity, or -Infinity\n\t\tf = token.arg;\n\t}\n\tswitch ( token.specifier ) {\n\tcase 'e':\n\tcase 'E':\n\t\tout = f.toExponential( token.precision );\n\t\tbreak;\n\tcase 'f':\n\tcase 'F':\n\t\tout = f.toFixed( token.precision );\n\t\tbreak;\n\tcase 'g':\n\tcase 'G':\n\t\tif ( abs( f ) < 0.0001 ) {\n\t\t\tdigits = token.precision;\n\t\t\tif ( digits > 0 ) {\n\t\t\t\tdigits -= 1;\n\t\t\t}\n\t\t\tout = f.toExponential( digits );\n\t\t} else {\n\t\t\tout = f.toPrecision( token.precision );\n\t\t}\n\t\tif ( !token.alternate ) {\n\t\t\tout = replace.call( out, RE_ZERO_BEFORE_EXP, '$1e' );\n\t\t\tout = replace.call( out, RE_PERIOD_ZERO_EXP, 'e');\n\t\t\tout = replace.call( out, RE_TRAILING_PERIOD_ZERO, '' );\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( 'invalid double notation. Value: ' + token.specifier );\n\t}\n\tout = replace.call( out, RE_EXP_POS_DIGITS, 'e+0$1' );\n\tout = replace.call( out, RE_EXP_NEG_DIGITS, 'e-0$1' );\n\tif ( token.alternate ) {\n\t\tout = replace.call( out, RE_ONLY_DIGITS, '$1.' );\n\t\tout = replace.call( out, RE_DIGITS_BEFORE_EXP, '$1.e' );\n\t}\n\tif ( f >= 0 && token.sign ) {\n\t\tout = token.sign + out;\n\t}\n\tout = ( token.specifier === uppercase.call( token.specifier ) ) ?\n\t\tuppercase.call( out ) :\n\t\tlowercase.call( out );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatDouble;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Returns `n` spaces.\n*\n* @private\n* @param {number} n - number of spaces\n* @returns {string} string of spaces\n*/\nfunction spaces( n ) {\n\tvar out = '';\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tout += ' ';\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Pads a token with spaces to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction spacePad( str, width, right ) {\n\tvar pad = width - str.length;\n\tif ( pad < 0 ) {\n\t\treturn str;\n\t}\n\tstr = ( right ) ?\n\t\tstr + spaces( pad ) :\n\t\tspaces( pad ) + str;\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default spacePad;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport formatInteger from './format_integer.js';\nimport isString from './is_string.js';\nimport formatDouble from './format_double.js';\nimport spacePad from './space_pad.js';\nimport zeroPad from './zero_pad.js';\n\n\n// VARIABLES //\n\nvar fromCharCode = String.fromCharCode;\nvar isnan = isNaN; // NOTE: We use the global `isNaN` function here instead of `@stdlib/math/base/assert/is-nan` to avoid circular dependencies.\nvar isArray = Array.isArray; // NOTE: We use the global `Array.isArray` function here instead of `@stdlib/assert/is-array` to avoid circular dependencies.\n\n\n// FUNCTIONS //\n\n/**\n* Initializes token object with properties of supplied format identifier object or default values if not present.\n*\n* @private\n* @param {Object} token - format identifier object\n* @returns {Object} token object\n*/\nfunction initialize( token ) {\n\tvar out = {};\n\tout.specifier = token.specifier;\n\tout.precision = ( token.precision === void 0 ) ? 1 : token.precision;\n\tout.width = token.width;\n\tout.flags = token.flags || '';\n\tout.mapping = token.mapping;\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Generates string from a token array by interpolating values.\n*\n* @param {Array} tokens - string parts and format identifier objects\n* @param {Array} ...args - variable values\n* @throws {TypeError} first argument must be an array\n* @throws {Error} invalid flags\n* @returns {string} formatted string\n*\n* @example\n* var tokens = [ 'beep ', { 'specifier': 's' } ];\n* var out = formatInterpolate( tokens, 'boop' );\n* // returns 'beep boop'\n*/\nfunction formatInterpolate( tokens ) {\n\tvar hasPeriod;\n\tvar flags;\n\tvar token;\n\tvar flag;\n\tvar num;\n\tvar out;\n\tvar pos;\n\tvar i;\n\tvar j;\n\n\tif ( !isArray( tokens ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an array. Value: `' + tokens + '`.' );\n\t}\n\tout = '';\n\tpos = 1;\n\tfor ( i = 0; i < tokens.length; i++ ) {\n\t\ttoken = tokens[ i ];\n\t\tif ( isString( token ) ) {\n\t\t\tout += token;\n\t\t} else {\n\t\t\thasPeriod = token.precision !== void 0;\n\t\t\ttoken = initialize( token );\n\t\t\tif ( !token.specifier ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Token is missing `specifier` property. Index: `'+ i +'`. Value: `' + token + '`.' );\n\t\t\t}\n\t\t\tif ( token.mapping ) {\n\t\t\t\tpos = token.mapping;\n\t\t\t}\n\t\t\tflags = token.flags;\n\t\t\tfor ( j = 0; j < flags.length; j++ ) {\n\t\t\t\tflag = flags.charAt( j );\n\t\t\t\tswitch ( flag ) {\n\t\t\t\tcase ' ':\n\t\t\t\t\ttoken.sign = ' ';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '+':\n\t\t\t\t\ttoken.sign = '+';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '-':\n\t\t\t\t\ttoken.padRight = true;\n\t\t\t\t\ttoken.padZeros = false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '0':\n\t\t\t\t\ttoken.padZeros = flags.indexOf( '-' ) < 0; // NOTE: We use built-in `Array.prototype.indexOf` here instead of `@stdlib/assert/contains` in order to avoid circular dependencies.\n\t\t\t\t\tbreak;\n\t\t\t\tcase '#':\n\t\t\t\t\ttoken.alternate = true;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'invalid flag: ' + flag );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( token.width === '*' ) {\n\t\t\t\ttoken.width = parseInt( arguments[ pos ], 10 );\n\t\t\t\tpos += 1;\n\t\t\t\tif ( isnan( token.width ) ) {\n\t\t\t\t\tthrow new TypeError( 'the argument for * width at position ' + pos + ' is not a number. Value: `' + token.width + '`.' );\n\t\t\t\t}\n\t\t\t\tif ( token.width < 0 ) {\n\t\t\t\t\ttoken.padRight = true;\n\t\t\t\t\ttoken.width = -token.width;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( hasPeriod ) {\n\t\t\t\tif ( token.precision === '*' ) {\n\t\t\t\t\ttoken.precision = parseInt( arguments[ pos ], 10 );\n\t\t\t\t\tpos += 1;\n\t\t\t\t\tif ( isnan( token.precision ) ) {\n\t\t\t\t\t\tthrow new TypeError( 'the argument for * precision at position ' + pos + ' is not a number. Value: `' + token.precision + '`.' );\n\t\t\t\t\t}\n\t\t\t\t\tif ( token.precision < 0 ) {\n\t\t\t\t\t\ttoken.precision = 1;\n\t\t\t\t\t\thasPeriod = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttoken.arg = arguments[ pos ];\n\t\t\tswitch ( token.specifier ) {\n\t\t\tcase 'b':\n\t\t\tcase 'o':\n\t\t\tcase 'x':\n\t\t\tcase 'X':\n\t\t\tcase 'd':\n\t\t\tcase 'i':\n\t\t\tcase 'u':\n\t\t\t\t// Case: %b (binary), %o (octal), %x, %X (hexadecimal), %d, %i (decimal), %u (unsigned decimal)\n\t\t\t\tif ( hasPeriod ) {\n\t\t\t\t\ttoken.padZeros = false;\n\t\t\t\t}\n\t\t\t\ttoken.arg = formatInteger( token );\n\t\t\t\tbreak;\n\t\t\tcase 's':\n\t\t\t\t// Case: %s (string)\n\t\t\t\ttoken.maxWidth = ( hasPeriod ) ? token.precision : -1;\n\t\t\t\tbreak;\n\t\t\tcase 'c':\n\t\t\t\t// Case: %c (character)\n\t\t\t\tif ( !isnan( token.arg ) ) {\n\t\t\t\t\tnum = parseInt( token.arg, 10 );\n\t\t\t\t\tif ( num < 0 || num > 127 ) {\n\t\t\t\t\t\tthrow new Error( 'invalid character code. Value: ' + token.arg );\n\t\t\t\t\t}\n\t\t\t\t\ttoken.arg = ( isnan( num ) ) ?\n\t\t\t\t\t\tString( token.arg ) :\n\t\t\t\t\t\tfromCharCode( num );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'e':\n\t\t\tcase 'E':\n\t\t\tcase 'f':\n\t\t\tcase 'F':\n\t\t\tcase 'g':\n\t\t\tcase 'G':\n\t\t\t\t// Case: %e, %E (scientific notation), %f, %F (decimal floating point), %g, %G (uses the shorter of %e/E or %f/F)\n\t\t\t\tif ( !hasPeriod ) {\n\t\t\t\t\ttoken.precision = 6;\n\t\t\t\t}\n\t\t\t\ttoken.arg = formatDouble( token );\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'invalid specifier: ' + token.specifier );\n\t\t\t}\n\t\t\t// Fit argument into field width...\n\t\t\tif ( token.maxWidth >= 0 && token.arg.length > token.maxWidth ) {\n\t\t\t\ttoken.arg = token.arg.substring( 0, token.maxWidth );\n\t\t\t}\n\t\t\tif ( token.padZeros ) {\n\t\t\t\ttoken.arg = zeroPad( token.arg, token.width || token.precision, token.padRight ); // eslint-disable-line max-len\n\t\t\t} else if ( token.width ) {\n\t\t\t\ttoken.arg = spacePad( token.arg, token.width, token.padRight );\n\t\t\t}\n\t\t\tout += token.arg || '';\n\t\t\tpos += 1;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatInterpolate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar RE = /%(?:([1-9]\\d*)\\$)?([0 +\\-#]*)(\\*|\\d+)?(?:(\\.)(\\*|\\d+)?)?[hlL]?([%A-Za-z])/g;\n\n\n// FUNCTIONS //\n\n/**\n* Parses a delimiter.\n*\n* @private\n* @param {Array} match - regular expression match\n* @returns {Object} delimiter token object\n*/\nfunction parse( match ) {\n\tvar token = {\n\t\t'mapping': ( match[ 1 ] ) ? parseInt( match[ 1 ], 10 ) : void 0,\n\t\t'flags': match[ 2 ],\n\t\t'width': match[ 3 ],\n\t\t'precision': match[ 5 ],\n\t\t'specifier': match[ 6 ]\n\t};\n\tif ( match[ 4 ] === '.' && match[ 5 ] === void 0 ) {\n\t\ttoken.precision = '1';\n\t}\n\treturn token;\n}\n\n\n// MAIN //\n\n/**\n* Tokenizes a string into an array of string parts and format identifier objects.\n*\n* @param {string} str - input string\n* @returns {Array} tokens\n*\n* @example\n* var tokens = formatTokenize( 'Hello %s!' );\n* // returns [ 'Hello ', {...}, '!' ]\n*/\nfunction formatTokenize( str ) {\n\tvar content;\n\tvar tokens;\n\tvar match;\n\tvar prev;\n\n\ttokens = [];\n\tprev = 0;\n\tmatch = RE.exec( str );\n\twhile ( match ) {\n\t\tcontent = str.slice( prev, RE.lastIndex - match[ 0 ].length );\n\t\tif ( content.length ) {\n\t\t\ttokens.push( content );\n\t\t}\n\t\ttokens.push( parse( match ) );\n\t\tprev = RE.lastIndex;\n\t\tmatch = RE.exec( str );\n\t}\n\tcontent = str.slice( prev );\n\tif ( content.length ) {\n\t\ttokens.push( content );\n\t}\n\treturn tokens;\n}\n\n\n// EXPORTS //\n\nexport default formatTokenize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a string primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string primitive\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns false\n*/\nfunction isString( value ) {\n\treturn ( typeof value === 'string' ); // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport interpolate from '@stdlib/string-base-format-interpolate';\nimport tokenize from '@stdlib/string-base-format-tokenize';\nimport isString from './is_string.js';\n\n\n// MAIN //\n\n/**\n* Inserts supplied variable values into a format string.\n*\n* @param {string} str - input string\n* @param {Array} ...args - variable values\n* @throws {TypeError} first argument must be a string\n* @throws {Error} invalid flags\n* @returns {string} formatted string\n*\n* @example\n* var str = format( 'Hello %s!', 'world' );\n* // returns 'Hello world!'\n*\n* @example\n* var str = format( 'Pi: ~%.2f', 3.141592653589793 );\n* // returns 'Pi: ~3.14'\n*/\nfunction format( str ) {\n\tvar args;\n\tvar i;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\targs = [ tokenize( str ) ];\n\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\treturn interpolate.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default format;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport maxabs from './maxabs.js';\nimport max from './max.js';\nimport minabs from './minabs.js';\nimport min from './min.js';\nimport meanabs from './meanabs.js';\nimport mean from './mean.js';\nimport x from './x.js';\nimport y from './y.js';\n\n\n// MAIN //\n\nvar SCALES = {\n\t'max-abs': maxabs,\n\t'max': max,\n\t'min-abs': minabs,\n\t'min': min,\n\t'mean-abs': meanabs,\n\t'mean': mean,\n\t'x': x,\n\t'y': y\n};\n\n\n// EXPORTS //\n\nexport default SCALES;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\n\n\n// MAIN //\n\n/**\n* Returns the maximum value of `|x|` and `|y|`.\n*\n* @private\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {number} maximum absolute value\n*\n* @example\n* var z = maxabs( 5.0, -11.11 );\n* // returns 11.11\n*/\nfunction maxabs( x, y ) {\n\tx = abs( x );\n\ty = abs( y );\n\treturn ( x < y ) ? y : x;\n}\n\n\n// EXPORTS //\n\nexport default maxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the maximum value of `x` and `y`.\n*\n* @private\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {number} maximum value\n*\n* @example\n* var z = max( 3.14, -1.0 );\n* // returns 3.14\n*/\nfunction max( x, y ) {\n\treturn ( x < y ) ? y : x; // doesn't account for +-0\n}\n\n\n// EXPORTS //\n\nexport default max;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\n\n\n// MAIN //\n\n/**\n* Returns the minimum value of `|x|` and `|y|`.\n*\n* @private\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {number} minimum absolute value value\n*\n* @example\n* var z = minabs( -3.14, -11.0 );\n* // returns 3.14\n*/\nfunction minabs( x, y ) {\n\tx = abs( x );\n\ty = abs( y );\n\treturn ( x > y ) ? y : x;\n}\n\n\n// EXPORTS //\n\nexport default minabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the minimum value of `x` and `y`.\n*\n* @private\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {number} minimum value\n*\n* @example\n* var z = min( 10.0, 3.14 );\n* // returns 3.14\n*/\nfunction min( x, y ) {\n\treturn ( x > y ) ? y : x; // doesn't account for +-0\n}\n\n\n// EXPORTS //\n\nexport default min;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\n\n\n// MAIN //\n\n/**\n* Returns the arithmetic mean of `|x|` and `|y|`.\n*\n* @private\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {number} arithmetic mean\n*\n* @example\n* var z = meanabs( -3.5, -7.5 );\n* // returns 5.5\n*/\nfunction meanabs( x, y ) {\n\tx = abs( x );\n\ty = abs( y );\n\treturn x + ((y-x)/2.0);\n}\n\n\n// EXPORTS //\n\nexport default meanabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the arithmetic mean of `x` and `y`.\n*\n* @private\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {number} arithmetic mean\n*\n* @example\n* var z = mean( 3.5, 7.5 );\n* // returns 5.5\n*/\nfunction mean( x, y ) {\n\treturn x + ((y-x)/2.0);\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns `x`.\n*\n* @private\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {number} first number\n*\n* @example\n* var z = f( 5.0, 3.14 );\n* // returns 5.0\n*/\nfunction f( x ) {\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default f;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns `y`.\n*\n* @private\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {number} second number\n*\n* @example\n* var z = f( 5.0, 3.14 );\n* // returns 3.14\n*/\nfunction f( x, y ) {\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default f;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\nimport format from '@stdlib/string-format';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport abs from '@stdlib/math-base-special-abs';\nimport SCALE from './scale.js';\n\n\n// MAIN //\n\n/**\n* Computes the relative difference of two real numbers.\n*\n* @param {number} x - first number\n* @param {number} y - second number\n* @param {(string|Function)} [scale='max-abs'] - scale function\n* @throws {Error} must provide a recognized scale function name\n* @returns {number} relative difference\n*\n* @example\n* var d = relativeDifference( 2.0, 5.0 ); // => 3/5\n* // returns 0.6\n*\n* @example\n* var d = relativeDifference( -1.0, 3.14 ); // => 4.14/3.14\n* // returns ~1.318\n*\n* @example\n* var d = relativeDifference( -2.0, 5.0, 'max-abs' ); // => |-7/5|\n* // returns 1.4\n*\n* @example\n* var d = relativeDifference( -2.0, 5.0, 'max' ); // => |-7/5|\n* // returns 1.4\n*\n* @example\n* var d = relativeDifference( -2.0, 5.0, 'min-abs' ); // => |-7/2|\n* // returns 3.5\n*\n* @example\n* var d = relativeDifference( -2.0, 5.0, 'min' ); // => |-7/-2|\n* // returns 3.5\n*\n* @example\n* var d = relativeDifference( -2.0, 5.0, 'mean-abs' ); // => |-7/3.5|\n* // returns 2.0\n*\n* @example\n* var d = relativeDifference( -2.0, 5.0, 'mean' ); // => |-7/1.5|\n* // returns ~4.67\n*\n* @example\n* var d = relativeDifference( -2.0, 5.0, 'x' ); // => |-7/-2|\n* // returns 3.5\n*\n* @example\n* var d = relativeDifference( 5.0, -2.0, 'x' ); // => |7/5|\n* // returns 1.4\n*\n* @example\n* var d = relativeDifference( -2.0, 5.0, 'y' ); // => |-7/5|\n* // returns 1.4\n*\n* @example\n* var d = relativeDifference( 5.0, -2.0, 'y' ); // => |7/-2|\n* // returns 3.5\n*/\nfunction relativeDifference( x, y, scale ) {\n\tvar f;\n\tvar s;\n\tif ( isnan( x ) || isnan( y ) ) {\n\t\treturn NaN;\n\t}\n\tif (\n\t\tx === PINF ||\n\t\tx === NINF ||\n\t\ty === PINF ||\n\t\ty === NINF\n\t) {\n\t\tif ( x === y ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn PINF;\n\t}\n\t// If the absolute difference is `0`, then so is the relative difference:\n\tif ( x === y ) {\n\t\treturn 0.0;\n\t}\n\tif ( isFunction( scale ) ) {\n\t\tf = scale;\n\t} else {\n\t\tif ( scale === void 0 ) {\n\t\t\tscale = 'max-abs';\n\t\t}\n\t\tf = SCALE[ scale ];\n\t\tif ( f === void 0 ) {\n\t\t\tthrow new Error( format( 'invalid argument. Unrecognized/unsupported scale function. Value: `%s`.', scale ) );\n\t\t}\n\t}\n\ts = f( x, y );\n\tif ( s === 0.0 ) {\n\t\t// Bail. No possible return value which works for all possible scale functions...\n\t\treturn NaN;\n\t}\n\treturn abs( (x - y) / s );\n}\n\n\n// EXPORTS //\n\nexport default relativeDifference;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport typeOf from '@stdlib/utils-type-of';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a function.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a function\n*\n* @example\n* function beep() {\n*     return 'beep';\n* }\n*\n* var bool = isFunction( beep );\n* // returns true\n*/\nfunction isFunction( value ) {\n\t// Note: cannot use `typeof` directly, as various browser engines incorrectly return `'function'` when operating on non-function objects, such as regular expressions and NodeLists.\n\treturn ( typeOf( value ) === 'function' );\n}\n\n\n// EXPORTS //\n\nexport default isFunction;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name absdiff\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/utils/absolute-difference}\n*/\nimport absdiff from '@stdlib/math-base-utils-absolute-difference';\nsetReadOnly( ns, 'absdiff', absdiff );\n\n/**\n* @name epsdiff\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/utils/float64-epsilon-difference}\n*/\nimport epsdiff from '@stdlib/math-base-utils-float64-epsilon-difference';\nsetReadOnly( ns, 'epsdiff', epsdiff );\n\n/**\n* @name reldiff\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/utils/relative-difference}\n*/\nimport reldiff from '@stdlib/math-base-utils-relative-difference';\nsetReadOnly( ns, 'reldiff', reldiff );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\nimport abs from '@stdlib/math-base-special-abs';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\n\n\n// MAIN //\n\n/**\n* Computes the absolute difference.\n*\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {number} absolute difference\n*\n* @example\n* var d = absoluteDifference( 2.0, 5.0 );\n* // returns 3.0\n*\n* @example\n* var d = absoluteDifference( -1.0, 3.14 );\n* // returns ~4.14\n*\n* @example\n* var d = absoluteDifference( 10.1, -2.05 );\n* // returns ~12.15\n*\n* @example\n* var d = absoluteDifference( -0.0, 0.0 );\n* // returns +0.0\n*\n* @example\n* var d = absoluteDifference( NaN, 5.0 );\n* // returns NaN\n*\n* @example\n* var d = absoluteDifference( Infinity, -Infinity  );\n* // returns Infinity\n*\n* @example\n* var d = absoluteDifference( Infinity, Infinity  );\n* // returns NaN\n*/\nfunction absoluteDifference( x, y ) {\n\tif ( isnan( x ) || isnan( y ) ) {\n\t\treturn NaN;\n\t}\n\tif ( isInfinite( x ) || isInfinite( y ) ) {\n\t\tif ( x === y ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn PINF;\n\t}\n\treturn abs( x - y );\n}\n\n\n// EXPORTS //\n\nexport default absoluteDifference;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reldiff from '@stdlib/math-base-utils-relative-difference';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport MAX_FLOAT64 from '@stdlib/constants-float64-max';\nimport EPS from '@stdlib/constants-float64-eps';\n\n\n// VARIABLES //\n\nvar MAX_DIFF = MAX_FLOAT64 * EPS;\n\n\n// MAIN //\n\n/**\n* Computes the relative difference in units of double-precision floating-point epsilon.\n*\n* @param {number} x - first number\n* @param {number} y - second number\n* @param {(string|Function)} [scale='max-abs'] - scale function\n* @returns {number} relative difference in units of double-precision floating-point epsilon\n*\n* @example\n* var d = epsilonDifference( 12.15, 12.149999999999999 ); // => ~0.658ε\n* // returns ~0.658\n*\n* @example\n* var d = epsilonDifference( 2.4341309458983933, 2.4341309458633909, 'mean-abs' ); // => ~64761.5ε => ~1.438e-11\n* // returns ~64761.5\n*\n* @example\n* function scale( x, y ) {\n*      // Return the minimum value:\n*      return ( x > y ) ? y : x;\n* }\n*\n* var d = epsilonDifference( 1.0000000000000002, 1.0000000000000100, scale ); // => ~44ε\n* // returns ~44\n*/\nfunction epsilonDifference( x, y, scale ) {\n\tvar d = reldiff( x, y, scale || 'max-abs' );\n\n\t// If `d` is `NaN` or `+infinity`, nothing we can do...\n\tif ( isnan( d ) || d === PINF ) {\n\t\treturn d;\n\t}\n\t// If `d >= MAX_VALUE`, we will overflow, as `EPS <<< 1`. To prevent overflow, we cap out at the maximum double-precision floating-point number...\n\tif ( d >= MAX_DIFF ) {\n\t\treturn MAX_FLOAT64;\n\t}\n\t// Return the answer to the question: how many EPS increments is the relative difference?\n\treturn d / EPS;\n}\n\n\n// EXPORTS //\n\nexport default epsilonDifference;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n/*\n* The following modules are intentionally not exported: napi\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name assert\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/math/base/assert}\n*/\nimport assert from '@stdlib/math-base-assert';\nsetReadOnly( ns, 'assert', assert );\n\n/**\n* @name ops\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/math/base/ops}\n*/\nimport ops from '@stdlib/math-base-ops';\nsetReadOnly( ns, 'ops', ops );\n\n/**\n* @name special\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/math/base/special}\n*/\nimport special from '@stdlib/math-base-special';\nsetReadOnly( ns, 'special', special );\n\n/**\n* @name tools\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/math/base/tools}\n*/\nimport tools from '@stdlib/math-base-tools';\nsetReadOnly( ns, 'tools', tools );\n\n/**\n* @name utils\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/math/base/utils}\n*/\nimport utils from '@stdlib/math-base-utils';\nsetReadOnly( ns, 'utils', utils );\n\n\n// EXPORTS //\n\nexport default ns;\n"],"names":["main","Object","defineProperty","isNumber","value","zeros","n","i","out","zeroPad","str","width","right","negative","pad","length","startsWithMinus","substr","lowercase","String","prototype","toLowerCase","uppercase","toUpperCase","formatInteger","token","base","specifier","arg","parseInt","isFinite","Error","toString","precision","padRight","sign","alternate","call","charAt","isString","abs","Math","replace","RE_EXP_POS_DIGITS","RE_EXP_NEG_DIGITS","RE_ONLY_DIGITS","RE_DIGITS_BEFORE_EXP","RE_TRAILING_PERIOD_ZERO","RE_PERIOD_ZERO_EXP","RE_ZERO_BEFORE_EXP","formatDouble","digits","f","parseFloat","toExponential","toFixed","toPrecision","spaces","spacePad","fromCharCode","isnan","isNaN","isArray","Array","initialize","flags","mapping","formatInterpolate","tokens","hasPeriod","flag","num","pos","j","TypeError","padZeros","indexOf","arguments","maxWidth","substring","RE","parse","match","formatTokenize","content","prev","exec","slice","lastIndex","push","format","args","tokenize","interpolate","apply","objectProtoype","toStr","defineGetter","__defineGetter__","defineSetter","__defineSetter__","lookupGetter","__lookupGetter__","lookupSetter","__lookupSetter__","err","hasDefinePropertySupport","builtin","obj","prop","descriptor","hasValue","hasGet","hasSet","__proto__","get","set","defineProperty$1","setReadOnly","configurable","enumerable","writable","sqrt","floor","isPrime","x","N","WHEEL_PRIMES","isInteger","FLOAT64_PINF","Number","POSITIVE_INFINITY","main$9","FLOAT64_NINF","NEGATIVE_INFINITY","gcd","a","b","PINF","NINF","NaN","t","k","bitwise","largeIntegers","isEven","FLG","Symbol","hasToStringTagSupport","toStringTag","has","hasOwnProperty","Sym","toStrTag","hasToStringTag","v","isOwn","tag","property","nativeClass","hasFloat32Array","Float32Array","ctor","bool","arr","GlobalFloat32Array","hasFloat32ArraySupport","Float32Array$1","hasUint32Array","Uint32Array","GlobalUint32Array","UINT32_MAX","hasUint32ArraySupport","Uint32Array$1","FLOAT32_VIEW","buffer","isInfinite","isInfinitef","isnanf","isNegativeInteger","isNegativeZero","isNegativeZerof","isNonNegativeInteger","isOdd","isPositiveZero","isProbability","ns","fround","float64ToFloat32$1","setNonEnumerableReadOnly","test","isPrimitive","isObject","Complex128","real","imag","this","z","re","im","Complex64","float64ToFloat32","realf","imagf","max","y","FLOAT64_MAX","FLOAT64_EPSILON","internalCompreal","re1","im1","re2","im2","r","br","robustInternal","LARGE_THRESHOLD","FLOAT64_BIGGEST","RECIP_EPS_SQR","imul","la","lb","imuldw","stride","offset","w1","w3","ha","hb","fcn","assign","umuldw","w","u","z1","z2","ab","cd","s","FLOAT64_SMALLEST","FOURTH_PI","asin","sgn","zz","p","s1","s2","ratevalRS","PIO4","ratevalPQ","acos","hasFloat64Array","Float64Array","GlobalFloat64Array","hasFloat64ArraySupport","Float64Array$1","hasUint8Array","Uint8Array","GlobalUint8Array","UINT8_MAX","hasUint8ArraySupport","Uint8Array$1","hasUint16Array","Uint16Array","GlobalUint16Array","UINT16_MAX","hasUint16ArraySupport","uint16view","ctors","uint16","uint8","IS_LITTLE_ENDIAN","HIGH$7","isLittleEndian","FLOAT64_VIEW","UINT32_VIEW","getHighWord","HIGH","HIGH$5","setHighWord","high","LN2_HI","LN2_LO","log1p","hfsq","hu","c","R","polyval","LN2","ln","hx","t2","t1","polyvalP","polyvalQ","acosh","HALF_PI","atan","flg","PIO2","atanh","asinh","xx","isinfinite","LOW","indices$3","indices","toWords","indices$1","fromWords","low","WORDS","copysign","hy","PI","atan2","q","signbit","bernoulli","BERNOULLI","LOW$3","normalize","exponent","FRAC","ldexp","frac","exp","m","floatExp","len","filled","IPIO2","TWON24","F","Q","FQ","IQ","compute","jz","q0","jk","jv","jx","carry","fw","ih","jp","kernelRempio2","e0","nx","round","rempio2Medium","ix","PIO2_1","PIO2_1T","TWO_PIO2_1T","FOUR_PIO2_1T","TX","TY","rempio2","getLowWord","rempio2Kernel","S1","kernelSincos","hz","Y","sincos","sc","j0","rc","rs","y2","poly1","poly2","polyC","polyS","SQRT_PI","j1","x1","x2","x3","ceil","trunc","hi","lo","expmulti","LOW$1","setLowWord","uint32ToInt32","BP","DP_HI","DP_LO","HUGE","LOG_WORKSPACE","pow","ahx","ahy","ax","sx","sy","y1","hp","lp","yIsInfinite","xIsZero","TINY","yIsHuge","logx","tmp","ss","hs","ls","ht","bp","dp","lz","log2ax","pow2","E","evalrational","Infinity","G","beta","ambh","agh","bgh","cgh","res","EPSILON","lanczosSumExpGScaled","expm1","halfX","twopk","r1","e","min","kernelCos","polyval13","polyval46","kernelSin","sin","gamma","GAMMA","EULER","stirlingApprox","smallApprox","rateval","factorial","FACTORIALS","gammaDeltaRatioLanczos","delta","result","ratio","zgh","lanczosSum","gammaDeltaRatio","idelta","iz","cos","sinpi","ar","YMIN","TC","gammaln","isNegative","nadj","p3","p2","p1","polyvalA1","polyvalA2","polyvalT1","polyvalT2","polyvalT3","polyvalU","polyvalV","polyvalS","polyvalR","polyvalW","FLOAT64_MAX_LN","ERX","erfc","polyvalPP","polyvalQQ","polyvalPA","polyvalQA","polyvalRA","polyvalSA","polyvalRB","polyvalSB","FLOAT64_MIN_LN","fullIGammaPrefix","alz","MAX_LN","MIN_LN","evalpoly","Fcn","Function","factory","evil","eval","hasGeneratorSupport","sumSeries","generator","options","tolerance","nextTerm","counter","opts","EPS","maxTerms","initialValue","next","sumSeries$1","log1pmx","FLOAT_EPS","mMult","mProd","log1pSeries","TWO_PI","workspace","lowerGammaSeries","a1","lowerIncompleteGammaSeries","regularisedGammaPrefix","prefix","amza","amz","sq","d","powm1","lgammaSmallImp","zm1","zm2","rateval2","rateval3","gammap1m1","continuedFractionA","gen","factor","maxIter","isgenerator","a0","C","D","continuedFractionB","continuedFraction","eps","keep","continuedFraction$1","upperGammaFraction","upperIncompleteGammaFract","gammainc","regularized","upper","optimisedInvert","normalized","evalMethod","initValue","isHalfInt","useTemme","invert","isInt","sigma","fa","g","term","sum","finiteGammaQ","finiteHalfGammaQ","pgam","gamma1pm1","apn","smallGamma2Series","tgammaSmallUpperPart","phi","polyvalC0","polyvalC1","polyvalC2","polyvalC3","polyvalC4","polyvalC5","polyvalC6","polyvalC7","polyvalC8","igammaTemmeLarge","betaSmallBLargeASeries","s0","mult","tmp1","tnp1","b2n","bm1","lx2","lxp","mbn","lx","t4","h","regularizedGammaPrefix","risingFactorialRatio","maxabs","minabs","ibetaPowerTerms","smallA","l1","l2","l3","b1","b2","l","OPTS","ibetaFraction2","denom","aN","bN","ibetaFraction2t","binomcoef","ibetaAStep","ibetaSeries","poch","ibetaSeriesT","ibetaImp","fract","bbar","div","i0","i1","MAX_FLOAT64","MIN_FLOAT64","MAX_INT32","startTerm","start","binomialCCDF","kernelBetainc","betainc","erfcinv","rationalFcnR1","rationalFcnR2","rationalFcnR3","rationalFcnR4","rationalFcnR5","SQRT2","inverseStudentsTBodySeries","df","idf","polyval2","polyval3","polyval4","polyval5","polyval6","polyval7","polyval8","polyval9","inverseStudentsTTailSeries","np2","np4","np6","rn","inverseStudentsTHill","ndf","findIBetaInvFromTDist","py","rootAlpha","p0","p4","inverseStudentsT","terms","BIG","MAX_VALUE","temmeRootFinder","signum","newtonRaphsonIterate","fun","guess","f0last","delta1","delta2","count","f0","f1","FLOAT32_MAX","debug","require$$0","AK","lambdaeta","eta","L2","L3","L4","L5","L","polyvalAK2","A","stirling","MAX_FLOAT32","tt","u0","u1","u2","chepolsum","polyvalC","polyvalD","gamstar","ONEO3","ONEO6","CK","ap1inv","invfp","lgama","pcase","porq","ainv","logr","ap22","ap14","ap13","ap12","vgam","xini","ap1","ap2","ap3","p5","x0","a2","b3","a4","a3","xr","eps1","lnmeta","rateval1","eps2","rational1","rational2","rational3","rational4","rational5","eps3","dlnr","ck2","higherNewton","gammaincinv","ibetaInvImp","lambda","lower","theta","roots","maxv","minv","bet","ppa","xs2","fs","xg","xs","yp","eta0","eta2","B2","B3","B","temme1","alpha","sc7","sc6","sc5","sc4","sc3","sc2","lu","c2","polyval1","polyval10","polyval11","polyval12","temme2","cross","w12","w13","w14","e1","e2","e3","mu","d2","d3","w2","w4","w5","w6","w7","w8","w9","temme3","target","buf","f2","FLOAT64_MIN_NORM","ibetaRoots","minimum","maximum","convergence","outOfBounds","f0Last","diff","halleyIterate","ALGMCS","LEN","gammaCorrection","twox","b0","dceval","betaln","corr","correction","cospi","rx","MAX_INTEGER","PHI","hypot","cabs","hypotf","FLOAT64_SMALLEST_NORMAL_HIGH_WORD","cbrt","ceilf","ceiln","MAX_SAFE_INTEGER","WORKSPACE","log2","klog","log10","floorn","toWordf","fromWordf","word","cosh","kernelTan","polyvalOdd","polyvalEven","tan","tanh","ratval","cphase","cpolar","roundn","sinh","MAXLOG","MINLOG","PI_DIV_180","digamma","rem","asymptoticApprox","rationalApprox","zeta","as","is","EVEN_NONNEGATIVE_INTEGERS","ODD_POSITIVE_INTEGERS","rateval4","rateval5","rateval6","ellipk","kdm","td","qd","poly3","poly4","poly5","poly6","poly7","poly8","poly9","poly10","poly11","poly12","tmp4","tmp2","ca","dnDenom","NANFLG","uK2cen","k1inv","sechu","sinhu","tanhu","phi0","phi1","atmp","uK2","uK4","K2","K4","sn","cn","dn","am","ellipj","table","erfcxY100","y100","fallingFactorial","xp1","n2","inv","risingFactorial","MAX_FACTORIAL","BETA","labs","mask","nonnegative","ints","hypot1a","hypot1b","hypot2a","hypot2b","closure1a","closure1b","ampbm","root","bit","LN_PHI","floorf","fresnel","xa","polyF","polyG","computeFresnel","X","frexp","maxn","minn","minmax","minmaxabs","ay","minmaxabsn","av","minmaxn","modf","FLOAT64_EXPONENT_BIAS","trigamma","rateval12","rateval24","rateval48","rateval816","rateval16INF","atinfinityplus","partTerm","xsquared","k2","LN_TWO","polycotpi","xc","powTerms","idx","ncols","mcols","mo","so","co","calculateDerivatives","HALF_HUGE","sici","si","ci","polyvalFN4","polyvalFD4","polyvalGN4","polyvalGD4","polyvalFN8","polyvalFD8","polyvalGN8","polyvalGD8","polyvalSN","polyvalSD","polyvalCN","polyvalCD","sincospi","truncn","special","P","besselj0","besselj1","kernelBetaincinv","binomcoefln","lgx","ly","wx","wy","toWord","fromWord","az","edm","km","px","last","fast","FIBONACCI","S","gammaLanczosSum","gammaLanczosSumExpGScaled","fx","continuity","LUCAS","nargs","an","NEGAFIBONACCI","NEGALUCAS","polygamma","factorialPart","scale","AX","MAX","nearzero","minusMminus1","iter","sum0","attransitionplus","polyvalA","polyvalB","TRIBONACCI","cache","coefficients","coefs","fibpoly","normhermitepoly","y3","isint","wrap","hermitepoly","constantFunction","half","lucaspoly","isBoolean","Bool","Boolean","getGlobal","self","window","global","globalThis","codegen","getThis","GlobalThis","Self","Win","Global","nodeList","document","childNodes","typedarray","Int8Array","reFunctionName","RE_FUNCTION_NAME","REGEXP","main$1","isObjectLike","constructorName","name","constructor","_isBuffer","isBuffer","predicate","arrayfun","ctorName","type","SCALES","mean","relativeDifference","typeOf","SCALE","reldiff","assert","ops","tools","utils"],"mappings":"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"}